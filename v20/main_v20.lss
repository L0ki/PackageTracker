
main_v20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e38c  00010000  00010000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000089c  40000000  0001e38c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000da4  4000089c  4000089c  0001889c  2**2
                  ALLOC
  3 .stack        00000c00  40001700  40001700  000188a0  2**4
                  CONTENTS
  4 .comment      0000061e  00000000  00000000  000194a0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00019ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ddb  00000000  00000000  00019ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000645e  00000000  00000000  0001aca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f22  00000000  00000000  00021101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002038  00000000  00000000  00023023  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011f4  00000000  00000000  0002505c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ef6  00000000  00000000  00026250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003966  00000000  00000000  00028146  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  0002baac  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00010000 <__Vectors>:
// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:        LDR     PC,Reset_Addr         
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <Reset_Addr>
                LDR     PC,Undef_Addr
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <Undef_Addr>
                LDR     PC,SWI_Addr
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <SWI_Addr>
                LDR     PC,PAbt_Addr
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <PAbt_Addr>
                LDR     PC,DAbt_Addr
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <DAbt_Addr>
                NOP                            /* Reserved Vector */
   10014:	e1a00000 	nop			(mov r0,r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
                LDR     PC,IRQ_Wrapper_Addr
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <IRQ_Wrapper_Addr>
                LDR     PC,FIQ_Addr
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <FIQ_Addr>

00010020 <Reset_Addr>:
   10020:	00010098 	muleq	r1, r8, r0

00010024 <Undef_Addr>:
   10024:	00010040 	andeq	r0, r1, r0, asr #32

00010028 <SWI_Addr>:
   10028:	00000000 	andeq	r0, r0, r0

0001002c <PAbt_Addr>:
   1002c:	00010044 	andeq	r0, r1, r4, asr #32

00010030 <DAbt_Addr>:
   10030:	00010048 	andeq	r0, r1, r8, asr #32
   10034:	00000000 	andeq	r0, r0, r0

00010038 <IRQ_Wrapper_Addr>:
   10038:	00010050 	andeq	r0, r1, r0, asr r0

0001003c <FIQ_Addr>:
   1003c:	0001004c 	andeq	r0, r1, ip, asr #32

00010040 <Undef_Handler>:

Reset_Addr:       .word     Reset_Handler
Undef_Addr:       .word     Undef_Handler
// SWI_Addr:         .word     SWI_Handler
// SWI_Wrapper_Addr: .word     SWI_Wrapper
SWI_Addr:         .word     0      /* in swi_handler.S */
PAbt_Addr:        .word     PAbt_Handler
DAbt_Addr:        .word     DAbt_Handler
                  .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
   10040:	eafffffe 	b	10040 <Undef_Handler>

00010044 <PAbt_Handler>:
/* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
   10044:	eafffffe 	b	10044 <PAbt_Handler>

00010048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
   10048:	eafffffe 	b	10048 <DAbt_Handler>

0001004c <FIQ_Handler>:
/* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
   1004c:	eafffffe 	b	1004c <FIQ_Handler>

00010050 <__IRQ_Wrapper>:

.size   __Vectors, . - __Vectors



.arm
.section .init, "ax"

.if (VECTREMAPPED)
/* mthomas: Dummy used during startup - mind the nops since the 
   flash-utility will overwrite the "reserved vector"-address
   with the checksum */
				B Reset_Handler
				NOP
				NOP
				NOP
				NOP
				NOP  /* Reserved Address */
				NOP
				NOP
.endif

.arm
.section .init, "ax"
.global __startup
.func __startup
__startup:

Reset_Handler:  


// Memory Mapping
                .set MEMMAP, 0xE01FC040  /* Memory Mapping Control */

.if (REMAP)
                LDR     R0, =MEMMAP
.if     (EXTMEM_MODE)                
                MOV     R1, #3
.elseif (RAM_MODE) || (VECTREMAPPED)
.print "MEMMAP to 2 on init"
                MOV     R1, #2
.else
                MOV     R1, #1
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
                MOV     SP, R0
                SUB     R0, R0, #UND_Stack_Size

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
                MOV     SP, R0
                SUB     R0, R0, #ABT_Stack_Size

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
                MOV     SP, R0
                SUB     R0, R0, #FIQ_Stack_Size

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
                MOV     SP, R0
                SUB     R0, R0, #IRQ_Stack_Size

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
                MOV     SP, R0
                SUB     R0, R0, #SVC_Stack_Size

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SYS /* Interrupts enabled */
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
                LDR     R2, =_data 
                LDR     R3, =_edata 
                CMP     R2, R3
                BEQ     DataIsEmpty
LoopRel:        CMP     R2, R3 
                LDRLO   R0, [R1], #4 
                STRLO   R0, [R2], #4 
                BLO     LoopRel 
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
                LDR     R1, =__bss_start__ 
                LDR     R2, =__bss_end__ 
                CMP     R1,R2
                BEQ     BSSIsEmpty
LoopZI:         CMP     R1, R2 
                STRLO   R0, [R1], #4 
                BLO     LoopZI 
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
		LDR 	r1, =__ctors_end__
ctor_loop:
		CMP 	r0, r1
		BEQ 	ctor_end
		LDR 	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
		MOV 	lr, pc
		MOV 	pc, r2
		LDMFD 	sp!, {r0-r1}
		B 		ctor_loop
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
                TST     R0,#1             // Bit-0 set: main is Thumb
                LDREQ   LR,=__exit_ARM    // ARM Mode
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
                BX      R0

.size   __startup, . - __startup
.endfunc

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
.size   __exit_ARM, . - __exit_ARM
.endfunc

.thumb
.global __exit_THUMB
.func __exit_THUMB
__exit_THUMB:
                B       __exit_THUMB
.size   __exit_THUMB, . - __exit_THUMB
.endfunc


/* mthomas: the following code is inspired by various examples and
   documents from ARM, Atmel, Anglia Designs and others */


.text
.arm

.if (VECTREMAPPED)
.print "Handlers in section .vectmapped -> .data"
.section .vectmapped, "ax"
.else
.print "Handlers in section .vectorg -> .code/.text"
.section .vectorg, "ax"
.endif

.set VIC_base_addr, 0xFFFFF000
.set VIC_vect_offs, 0x30

        .arm
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
   10050:	e24ee004 	sub	lr, lr, #4	; 0x4
            stmfd       sp!, {lr}
   10054:	e92d4000 	stmdb	sp!, {lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
   10058:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
   1005c:	e92d4000 	stmdb	sp!, {lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
   10060:	e92d0001 	stmdb	sp!, {r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
   10064:	e59fe028 	ldr	lr, [pc, #40]	; 10094 <.text+0x94>
            ldr         r0 , [r14, #VIC_vect_offs]
   10068:	e59e0030 	ldr	r0, [lr, #48]
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #Mode_SVC
   1006c:	e321f013 	msr	CPSR_c, #19	; 0x13

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
   10070:	e92d5ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
   10074:	e1a0e00f 	mov	lr, pc
            bx          r0
   10078:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
   1007c:	e8bd5ffe 	ldmia	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
   10080:	e321f092 	msr	CPSR_c, #146	; 0x92

#if 0
/* VICVectAddr=0 is already done in the ISRs of the Philips-Examples 
   so commented out here */
/*- Mark the End of Interrupt on the VIC */
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
   10084:	e8bd0001 	ldmia	sp!, {r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
   10088:	e8bd4000 	ldmia	sp!, {lr}
            msr         SPSR_cxsf, r14
   1008c:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
   10090:	e8fd8000 	ldmia	sp!, {pc}^
   10094:	fffff000 	undefined instruction 0xfffff000

00010098 <__startup>:
   10098:	e59f00c8 	ldr	r0, [pc, #200]	; 10168 <.text+0x168>
   1009c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
   100a0:	e1a0d000 	mov	sp, r0
   100a4:	e2400080 	sub	r0, r0, #128	; 0x80
   100a8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
   100ac:	e1a0d000 	mov	sp, r0
   100b0:	e2400080 	sub	r0, r0, #128	; 0x80
   100b4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
   100b8:	e1a0d000 	mov	sp, r0
   100bc:	e2400080 	sub	r0, r0, #128	; 0x80
   100c0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
   100c4:	e1a0d000 	mov	sp, r0
   100c8:	e2400c02 	sub	r0, r0, #512	; 0x200
   100cc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
   100d0:	e1a0d000 	mov	sp, r0
   100d4:	e2400080 	sub	r0, r0, #128	; 0x80
   100d8:	e321f01f 	msr	CPSR_c, #31	; 0x1f
   100dc:	e1a0d000 	mov	sp, r0
   100e0:	e59f1084 	ldr	r1, [pc, #132]	; 1016c <.text+0x16c>
   100e4:	e59f2084 	ldr	r2, [pc, #132]	; 10170 <.text+0x170>
   100e8:	e59f3084 	ldr	r3, [pc, #132]	; 10174 <.text+0x174>
   100ec:	e1520003 	cmp	r2, r3
   100f0:	0a000003 	beq	10104 <DataIsEmpty>

000100f4 <LoopRel>:
   100f4:	e1520003 	cmp	r2, r3
   100f8:	34910004 	ldrcc	r0, [r1], #4
   100fc:	34820004 	strcc	r0, [r2], #4
   10100:	3afffffb 	bcc	100f4 <LoopRel>

00010104 <DataIsEmpty>:
   10104:	e3a00000 	mov	r0, #0	; 0x0
   10108:	e59f1068 	ldr	r1, [pc, #104]	; 10178 <.text+0x178>
   1010c:	e59f2068 	ldr	r2, [pc, #104]	; 1017c <.text+0x17c>
   10110:	e1510002 	cmp	r1, r2
   10114:	0a000002 	beq	10124 <BSSIsEmpty>

00010118 <LoopZI>:
   10118:	e1510002 	cmp	r1, r2
   1011c:	34810004 	strcc	r0, [r1], #4
   10120:	3afffffc 	bcc	10118 <LoopZI>

00010124 <BSSIsEmpty>:
   10124:	e59f0054 	ldr	r0, [pc, #84]	; 10180 <.text+0x180>
   10128:	e59f1054 	ldr	r1, [pc, #84]	; 10184 <.text+0x184>

0001012c <ctor_loop>:
   1012c:	e1500001 	cmp	r0, r1
   10130:	0a000005 	beq	1014c <ctor_end>
   10134:	e4902004 	ldr	r2, [r0], #4
   10138:	e92d0003 	stmdb	sp!, {r0, r1}
   1013c:	e1a0e00f 	mov	lr, pc
   10140:	e1a0f002 	mov	pc, r2
   10144:	e8bd0003 	ldmia	sp!, {r0, r1}
   10148:	eafffff7 	b	1012c <ctor_loop>

0001014c <ctor_end>:
   1014c:	e59f0034 	ldr	r0, [pc, #52]	; 10188 <.text+0x188>
   10150:	e3100001 	tst	r0, #1	; 0x1
   10154:	059fe030 	ldreq	lr, [pc, #48]	; 1018c <.text+0x18c>
   10158:	159fe030 	ldrne	lr, [pc, #48]	; 10190 <.text+0x190>
   1015c:	e12fff10 	bx	r0

00010160 <__exit_ARM>:
   10160:	eafffffe 	b	10160 <__exit_ARM>

00010164 <__exit_THUMB>:
   10164:	e7fe      	b.n	10164 <__exit_THUMB>
   10166:	0000      	lsls	r0, r0, #0
   10168:	2300      	movs	r3, #0
   1016a:	4000      	ands	r0, r0
   1016c:	e38c      	b.n	10888 <createLogFile+0x8>
   1016e:	0001      	lsls	r1, r0, #0
   10170:	0000      	lsls	r0, r0, #0
   10172:	4000      	ands	r0, r0
   10174:	089c      	lsrs	r4, r3, #2
   10176:	4000      	ands	r0, r0
   10178:	089c      	lsrs	r4, r3, #2
   1017a:	4000      	ands	r0, r0
   1017c:	1640      	asrs	r0, r0, #25
   1017e:	4000      	ands	r0, r0
   10180:	e38c      	b.n	1089c <createLogFile+0x1c>
   10182:	0001      	lsls	r1, r0, #0
   10184:	e38c      	b.n	108a0 <createLogFile+0x20>
   10186:	0001      	lsls	r1, r0, #0
   10188:	0de4      	lsrs	r4, r4, #23
   1018a:	0001      	lsls	r1, r0, #0
   1018c:	0160      	lsls	r0, r4, #5
   1018e:	0001      	lsls	r1, r0, #0
   10190:	0164      	lsls	r4, r4, #5
   10192:	0001      	lsls	r1, r0, #0

00010194 <delay_ms>:
//The function will cause the firmware to delay for "count" milleseconds.
void delay_ms(int count)
{
    int i;
    count *= 10000;
   10194:	e59f301c 	ldr	r3, [pc, #28]	; 101b8 <.text+0x1b8>
   10198:	e0000093 	mul	r0, r3, r0
   1019c:	e3a03000 	mov	r3, #0	; 0x0
   101a0:	ea000001 	b	101ac <delay_ms+0x18>
    for (i = 0; i < count; i++)
        asm volatile ("nop");
   101a4:	e1a00000 	nop			(mov r0,r0)
   101a8:	e2833001 	add	r3, r3, #1	; 0x1
   101ac:	e1530000 	cmp	r3, r0
   101b0:	bafffffb 	blt	101a4 <delay_ms+0x10>
}
   101b4:	e12fff1e 	bx	lr
   101b8:	00002710 	andeq	r2, r0, r0, lsl r7

000101bc <ISR_RxData1>:

//Usage: bootUp();
//Inputs: None
//This function initializes the serial port, the SD card, the I/O pins and the interrupts
void bootUp(void)
{
	//Initialize UART for RPRINTF
    rprintf_devopen(putc_serial1); //Init rprintf
	init_serial1(4800);
    //rprintf_devopen(putc_serial0); //Init rprintf
	//init_serial0(115200);	
	delay_ms(10); //Delay for power to stablize

    //Bring up SD and FAT
    if(!sd_raw_init())
    {
        //rprintf("SD Init Error\n");
		reset();
    }
    if(openroot())
    {
        //rprintf("SD OpenRoot Error\n");
		reset();
    }
	PINSEL0 &= ~((3<<4)|(3<<6));
	
	//Enable AD conversion on P0.13(AD1.4) FOR BATT_MEAS
	PINSEL0 |= (3<<26);
	
	//Set up the EINT2 External Interrupt Functionality
	PINSEL0 &= ~(3<<30);	//Clear P0.15 special function
	PINSEL0 |= (2<<30);	//Set P0.15 to EINT2
	VICIntEnClr |= EINT2_INT;//Make sure EINT2 interrupts are disabled
	EXTINT |= (1<<2);		//Clear the EINT2 Interrupt bit
	EXTMODE |= (1<<2);		//Set EINT2 to be edge sensitive
	EXTINT |= (1<<2);		//Clear the EINT2 Interrupt bit
	EXTPOLAR |= (1<<2);	//Set EINT2 to detect rising edges
	INTWAKE |= (1<<2);		//ARM will wake up from power down on an EINT2 interrupt
	EXTINT |= (1<<2);		//Clear the EINT2 Interrupt bit	
	
	//Initialize I/O Ports and Peripherals
	IODIR0 = SCLK | MOSI | SD_CS | ACCEL_CS | GPS_EN | I2C_SCL | LED;
	IODIR0 &= ~(MISO | SCP_DRDY | ACCEL_INT2 | ACCEL_INT1 | BATT_MEAS);
	
	IODIR1 = SCP_EN | SCP_CS;	
	
	//Make sure peripheral devices are not selected
	UnselectAccelerometer();
	UnselectSCP();	
	
	//Initialize the SPI bus
	SPI0_Init();			//Select pin functions for SPI signals.
    S0SPCCR = 64;           // SCK = 1 MHz (60MHz / 64 ~= 1Mhz)
    S0SPCR  = 0x20;         // Master, no interrupt enable, 8 bits	
		
    //Setup the Interrupts
	//Enable Interrupts
	VPBDIV=1;										// Set PCLK equal to the System Clock	
	VICIntSelect = ~(UART1_INT | TIMER0_INT | RTC_INT | EINT2_INT);
	VICVectCntl0 = 0x20 | 7;						//Set up the UART0 interrupt
	VICVectAddr0 = (unsigned int)ISR_RxData1;
	VICVectCntl1 = 0x20 | 13;						//Set up the RTC interrupt
	VICVectAddr1 = (unsigned int)ISR_RTC;	
	VICVectCntl2 = 0x20 | 4;						//Timer 0 Interrupt
	VICVectAddr2 = (unsigned int)ISR_Timer0;
	VICVectCntl3 = 0x20 | 16;						//EINT2 External Interrupt 
	VICVectAddr3 = (unsigned int)ISR_EINT2;
	
	//Setup the UART0 Interrupt
	U1IER = 0x01;				//Enable FIFO on UART with RDA interrupt (Receive Data Available)
	U1FCR &= 0x3F;				//Enable FIFO, set RDA interrupt for 1 character	
	
	//Setupt the Timer0 Interrupt
	T0PR = 1200;				//Divide Clock(60MHz) by 1200 for 50kHz PS
	T0TCR |=0X01;				//Enable the clock
	T0CTCR=0;					//Timer Mode
	T0MCR=0x0003;				//Interrupt and Reset Timer on Match
	T0MR0=(50000/TIMER_FREQ);	//Set Interrupt frequency by dividing system clock (50KHz) by TIMER_FREQ (defined in PackageTracker.h as 10) 
								//Value will result in Timer 0 interrupts at TIMER_FREQ
	
	//Set up the RTC so it can be used for sleeping
	CCR = ~(1<<0);				//use the system clock, and disable RTC for now
	CIIR = 0;					//Don't allow any increment interrupts
	AMR = ~(1<<1);				//Only check the minutes value of the alarm	
	//Set up prescaler so RTC runs at 32.768 Khz
	PREINT = 1830;				//Prescale Integer = (60MHz/32768)-1
	PREFRAC = 1792;				//Prescale Fraction = 60MHz - ((PREINT+1)*32768)	
}

//Usage: go_to_sleep(5);
//Inputs: int duration - length in minutes the device should sleep for
//This function will turn off all external components, set the
//RTC alarme to wake up after "duration" minutes, and enter IDLE mode
void goToSleep(int duration)
{
	CCR = (1<<1);	//Disable and Reset the RTC
	
	//Save the buffered data before going to sleep
	LED_OFF();
	SCPoff();
	delay_ms(10);
	
	if(log_data_index>0){
		saveData(&LOG_FILE, log_data, log_data_index);	
		for(int i=0; i<log_data_index; i++)log_data[i]='\0';
		log_data_index=0;	
	}
	
	//Turn Off External Peripheral Devices
	GPSoff();
	//Leave Acceleromter ON to generate interrupts
	//SHT15 automatically goes to sleep after a measurement
	
	//Set the alarm to wake up after "duration" minutes
	SEC=0;
	ALSEC = SEC;
	//MIN=0;
	//ALMIN=duration;
	if (MIN+duration>=60) ALMIN = duration-(60-MIN);
	else ALMIN = MIN + duration;	
		
	sprintf(log_data, "Sleep\n");
	saveData(&LOG_FILE, log_data, strlen(log_data));
	
	CCR = (1<<0);	//Enable the RTC
		
	//Configure Interrupts
	VICIntEnClr |= (UART1_INT | TIMER0_INT); 	//Stop UART and Timer interrupts
	VICIntEnable |= (EINT2_INT | RTC_INT);	//Turn on RTC and Accel. interrupts

	//Read the accel once to clear any interrupts
	acceleration_x = accelX();
	acceleration_y = accelY();
	acceleration_z = accelZ();			
	adxl345_read(INT_SOURCE);
	
	//Turn Off Internal Peripheral Modules in Power Control Register
	power_register_values = PCONP; //Save the power register so we know what to load when we wake up
	PCONP = (1<<9);		//Turn off power to all peripherals except the RTC
	//Go to IDLE mode
	PCON = (1<<0);			//Go into IDLE mode
}

//Usage: wake_up();
//Inputs: None
//This function will turn on and initialize the peripheral sensors
//and re-enable the UART0 interrupts
void wakeUp(void)
{
	//Turn on power to ARM peripheral devices
	PCONP |= power_register_values; //Load the saved power register values
	VICIntEnClr |= EINT2_INT | RTC_INT;

	sprintf(log_data, "Wake\n");
	saveData(&LOG_FILE, log_data, strlen(log_data));	

	//Check the ADXL345 Interrupt Source register to clear any pending interrupts
	adxl345_read(INT_SOURCE);

	//Clear program flags to 'start fresh'
	gps_message_complete=0;
	read_sensors=0;
	
	//Power up and Init. the External peripheral devices
	initializeGps();		//Send the initialization strings
	enable_gps_rmc_msgs(1);
	SCPon();		//Turn on the SCP sensor
	delay_ms(10);	//Allow SCP to initialize
	SCPinit();		//Initialize the SCP sensor
	
	//SHT15 and ADXL345 shouldn't need to be initialized
	
	delay_ms(1000);	//Wait for GPS to stablize
	log_count=0;	//Clear the log count
	RTC_Set=0;
	
	//Enable UART0 and Timer Interrupts
	VICIntEnable |= UART1_INT | TIMER0_INT;
}

//Usage: None (Automatically Called by FW)
//Inputs: None
//Description: Called when a character is received on UART1.  
static void ISR_RxData1(void)
{
	char val = (char)U1RBR;
   101bc:	e59f3088 	ldr	r3, [pc, #136]	; 1024c <.text+0x24c>
   101c0:	e5933000 	ldr	r3, [r3]
   101c4:	e20300ff 	and	r0, r3, #255	; 0xff
	//When we get a character on UART1, save it to the GPS message buffer
	if(val=='\n'){ 	//Newline means the current message is complete
   101c8:	e350000a 	cmp	r0, #10	; 0xa
   101cc:	e52de004 	str	lr, [sp, #-4]!
		gps_message[gps_message_index]= val;
		gps_message_complete=1;					//Set a flag for the main FW
		gps_message_size=gps_message_index+1;
		gps_message_index=0;
	}
	else{
		//If we get the start character, reset the index
		if(val == '$')gps_message_index=0;
		gps_message[gps_message_index++]= val;
   101d0:	e59fe078 	ldr	lr, [pc, #120]	; 10250 <.text+0x250>
   101d4:	1a00000b 	bne	10208 <ISR_RxData1+0x4c>
   101d8:	e59e2000 	ldr	r2, [lr]
   101dc:	e59f3070 	ldr	r3, [pc, #112]	; 10254 <.text+0x254>
   101e0:	e7c30002 	strb	r0, [r3, r2]
   101e4:	e59f306c 	ldr	r3, [pc, #108]	; 10258 <.text+0x258>
   101e8:	e2821001 	add	r1, r2, #1	; 0x1
   101ec:	e3a02001 	mov	r2, #1	; 0x1
   101f0:	e5c32000 	strb	r2, [r3]
   101f4:	e59f3060 	ldr	r3, [pc, #96]	; 1025c <.text+0x25c>
   101f8:	e5831000 	str	r1, [r3]
   101fc:	e3a03000 	mov	r3, #0	; 0x0
   10200:	e58e3000 	str	r3, [lr]
   10204:	ea00000b 	b	10238 <ISR_RxData1+0x7c>
   10208:	e3500024 	cmp	r0, #36	; 0x24
   1020c:	059f303c 	ldreq	r3, [pc, #60]	; 10250 <.text+0x250>
   10210:	03a02000 	moveq	r2, #0	; 0x0
   10214:	05832000 	streq	r2, [r3]
		gps_message_complete=0;
   10218:	e59f3038 	ldr	r3, [pc, #56]	; 10258 <.text+0x258>
   1021c:	e59e1000 	ldr	r1, [lr]
   10220:	e3a02000 	mov	r2, #0	; 0x0
   10224:	e5c32000 	strb	r2, [r3]
   10228:	e2813001 	add	r3, r1, #1	; 0x1
   1022c:	e58e3000 	str	r3, [lr]
   10230:	e59f301c 	ldr	r3, [pc, #28]	; 10254 <.text+0x254>
   10234:	e7c30001 	strb	r0, [r3, r1]
	}
	VICVectAddr =0;						//Update the VIC priorities
   10238:	e3a02000 	mov	r2, #0	; 0x0
   1023c:	e3e03000 	mvn	r3, #0	; 0x0
   10240:	e5032fcf 	str	r2, [r3, #-4047]
}
   10244:	e49de004 	ldr	lr, [sp], #4
   10248:	e12fff1e 	bx	lr
   1024c:	e0010000 	and	r0, r1, r0
   10250:	400008a0 	andmi	r0, r0, r0, lsr #17
   10254:	40001494 	mulmi	r0, r4, r4
   10258:	4000089c 	mulmi	r0, ip, r8
   1025c:	400008a4 	andmi	r0, r0, r4, lsr #17

00010260 <ISR_RTC>:

//Usage: None (Automatically Called by FW)
//Inputs: None
//Description: Called when the RTC alarm goes off.  This wakes
//				the Package Tracker from sleep mode.
static void ISR_RTC(void)
{	
	//Clear the Alarm Interrupt bit from the ILR
	ILR = ((1<<1)|(1<<0));
   10260:	e59f3020 	ldr	r3, [pc, #32]	; 10288 <.text+0x288>
   10264:	e3a02003 	mov	r2, #3	; 0x3
   10268:	e5832000 	str	r2, [r3]
	wake_event=RTC_TIMEOUT_WAKE;
   1026c:	e59f3018 	ldr	r3, [pc, #24]	; 1028c <.text+0x28c>
   10270:	e3a02001 	mov	r2, #1	; 0x1
   10274:	e5c32000 	strb	r2, [r3]
	VICVectAddr =0;		//Update the VIC priorities
   10278:	e3a02000 	mov	r2, #0	; 0x0
   1027c:	e3e03000 	mvn	r3, #0	; 0x0
   10280:	e5032fcf 	str	r2, [r3, #-4047]
}
   10284:	e12fff1e 	bx	lr
   10288:	e0024000 	and	r4, r2, r0
   1028c:	400008b1 	strmih	r0, [r0], -r1

00010290 <parseGGA>:

//Usage: createLogFile();
//Inputs: None
//Outputs: None
//Description: Creates a log file in the root directory of the SD card with the name
//				PackageTrackerXX.csv.  XX increments to the next available number each
//				time the function is called.
void createLogFile(void){
	static int file_number;

//Create the Sensor Data Log File	
	//Set an initial file name
	sprintf(file_name, "PackageTracker%03d.csv", file_number);
	//Check to see if the file already exists in the root directory.
    while(root_file_exists(file_name))
    {
        file_number++;	//If the file already exists, increment the file number and check again.
        if(file_number == 250)
        {
            //rprintf("\nToo many files in root!\n");
        }
        sprintf(file_name, "PackageTracker%03d.csv", file_number);
    }
    //Get the file handle of the new file.  We will log the data to this file
	LOG_FILE = root_open_new(file_name);
	//Now that we have the file opened, let's put a label in the first row
	fat16_write_file(LOG_FILE, (unsigned char*)"Date, UTC, X, Y, Z, Batt, Pres., SCP Temp., SHT Temp, Humidity, Fix, Lat., Lat. Dir., Long., Long. Dir.,\n", 105);
	sd_raw_sync();

//Create the NMEA Log File	
	//Set an initial file name
	sprintf(file_name, "PackageTrackerNMEA%03d.csv", file_number);
	//Check to see if the file already exists in the root directory.
    while(root_file_exists(file_name))
    {
        file_number++;	//If the file already exists, increment the file number and check again.
        if(file_number == 250)
        {
            //rprintf("\nToo many files in root!\n");
        }
        sprintf(file_name, "PackageTrackerNMEA%03d.csv", file_number);
    }
    //Get the file handle of the new file.  We will log the data to this file
	NMEA_FILE = root_open_new(file_name);
	//Now that we have the file opened, let's put a label in the first row
	fat16_write_file(NMEA_FILE, (const unsigned char *)NMEA_FILE_HEADER, strlen(NMEA_FILE_HEADER));
	sd_raw_sync();	
}

//Usage: parseGGA(final_message);
//Inputs: const char *gps_string - GGA NMEA string
//This functions splits a GGA message into the
//portions and assigns them to components of
//a GPS structure
void parseGGA(const char *gps_string){
   10290:	e52de004 	str	lr, [sp, #-4]!
   10294:	e1a0e000 	mov	lr, r0
   10298:	e3a00000 	mov	r0, #0	; 0x0
   1029c:	ea000000 	b	102a4 <parseGGA+0x14>
	int i=0;
	//Parse the GGA Message.  1st portion dismissed
	while(gps_string[i] != ',')i++;
   102a0:	e2800001 	add	r0, r0, #1	; 0x1
   102a4:	e7d0300e 	ldrb	r3, [r0, lr]
   102a8:	e353002c 	cmp	r3, #44	; 0x2c
   102ac:	1afffffb 	bne	102a0 <parseGGA+0x10>
   102b0:	e59f3128 	ldr	r3, [pc, #296]	; 103e0 <.text+0x3e0>
   102b4:	e08e1000 	add	r1, lr, r0
   102b8:	ea000000 	b	102c0 <parseGGA+0x30>
	i++;
	//Second portion is UTC timestamp
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Time[j]=gps_string[i];
   102bc:	e5c3201f 	strb	r2, [r3, #31]
   102c0:	e5f12001 	ldrb	r2, [r1, #1]!
   102c4:	e352002c 	cmp	r2, #44	; 0x2c
   102c8:	e2833001 	add	r3, r3, #1	; 0x1
   102cc:	1afffffa 	bne	102bc <parseGGA+0x2c>
   102d0:	e59f2108 	ldr	r2, [pc, #264]	; 103e0 <.text+0x3e0>
   102d4:	e0803003 	add	r3, r0, r3
   102d8:	e262c000 	rsb	ip, r2, #0	; 0x0
   102dc:	e083300c 	add	r3, r3, ip
   102e0:	e08e0003 	add	r0, lr, r3
   102e4:	ea000000 	b	102ec <parseGGA+0x5c>
		i++;
	}
	i++;
	//Third portion is Latitude
	for(int j=0;gps_string[i] != ',';j++){
		GPS.Latitude.position[j]=gps_string[i];
   102e8:	e5421001 	strb	r1, [r2, #-1]
   102ec:	e5f01001 	ldrb	r1, [r0, #1]!
   102f0:	e351002c 	cmp	r1, #44	; 0x2c
   102f4:	e2822001 	add	r2, r2, #1	; 0x1
   102f8:	1afffffa 	bne	102e8 <parseGGA+0x58>
   102fc:	e0833002 	add	r3, r3, r2
   10300:	e083200c 	add	r2, r3, ip
   10304:	e08e0002 	add	r0, lr, r2
   10308:	ea000000 	b	10310 <parseGGA+0x80>
		i++;
	}
	i++;			
	//Fourth portion is Latitude direction
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Latitude.direction=gps_string[i];
   1030c:	e5c1300f 	strb	r3, [r1, #15]
   10310:	e5f03001 	ldrb	r3, [r0, #1]!
   10314:	e353002c 	cmp	r3, #44	; 0x2c
   10318:	e2822001 	add	r2, r2, #1	; 0x1
   1031c:	e59f10bc 	ldr	r1, [pc, #188]	; 103e0 <.text+0x3e0>
   10320:	1afffff9 	bne	1030c <parseGGA+0x7c>
   10324:	e1a03001 	mov	r3, r1
   10328:	e08e0002 	add	r0, lr, r2
   1032c:	ea000000 	b	10334 <parseGGA+0xa4>
		i++;
	}
	i++;	
	//Fifth portion is Long.
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Longitude.position[j]=gps_string[i];
   10330:	e5c3100f 	strb	r1, [r3, #15]
   10334:	e5f01001 	ldrb	r1, [r0, #1]!
   10338:	e351002c 	cmp	r1, #44	; 0x2c
   1033c:	e2833001 	add	r3, r3, #1	; 0x1
   10340:	1afffffa 	bne	10330 <parseGGA+0xa0>
   10344:	e0823003 	add	r3, r2, r3
   10348:	e083200c 	add	r2, r3, ip
   1034c:	e08e0002 	add	r0, lr, r2
   10350:	ea000001 	b	1035c <parseGGA+0xcc>
		i++;
	}
	i++;			
	//Sixth portion is Long direction
	while(gps_string[i] != ','){
		GPS.Longitude.direction=gps_string[i];
   10354:	e59f3084 	ldr	r3, [pc, #132]	; 103e0 <.text+0x3e0>
   10358:	e5c3101f 	strb	r1, [r3, #31]
   1035c:	e5f01001 	ldrb	r1, [r0, #1]!
   10360:	e351002c 	cmp	r1, #44	; 0x2c
   10364:	e2822001 	add	r2, r2, #1	; 0x1
   10368:	1afffff9 	bne	10354 <parseGGA+0xc4>
   1036c:	e08e0002 	add	r0, lr, r2
   10370:	ea000001 	b	1037c <parseGGA+0xec>
		i++;
	}
	i++;		
	//Seventh portion is fix
	while(gps_string[i] != ','){
		GPS.Fix=gps_string[i];
   10374:	e59f3064 	ldr	r3, [pc, #100]	; 103e0 <.text+0x3e0>
   10378:	e5c31046 	strb	r1, [r3, #70]
   1037c:	e5f01001 	ldrb	r1, [r0, #1]!
   10380:	e351002c 	cmp	r1, #44	; 0x2c
   10384:	e2822001 	add	r2, r2, #1	; 0x1
   10388:	1afffff9 	bne	10374 <parseGGA+0xe4>
   1038c:	e08e1002 	add	r1, lr, r2
		i++;
	}
	i++;
	//8th portion dismissed
	while(gps_string[i] != ',')i++;
   10390:	e5f13001 	ldrb	r3, [r1, #1]!
   10394:	e353002c 	cmp	r3, #44	; 0x2c
   10398:	e2822001 	add	r2, r2, #1	; 0x1
   1039c:	1afffffb 	bne	10390 <parseGGA+0x100>
   103a0:	e1a00002 	mov	r0, r2
   103a4:	e08e2002 	add	r2, lr, r2
	i++;				
	//8th portion dismissed
	while(gps_string[i] != ',')i++;
   103a8:	e5f23001 	ldrb	r3, [r2, #1]!
   103ac:	e353002c 	cmp	r3, #44	; 0x2c
   103b0:	e2800001 	add	r0, r0, #1	; 0x1
   103b4:	1afffffb 	bne	103a8 <parseGGA+0x118>
   103b8:	e59fc024 	ldr	ip, [pc, #36]	; 103e4 <.text+0x3e4>
   103bc:	e08e0000 	add	r0, lr, r0
   103c0:	ea000000 	b	103c8 <parseGGA+0x138>
	i++;				
	//10th portion is Altitude
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Altitude[j]=gps_string[i];
   103c4:	e54c1001 	strb	r1, [ip, #-1]
   103c8:	e5f01001 	ldrb	r1, [r0, #1]!
   103cc:	e351002c 	cmp	r1, #44	; 0x2c
   103d0:	e28cc001 	add	ip, ip, #1	; 0x1
   103d4:	1afffffa 	bne	103c4 <parseGGA+0x134>
		i++;
	}	
}
   103d8:	e49de004 	ldr	lr, [sp], #4
   103dc:	e12fff1e 	bx	lr
   103e0:	4000100c 	andmi	r1, r0, ip
   103e4:	40001036 	andmi	r1, r0, r6, lsr r0

000103e8 <parseRMC>:

//Usage: parseRMC(final_message);
//Inputs: const char *gps_string - RMC NMEA string
//This functions splits a GGA message into the
//portions and assigns them to components of
//a GPS structure
//This functions splits a RMC message into the
//portions and assigns them to components of
//a GPS structure
int parseRMC(const char *gps_string){
   103e8:	e92d4010 	stmdb	sp!, {r4, lr}
   103ec:	e3a01000 	mov	r1, #0	; 0x0
   103f0:	e1a0e000 	mov	lr, r0
   103f4:	e1a02001 	mov	r2, r1
   103f8:	ea000001 	b	10404 <parseRMC+0x1c>
	int i=0;
	int comma_count=0, character_count=0;
	
	for(int j=0; gps_string[j]!= '\n'; j++){
		if(gps_string[j] == ',')comma_count+=1;
   103fc:	e353002c 	cmp	r3, #44	; 0x2c
   10400:	02811001 	addeq	r1, r1, #1	; 0x1
   10404:	e7d2300e 	ldrb	r3, [r2, lr]
   10408:	e353000a 	cmp	r3, #10	; 0xa
   1040c:	e2822001 	add	r2, r2, #1	; 0x1
   10410:	1afffff9 	bne	103fc <parseRMC+0x14>
	}
	
	//If we didn't receive all of the RMC fields, then return an error
	if(comma_count != 11)return 0;
   10414:	e351000b 	cmp	r1, #11	; 0xb
   10418:	1a000067 	bne	105bc <parseRMC+0x1d4>
	//If we didn't receive the correct SiRF header, the return an error
	if(gps_string[0] != '$' || gps_string[1] != 'G' || gps_string[2] != 'P')return 0;
   1041c:	e5de3000 	ldrb	r3, [lr]
   10420:	e3530024 	cmp	r3, #36	; 0x24
   10424:	1a000064 	bne	105bc <parseRMC+0x1d4>
   10428:	e5de3001 	ldrb	r3, [lr, #1]
   1042c:	e3530047 	cmp	r3, #71	; 0x47
   10430:	1a000061 	bne	105bc <parseRMC+0x1d4>
   10434:	e5de3002 	ldrb	r3, [lr, #2]
   10438:	e3530050 	cmp	r3, #80	; 0x50
   1043c:	1a00005e 	bne	105bc <parseRMC+0x1d4>
   10440:	e3a00000 	mov	r0, #0	; 0x0
	
	//Parse the GGA Message.  1st portion dismissed
	while(gps_string[i] != ',')i++;
   10444:	e2800001 	add	r0, r0, #1	; 0x1
   10448:	e7d0300e 	ldrb	r3, [r0, lr]
   1044c:	e353002c 	cmp	r3, #44	; 0x2c
   10450:	1afffffb 	bne	10444 <parseRMC+0x5c>
   10454:	e59f116c 	ldr	r1, [pc, #364]	; 105c8 <.text+0x5c8>
   10458:	e08e2000 	add	r2, lr, r0
   1045c:	ea000000 	b	10464 <parseRMC+0x7c>
	i++;
	//Second portion is UTC timestamp
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Time[j]=gps_string[i];
   10460:	e5c1301f 	strb	r3, [r1, #31]
   10464:	e5f23001 	ldrb	r3, [r2, #1]!
   10468:	e353002c 	cmp	r3, #44	; 0x2c
   1046c:	e2811001 	add	r1, r1, #1	; 0x1
   10470:	1afffffa 	bne	10460 <parseRMC+0x78>
   10474:	e59f314c 	ldr	r3, [pc, #332]	; 105c8 <.text+0x5c8>
   10478:	e1e04003 	mvn	r4, r3
		i++;
		character_count+=1;
	}
	//Make sure we received 10 character for Time
	if(character_count != 10)return 0;
   1047c:	e0812004 	add	r2, r1, r4
   10480:	e352000a 	cmp	r2, #10	; 0xa
   10484:	e263c000 	rsb	ip, r3, #0	; 0x0
   10488:	e0802001 	add	r2, r0, r1
   1048c:	e082200c 	add	r2, r2, ip
   10490:	008e1002 	addeq	r1, lr, r2
   10494:	0a000001 	beq	104a0 <parseRMC+0xb8>
   10498:	ea000047 	b	105bc <parseRMC+0x1d4>
	character_count=0;
	
	i++;
	//Third portion is fix
	while(gps_string[i] != ','){
		GPS.Fix=gps_string[i];
   1049c:	e5c03046 	strb	r3, [r0, #70]
   104a0:	e5f13001 	ldrb	r3, [r1, #1]!
   104a4:	e353002c 	cmp	r3, #44	; 0x2c
   104a8:	e2822001 	add	r2, r2, #1	; 0x1
   104ac:	e59f0114 	ldr	r0, [pc, #276]	; 105c8 <.text+0x5c8>
   104b0:	1afffff9 	bne	1049c <parseRMC+0xb4>
		i++;
	}	
	i++;
	if(GPS.Fix != 'A')return 0;
   104b4:	e5d03046 	ldrb	r3, [r0, #70]
   104b8:	e3530041 	cmp	r3, #65	; 0x41
   104bc:	01a01000 	moveq	r1, r0
   104c0:	008e0002 	addeq	r0, lr, r2
   104c4:	0a000001 	beq	104d0 <parseRMC+0xe8>
   104c8:	ea00003b 	b	105bc <parseRMC+0x1d4>
	
	//Fourth portion is Latitude
	for(int j=0;gps_string[i] != ',';j++){
		GPS.Latitude.position[j]=gps_string[i];
   104cc:	e5413001 	strb	r3, [r1, #-1]
   104d0:	e5f03001 	ldrb	r3, [r0, #1]!
   104d4:	e353002c 	cmp	r3, #44	; 0x2c
   104d8:	e2811001 	add	r1, r1, #1	; 0x1
   104dc:	1afffffa 	bne	104cc <parseRMC+0xe4>
		i++;
		character_count +=1;
	}
	//Make sure we received 9 characters for the Latitude
	if(character_count != 9)return 0;
   104e0:	e0813004 	add	r3, r1, r4
   104e4:	e3530009 	cmp	r3, #9	; 0x9
   104e8:	e0823001 	add	r3, r2, r1
   104ec:	e083200c 	add	r2, r3, ip
   104f0:	008e1002 	addeq	r1, lr, r2
   104f4:	0a000001 	beq	10500 <parseRMC+0x118>
   104f8:	ea00002f 	b	105bc <parseRMC+0x1d4>
	character_count=0;
	i++;	
	//Fifth portion is Latitude direction
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Latitude.direction=gps_string[i];
   104fc:	e5c0300f 	strb	r3, [r0, #15]
   10500:	e5f13001 	ldrb	r3, [r1, #1]!
   10504:	e353002c 	cmp	r3, #44	; 0x2c
   10508:	e2822001 	add	r2, r2, #1	; 0x1
   1050c:	e59f00b4 	ldr	r0, [pc, #180]	; 105c8 <.text+0x5c8>
   10510:	1afffff9 	bne	104fc <parseRMC+0x114>
   10514:	e1a01000 	mov	r1, r0
   10518:	e08e0002 	add	r0, lr, r2
   1051c:	ea000000 	b	10524 <parseRMC+0x13c>
		i++;
	}
	i++;	
	//Sixth portion is Long.
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Longitude.position[j]=gps_string[i];
   10520:	e5c1300f 	strb	r3, [r1, #15]
   10524:	e5f03001 	ldrb	r3, [r0, #1]!
   10528:	e353002c 	cmp	r3, #44	; 0x2c
   1052c:	e2811001 	add	r1, r1, #1	; 0x1
   10530:	1afffffa 	bne	10520 <parseRMC+0x138>
		i++;
		character_count++;
	}
	//Make sure we received 10 characters for longitude
	if(character_count != 10)return 0;
   10534:	e0813004 	add	r3, r1, r4
   10538:	e353000a 	cmp	r3, #10	; 0xa
   1053c:	e0823001 	add	r3, r2, r1
   10540:	e083200c 	add	r2, r3, ip
   10544:	008e0002 	addeq	r0, lr, r2
   10548:	0a000002 	beq	10558 <parseRMC+0x170>
   1054c:	ea00001a 	b	105bc <parseRMC+0x1d4>
	character_count=0;
	
	i++;			
	//Seventh portion is Long direction
	while(gps_string[i] != ','){
		GPS.Longitude.direction=gps_string[i];
   10550:	e59f3070 	ldr	r3, [pc, #112]	; 105c8 <.text+0x5c8>
   10554:	e5c3101f 	strb	r1, [r3, #31]
   10558:	e5f01001 	ldrb	r1, [r0, #1]!
   1055c:	e351002c 	cmp	r1, #44	; 0x2c
   10560:	e2822001 	add	r2, r2, #1	; 0x1
   10564:	1afffff9 	bne	10550 <parseRMC+0x168>
   10568:	e08e1002 	add	r1, lr, r2
		i++;
	}
	i++;		
	//8th portion dismissed
	while(gps_string[i] != ',')i++;
   1056c:	e5f13001 	ldrb	r3, [r1, #1]!
   10570:	e353002c 	cmp	r3, #44	; 0x2c
   10574:	e2822001 	add	r2, r2, #1	; 0x1
   10578:	1afffffb 	bne	1056c <parseRMC+0x184>
   1057c:	e1a00002 	mov	r0, r2
   10580:	e08e2002 	add	r2, lr, r2
	i++;				
	//9th portion dismissed
	while(gps_string[i] != ',')i++;
   10584:	e5f23001 	ldrb	r3, [r2, #1]!
   10588:	e353002c 	cmp	r3, #44	; 0x2c
   1058c:	e2800001 	add	r0, r0, #1	; 0x1
   10590:	1afffffb 	bne	10584 <parseRMC+0x19c>
   10594:	e59fc030 	ldr	ip, [pc, #48]	; 105cc <.text+0x5cc>
   10598:	e08e0000 	add	r0, lr, r0
   1059c:	ea000000 	b	105a4 <parseRMC+0x1bc>
	i++;				
	//10th portion is Date
	for(int j=0;gps_string[i] != ','; j++){
		GPS.Date[j]=gps_string[i];
   105a0:	e54c1001 	strb	r1, [ip, #-1]
   105a4:	e5f01001 	ldrb	r1, [r0, #1]!
   105a8:	e351002c 	cmp	r1, #44	; 0x2c
   105ac:	e28cc001 	add	ip, ip, #1	; 0x1
   105b0:	1afffffa 	bne	105a0 <parseRMC+0x1b8>
   105b4:	e3a00001 	mov	r0, #1	; 0x1
   105b8:	ea000000 	b	105c0 <parseRMC+0x1d8>
   105bc:	e3a00000 	mov	r0, #0	; 0x0
		i++;
	}
	
	return 1;
}
   105c0:	e8bd4010 	ldmia	sp!, {r4, lr}
   105c4:	e12fff1e 	bx	lr
   105c8:	4000100c 	andmi	r1, r0, ip
   105cc:	40001040 	andmi	r1, r0, r0, asr #32

000105d0 <ISR_Timer0>:

//Usage: saveData(log_data, log_data_index);
//Inputs: char *buf - character array to be saved
//		  int buf_size - size of character array
//Output: buffer array is saved to LOG_FILE
//Description: Saves the buf character array to the SD card.
//CONDITIONS: LOG_FILE must be initialized to the handle of an open file.
void saveData(struct fat16_file_struct **fd, const char * const buf, const int buf_size)
{
	int error=0;
	
	if((buf_size > 0) && (*fd != NULL)){
		//Try writing the data to the card up to 10 times.
		while(error<10){
			if(fat16_write_file(*fd, (const unsigned char*)buf, buf_size) < 0)error+=1;
			else break;
			delay_ms(100);
		}
		//If we've tried writing the data 10 times and still haven't succeeded, reset the device.
		if(error==10)reset();
		
		error=0;
		//Try syncing the card up to 10 times
		while(error<10){
			if(!sd_raw_sync())error+=1;
			else break;
			delay_ms(100);
		}
		//If we've tried syncing 10 times and still haven't succeeded, reset the device
		if(error==10)reset();
	}
}

//Usage: itoa(batt_level, log_buffer)
//Inputs: int n - integer to convert
//Outputs:  char s[]-contains ascii rerpresentation of 'n'
/* itoa:  convert n to characters in s */
void itoa(int n, char s[])
{
    int i=0;

    do {       /* generate digits in reverse order */
        s[i++] = n % 10 + '0';   /* get next digit */
    } while ((n /= 10) > 0);     /* delete it */

    s[i] = '\0';
    reverse(s);
}

//Usage: reverse(s);
//Inputs: char s[] - contains a character string
//Outputs: char s[] - Reversed the order of original characters
/* reverse:  reverse string s in place */
void reverse(char s[])
{
    int c, i, j;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}

//Usage: None (Automatically Called by FW)
//Inputs: None
//This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
// is responsible for determining if a button has been pressed or if the screen has been rotated
// and setting the appropriate global flag if either has occured.
static void ISR_Timer0(void)
{
   105d0:	e52de004 	str	lr, [sp, #-4]!
	//Interrupt Code Here
	read_sensors=1;
	log_count++;
	
	//Update the Status LED
	led_blink++;
   105d4:	e59fe078 	ldr	lr, [pc, #120]	; 10654 <.text+0x654>
   105d8:	e5de3000 	ldrb	r3, [lr]
   105dc:	e59f0074 	ldr	r0, [pc, #116]	; 10658 <.text+0x658>
   105e0:	e2833001 	add	r3, r3, #1	; 0x1
   105e4:	e203c0ff 	and	ip, r3, #255	; 0xff
   105e8:	e5902000 	ldr	r2, [r0]
   105ec:	e59f3068 	ldr	r3, [pc, #104]	; 1065c <.text+0x65c>
	if(led_blink > TIMER_FREQ)led_blink=0;
   105f0:	e35c000a 	cmp	ip, #10	; 0xa
   105f4:	e3a01001 	mov	r1, #1	; 0x1
   105f8:	e2822001 	add	r2, r2, #1	; 0x1
   105fc:	e5c31000 	strb	r1, [r3]
   10600:	83a03000 	movhi	r3, #0	; 0x0
   10604:	e5cec000 	strb	ip, [lr]
   10608:	e5802000 	str	r2, [r0]
   1060c:	85ce3000 	strhib	r3, [lr]
   10610:	8a000004 	bhi	10628 <ISR_Timer0+0x58>
	if(led_blink > (TIMER_FREQ % 10))LED_OFF();
   10614:	e35c0000 	cmp	ip, #0	; 0x0
   10618:	159f3040 	ldrne	r3, [pc, #64]	; 10660 <.text+0x660>
   1061c:	13a02102 	movne	r2, #-2147483648	; 0x80000000
   10620:	15832004 	strne	r2, [r3, #4]
   10624:	1a000002 	bne	10634 <ISR_Timer0+0x64>
	else LED_ON();
   10628:	e59f3030 	ldr	r3, [pc, #48]	; 10660 <.text+0x660>
   1062c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   10630:	e583200c 	str	r2, [r3, #12]
	
	T0IR = 0xFF;						//Clear the timer interrupt
   10634:	e59f3028 	ldr	r3, [pc, #40]	; 10664 <.text+0x664>
   10638:	e3a020ff 	mov	r2, #255	; 0xff
   1063c:	e5832000 	str	r2, [r3]
	VICVectAddr =0;						//Update the VIC priorities
   10640:	e3a02000 	mov	r2, #0	; 0x0
   10644:	e3e03000 	mvn	r3, #0	; 0x0
   10648:	e5032fcf 	str	r2, [r3, #-4047]
}
   1064c:	e49de004 	ldr	lr, [sp], #4
   10650:	e12fff1e 	bx	lr
   10654:	400008b0 	strmih	r0, [r0], -r0
   10658:	400014e4 	andmi	r1, r0, r4, ror #9
   1065c:	40000df8 	strmid	r0, [r0], -r8
   10660:	e0028000 	and	r8, r2, r0
   10664:	e0004000 	and	r4, r0, r0

00010668 <get_adc_1>:

//Usage: accel = get_adc_1(CHANNEL);
//Inputs: int channel - integer corresponding to the ADC channel to be converted
//Outputs: None
//Description: Returns the raw analog to digital conversion of the input channel.  
int get_adc_1(char channel)
{
   10668:	e20000ff 	and	r0, r0, #255	; 0xff
    int val;
    AD1CR = 0;
   1066c:	e59f2040 	ldr	r2, [pc, #64]	; 106b4 <.text+0x6b4>
    AD1GDR = 0;

    //AD1CR = 0x00200600 | channel;
	AD1CR = 0x00200E00 | channel;
   10670:	e3800602 	orr	r0, r0, #2097152	; 0x200000
   10674:	e3a03000 	mov	r3, #0	; 0x0
   10678:	e3800c0e 	orr	r0, r0, #3584	; 0xe00
   1067c:	e5823000 	str	r3, [r2]
   10680:	e5823004 	str	r3, [r2, #4]
   10684:	e5820000 	str	r0, [r2]
    AD1CR |= 0x01000000;
   10688:	e5923000 	ldr	r3, [r2]
   1068c:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
   10690:	e5823000 	str	r3, [r2]
    do
    {
        val = AD1GDR;                   // Read A/D Data Register
   10694:	e59f3018 	ldr	r3, [pc, #24]	; 106b4 <.text+0x6b4>
   10698:	e5930004 	ldr	r0, [r3, #4]
    }
    while ((val & 0x80000000) == 0);  //Wait for the conversion to complete
   1069c:	e3500000 	cmp	r0, #0	; 0x0
   106a0:	aafffffb 	bge	10694 <get_adc_1+0x2c>
   106a4:	e1a00340 	mov	r0, r0, asr #6
    val = ((val >> 6) & 0x03FF);  //Extract the A/D result

    return val;
}
   106a8:	e1a00b00 	mov	r0, r0, lsl #22
   106ac:	e1a00b20 	mov	r0, r0, lsr #22
   106b0:	e12fff1e 	bx	lr
   106b4:	e0060000 	and	r0, r6, r0

000106b8 <reset>:

//Usage: reset();
//Inputs: None
//Description: Resets the LPC2148
void reset(void)
{
    // Intentionally fault Watchdog to trigger a reset condition
    WDMOD |= 3;
   106b8:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
   106bc:	e5923000 	ldr	r3, [r2]
   106c0:	e3833003 	orr	r3, r3, #3	; 0x3
   106c4:	e5823000 	str	r3, [r2]
    WDFEED = 0xAA;
   106c8:	e3a010aa 	mov	r1, #170	; 0xaa
    WDFEED = 0x55;
   106cc:	e3a03055 	mov	r3, #85	; 0x55
   106d0:	e5821008 	str	r1, [r2, #8]
   106d4:	e5823008 	str	r3, [r2, #8]
    WDFEED = 0xAA;
    WDFEED = 0x00;
   106d8:	e3a03000 	mov	r3, #0	; 0x0
   106dc:	e5821008 	str	r1, [r2, #8]
   106e0:	e5823008 	str	r3, [r2, #8]
}
   106e4:	e12fff1e 	bx	lr

000106e8 <ISR_EINT2>:

static void ISR_EINT2(void){
	VICIntEnClr = (1<<16);			//Temporarily disable EINT2 Interrupts
   106e8:	e3e01000 	mvn	r1, #0	; 0x0
   106ec:	e3a00801 	mov	r0, #65536	; 0x10000
   106f0:	e5010feb 	str	r0, [r1, #-4075]
	EXTINT |= (1<<2);				//Clear the interrupt bit in EINT2
   106f4:	e59f2024 	ldr	r2, [pc, #36]	; 10720 <.text+0x720>
   106f8:	e5923140 	ldr	r3, [r2, #320]
   106fc:	e3833004 	orr	r3, r3, #4	; 0x4
   10700:	e5823140 	str	r3, [r2, #320]
	
	wake_event=ACCELEROMETER_WAKE;			//Tell the main code that a free-fall has been detected!
   10704:	e59f3018 	ldr	r3, [pc, #24]	; 10724 <.text+0x724>
   10708:	e3a02002 	mov	r2, #2	; 0x2
   1070c:	e5c32000 	strb	r2, [r3]
	
	VICIntEnable = (1<<16);		//Re-enable the EINT2 Interrupts
	VICVectAddr =0;		//Update the VIC priorities
   10710:	e3a03000 	mov	r3, #0	; 0x0
   10714:	e5010fef 	str	r0, [r1, #-4079]
   10718:	e5013fcf 	str	r3, [r1, #-4047]
}
   1071c:	e12fff1e 	bx	lr
   10720:	e01fc000 	ands	ip, pc, r0
   10724:	400008b1 	strmih	r0, [r0], -r1

00010728 <initializeGps>:

void initializeGps(void){
	//Initialize the GPS receiver
	GPSon();
   10728:	e59f302c 	ldr	r3, [pc, #44]	; 1075c <.text+0x75c>
   1072c:	e3a02602 	mov	r2, #2097152	; 0x200000
   10730:	e52de004 	str	lr, [sp, #-4]!
   10734:	e5832004 	str	r2, [r3, #4]
	delay_ms(200);
   10738:	e3a000c8 	mov	r0, #200	; 0xc8
   1073c:	ebfffe94 	bl	10194 <delay_ms>

	disable_all_gps_msgs();
   10740:	eb0011c9 	bl	14e6c <disable_all_gps_msgs>
	delay_ms(200);
   10744:	e3a000c8 	mov	r0, #200	; 0xc8
   10748:	ebfffe91 	bl	10194 <delay_ms>
	
	enable_waas();
   1074c:	eb00118e 	bl	14d8c <enable_waas>
	delay_ms(200);
   10750:	e3a000c8 	mov	r0, #200	; 0xc8

}
   10754:	e49de004 	ldr	lr, [sp], #4
   10758:	eafffe8d 	b	10194 <delay_ms>
   1075c:	e0028000 	and	r8, r2, r0

00010760 <reverse>:
   10760:	e92d4010 	stmdb	sp!, {r4, lr}
   10764:	e1a04000 	mov	r4, r0
   10768:	eb001a98 	bl	171d0 <strlen>
   1076c:	e3a0c000 	mov	ip, #0	; 0x0
   10770:	e0841000 	add	r1, r4, r0
   10774:	e2400001 	sub	r0, r0, #1	; 0x1
   10778:	ea000004 	b	10790 <reverse+0x30>
   1077c:	e7dc2004 	ldrb	r2, [ip, r4]
   10780:	e5513001 	ldrb	r3, [r1, #-1]
   10784:	e7cc3004 	strb	r3, [ip, r4]
   10788:	e5612001 	strb	r2, [r1, #-1]!
   1078c:	e28cc001 	add	ip, ip, #1	; 0x1
   10790:	e15c0000 	cmp	ip, r0
   10794:	e2400001 	sub	r0, r0, #1	; 0x1
   10798:	bafffff7 	blt	1077c <reverse+0x1c>
   1079c:	e8bd4010 	ldmia	sp!, {r4, lr}
   107a0:	e12fff1e 	bx	lr

000107a4 <itoa>:
   107a4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   107a8:	e1a04000 	mov	r4, r0
   107ac:	e1a05001 	mov	r5, r1
   107b0:	e3a06000 	mov	r6, #0	; 0x0
   107b4:	e1a00004 	mov	r0, r4
   107b8:	e3a0100a 	mov	r1, #10	; 0xa
   107bc:	eb0031d8 	bl	1cf24 <__modsi3>
   107c0:	e2800030 	add	r0, r0, #48	; 0x30
   107c4:	e7c60005 	strb	r0, [r6, r5]
   107c8:	e3a0100a 	mov	r1, #10	; 0xa
   107cc:	e1a00004 	mov	r0, r4
   107d0:	eb00314e 	bl	1cd10 <__aeabi_idiv>
   107d4:	e2504000 	subs	r4, r0, #0	; 0x0
   107d8:	e2866001 	add	r6, r6, #1	; 0x1
   107dc:	cafffff4 	bgt	107b4 <itoa+0x10>
   107e0:	e3a03000 	mov	r3, #0	; 0x0
   107e4:	e1a00005 	mov	r0, r5
   107e8:	e7c53006 	strb	r3, [r5, r6]
   107ec:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   107f0:	eaffffda 	b	10760 <reverse>

000107f4 <saveData>:
   107f4:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   107f8:	e2527000 	subs	r7, r2, #0	; 0x0
   107fc:	e1a05000 	mov	r5, r0
   10800:	e1a06001 	mov	r6, r1
   10804:	da00001b 	ble	10878 <saveData+0x84>
   10808:	e5903000 	ldr	r3, [r0]
   1080c:	e3530000 	cmp	r3, #0	; 0x0
   10810:	0a000018 	beq	10878 <saveData+0x84>
   10814:	e3a04000 	mov	r4, #0	; 0x0
   10818:	e1a02807 	mov	r2, r7, lsl #16
   1081c:	e1a02822 	mov	r2, r2, lsr #16
   10820:	e1a01006 	mov	r1, r6
   10824:	e5950000 	ldr	r0, [r5]
   10828:	eb000d6b 	bl	13ddc <fat16_write_file>
   1082c:	e3100902 	tst	r0, #32768	; 0x8000
   10830:	e2844001 	add	r4, r4, #1	; 0x1
   10834:	e3a00064 	mov	r0, #100	; 0x64
   10838:	0a000003 	beq	1084c <saveData+0x58>
   1083c:	ebfffe54 	bl	10194 <delay_ms>
   10840:	e354000a 	cmp	r4, #10	; 0xa
   10844:	1afffff3 	bne	10818 <saveData+0x24>
   10848:	ebffff9a 	bl	106b8 <reset>
   1084c:	e3a04000 	mov	r4, #0	; 0x0
   10850:	eb000823 	bl	128e4 <sd_raw_sync>
   10854:	e3500000 	cmp	r0, #0	; 0x0
   10858:	e2844001 	add	r4, r4, #1	; 0x1
   1085c:	e3a00064 	mov	r0, #100	; 0x64
   10860:	1a000004 	bne	10878 <saveData+0x84>
   10864:	ebfffe4a 	bl	10194 <delay_ms>
   10868:	e354000a 	cmp	r4, #10	; 0xa
   1086c:	1afffff7 	bne	10850 <saveData+0x5c>
   10870:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   10874:	eaffff8f 	b	106b8 <reset>
   10878:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   1087c:	e12fff1e 	bx	lr

00010880 <createLogFile>:
   10880:	e92d4010 	stmdb	sp!, {r4, lr}
   10884:	e59f30bc 	ldr	r3, [pc, #188]	; 10948 <.text+0x948>
   10888:	e59f10bc 	ldr	r1, [pc, #188]	; 1094c <.text+0x94c>
   1088c:	e5932000 	ldr	r2, [r3]
   10890:	e59f00b8 	ldr	r0, [pc, #184]	; 10950 <.text+0x950>
   10894:	ea000003 	b	108a8 <createLogFile+0x28>
   10898:	e5943000 	ldr	r3, [r4]
   1089c:	e2833001 	add	r3, r3, #1	; 0x1
   108a0:	e5843000 	str	r3, [r4]
   108a4:	e1a02003 	mov	r2, r3
   108a8:	eb0019f3 	bl	1707c <sprintf>
   108ac:	e59f009c 	ldr	r0, [pc, #156]	; 10950 <.text+0x950>
   108b0:	eb000502 	bl	11cc0 <root_file_exists>
   108b4:	e3500000 	cmp	r0, #0	; 0x0
   108b8:	e59f108c 	ldr	r1, [pc, #140]	; 1094c <.text+0x94c>
   108bc:	e59f008c 	ldr	r0, [pc, #140]	; 10950 <.text+0x950>
   108c0:	e59f4080 	ldr	r4, [pc, #128]	; 10948 <.text+0x948>
   108c4:	1afffff3 	bne	10898 <createLogFile+0x18>
   108c8:	eb0005d1 	bl	12014 <root_open_new>
   108cc:	e59f3080 	ldr	r3, [pc, #128]	; 10954 <.text+0x954>
   108d0:	e59f1080 	ldr	r1, [pc, #128]	; 10958 <.text+0x958>
   108d4:	e3a02069 	mov	r2, #105	; 0x69
   108d8:	e5830000 	str	r0, [r3]
   108dc:	eb000d3e 	bl	13ddc <fat16_write_file>
   108e0:	eb0007ff 	bl	128e4 <sd_raw_sync>
   108e4:	e5942000 	ldr	r2, [r4]
   108e8:	e59f106c 	ldr	r1, [pc, #108]	; 1095c <.text+0x95c>
   108ec:	e59f005c 	ldr	r0, [pc, #92]	; 10950 <.text+0x950>
   108f0:	ea000003 	b	10904 <createLogFile+0x84>
   108f4:	e59c3000 	ldr	r3, [ip]
   108f8:	e2833001 	add	r3, r3, #1	; 0x1
   108fc:	e58c3000 	str	r3, [ip]
   10900:	e1a02003 	mov	r2, r3
   10904:	eb0019dc 	bl	1707c <sprintf>
   10908:	e59f0040 	ldr	r0, [pc, #64]	; 10950 <.text+0x950>
   1090c:	eb0004eb 	bl	11cc0 <root_file_exists>
   10910:	e3500000 	cmp	r0, #0	; 0x0
   10914:	e59fc02c 	ldr	ip, [pc, #44]	; 10948 <.text+0x948>
   10918:	e59f103c 	ldr	r1, [pc, #60]	; 1095c <.text+0x95c>
   1091c:	e59f002c 	ldr	r0, [pc, #44]	; 10950 <.text+0x950>
   10920:	1afffff3 	bne	108f4 <createLogFile+0x74>
   10924:	eb0005ba 	bl	12014 <root_open_new>
   10928:	e59f3030 	ldr	r3, [pc, #48]	; 10960 <.text+0x960>
   1092c:	e59f1030 	ldr	r1, [pc, #48]	; 10964 <.text+0x964>
   10930:	e3a02054 	mov	r2, #84	; 0x54
   10934:	e5830000 	str	r0, [r3]
   10938:	eb000d27 	bl	13ddc <fat16_write_file>
   1093c:	eb0007e8 	bl	128e4 <sd_raw_sync>
   10940:	e8bd4010 	ldmia	sp!, {r4, lr}
   10944:	e12fff1e 	bx	lr
   10948:	400008b4 	strmih	r0, [r0], -r4
   1094c:	0001dd10 	andeq	sp, r1, r0, lsl sp
   10950:	40001054 	andmi	r1, r0, r4, asr r0
   10954:	4000107c 	andmi	r1, r0, ip, ror r0
   10958:	0001dd28 	andeq	sp, r1, r8, lsr #26
   1095c:	0001dd94 	muleq	r1, r4, sp
   10960:	40001078 	andmi	r1, r0, r8, ror r0
   10964:	0001ddb0 	streqh	sp, [r1], -r0

00010968 <wakeUp>:
   10968:	e59f10b8 	ldr	r1, [pc, #184]	; 10a28 <.text+0xa28>
   1096c:	e59f30b8 	ldr	r3, [pc, #184]	; 10a2c <.text+0xa2c>
   10970:	e5932000 	ldr	r2, [r3]
   10974:	e59130c4 	ldr	r3, [r1, #196]
   10978:	e1833002 	orr	r3, r3, r2
   1097c:	e58130c4 	str	r3, [r1, #196]
   10980:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   10984:	e3e05000 	mvn	r5, #0	; 0x0
   10988:	e5153feb 	ldr	r3, [r5, #-4075]
   1098c:	e59f409c 	ldr	r4, [pc, #156]	; 10a30 <.text+0xa30>
   10990:	e3833a12 	orr	r3, r3, #73728	; 0x12000
   10994:	e5053feb 	str	r3, [r5, #-4075]
   10998:	e59f1094 	ldr	r1, [pc, #148]	; 10a34 <.text+0xa34>
   1099c:	e1a00004 	mov	r0, r4
   109a0:	eb001a04 	bl	171b8 <strcpy>
   109a4:	e1a00004 	mov	r0, r4
   109a8:	eb001a08 	bl	171d0 <strlen>
   109ac:	e1a01004 	mov	r1, r4
   109b0:	e1a02000 	mov	r2, r0
   109b4:	e59f007c 	ldr	r0, [pc, #124]	; 10a38 <.text+0xa38>
   109b8:	ebffff8d 	bl	107f4 <saveData>
   109bc:	e3a00030 	mov	r0, #48	; 0x30
   109c0:	eb000faa 	bl	14870 <adxl345_read>
   109c4:	e59f3070 	ldr	r3, [pc, #112]	; 10a3c <.text+0xa3c>
   109c8:	e3a04000 	mov	r4, #0	; 0x0
   109cc:	e5c34000 	strb	r4, [r3]
   109d0:	e59f3068 	ldr	r3, [pc, #104]	; 10a40 <.text+0xa40>
   109d4:	e5c34000 	strb	r4, [r3]
   109d8:	ebffff52 	bl	10728 <initializeGps>
   109dc:	e3a00001 	mov	r0, #1	; 0x1
   109e0:	eb00111e 	bl	14e60 <enable_gps_rmc_msgs>
   109e4:	e59f3058 	ldr	r3, [pc, #88]	; 10a44 <.text+0xa44>
   109e8:	e3a02401 	mov	r2, #16777216	; 0x1000000
   109ec:	e583201c 	str	r2, [r3, #28]
   109f0:	e3a0000a 	mov	r0, #10	; 0xa
   109f4:	ebfffde6 	bl	10194 <delay_ms>
   109f8:	eb000ff4 	bl	149d0 <SCPinit>
   109fc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   10a00:	ebfffde3 	bl	10194 <delay_ms>
   10a04:	e5153fef 	ldr	r3, [r5, #-4079]
   10a08:	e59f2038 	ldr	r2, [pc, #56]	; 10a48 <.text+0xa48>
   10a0c:	e3833090 	orr	r3, r3, #144	; 0x90
   10a10:	e5c24000 	strb	r4, [r2]
   10a14:	e5053fef 	str	r3, [r5, #-4079]
   10a18:	e59f302c 	ldr	r3, [pc, #44]	; 10a4c <.text+0xa4c>
   10a1c:	e5834000 	str	r4, [r3]
   10a20:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   10a24:	e12fff1e 	bx	lr
   10a28:	e01fc000 	ands	ip, pc, r0
   10a2c:	40000e04 	andmi	r0, r0, r4, lsl #28
   10a30:	40000e08 	andmi	r0, r0, r8, lsl #28
   10a34:	0001de08 	andeq	sp, r1, r8, lsl #28
   10a38:	4000107c 	andmi	r1, r0, ip, ror r0
   10a3c:	4000089c 	mulmi	r0, ip, r8
   10a40:	40000df8 	strmid	r0, [r0], -r8
   10a44:	e0028000 	and	r8, r2, r0
   10a48:	40001480 	andmi	r1, r0, r0, lsl #9
   10a4c:	400014e4 	andmi	r1, r0, r4, ror #9

00010a50 <goToSleep>:
   10a50:	e59f3158 	ldr	r3, [pc, #344]	; 10bb0 <.text+0xbb0>
   10a54:	e59f1158 	ldr	r1, [pc, #344]	; 10bb4 <.text+0xbb4>
   10a58:	e3a02002 	mov	r2, #2	; 0x2
   10a5c:	e5832008 	str	r2, [r3, #8]
   10a60:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   10a64:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   10a68:	e5813004 	str	r3, [r1, #4]
   10a6c:	e59f5144 	ldr	r5, [pc, #324]	; 10bb8 <.text+0xbb8>
   10a70:	e2833481 	add	r3, r3, #-2130706432	; 0x81000000
   10a74:	e1a04000 	mov	r4, r0
   10a78:	e5813014 	str	r3, [r1, #20]
   10a7c:	e3a0000a 	mov	r0, #10	; 0xa
   10a80:	ebfffdc3 	bl	10194 <delay_ms>
   10a84:	e5952000 	ldr	r2, [r5]
   10a88:	e3520000 	cmp	r2, #0	; 0x0
   10a8c:	da00000f 	ble	10ad0 <goToSleep+0x80>
   10a90:	e59f0124 	ldr	r0, [pc, #292]	; 10bbc <.text+0xbbc>
   10a94:	e59f1124 	ldr	r1, [pc, #292]	; 10bc0 <.text+0xbc0>
   10a98:	ebffff55 	bl	107f4 <saveData>
   10a9c:	e5950000 	ldr	r0, [r5]
   10aa0:	e59f1118 	ldr	r1, [pc, #280]	; 10bc0 <.text+0xbc0>
   10aa4:	e3a02000 	mov	r2, #0	; 0x0
   10aa8:	ea000001 	b	10ab4 <goToSleep+0x64>
   10aac:	e3a03000 	mov	r3, #0	; 0x0
   10ab0:	e5413001 	strb	r3, [r1, #-1]
   10ab4:	e1520000 	cmp	r2, r0
   10ab8:	e2811001 	add	r1, r1, #1	; 0x1
   10abc:	e2822001 	add	r2, r2, #1	; 0x1
   10ac0:	bafffff9 	blt	10aac <goToSleep+0x5c>
   10ac4:	e59f30ec 	ldr	r3, [pc, #236]	; 10bb8 <.text+0xbb8>
   10ac8:	e3a02000 	mov	r2, #0	; 0x0
   10acc:	e5832000 	str	r2, [r3]
   10ad0:	e59f30dc 	ldr	r3, [pc, #220]	; 10bb4 <.text+0xbb4>
   10ad4:	e59f10d4 	ldr	r1, [pc, #212]	; 10bb0 <.text+0xbb0>
   10ad8:	e3a02602 	mov	r2, #2097152	; 0x200000
   10adc:	e583200c 	str	r2, [r3, #12]
   10ae0:	e3a03000 	mov	r3, #0	; 0x0
   10ae4:	e5813020 	str	r3, [r1, #32]
   10ae8:	e5913020 	ldr	r3, [r1, #32]
   10aec:	e5813060 	str	r3, [r1, #96]
   10af0:	e5913024 	ldr	r3, [r1, #36]
   10af4:	e0833004 	add	r3, r3, r4
   10af8:	e353003b 	cmp	r3, #59	; 0x3b
   10afc:	85913024 	ldrhi	r3, [r1, #36]
   10b00:	95913024 	ldrls	r3, [r1, #36]
   10b04:	80843003 	addhi	r3, r4, r3
   10b08:	90833004 	addls	r3, r3, r4
   10b0c:	8243303c 	subhi	r3, r3, #60	; 0x3c
   10b10:	e5813064 	str	r3, [r1, #100]
   10b14:	e59f00a4 	ldr	r0, [pc, #164]	; 10bc0 <.text+0xbc0>
   10b18:	e59f10a4 	ldr	r1, [pc, #164]	; 10bc4 <.text+0xbc4>
   10b1c:	eb0019a5 	bl	171b8 <strcpy>
   10b20:	e59f0098 	ldr	r0, [pc, #152]	; 10bc0 <.text+0xbc0>
   10b24:	eb0019a9 	bl	171d0 <strlen>
   10b28:	e59f1090 	ldr	r1, [pc, #144]	; 10bc0 <.text+0xbc0>
   10b2c:	e1a02000 	mov	r2, r0
   10b30:	e59f0084 	ldr	r0, [pc, #132]	; 10bbc <.text+0xbbc>
   10b34:	ebffff2e 	bl	107f4 <saveData>
   10b38:	e59f3070 	ldr	r3, [pc, #112]	; 10bb0 <.text+0xbb0>
   10b3c:	e3a04001 	mov	r4, #1	; 0x1
   10b40:	e5834008 	str	r4, [r3, #8]
   10b44:	e3e02000 	mvn	r2, #0	; 0x0
   10b48:	e5123feb 	ldr	r3, [r2, #-4075]
   10b4c:	e3833090 	orr	r3, r3, #144	; 0x90
   10b50:	e5023feb 	str	r3, [r2, #-4075]
   10b54:	e5123fef 	ldr	r3, [r2, #-4079]
   10b58:	e3833a12 	orr	r3, r3, #73728	; 0x12000
   10b5c:	e5023fef 	str	r3, [r2, #-4079]
   10b60:	eb000f6c 	bl	14918 <accelX>
   10b64:	e59f305c 	ldr	r3, [pc, #92]	; 10bc8 <.text+0xbc8>
   10b68:	e5830000 	str	r0, [r3]
   10b6c:	eb000f60 	bl	148f4 <accelY>
   10b70:	e59f3054 	ldr	r3, [pc, #84]	; 10bcc <.text+0xbcc>
   10b74:	e5830000 	str	r0, [r3]
   10b78:	eb000f54 	bl	148d0 <accelZ>
   10b7c:	e59f304c 	ldr	r3, [pc, #76]	; 10bd0 <.text+0xbd0>
   10b80:	e5830000 	str	r0, [r3]
   10b84:	e3a00030 	mov	r0, #48	; 0x30
   10b88:	eb000f38 	bl	14870 <adxl345_read>
   10b8c:	e59f2040 	ldr	r2, [pc, #64]	; 10bd4 <.text+0xbd4>
   10b90:	e59f3040 	ldr	r3, [pc, #64]	; 10bd8 <.text+0xbd8>
   10b94:	e59210c4 	ldr	r1, [r2, #196]
   10b98:	e5831000 	str	r1, [r3]
   10b9c:	e3a03c02 	mov	r3, #512	; 0x200
   10ba0:	e58230c4 	str	r3, [r2, #196]
   10ba4:	e58240c0 	str	r4, [r2, #192]
   10ba8:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   10bac:	e12fff1e 	bx	lr
   10bb0:	e0024000 	and	r4, r2, r0
   10bb4:	e0028000 	and	r8, r2, r0
   10bb8:	40000de8 	andmi	r0, r0, r8, ror #27
   10bbc:	4000107c 	andmi	r1, r0, ip, ror r0
   10bc0:	40000e08 	andmi	r0, r0, r8, lsl #28
   10bc4:	0001de10 	andeq	sp, r1, r0, lsl lr
   10bc8:	40001488 	andmi	r1, r0, r8, lsl #9
   10bcc:	40001008 	andmi	r1, r0, r8
   10bd0:	40001484 	andmi	r1, r0, r4, lsl #9
   10bd4:	e01fc000 	ands	ip, pc, r0
   10bd8:	40000e04 	andmi	r0, r0, r4, lsl #28

00010bdc <bootUp>:
   10bdc:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   10be0:	e59f01c8 	ldr	r0, [pc, #456]	; 10db0 <.text+0xdb0>
   10be4:	eb0002f7 	bl	117c8 <rprintf_devopen>
   10be8:	e3a00d4b 	mov	r0, #4800	; 0x12c0
   10bec:	eb0003bd 	bl	11ae8 <init_serial1>
   10bf0:	e3a0000a 	mov	r0, #10	; 0xa
   10bf4:	ebfffd66 	bl	10194 <delay_ms>
   10bf8:	eb000777 	bl	129dc <sd_raw_init>
   10bfc:	e3500000 	cmp	r0, #0	; 0x0
   10c00:	0bfffeac 	bleq	106b8 <reset>
   10c04:	eb000514 	bl	1205c <openroot>
   10c08:	e3500000 	cmp	r0, #0	; 0x0
   10c0c:	1bfffea9 	blne	106b8 <reset>
   10c10:	e59f219c 	ldr	r2, [pc, #412]	; 10db4 <.text+0xdb4>
   10c14:	e5923000 	ldr	r3, [r2]
   10c18:	e3c330f0 	bic	r3, r3, #240	; 0xf0
   10c1c:	e5823000 	str	r3, [r2]
   10c20:	e5923000 	ldr	r3, [r2]
   10c24:	e3833303 	orr	r3, r3, #201326592	; 0xc000000
   10c28:	e5823000 	str	r3, [r2]
   10c2c:	e5923000 	ldr	r3, [r2]
   10c30:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   10c34:	e5823000 	str	r3, [r2]
   10c38:	e5923000 	ldr	r3, [r2]
   10c3c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   10c40:	e5823000 	str	r3, [r2]
   10c44:	e3e05000 	mvn	r5, #0	; 0x0
   10c48:	e5153feb 	ldr	r3, [r5, #-4075]
   10c4c:	e3833801 	orr	r3, r3, #65536	; 0x10000
   10c50:	e5053feb 	str	r3, [r5, #-4075]
   10c54:	e59f415c 	ldr	r4, [pc, #348]	; 10db8 <.text+0xdb8>
   10c58:	e5943140 	ldr	r3, [r4, #320]
   10c5c:	e3833004 	orr	r3, r3, #4	; 0x4
   10c60:	e5843140 	str	r3, [r4, #320]
   10c64:	e5943148 	ldr	r3, [r4, #328]
   10c68:	e3833004 	orr	r3, r3, #4	; 0x4
   10c6c:	e5843148 	str	r3, [r4, #328]
   10c70:	e5943140 	ldr	r3, [r4, #320]
   10c74:	e3833004 	orr	r3, r3, #4	; 0x4
   10c78:	e5843140 	str	r3, [r4, #320]
   10c7c:	e594314c 	ldr	r3, [r4, #332]
   10c80:	e3833004 	orr	r3, r3, #4	; 0x4
   10c84:	e584314c 	str	r3, [r4, #332]
   10c88:	e5943144 	ldr	r3, [r4, #324]
   10c8c:	e3833004 	orr	r3, r3, #4	; 0x4
   10c90:	e5843144 	str	r3, [r4, #324]
   10c94:	e5943140 	ldr	r3, [r4, #320]
   10c98:	e3833004 	orr	r3, r3, #4	; 0x4
   10c9c:	e5843140 	str	r3, [r4, #320]
   10ca0:	e59f3114 	ldr	r3, [pc, #276]	; 10dbc <.text+0xdbc>
   10ca4:	e2422901 	sub	r2, r2, #16384	; 0x4000
   10ca8:	e5823008 	str	r3, [r2, #8]
   10cac:	e5923008 	ldr	r3, [r2, #8]
   10cb0:	e3c33b2b 	bic	r3, r3, #44032	; 0xac00
   10cb4:	e3c33020 	bic	r3, r3, #32	; 0x20
   10cb8:	e5823008 	str	r3, [r2, #8]
   10cbc:	e3a03405 	mov	r3, #83886080	; 0x5000000
   10cc0:	e5823018 	str	r3, [r2, #24]
   10cc4:	e3a03802 	mov	r3, #131072	; 0x20000
   10cc8:	e5823004 	str	r3, [r2, #4]
   10ccc:	e3a03301 	mov	r3, #67108864	; 0x4000000
   10cd0:	e5823014 	str	r3, [r2, #20]
   10cd4:	eb0003d8 	bl	11c3c <SPI0_Init>
   10cd8:	e59f20e0 	ldr	r2, [pc, #224]	; 10dc0 <.text+0xdc0>
   10cdc:	e3a03040 	mov	r3, #64	; 0x40
   10ce0:	e582300c 	str	r3, [r2, #12]
   10ce4:	e3a03020 	mov	r3, #32	; 0x20
   10ce8:	e5823000 	str	r3, [r2]
   10cec:	e59f30d0 	ldr	r3, [pc, #208]	; 10dc4 <.text+0xdc4>
   10cf0:	e3a00001 	mov	r0, #1	; 0x1
   10cf4:	e5840100 	str	r0, [r4, #256]
   10cf8:	e5053ff3 	str	r3, [r5, #-4083]
   10cfc:	e3a03027 	mov	r3, #39	; 0x27
   10d00:	e5053dff 	str	r3, [r5, #-3583]
   10d04:	e59f30bc 	ldr	r3, [pc, #188]	; 10dc8 <.text+0xdc8>
   10d08:	e5053eff 	str	r3, [r5, #-3839]
   10d0c:	e3a0302d 	mov	r3, #45	; 0x2d
   10d10:	e5053dfb 	str	r3, [r5, #-3579]
   10d14:	e59f30b0 	ldr	r3, [pc, #176]	; 10dcc <.text+0xdcc>
   10d18:	e5053efb 	str	r3, [r5, #-3835]
   10d1c:	e3a03024 	mov	r3, #36	; 0x24
   10d20:	e5053df7 	str	r3, [r5, #-3575]
   10d24:	e59f30a4 	ldr	r3, [pc, #164]	; 10dd0 <.text+0xdd0>
   10d28:	e5053ef7 	str	r3, [r5, #-3831]
   10d2c:	e3a03030 	mov	r3, #48	; 0x30
   10d30:	e5053df3 	str	r3, [r5, #-3571]
   10d34:	e59f1098 	ldr	r1, [pc, #152]	; 10dd4 <.text+0xdd4>
   10d38:	e59f3098 	ldr	r3, [pc, #152]	; 10dd8 <.text+0xdd8>
   10d3c:	e5053ef3 	str	r3, [r5, #-3827]
   10d40:	e5810004 	str	r0, [r1, #4]
   10d44:	e5913008 	ldr	r3, [r1, #8]
   10d48:	e203303f 	and	r3, r3, #63	; 0x3f
   10d4c:	e5813008 	str	r3, [r1, #8]
   10d50:	e2422907 	sub	r2, r2, #114688	; 0x1c000
   10d54:	e3a03e4b 	mov	r3, #1200	; 0x4b0
   10d58:	e582300c 	str	r3, [r2, #12]
   10d5c:	e5923004 	ldr	r3, [r2, #4]
   10d60:	e1833000 	orr	r3, r3, r0
   10d64:	e5823004 	str	r3, [r2, #4]
   10d68:	e3a00000 	mov	r0, #0	; 0x0
   10d6c:	e3a03003 	mov	r3, #3	; 0x3
   10d70:	e5820070 	str	r0, [r2, #112]
   10d74:	e5823014 	str	r3, [r2, #20]
   10d78:	e59f305c 	ldr	r3, [pc, #92]	; 10ddc <.text+0xddc>
   10d7c:	e2811905 	add	r1, r1, #81920	; 0x14000
   10d80:	e5823018 	str	r3, [r2, #24]
   10d84:	e3e03001 	mvn	r3, #1	; 0x1
   10d88:	e5813008 	str	r3, [r1, #8]
   10d8c:	e3e03002 	mvn	r3, #2	; 0x2
   10d90:	e581000c 	str	r0, [r1, #12]
   10d94:	e5813010 	str	r3, [r1, #16]
   10d98:	e59f3040 	ldr	r3, [pc, #64]	; 10de0 <.text+0xde0>
   10d9c:	e5813080 	str	r3, [r1, #128]
   10da0:	e3a03c07 	mov	r3, #1792	; 0x700
   10da4:	e5813084 	str	r3, [r1, #132]
   10da8:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   10dac:	e12fff1e 	bx	lr
   10db0:	00011ba0 	andeq	r1, r1, r0, lsr #23
   10db4:	e002c000 	and	ip, r2, r0
   10db8:	e01fc000 	ands	ip, pc, r0
   10dbc:	802200d4 	ldrhid	r0, [r2], -r4
   10dc0:	e0020000 	and	r0, r2, r0
   10dc4:	fffedf6f 	undefined instruction 0xfffedf6f
   10dc8:	000101bc 	streqh	r0, [r1], -ip
   10dcc:	00010260 	andeq	r0, r1, r0, ror #4
   10dd0:	000105d0 	ldreqd	r0, [r1], -r0
   10dd4:	e0010000 	and	r0, r1, r0
   10dd8:	000106e8 	andeq	r0, r1, r8, ror #13
   10ddc:	00001388 	andeq	r1, r0, r8, lsl #7
   10de0:	00000726 	andeq	r0, r0, r6, lsr #14

00010de4 <main>:
   10de4:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10de8:	e24dd008 	sub	sp, sp, #8	; 0x8
   10dec:	ebffff7a 	bl	10bdc <bootUp>
   10df0:	ebfffea2 	bl	10880 <createLogFile>
   10df4:	ebfffe4b 	bl	10728 <initializeGps>
   10df8:	e3a00001 	mov	r0, #1	; 0x1
   10dfc:	eb001017 	bl	14e60 <enable_gps_rmc_msgs>
   10e00:	e59f38bc 	ldr	r3, [pc, #2236]	; 116c4 <.text+0x16c4>
   10e04:	e3a02401 	mov	r2, #16777216	; 0x1000000
   10e08:	e583201c 	str	r2, [r3, #28]
   10e0c:	e3a00064 	mov	r0, #100	; 0x64
   10e10:	ebfffcdf 	bl	10194 <delay_ms>
   10e14:	eb000eed 	bl	149d0 <SCPinit>
   10e18:	eb000e7d 	bl	14814 <initAccel>
   10e1c:	e3e02000 	mvn	r2, #0	; 0x0
   10e20:	e5123fef 	ldr	r3, [r2, #-4079]
   10e24:	e3833090 	orr	r3, r3, #144	; 0x90
   10e28:	e5023fef 	str	r3, [r2, #-4079]
   10e2c:	ea00021b 	b	116a0 <main+0x8bc>
   10e30:	e59f3890 	ldr	r3, [pc, #2192]	; 116c8 <.text+0x16c8>
   10e34:	e5d33000 	ldrb	r3, [r3]
   10e38:	e3530001 	cmp	r3, #1	; 0x1
   10e3c:	1a000067 	bne	10fe0 <main+0x1fc>
   10e40:	e3e01000 	mvn	r1, #0	; 0x0
   10e44:	e59f3880 	ldr	r3, [pc, #2176]	; 116cc <.text+0x16cc>
   10e48:	e5112feb 	ldr	r2, [r1, #-4075]
   10e4c:	e5934000 	ldr	r4, [r3]
   10e50:	e59f0878 	ldr	r0, [pc, #2168]	; 116d0 <.text+0x16d0>
   10e54:	e59fe878 	ldr	lr, [pc, #2168]	; 116d4 <.text+0x16d4>
   10e58:	e3822090 	orr	r2, r2, #144	; 0x90
   10e5c:	e3a0c000 	mov	ip, #0	; 0x0
   10e60:	e5012feb 	str	r2, [r1, #-4075]
   10e64:	ea000003 	b	10e78 <main+0x94>
   10e68:	e5502001 	ldrb	r2, [r0, #-1]
   10e6c:	e3a03000 	mov	r3, #0	; 0x0
   10e70:	e5403001 	strb	r3, [r0, #-1]
   10e74:	e54e2001 	strb	r2, [lr, #-1]
   10e78:	e15c0004 	cmp	ip, r4
   10e7c:	e2800001 	add	r0, r0, #1	; 0x1
   10e80:	e28cc001 	add	ip, ip, #1	; 0x1
   10e84:	e28ee001 	add	lr, lr, #1	; 0x1
   10e88:	bafffff6 	blt	10e68 <main+0x84>
   10e8c:	e3e01000 	mvn	r1, #0	; 0x0
   10e90:	e5112fef 	ldr	r2, [r1, #-4079]
   10e94:	e59f383c 	ldr	r3, [pc, #2108]	; 116d8 <.text+0x16d8>
   10e98:	e3822090 	orr	r2, r2, #144	; 0x90
   10e9c:	e5935000 	ldr	r5, [r3]
   10ea0:	e59f3834 	ldr	r3, [pc, #2100]	; 116dc <.text+0x16dc>
   10ea4:	e5012fef 	str	r2, [r1, #-4079]
   10ea8:	e3a02001 	mov	r2, #1	; 0x1
   10eac:	e5c32000 	strb	r2, [r3]
   10eb0:	e59f3828 	ldr	r3, [pc, #2088]	; 116e0 <.text+0x16e0>
   10eb4:	e3a00000 	mov	r0, #0	; 0x0
   10eb8:	e5834000 	str	r4, [r3]
   10ebc:	e59fe810 	ldr	lr, [pc, #2064]	; 116d4 <.text+0x16d4>
   10ec0:	e59f3800 	ldr	r3, [pc, #2048]	; 116c8 <.text+0x16c8>
   10ec4:	e1a0c000 	mov	ip, r0
   10ec8:	e5c30000 	strb	r0, [r3]
   10ecc:	ea000002 	b	10edc <main+0xf8>
   10ed0:	e55e3001 	ldrb	r3, [lr, #-1]
   10ed4:	e7cc3002 	strb	r3, [ip, r2]
   10ed8:	e28cc001 	add	ip, ip, #1	; 0x1
   10edc:	e59f3800 	ldr	r3, [pc, #2048]	; 116e4 <.text+0x16e4>
   10ee0:	e15c0004 	cmp	ip, r4
   10ee4:	e0852003 	add	r2, r5, r3
   10ee8:	e28ee001 	add	lr, lr, #1	; 0x1
   10eec:	bafffff7 	blt	10ed0 <main+0xec>
   10ef0:	e085200c 	add	r2, r5, ip
   10ef4:	e59f87dc 	ldr	r8, [pc, #2012]	; 116d8 <.text+0x16d8>
   10ef8:	e3520e19 	cmp	r2, #400	; 0x190
   10efc:	e5882000 	str	r2, [r8]
   10f00:	ba00001e 	blt	10f80 <main+0x19c>
   10f04:	e59f47b8 	ldr	r4, [pc, #1976]	; 116c4 <.text+0x16c4>
   10f08:	e3a05090 	mov	r5, #144	; 0x90
   10f0c:	e3e07000 	mvn	r7, #0	; 0x0
   10f10:	e3a06301 	mov	r6, #67108864	; 0x4000000
   10f14:	e1a01003 	mov	r1, r3
   10f18:	e59f07c8 	ldr	r0, [pc, #1992]	; 116e8 <.text+0x16e8>
   10f1c:	e5075feb 	str	r5, [r7, #-4075]
   10f20:	e5846014 	str	r6, [r4, #20]
   10f24:	ebfffe32 	bl	107f4 <saveData>
   10f28:	e5075fef 	str	r5, [r7, #-4079]
   10f2c:	e584601c 	str	r6, [r4, #28]
   10f30:	e5943004 	ldr	r3, [r4, #4]
   10f34:	e3a05000 	mov	r5, #0	; 0x0
   10f38:	e3833080 	orr	r3, r3, #128	; 0x80
   10f3c:	e5843004 	str	r3, [r4, #4]
   10f40:	e5885000 	str	r5, [r8]
   10f44:	eb000ea1 	bl	149d0 <SCPinit>
   10f48:	e3a0000a 	mov	r0, #10	; 0xa
   10f4c:	ebfffc90 	bl	10194 <delay_ms>
   10f50:	e5981000 	ldr	r1, [r8]
   10f54:	e59f2788 	ldr	r2, [pc, #1928]	; 116e4 <.text+0x16e4>
   10f58:	ea000001 	b	10f64 <main+0x180>
   10f5c:	e3a03000 	mov	r3, #0	; 0x0
   10f60:	e5423001 	strb	r3, [r2, #-1]
   10f64:	e1550001 	cmp	r5, r1
   10f68:	e2822001 	add	r2, r2, #1	; 0x1
   10f6c:	e2855001 	add	r5, r5, #1	; 0x1
   10f70:	bafffff9 	blt	10f5c <main+0x178>
   10f74:	e59f375c 	ldr	r3, [pc, #1884]	; 116d8 <.text+0x16d8>
   10f78:	e3a02000 	mov	r2, #0	; 0x0
   10f7c:	e5832000 	str	r2, [r3]
   10f80:	e59f3764 	ldr	r3, [pc, #1892]	; 116ec <.text+0x16ec>
   10f84:	e5d3e022 	ldrb	lr, [r3, #34]
   10f88:	e5d32024 	ldrb	r2, [r3, #36]
   10f8c:	e5d3c025 	ldrb	ip, [r3, #37]
   10f90:	e5d34020 	ldrb	r4, [r3, #32]
   10f94:	e5d31021 	ldrb	r1, [r3, #33]
   10f98:	e5d30023 	ldrb	r0, [r3, #35]
   10f9c:	e3a0300a 	mov	r3, #10	; 0xa
   10fa0:	e02cc392 	mla	ip, r2, r3, ip
   10fa4:	e020039e 	mla	r0, lr, r3, r0
   10fa8:	e0211394 	mla	r1, r4, r3, r1
   10fac:	e59f273c 	ldr	r2, [pc, #1852]	; 116f0 <.text+0x16f0>
   10fb0:	e3a03002 	mov	r3, #2	; 0x2
   10fb4:	e5823008 	str	r3, [r2, #8]
   10fb8:	e59f3734 	ldr	r3, [pc, #1844]	; 116f4 <.text+0x16f4>
   10fbc:	e3a0e001 	mov	lr, #1	; 0x1
   10fc0:	e2411e21 	sub	r1, r1, #528	; 0x210
   10fc4:	e2400e21 	sub	r0, r0, #528	; 0x210
   10fc8:	e24cce21 	sub	ip, ip, #528	; 0x210
   10fcc:	e5c3e000 	strb	lr, [r3]
   10fd0:	e5821028 	str	r1, [r2, #40]
   10fd4:	e5820024 	str	r0, [r2, #36]
   10fd8:	e582c020 	str	ip, [r2, #32]
   10fdc:	e582e008 	str	lr, [r2, #8]
   10fe0:	e59f3710 	ldr	r3, [pc, #1808]	; 116f8 <.text+0x16f8>
   10fe4:	e5d34000 	ldrb	r4, [r3]
   10fe8:	e3540001 	cmp	r4, #1	; 0x1
   10fec:	1a000055 	bne	11148 <main+0x364>
   10ff0:	e3e02000 	mvn	r2, #0	; 0x0
   10ff4:	e5123feb 	ldr	r3, [r2, #-4075]
   10ff8:	e3833010 	orr	r3, r3, #16	; 0x10
   10ffc:	e5023feb 	str	r3, [r2, #-4075]
   11000:	eb000e44 	bl	14918 <accelX>
   11004:	e59f36f0 	ldr	r3, [pc, #1776]	; 116fc <.text+0x16fc>
   11008:	e5830000 	str	r0, [r3]
   1100c:	eb000e38 	bl	148f4 <accelY>
   11010:	e59f36e8 	ldr	r3, [pc, #1768]	; 11700 <.text+0x1700>
   11014:	e5830000 	str	r0, [r3]
   11018:	eb000e2c 	bl	148d0 <accelZ>
   1101c:	e59f36e0 	ldr	r3, [pc, #1760]	; 11704 <.text+0x1704>
   11020:	e5830000 	str	r0, [r3]
   11024:	e3a00010 	mov	r0, #16	; 0x10
   11028:	ebfffd8e 	bl	10668 <get_adc_1>
   1102c:	e59f36d4 	ldr	r3, [pc, #1748]	; 11708 <.text+0x1708>
   11030:	e0020390 	mul	r2, r0, r3
   11034:	e59fc688 	ldr	ip, [pc, #1672]	; 116c4 <.text+0x16c4>
   11038:	e2823fff 	add	r3, r2, #1020	; 0x3fc
   1103c:	e3520000 	cmp	r2, #0	; 0x0
   11040:	e2833003 	add	r3, r3, #3	; 0x3
   11044:	b1a02003 	movlt	r2, r3
   11048:	e59c3000 	ldr	r3, [ip]
   1104c:	e1a02542 	mov	r2, r2, asr #10
   11050:	e3130b01 	tst	r3, #1024	; 0x400
   11054:	e59f36b0 	ldr	r3, [pc, #1712]	; 1170c <.text+0x170c>
   11058:	e1a02082 	mov	r2, r2, lsl #1
   1105c:	e5832000 	str	r2, [r3]
   11060:	0a000009 	beq	1108c <main+0x2a8>
   11064:	e59c3004 	ldr	r3, [ip, #4]
   11068:	e3833080 	orr	r3, r3, #128	; 0x80
   1106c:	e58c3004 	str	r3, [ip, #4]
   11070:	e3a03301 	mov	r3, #67108864	; 0x4000000
   11074:	e58c301c 	str	r3, [ip, #28]
   11078:	e59f0690 	ldr	r0, [pc, #1680]	; 11710 <.text+0x1710>
   1107c:	e59f1690 	ldr	r1, [pc, #1680]	; 11714 <.text+0x1714>
   11080:	eb000e2d 	bl	1493c <readSCP>
   11084:	e59f368c 	ldr	r3, [pc, #1676]	; 11718 <.text+0x1718>
   11088:	e5c34000 	strb	r4, [r3]
   1108c:	e59f267c 	ldr	r2, [pc, #1660]	; 11710 <.text+0x1710>
   11090:	e59f467c 	ldr	r4, [pc, #1660]	; 11714 <.text+0x1714>
   11094:	e5923000 	ldr	r3, [r2]
   11098:	e5941000 	ldr	r1, [r4]
   1109c:	e1a03123 	mov	r3, r3, lsr #2
   110a0:	e3510000 	cmp	r1, #0	; 0x0
   110a4:	e5823000 	str	r3, [r2]
   110a8:	da00000e 	ble	110e8 <main+0x304>
   110ac:	e3110a02 	tst	r1, #8192	; 0x2000
   110b0:	12613000 	rsbne	r3, r1, #0	; 0x0
   110b4:	15843000 	strne	r3, [r4]
   110b8:	e5940000 	ldr	r0, [r4]
   110bc:	e0800fa0 	add	r0, r0, r0, lsr #31
   110c0:	e1a000c0 	mov	r0, r0, asr #1
   110c4:	eb0030a2 	bl	1d354 <__aeabi_i2d>
   110c8:	e59f264c 	ldr	r2, [pc, #1612]	; 1171c <.text+0x171c>
   110cc:	e59f364c 	ldr	r3, [pc, #1612]	; 11720 <.text+0x1720>
   110d0:	eb0030da 	bl	1d440 <__aeabi_dmul>
   110d4:	e59f2648 	ldr	r2, [pc, #1608]	; 11724 <.text+0x1724>
   110d8:	e3a03000 	mov	r3, #0	; 0x0
   110dc:	eb002fce 	bl	1d01c <__adddf3>
   110e0:	eb00324d 	bl	1da1c <__aeabi_d2iz>
   110e4:	e5840000 	str	r0, [r4]
   110e8:	e59f3638 	ldr	r3, [pc, #1592]	; 11728 <.text+0x1728>
   110ec:	e3a0100a 	mov	r1, #10	; 0xa
   110f0:	e5930000 	ldr	r0, [r3]
   110f4:	eb002f8a 	bl	1cf24 <__modsi3>
   110f8:	e3500000 	cmp	r0, #0	; 0x0
   110fc:	1a000005 	bne	11118 <main+0x334>
   11100:	e59f0624 	ldr	r0, [pc, #1572]	; 1172c <.text+0x172c>
   11104:	e59f1624 	ldr	r1, [pc, #1572]	; 11730 <.text+0x1730>
   11108:	eb000ebb 	bl	14bfc <sht15_read>
   1110c:	e59f3620 	ldr	r3, [pc, #1568]	; 11734 <.text+0x1734>
   11110:	e3a02001 	mov	r2, #1	; 0x1
   11114:	e5c32000 	strb	r2, [r3]
   11118:	e3e00000 	mvn	r0, #0	; 0x0
   1111c:	e59f35d4 	ldr	r3, [pc, #1492]	; 116f8 <.text+0x16f8>
   11120:	e5102fef 	ldr	r2, [r0, #-4079]
   11124:	e3a01000 	mov	r1, #0	; 0x0
   11128:	e3a0c001 	mov	ip, #1	; 0x1
   1112c:	e5c31000 	strb	r1, [r3]
   11130:	e59f3600 	ldr	r3, [pc, #1536]	; 11738 <.text+0x1738>
   11134:	e3822010 	orr	r2, r2, #16	; 0x10
   11138:	e1a0900c 	mov	r9, ip
   1113c:	e5002fef 	str	r2, [r0, #-4079]
   11140:	e5c3c000 	strb	ip, [r3]
   11144:	ea000008 	b	1116c <main+0x388>
   11148:	e59f35e8 	ldr	r3, [pc, #1512]	; 11738 <.text+0x1738>
   1114c:	e5d39000 	ldrb	r9, [r3]
   11150:	e3590000 	cmp	r9, #0	; 0x0
   11154:	1a000004 	bne	1116c <main+0x388>
   11158:	e59f357c 	ldr	r3, [pc, #1404]	; 116dc <.text+0x16dc>
   1115c:	e5d33000 	ldrb	r3, [r3]
   11160:	e3530000 	cmp	r3, #0	; 0x0
   11164:	1a000004 	bne	1117c <main+0x398>
   11168:	ea000125 	b	11604 <main+0x820>
   1116c:	e59f3568 	ldr	r3, [pc, #1384]	; 116dc <.text+0x16dc>
   11170:	e5d33000 	ldrb	r3, [r3]
   11174:	e3530000 	cmp	r3, #0	; 0x0
   11178:	0a000021 	beq	11204 <main+0x420>
   1117c:	e59f2568 	ldr	r2, [pc, #1384]	; 116ec <.text+0x16ec>
   11180:	e5d23046 	ldrb	r3, [r2, #70]
   11184:	e3530041 	cmp	r3, #65	; 0x41
   11188:	1a00001d 	bne	11204 <main+0x420>
   1118c:	e59f35a8 	ldr	r3, [pc, #1448]	; 1173c <.text+0x173c>
   11190:	e5930000 	ldr	r0, [r3]
   11194:	e59f35a4 	ldr	r3, [pc, #1444]	; 11740 <.text+0x1740>
   11198:	e1a01002 	mov	r1, r2
   1119c:	e080c003 	add	ip, r0, r3
   111a0:	e59f359c 	ldr	r3, [pc, #1436]	; 11744 <.text+0x1744>
   111a4:	e5d12034 	ldrb	r2, [r1, #52]
   111a8:	e2811001 	add	r1, r1, #1	; 0x1
   111ac:	e1510003 	cmp	r1, r3
   111b0:	e4cc2001 	strb	r2, [ip], #1
   111b4:	1afffff9 	bne	111a0 <main+0x3bc>
   111b8:	e59f1580 	ldr	r1, [pc, #1408]	; 11740 <.text+0x1740>
   111bc:	e2802006 	add	r2, r0, #6	; 0x6
   111c0:	e3a0302c 	mov	r3, #44	; 0x2c
   111c4:	e7c13002 	strb	r3, [r1, r2]
   111c8:	e59f356c 	ldr	r3, [pc, #1388]	; 1173c <.text+0x173c>
   111cc:	e280c007 	add	ip, r0, #7	; 0x7
   111d0:	e583c000 	str	ip, [r3]
   111d4:	e59f0510 	ldr	r0, [pc, #1296]	; 116ec <.text+0x16ec>
   111d8:	e08c1001 	add	r1, ip, r1
   111dc:	e59f3564 	ldr	r3, [pc, #1380]	; 11748 <.text+0x1748>
   111e0:	e5d02020 	ldrb	r2, [r0, #32]
   111e4:	e2800001 	add	r0, r0, #1	; 0x1
   111e8:	e1500003 	cmp	r0, r3
   111ec:	e4c12001 	strb	r2, [r1], #1
   111f0:	1afffff9 	bne	111dc <main+0x3f8>
   111f4:	e59f3540 	ldr	r3, [pc, #1344]	; 1173c <.text+0x173c>
   111f8:	e28c200a 	add	r2, ip, #10	; 0xa
   111fc:	e5832000 	str	r2, [r3]
   11200:	ea000030 	b	112c8 <main+0x4e4>
   11204:	e59f7530 	ldr	r7, [pc, #1328]	; 1173c <.text+0x173c>
   11208:	e59f34e4 	ldr	r3, [pc, #1252]	; 116f4 <.text+0x16f4>
   1120c:	e5972000 	ldr	r2, [r7]
   11210:	e5d33000 	ldrb	r3, [r3]
   11214:	e59f6524 	ldr	r6, [pc, #1316]	; 11740 <.text+0x1740>
   11218:	e3530000 	cmp	r3, #0	; 0x0
   1121c:	e2824001 	add	r4, r2, #1	; 0x1
   11220:	e3a0302c 	mov	r3, #44	; 0x2c
   11224:	e7c63002 	strb	r3, [r6, r2]
   11228:	e5874000 	str	r4, [r7]
   1122c:	0a000025 	beq	112c8 <main+0x4e4>
   11230:	e59f54b8 	ldr	r5, [pc, #1208]	; 116f0 <.text+0x16f0>
   11234:	e3a0100a 	mov	r1, #10	; 0xa
   11238:	e5950028 	ldr	r0, [r5, #40]
   1123c:	eb002e6e 	bl	1cbfc <__aeabi_uidiv>
   11240:	e2800030 	add	r0, r0, #48	; 0x30
   11244:	e7c60004 	strb	r0, [r6, r4]
   11248:	e3a0100a 	mov	r1, #10	; 0xa
   1124c:	e5950028 	ldr	r0, [r5, #40]
   11250:	eb002eff 	bl	1ce54 <__umodsi3>
   11254:	e2844001 	add	r4, r4, #1	; 0x1
   11258:	e2800030 	add	r0, r0, #48	; 0x30
   1125c:	e7c60004 	strb	r0, [r6, r4]
   11260:	e3a0100a 	mov	r1, #10	; 0xa
   11264:	e5950024 	ldr	r0, [r5, #36]
   11268:	eb002e63 	bl	1cbfc <__aeabi_uidiv>
   1126c:	e2844001 	add	r4, r4, #1	; 0x1
   11270:	e2800030 	add	r0, r0, #48	; 0x30
   11274:	e7c60004 	strb	r0, [r6, r4]
   11278:	e3a0100a 	mov	r1, #10	; 0xa
   1127c:	e5950024 	ldr	r0, [r5, #36]
   11280:	eb002ef3 	bl	1ce54 <__umodsi3>
   11284:	e2844001 	add	r4, r4, #1	; 0x1
   11288:	e2800030 	add	r0, r0, #48	; 0x30
   1128c:	e7c60004 	strb	r0, [r6, r4]
   11290:	e3a0100a 	mov	r1, #10	; 0xa
   11294:	e5950020 	ldr	r0, [r5, #32]
   11298:	eb002e57 	bl	1cbfc <__aeabi_uidiv>
   1129c:	e2844001 	add	r4, r4, #1	; 0x1
   112a0:	e2800030 	add	r0, r0, #48	; 0x30
   112a4:	e7c60004 	strb	r0, [r6, r4]
   112a8:	e3a0100a 	mov	r1, #10	; 0xa
   112ac:	e5950020 	ldr	r0, [r5, #32]
   112b0:	eb002ee7 	bl	1ce54 <__umodsi3>
   112b4:	e2844001 	add	r4, r4, #1	; 0x1
   112b8:	e2800030 	add	r0, r0, #48	; 0x30
   112bc:	e2843001 	add	r3, r4, #1	; 0x1
   112c0:	e7c60004 	strb	r0, [r6, r4]
   112c4:	e5873000 	str	r3, [r7]
   112c8:	e59fa46c 	ldr	sl, [pc, #1132]	; 1173c <.text+0x173c>
   112cc:	e59a3000 	ldr	r3, [sl]
   112d0:	e59f1468 	ldr	r1, [pc, #1128]	; 11740 <.text+0x1740>
   112d4:	e2838001 	add	r8, r3, #1	; 0x1
   112d8:	e3590000 	cmp	r9, #0	; 0x0
   112dc:	e3a0202c 	mov	r2, #44	; 0x2c
   112e0:	e7c12003 	strb	r2, [r1, r3]
   112e4:	e58a8000 	str	r8, [sl]
   112e8:	e0880001 	add	r0, r8, r1
   112ec:	01a0c009 	moveq	ip, r9
   112f0:	0a000012 	beq	11340 <main+0x55c>
   112f4:	e59f7408 	ldr	r7, [pc, #1032]	; 11704 <.text+0x1704>
   112f8:	e59f440c 	ldr	r4, [pc, #1036]	; 1170c <.text+0x170c>
   112fc:	e59f53f8 	ldr	r5, [pc, #1016]	; 116fc <.text+0x16fc>
   11300:	e59f63f8 	ldr	r6, [pc, #1016]	; 11700 <.text+0x1700>
   11304:	e597c000 	ldr	ip, [r7]
   11308:	e594e000 	ldr	lr, [r4]
   1130c:	e5963000 	ldr	r3, [r6]
   11310:	e5952000 	ldr	r2, [r5]
   11314:	e59f1430 	ldr	r1, [pc, #1072]	; 1174c <.text+0x174c>
   11318:	e88d5000 	stmia	sp, {ip, lr}
   1131c:	eb001756 	bl	1707c <sprintf>
   11320:	e3a03000 	mov	r3, #0	; 0x0
   11324:	e0880000 	add	r0, r8, r0
   11328:	e58a0000 	str	r0, [sl]
   1132c:	e5843000 	str	r3, [r4]
   11330:	e5853000 	str	r3, [r5]
   11334:	e5863000 	str	r3, [r6]
   11338:	e5873000 	str	r3, [r7]
   1133c:	ea000007 	b	11360 <main+0x57c>
   11340:	e28cc001 	add	ip, ip, #1	; 0x1
   11344:	e3a0302c 	mov	r3, #44	; 0x2c
   11348:	e35c0004 	cmp	ip, #4	; 0x4
   1134c:	e4c03001 	strb	r3, [r0], #1
   11350:	1afffffa 	bne	11340 <main+0x55c>
   11354:	e59f33e0 	ldr	r3, [pc, #992]	; 1173c <.text+0x173c>
   11358:	e2882004 	add	r2, r8, #4	; 0x4
   1135c:	e5832000 	str	r2, [r3]
   11360:	e59f83b0 	ldr	r8, [pc, #944]	; 11718 <.text+0x1718>
   11364:	e5d83000 	ldrb	r3, [r8]
   11368:	e3530000 	cmp	r3, #0	; 0x0
   1136c:	e59f73c8 	ldr	r7, [pc, #968]	; 1173c <.text+0x173c>
   11370:	e59fc3c8 	ldr	ip, [pc, #968]	; 11740 <.text+0x1740>
   11374:	0a00000e 	beq	113b4 <main+0x5d0>
   11378:	e5974000 	ldr	r4, [r7]
   1137c:	e59f538c 	ldr	r5, [pc, #908]	; 11710 <.text+0x1710>
   11380:	e59f638c 	ldr	r6, [pc, #908]	; 11714 <.text+0x1714>
   11384:	e084000c 	add	r0, r4, ip
   11388:	e5963000 	ldr	r3, [r6]
   1138c:	e59f13bc 	ldr	r1, [pc, #956]	; 11750 <.text+0x1750>
   11390:	e5952000 	ldr	r2, [r5]
   11394:	eb001738 	bl	1707c <sprintf>
   11398:	e3a03000 	mov	r3, #0	; 0x0
   1139c:	e0844000 	add	r4, r4, r0
   113a0:	e5874000 	str	r4, [r7]
   113a4:	e5c83000 	strb	r3, [r8]
   113a8:	e5853000 	str	r3, [r5]
   113ac:	e5863000 	str	r3, [r6]
   113b0:	ea000006 	b	113d0 <main+0x5ec>
   113b4:	e5973000 	ldr	r3, [r7]
   113b8:	e3a0102c 	mov	r1, #44	; 0x2c
   113bc:	e083000c 	add	r0, r3, ip
   113c0:	e2832002 	add	r2, r3, #2	; 0x2
   113c4:	e7cc1003 	strb	r1, [ip, r3]
   113c8:	e5872000 	str	r2, [r7]
   113cc:	e5c01001 	strb	r1, [r0, #1]
   113d0:	e59f835c 	ldr	r8, [pc, #860]	; 11734 <.text+0x1734>
   113d4:	e5d83000 	ldrb	r3, [r8]
   113d8:	e3530000 	cmp	r3, #0	; 0x0
   113dc:	e59f7358 	ldr	r7, [pc, #856]	; 1173c <.text+0x173c>
   113e0:	e59fc358 	ldr	ip, [pc, #856]	; 11740 <.text+0x1740>
   113e4:	0a00000e 	beq	11424 <main+0x640>
   113e8:	e5974000 	ldr	r4, [r7]
   113ec:	e59f5338 	ldr	r5, [pc, #824]	; 1172c <.text+0x172c>
   113f0:	e59f6338 	ldr	r6, [pc, #824]	; 11730 <.text+0x1730>
   113f4:	e084000c 	add	r0, r4, ip
   113f8:	e5963000 	ldr	r3, [r6]
   113fc:	e59f134c 	ldr	r1, [pc, #844]	; 11750 <.text+0x1750>
   11400:	e5952000 	ldr	r2, [r5]
   11404:	eb00171c 	bl	1707c <sprintf>
   11408:	e3a03000 	mov	r3, #0	; 0x0
   1140c:	e0844000 	add	r4, r4, r0
   11410:	e5874000 	str	r4, [r7]
   11414:	e5c83000 	strb	r3, [r8]
   11418:	e5853000 	str	r3, [r5]
   1141c:	e5863000 	str	r3, [r6]
   11420:	ea000006 	b	11440 <main+0x65c>
   11424:	e5973000 	ldr	r3, [r7]
   11428:	e3a0102c 	mov	r1, #44	; 0x2c
   1142c:	e083000c 	add	r0, r3, ip
   11430:	e2832002 	add	r2, r3, #2	; 0x2
   11434:	e7cc1003 	strb	r1, [ip, r3]
   11438:	e5872000 	str	r2, [r7]
   1143c:	e5c01001 	strb	r1, [r0, #1]
   11440:	e59f3294 	ldr	r3, [pc, #660]	; 116dc <.text+0x16dc>
   11444:	e5d33000 	ldrb	r3, [r3]
   11448:	e59f72ec 	ldr	r7, [pc, #748]	; 1173c <.text+0x173c>
   1144c:	e3530000 	cmp	r3, #0	; 0x0
   11450:	e59fc2e8 	ldr	ip, [pc, #744]	; 11740 <.text+0x1740>
   11454:	05972000 	ldreq	r2, [r7]
   11458:	01a01003 	moveq	r1, r3
   1145c:	0082000c 	addeq	r0, r2, ip
   11460:	0a000030 	beq	11528 <main+0x744>
   11464:	e5972000 	ldr	r2, [r7]
   11468:	e59f027c 	ldr	r0, [pc, #636]	; 116ec <.text+0x16ec>
   1146c:	e2821001 	add	r1, r2, #1	; 0x1
   11470:	e5d03046 	ldrb	r3, [r0, #70]
   11474:	e2815001 	add	r5, r1, #1	; 0x1
   11478:	e7cc3002 	strb	r3, [ip, r2]
   1147c:	e5875000 	str	r5, [r7]
   11480:	e3a0302c 	mov	r3, #44	; 0x2c
   11484:	e7cc3001 	strb	r3, [ip, r1]
   11488:	e085100c 	add	r1, r5, ip
   1148c:	e4d02001 	ldrb	r2, [r0], #1
   11490:	e59f32bc 	ldr	r3, [pc, #700]	; 11754 <.text+0x1754>
   11494:	e1500003 	cmp	r0, r3
   11498:	e4c12001 	strb	r2, [r1], #1
   1149c:	1afffffa 	bne	1148c <main+0x6a8>
   114a0:	e59f2298 	ldr	r2, [pc, #664]	; 11740 <.text+0x1740>
   114a4:	e59f4240 	ldr	r4, [pc, #576]	; 116ec <.text+0x16ec>
   114a8:	e3a0c02c 	mov	ip, #44	; 0x2c
   114ac:	e2853009 	add	r3, r5, #9	; 0x9
   114b0:	e7c2c003 	strb	ip, [r2, r3]
   114b4:	e5d4e00f 	ldrb	lr, [r4, #15]
   114b8:	e59f327c 	ldr	r3, [pc, #636]	; 1173c <.text+0x173c>
   114bc:	e285600c 	add	r6, r5, #12	; 0xc
   114c0:	e285100a 	add	r1, r5, #10	; 0xa
   114c4:	e285000b 	add	r0, r5, #11	; 0xb
   114c8:	e7c2e001 	strb	lr, [r2, r1]
   114cc:	e5836000 	str	r6, [r3]
   114d0:	e7c2c000 	strb	ip, [r2, r0]
   114d4:	e0861002 	add	r1, r6, r2
   114d8:	e59f020c 	ldr	r0, [pc, #524]	; 116ec <.text+0x16ec>
   114dc:	e5d42010 	ldrb	r2, [r4, #16]
   114e0:	e280300a 	add	r3, r0, #10	; 0xa
   114e4:	e2844001 	add	r4, r4, #1	; 0x1
   114e8:	e1540003 	cmp	r4, r3
   114ec:	e4c12001 	strb	r2, [r1], #1
   114f0:	1afffff8 	bne	114d8 <main+0x6f4>
   114f4:	e59f2244 	ldr	r2, [pc, #580]	; 11740 <.text+0x1740>
   114f8:	e5d0501f 	ldrb	r5, [r0, #31]
   114fc:	e59f3238 	ldr	r3, [pc, #568]	; 1173c <.text+0x173c>
   11500:	e3a0e02c 	mov	lr, #44	; 0x2c
   11504:	e286400d 	add	r4, r6, #13	; 0xd
   11508:	e286100a 	add	r1, r6, #10	; 0xa
   1150c:	e286000b 	add	r0, r6, #11	; 0xb
   11510:	e286c00c 	add	ip, r6, #12	; 0xc
   11514:	e7c2e001 	strb	lr, [r2, r1]
   11518:	e5834000 	str	r4, [r3]
   1151c:	e7c25000 	strb	r5, [r2, r0]
   11520:	e7c2e00c 	strb	lr, [r2, ip]
   11524:	ea000007 	b	11548 <main+0x764>
   11528:	e2811001 	add	r1, r1, #1	; 0x1
   1152c:	e3a0302c 	mov	r3, #44	; 0x2c
   11530:	e3510006 	cmp	r1, #6	; 0x6
   11534:	e4c03001 	strb	r3, [r0], #1
   11538:	1afffffa 	bne	11528 <main+0x744>
   1153c:	e59f31f8 	ldr	r3, [pc, #504]	; 1173c <.text+0x173c>
   11540:	e2822006 	add	r2, r2, #6	; 0x6
   11544:	e5832000 	str	r2, [r3]
   11548:	e59f81ec 	ldr	r8, [pc, #492]	; 1173c <.text+0x173c>
   1154c:	e5983000 	ldr	r3, [r8]
   11550:	e59f71e8 	ldr	r7, [pc, #488]	; 11740 <.text+0x1740>
   11554:	e2832001 	add	r2, r3, #1	; 0x1
   11558:	e3a0a00a 	mov	sl, #10	; 0xa
   1155c:	e3520e19 	cmp	r2, #400	; 0x190
   11560:	e7c7a003 	strb	sl, [r7, r3]
   11564:	e5882000 	str	r2, [r8]
   11568:	ba000020 	blt	115f0 <main+0x80c>
   1156c:	e3e04000 	mvn	r4, #0	; 0x0
   11570:	e5143feb 	ldr	r3, [r4, #-4075]
   11574:	e59f5148 	ldr	r5, [pc, #328]	; 116c4 <.text+0x16c4>
   11578:	e3833090 	orr	r3, r3, #144	; 0x90
   1157c:	e3a06301 	mov	r6, #67108864	; 0x4000000
   11580:	e1a01007 	mov	r1, r7
   11584:	e59f01cc 	ldr	r0, [pc, #460]	; 11758 <.text+0x1758>
   11588:	e5043feb 	str	r3, [r4, #-4075]
   1158c:	e5856014 	str	r6, [r5, #20]
   11590:	ebfffc97 	bl	107f4 <saveData>
   11594:	e5143fef 	ldr	r3, [r4, #-4079]
   11598:	e3833090 	orr	r3, r3, #144	; 0x90
   1159c:	e5043fef 	str	r3, [r4, #-4079]
   115a0:	e585601c 	str	r6, [r5, #28]
   115a4:	e5953004 	ldr	r3, [r5, #4]
   115a8:	e3833080 	orr	r3, r3, #128	; 0x80
   115ac:	e5853004 	str	r3, [r5, #4]
   115b0:	eb000d06 	bl	149d0 <SCPinit>
   115b4:	e1a0000a 	mov	r0, sl
   115b8:	ebfffaf5 	bl	10194 <delay_ms>
   115bc:	e5980000 	ldr	r0, [r8]
   115c0:	e1a01007 	mov	r1, r7
   115c4:	e3a02000 	mov	r2, #0	; 0x0
   115c8:	ea000001 	b	115d4 <main+0x7f0>
   115cc:	e3a03000 	mov	r3, #0	; 0x0
   115d0:	e5413001 	strb	r3, [r1, #-1]
   115d4:	e1520000 	cmp	r2, r0
   115d8:	e2811001 	add	r1, r1, #1	; 0x1
   115dc:	e2822001 	add	r2, r2, #1	; 0x1
   115e0:	bafffff9 	blt	115cc <main+0x7e8>
   115e4:	e59f3150 	ldr	r3, [pc, #336]	; 1173c <.text+0x173c>
   115e8:	e3a02000 	mov	r2, #0	; 0x0
   115ec:	e5832000 	str	r2, [r3]
   115f0:	e59f2140 	ldr	r2, [pc, #320]	; 11738 <.text+0x1738>
   115f4:	e3a03000 	mov	r3, #0	; 0x0
   115f8:	e5c23000 	strb	r3, [r2]
   115fc:	e59f20d8 	ldr	r2, [pc, #216]	; 116dc <.text+0x16dc>
   11600:	e5c23000 	strb	r3, [r2]
   11604:	e59f60b8 	ldr	r6, [pc, #184]	; 116c4 <.text+0x16c4>
   11608:	e5963000 	ldr	r3, [r6]
   1160c:	e3130502 	tst	r3, #8388608	; 0x800000
   11610:	0a000022 	beq	116a0 <main+0x8bc>
   11614:	e59f513c 	ldr	r5, [pc, #316]	; 11758 <.text+0x1758>
   11618:	e5953000 	ldr	r3, [r5]
   1161c:	e59f2138 	ldr	r2, [pc, #312]	; 1175c <.text+0x175c>
   11620:	e3530000 	cmp	r3, #0	; 0x0
   11624:	e3e03000 	mvn	r3, #0	; 0x0
   11628:	e5032feb 	str	r2, [r3, #-4075]
   1162c:	0a00000a 	beq	1165c <main+0x878>
   11630:	e59f4104 	ldr	r4, [pc, #260]	; 1173c <.text+0x173c>
   11634:	e2833341 	add	r3, r3, #67108865	; 0x4000001
   11638:	e5863014 	str	r3, [r6, #20]
   1163c:	e1a00005 	mov	r0, r5
   11640:	e59f10f8 	ldr	r1, [pc, #248]	; 11740 <.text+0x1740>
   11644:	e5942000 	ldr	r2, [r4]
   11648:	ebfffc69 	bl	107f4 <saveData>
   1164c:	e5950000 	ldr	r0, [r5]
   11650:	eb000a70 	bl	14018 <fat16_close_file>
   11654:	e3a03000 	mov	r3, #0	; 0x0
   11658:	e5843000 	str	r3, [r4]
   1165c:	e59f5084 	ldr	r5, [pc, #132]	; 116e8 <.text+0x16e8>
   11660:	e5953000 	ldr	r3, [r5]
   11664:	e3530000 	cmp	r3, #0	; 0x0
   11668:	0a00000a 	beq	11698 <main+0x8b4>
   1166c:	e59f4064 	ldr	r4, [pc, #100]	; 116d8 <.text+0x16d8>
   11670:	e3a03301 	mov	r3, #67108864	; 0x4000000
   11674:	e5863014 	str	r3, [r6, #20]
   11678:	e1a00005 	mov	r0, r5
   1167c:	e59f1060 	ldr	r1, [pc, #96]	; 116e4 <.text+0x16e4>
   11680:	e5942000 	ldr	r2, [r4]
   11684:	ebfffc5a 	bl	107f4 <saveData>
   11688:	e5950000 	ldr	r0, [r5]
   1168c:	eb000a61 	bl	14018 <fat16_close_file>
   11690:	e3a03000 	mov	r3, #0	; 0x0
   11694:	e5843000 	str	r3, [r4]
   11698:	eb000e17 	bl	14efc <main_msc>
   1169c:	ebfffc05 	bl	106b8 <reset>
   116a0:	e59f3080 	ldr	r3, [pc, #128]	; 11728 <.text+0x1728>
   116a4:	e5932000 	ldr	r2, [r3]
   116a8:	e59f30b0 	ldr	r3, [pc, #176]	; 11760 <.text+0x1760>
   116ac:	e1520003 	cmp	r2, r3
   116b0:	dafffdde 	ble	10e30 <main+0x4c>
   116b4:	e3a00019 	mov	r0, #25	; 0x19
   116b8:	ebfffce4 	bl	10a50 <goToSleep>
   116bc:	ebfffca9 	bl	10968 <wakeUp>
   116c0:	eafffff6 	b	116a0 <main+0x8bc>
   116c4:	e0028000 	and	r8, r2, r0
   116c8:	4000089c 	mulmi	r0, ip, r8
   116cc:	400008a4 	andmi	r0, r0, r4, lsr #17
   116d0:	40001494 	mulmi	r0, r4, r4
   116d4:	400014e9 	andmi	r1, r0, r9, ror #9
   116d8:	400008ac 	andmi	r0, r0, ip, lsr #17
   116dc:	4000089d 	mulmi	r0, sp, r8
   116e0:	400008a8 	andmi	r0, r0, r8, lsr #17
   116e4:	40001080 	andmi	r1, r0, r0, lsl #1
   116e8:	40001078 	andmi	r1, r0, r8, ror r0
   116ec:	4000100c 	andmi	r1, r0, ip
   116f0:	e0024000 	and	r4, r2, r0
   116f4:	40001480 	andmi	r1, r0, r0, lsl #9
   116f8:	40000df8 	strmid	r0, [r0], -r8
   116fc:	40001488 	andmi	r1, r0, r8, lsl #9
   11700:	40001008 	andmi	r1, r0, r8
   11704:	40001484 	andmi	r1, r0, r4, lsl #9
   11708:	00000ce4 	andeq	r0, r0, r4, ror #25
   1170c:	40000dfc 	strmid	r0, [r0], -ip
   11710:	40000df4 	strmid	r0, [r0], -r4
   11714:	40000dec 	andmi	r0, r0, ip, ror #27
   11718:	40000e00 	andmi	r0, r0, r0, lsl #28
   1171c:	3ffccccc 	svccc	0x00fccccc
   11720:	cccccccd 	stcgtl	12, cr12, [ip], {205}
   11724:	40740000 	rsbmis	r0, r4, r0
   11728:	400014e4 	andmi	r1, r0, r4, ror #9
   1172c:	40001490 	mulmi	r0, r0, r4
   11730:	40000df0 	strmid	r0, [r0], -r0
   11734:	40001074 	andmi	r1, r0, r4, ror r0
   11738:	4000148c 	andmi	r1, r0, ip, lsl #9
   1173c:	40000de8 	andmi	r0, r0, r8, ror #27
   11740:	40000e08 	andmi	r0, r0, r8, lsl #28
   11744:	40001012 	andmi	r1, r0, r2, lsl r0
   11748:	40001016 	andmi	r1, r0, r6, lsl r0
   1174c:	0001de18 	andeq	sp, r1, r8, lsl lr
   11750:	0001de28 	andeq	sp, r1, r8, lsr #28
   11754:	40001015 	andmi	r1, r0, r5, lsl r0
   11758:	4000107c 	andmi	r1, r0, ip, ror r0
   1175c:	00012090 	muleq	r1, r0, r0
   11760:	00000bb7 	streqh	r0, [r0], -r7

00011764 <_read_r>:
	}
*/
//	return len - i;
	return 0;
}
   11764:	e3a00000 	mov	r0, #0	; 0x0
   11768:	e12fff1e 	bx	lr

0001176c <_write_r>:

_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
/*
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) uart0Putch('\r');
		uart0Putch(*p++);
	}
*/
	return len;
}
   1176c:	e1a00003 	mov	r0, r3
   11770:	e12fff1e 	bx	lr

00011774 <_close_r>:

int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
   11774:	e3a00000 	mov	r0, #0	; 0x0
   11778:	e12fff1e 	bx	lr

0001177c <_lseek_r>:

_off_t _lseek_r(
    struct _reent *r, 
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
   1177c:	e3a00000 	mov	r0, #0	; 0x0
   11780:	e12fff1e 	bx	lr

00011784 <_fstat_r>:


int _fstat_r(
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
   11784:	e3a03a02 	mov	r3, #8192	; 0x2000
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
   11788:	e3a00000 	mov	r0, #0	; 0x0
   1178c:	e5823004 	str	r3, [r2, #4]
   11790:	e12fff1e 	bx	lr

00011794 <isatty>:

int isatty(int file); /* avoid warning */

int isatty(int file)
{
	return 1;
}
   11794:	e3a00001 	mov	r0, #1	; 0x1
   11798:	e12fff1e 	bx	lr

0001179c <_sbrk_r>:

#if 0
static void _exit (int n) {
label:  goto label; /* endless loop */
}
#endif 

/* "malloc clue function" */

	/**** Locally used variables. ****/
extern char end[];              /*  end is set in the linker command 	*/
				/* file and is the end of statically 	*/
				/* allocated data (thus start of heap).	*/

static char *heap_ptr;		/* Points to current end of the heap.	*/

/************************** _sbrk_r *************************************/
/*  Support function.  Adjusts end of heap to provide more memory to	*/
/* memory allocator. Simple and dumb with no sanity checks.		*/
/*  struct _reent *r	-- re-entrancy structure, used by newlib to 	*/
/*			support multiple threads of operation.		*/
/*  ptrdiff_t nbytes	-- number of bytes to add.			*/
/*  Returns pointer to start of new heap area.				*/
/*  Note:  This implementation is not thread safe (despite taking a	*/
/* _reent structure as a parameter).  					*/
/*  Since _s_r is not used in the current implementation, the following	*/
/* messages must be suppressed.						*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
   1179c:	e59f201c 	ldr	r2, [pc, #28]	; 117c0 <.text+0x17c0>
   117a0:	e5923000 	ldr	r3, [r2]
   117a4:	e3530000 	cmp	r3, #0	; 0x0
		heap_ptr = end;
   117a8:	059f3014 	ldreq	r3, [pc, #20]	; 117c4 <.text+0x17c4>
   117ac:	05823000 	streq	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
   117b0:	e5920000 	ldr	r0, [r2]
	heap_ptr += nbytes;	/*  Increase heap.				*/
   117b4:	e0803001 	add	r3, r0, r1
   117b8:	e5823000 	str	r3, [r2]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
   117bc:	e12fff1e 	bx	lr
   117c0:	400008b8 	strmih	r0, [r0], -r8
   117c4:	40002300 	andmi	r2, r0, r0, lsl #6

000117c8 <rprintf_devopen>:
static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
    putcharfunc = put;
   117c8:	e59f3004 	ldr	r3, [pc, #4]	; 117d4 <.text+0x17d4>
   117cc:	e5830000 	str	r0, [r3]
}
   117d0:	e12fff1e 	bx	lr
   117d4:	400008bc 	strmih	r0, [r0], -ip

000117d8 <myputchar>:

static void myputchar(unsigned char c)
{
   117d8:	e92d4010 	stmdb	sp!, {r4, lr}
   117dc:	e20040ff 	and	r4, r0, #255	; 0xff
    if(c == '\n') putcharfunc('\r');
   117e0:	e354000a 	cmp	r4, #10	; 0xa
   117e4:	e3a0000d 	mov	r0, #13	; 0xd
   117e8:	059f3024 	ldreq	r3, [pc, #36]	; 11814 <.text+0x1814>
   117ec:	0593c000 	ldreq	ip, [r3]
   117f0:	01a0e00f 	moveq	lr, pc
   117f4:	012fff1c 	bxeq	ip
    putcharfunc(c);
   117f8:	e1a00004 	mov	r0, r4
   117fc:	e59f3010 	ldr	r3, [pc, #16]	; 11814 <.text+0x1814>
   11800:	e593c000 	ldr	ip, [r3]
   11804:	e1a0e00f 	mov	lr, pc
   11808:	e12fff1c 	bx	ip
}
   1180c:	e8bd4010 	ldmia	sp!, {r4, lr}
   11810:	e12fff1e 	bx	lr
   11814:	400008bc 	strmih	r0, [r0], -ip

00011818 <rprintf>:

void rprintf(char const *format, ...)
{
   11818:	e92d000f 	stmdb	sp!, {r0, r1, r2, r3}
   1181c:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   11820:	e24dd010 	sub	sp, sp, #16	; 0x10
    unsigned char scratch[SCRATCH];
    unsigned char format_flag;
    unsigned short base;
    unsigned char *ptr;
    unsigned char issigned=0;
    va_list ap;

    #ifdef USE_LONG
        // #warning "use long"
        unsigned char islong=0;
        unsigned long u_val=0;
        long s_val=0;
    #else
        unsigned int u_val=0;
        int s_val=0;
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   11824:	e28d3030 	add	r3, sp, #48	; 0x30
   11828:	e58d300c 	str	r3, [sp, #12]
   1182c:	e59d502c 	ldr	r5, [sp, #44]
    for (;;)
    {
		delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
   11830:	e3a00001 	mov	r0, #1	; 0x1
   11834:	ebfffa56 	bl	10194 <delay_ms>
   11838:	ea000002 	b	11848 <rprintf+0x30>
		
        while ((format_flag = *(format++)) != '%')
        {      // Until '%' or '\0'
            if (!format_flag){va_end (ap); return;}
   1183c:	e3530000 	cmp	r3, #0	; 0x0
   11840:	0a00008e 	beq	11a80 <rprintf+0x268>
                myputchar(format_flag);
   11844:	ebffffe3 	bl	117d8 <myputchar>
   11848:	e4d53001 	ldrb	r3, [r5], #1
   1184c:	e3530025 	cmp	r3, #37	; 0x25
   11850:	e1a00003 	mov	r0, r3
   11854:	1afffff8 	bne	1183c <rprintf+0x24>
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   11858:	e4d52001 	ldrb	r2, [r5], #1

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   1185c:	e3520020 	cmp	r2, #32	; 0x20
   11860:	13520030 	cmpne	r2, #48	; 0x30
   11864:	13a03000 	movne	r3, #0	; 0x0
   11868:	03a03001 	moveq	r3, #1	; 0x1
   1186c:	11a07003 	movne	r7, r3
   11870:	11a00002 	movne	r0, r2
   11874:	11a0a007 	movne	sl, r7
   11878:	1a000007 	bne	1189c <rprintf+0x84>
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   1187c:	e4d50001 	ldrb	r0, [r5], #1
                if(format_flag>='0' && format_flag<='9')
   11880:	e2403030 	sub	r3, r0, #48	; 0x30
   11884:	e20370ff 	and	r7, r3, #255	; 0xff
   11888:	e3570009 	cmp	r7, #9	; 0x9
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   1188c:	94d50001 	ldrlsb	r0, [r5], #1
   11890:	81a0a002 	movhi	sl, r2
   11894:	83a07000 	movhi	r7, #0	; 0x0
   11898:	91a0a002 	movls	sl, r2
                }
            }
        #endif

        #ifdef USE_LONG
            islong=0; //default int value
            #ifdef USE_UPPER
            if(format_flag=='l' || format_flag=='L') //Long value
   1189c:	e350004c 	cmp	r0, #76	; 0x4c
   118a0:	1350006c 	cmpne	r0, #108	; 0x6c
            #else
            if(format_flag=='l') //Long value
            #endif
        {
            islong=1;
            format_flag = *format++; //get char after 'l' or 'L'
   118a4:	04d50001 	ldreqb	r0, [r5], #1
   118a8:	13a03000 	movne	r3, #0	; 0x0
   118ac:	03a03001 	moveq	r3, #1	; 0x1
   118b0:	03a03001 	moveq	r3, #1	; 0x1
        }
        #endif

        switch (format_flag)
   118b4:	e3500058 	cmp	r0, #88	; 0x58
   118b8:	0a00003e 	beq	119b8 <rprintf+0x1a0>
   118bc:	8a00000b 	bhi	118f0 <rprintf+0xd8>
   118c0:	e3500049 	cmp	r0, #73	; 0x49
   118c4:	0a00006a 	beq	11a74 <rprintf+0x25c>
   118c8:	8a000003 	bhi	118dc <rprintf+0xc4>
   118cc:	e3500043 	cmp	r0, #67	; 0x43
   118d0:	0a000015 	beq	1192c <rprintf+0x114>
   118d4:	e3500044 	cmp	r0, #68	; 0x44
   118d8:	ea00000a 	b	11908 <rprintf+0xf0>
   118dc:	e3500053 	cmp	r0, #83	; 0x53
   118e0:	0a000017 	beq	11944 <rprintf+0x12c>
   118e4:	e3500055 	cmp	r0, #85	; 0x55
   118e8:	1a000013 	bne	1193c <rprintf+0x124>
   118ec:	ea000020 	b	11974 <rprintf+0x15c>
   118f0:	e3500069 	cmp	r0, #105	; 0x69
   118f4:	0a00005e 	beq	11a74 <rprintf+0x25c>
   118f8:	8a000004 	bhi	11910 <rprintf+0xf8>
   118fc:	e3500063 	cmp	r0, #99	; 0x63
   11900:	0a000009 	beq	1192c <rprintf+0x114>
   11904:	e3500064 	cmp	r0, #100	; 0x64
   11908:	1a00000b 	bne	1193c <rprintf+0x124>
   1190c:	ea000058 	b	11a74 <rprintf+0x25c>
   11910:	e3500075 	cmp	r0, #117	; 0x75
   11914:	0a000016 	beq	11974 <rprintf+0x15c>
   11918:	e3500078 	cmp	r0, #120	; 0x78
   1191c:	0a000025 	beq	119b8 <rprintf+0x1a0>
   11920:	e3500073 	cmp	r0, #115	; 0x73
   11924:	1a000004 	bne	1193c <rprintf+0x124>
   11928:	ea000005 	b	11944 <rprintf+0x12c>
        {
            #ifdef USE_CHAR
                case 'c':
                    #ifdef USE_UPPER
                    case 'C':
                #endif
                format_flag = va_arg(ap,int);
   1192c:	e59d200c 	ldr	r2, [sp, #12]
   11930:	e2823004 	add	r3, r2, #4	; 0x4
   11934:	e58d300c 	str	r3, [sp, #12]
   11938:	e5d20000 	ldrb	r0, [r2]
                // no break -> run into default
            #endif

            default:
                myputchar(format_flag);
   1193c:	ebffffa5 	bl	117d8 <myputchar>
   11940:	eaffffba 	b	11830 <rprintf+0x18>
                continue;

                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   11944:	e59d300c 	ldr	r3, [sp, #12]
   11948:	e5936000 	ldr	r6, [r3]
   1194c:	e3a04000 	mov	r4, #0	; 0x0
   11950:	e2833004 	add	r3, r3, #4	; 0x4
   11954:	e58d300c 	str	r3, [sp, #12]
   11958:	ea000000 	b	11960 <rprintf+0x148>
                while(*ptr) { myputchar(*ptr); ptr++; }
   1195c:	ebffff9d 	bl	117d8 <myputchar>
   11960:	e7d43006 	ldrb	r3, [r4, r6]
   11964:	e2530000 	subs	r0, r3, #0	; 0x0
   11968:	e2844001 	add	r4, r4, #1	; 0x1
   1196c:	1afffffa 	bne	1195c <rprintf+0x144>
   11970:	eaffffae 	b	11830 <rprintf+0x18>
                    continue;
                #endif

                #ifdef USE_OCTAL
                    case 'o':
                    #ifdef USE_UPPER
                    case 'O':
                #endif
                base = 8;
                myputchar('0');
                goto CONVERSION_LOOP;
                #endif

                #ifdef USE_INTEGER //don't use %i, is same as %d
                    case 'i':
                    #ifdef USE_UPPER
                    case 'I':
                #endif
                #endif
                case 'd':
                #ifdef USE_UPPER
                    case 'D':
                #endif
                issigned=1;
                // no break -> run into next case
            case 'u':
                #ifdef USE_UPPER
                    case 'U':
                #endif

                //don't insert some case below this if USE_HEX is undefined !
                //or put       goto CONVERSION_LOOP;  before next case.
                #ifdef USE_HEX
                    goto CONVERSION_LOOP;
                    case 'x':
                    #ifdef USE_UPPER
                    case 'X':
                #endif
                base = 16;
                #endif

                CONVERSION_LOOP:
   11974:	e3a0800a 	mov	r8, #10	; 0xa
   11978:	ea00000f 	b	119bc <rprintf+0x1a4>

                if(issigned) //Signed types
                {
                    #ifdef USE_LONG
                        if(islong) { s_val = va_arg(ap,long); }
   1197c:	e59d300c 	ldr	r3, [sp, #12]
   11980:	e5934000 	ldr	r4, [r3]
   11984:	e2833004 	add	r3, r3, #4	; 0x4
   11988:	e58d300c 	str	r3, [sp, #12]
   1198c:	ea000003 	b	119a0 <rprintf+0x188>
                            else { s_val = va_arg(ap,int); }
   11990:	e59d200c 	ldr	r2, [sp, #12]
   11994:	e2823004 	add	r3, r2, #4	; 0x4
   11998:	e58d300c 	str	r3, [sp, #12]
   1199c:	e5924000 	ldr	r4, [r2]
                        #else
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
   119a0:	e3540000 	cmp	r4, #0	; 0x0
                    {
                        s_val = - s_val; //Make it positiv
                        myputchar('-');    //Output sign
   119a4:	b3a0002d 	movlt	r0, #45	; 0x2d
   119a8:	b2644000 	rsblt	r4, r4, #0	; 0x0
   119ac:	bbffff89 	bllt	117d8 <myputchar>
                    }

                    u_val = (unsigned long)s_val;
   119b0:	e3a0800a 	mov	r8, #10	; 0xa
   119b4:	ea000008 	b	119dc <rprintf+0x1c4>
   119b8:	e3a08010 	mov	r8, #16	; 0x10
   119bc:	e59d200c 	ldr	r2, [sp, #12]
                }
                else //Unsigned types
                {
                    #ifdef USE_LONG
                        if(islong) { u_val = va_arg(ap,unsigned long); }
   119c0:	e3530000 	cmp	r3, #0	; 0x0
   119c4:	12823004 	addne	r3, r2, #4	; 0x4
                            else { u_val = va_arg(ap,unsigned int); }
   119c8:	02823004 	addeq	r3, r2, #4	; 0x4
   119cc:	15924000 	ldrne	r4, [r2]
   119d0:	158d300c 	strne	r3, [sp, #12]
   119d4:	058d300c 	streq	r3, [sp, #12]
   119d8:	05924000 	ldreq	r4, [r2]
                        #else
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   119dc:	e3a03000 	mov	r3, #0	; 0x0
   119e0:	e5cd300b 	strb	r3, [sp, #11]
   119e4:	e28d600b 	add	r6, sp, #11	; 0xb
                do
                {
                    char ch = u_val % base + '0';
   119e8:	e1a00004 	mov	r0, r4
   119ec:	e1a01008 	mov	r1, r8
   119f0:	eb002d17 	bl	1ce54 <__umodsi3>
   119f4:	e2800030 	add	r0, r0, #48	; 0x30
   119f8:	e20030ff 	and	r3, r0, #255	; 0xff
                    #ifdef USE_HEX
                        if (ch > '9')
   119fc:	e3530039 	cmp	r3, #57	; 0x39
                        {
                            ch += 'a' - '9' - 1;
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
   11a00:	e2832007 	add	r2, r3, #7	; 0x7
   11a04:	820230ff 	andhi	r3, r2, #255	; 0xff
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   11a08:	e5463001 	strb	r3, [r6, #-1]
                    u_val /= base;
   11a0c:	e1a00004 	mov	r0, r4
   11a10:	e1a01008 	mov	r1, r8
   11a14:	eb002c78 	bl	1cbfc <__aeabi_uidiv>

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   11a18:	e3570000 	cmp	r7, #0	; 0x0
   11a1c:	e2473001 	sub	r3, r7, #1	; 0x1
   11a20:	120370ff 	andne	r7, r3, #255	; 0xff
                    #endif
                }
                while (u_val);
   11a24:	e3500000 	cmp	r0, #0	; 0x0
   11a28:	e2466001 	sub	r6, r6, #1	; 0x1
   11a2c:	e1a04000 	mov	r4, r0
   11a30:	1affffec 	bne	119e8 <rprintf+0x1d0>
   11a34:	e1a01007 	mov	r1, r7
   11a38:	e1a02006 	mov	r2, r6
   11a3c:	ea000000 	b	11a44 <rprintf+0x22c>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
   11a40:	e562a001 	strb	sl, [r2, #-1]!
   11a44:	e2473001 	sub	r3, r7, #1	; 0x1
   11a48:	e20370ff 	and	r7, r3, #255	; 0xff
   11a4c:	e35700ff 	cmp	r7, #255	; 0xff
   11a50:	1afffffa 	bne	11a40 <rprintf+0x228>
   11a54:	e0614006 	rsb	r4, r1, r6
   11a58:	ea000000 	b	11a60 <rprintf+0x248>
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
   11a5c:	ebffff5d 	bl	117d8 <myputchar>
   11a60:	e5d43000 	ldrb	r3, [r4]
   11a64:	e2530000 	subs	r0, r3, #0	; 0x0
   11a68:	e2844001 	add	r4, r4, #1	; 0x1
   11a6c:	1afffffa 	bne	11a5c <rprintf+0x244>
   11a70:	eaffff6e 	b	11830 <rprintf+0x18>
   11a74:	e3530000 	cmp	r3, #0	; 0x0
   11a78:	1affffbf 	bne	1197c <rprintf+0x164>
   11a7c:	eaffffc3 	b	11990 <rprintf+0x178>
                    }
        }
    }
   11a80:	e28dd010 	add	sp, sp, #16	; 0x10
   11a84:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   11a88:	e28dd010 	add	sp, sp, #16	; 0x10
   11a8c:	e12fff1e 	bx	lr

00011a90 <init_serial0>:
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= 0x00000005;                  /* Enable RxD0 and TxD0              */
   11a90:	e59f2044 	ldr	r2, [pc, #68]	; 11adc <.text+0x1adc>
   11a94:	e5923000 	ldr	r3, [r2]
   11a98:	e92d4010 	stmdb	sp!, {r4, lr}
   11a9c:	e3833005 	orr	r3, r3, #5	; 0x5
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   11aa0:	e59f4038 	ldr	r4, [pc, #56]	; 11ae0 <.text+0x1ae0>
   11aa4:	e5823000 	str	r3, [r2]
   11aa8:	e3a03083 	mov	r3, #131	; 0x83
   11aac:	e1a01000 	mov	r1, r0
   11ab0:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   11ab4:	e59f0028 	ldr	r0, [pc, #40]	; 11ae4 <.text+0x1ae4>
   11ab8:	eb002c4f 	bl	1cbfc <__aeabi_uidiv>
	U0DLM = Fdiv / 256;
    U0DLL = Fdiv % 256;
   11abc:	e20030ff 	and	r3, r0, #255	; 0xff
   11ac0:	e1a00420 	mov	r0, r0, lsr #8
   11ac4:	e5840004 	str	r0, [r4, #4]
   11ac8:	e5843000 	str	r3, [r4]
    U0LCR = 0x03;                           /* DLAB = 0                         */
   11acc:	e3a03003 	mov	r3, #3	; 0x3
   11ad0:	e584300c 	str	r3, [r4, #12]
}
   11ad4:	e8bd4010 	ldmia	sp!, {r4, lr}
   11ad8:	e12fff1e 	bx	lr
   11adc:	e002c000 	and	ip, r2, r0
   11ae0:	e000c000 	and	ip, r0, r0
   11ae4:	00393870 	eoreqs	r3, r9, r0, ror r8

00011ae8 <init_serial1>:

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   11ae8:	e59f2044 	ldr	r2, [pc, #68]	; 11b34 <.text+0x1b34>
   11aec:	e5923000 	ldr	r3, [r2]
   11af0:	e92d4010 	stmdb	sp!, {r4, lr}
   11af4:	e3833805 	orr	r3, r3, #327680	; 0x50000
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   11af8:	e59f4038 	ldr	r4, [pc, #56]	; 11b38 <.text+0x1b38>
   11afc:	e5823000 	str	r3, [r2]
   11b00:	e3a03083 	mov	r3, #131	; 0x83
   11b04:	e1a01000 	mov	r1, r0
   11b08:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   11b0c:	e59f0028 	ldr	r0, [pc, #40]	; 11b3c <.text+0x1b3c>
   11b10:	eb002c39 	bl	1cbfc <__aeabi_uidiv>
    U1DLM = Fdiv / 256;
    U1DLL = Fdiv % 256;
   11b14:	e20030ff 	and	r3, r0, #255	; 0xff
   11b18:	e1a00420 	mov	r0, r0, lsr #8
   11b1c:	e5840004 	str	r0, [r4, #4]
   11b20:	e5843000 	str	r3, [r4]
    U1LCR = 0x03;                           /* DLAB = 0                         */
   11b24:	e3a03003 	mov	r3, #3	; 0x3
   11b28:	e584300c 	str	r3, [r4, #12]
}
   11b2c:	e8bd4010 	ldmia	sp!, {r4, lr}
   11b30:	e12fff1e 	bx	lr
   11b34:	e002c000 	and	ip, r2, r0
   11b38:	e0010000 	and	r0, r1, r0
   11b3c:	00393870 	eoreqs	r3, r9, r0, ror r8

00011b40 <putchar_serial0>:

/* Write character to Serial Port 0 with \n -> \r\n  */
int putchar_serial0 (int ch)
{
    if (ch == '\n')
   11b40:	e350000a 	cmp	r0, #10	; 0xa
   11b44:	1a000005 	bne	11b60 <putchar_serial0+0x20>
    {
        while (!(U0LSR & 0x20));
   11b48:	e59f202c 	ldr	r2, [pc, #44]	; 11b7c <.text+0x1b7c>
   11b4c:	e5923014 	ldr	r3, [r2, #20]
   11b50:	e3130020 	tst	r3, #32	; 0x20
   11b54:	0afffffb 	beq	11b48 <putchar_serial0+0x8>
        U0THR = CR;                  /* output CR */
   11b58:	e3a0300d 	mov	r3, #13	; 0xd
   11b5c:	e5823000 	str	r3, [r2]
    }
    while (!(U0LSR & 0x20));
   11b60:	e59f2014 	ldr	r2, [pc, #20]	; 11b7c <.text+0x1b7c>
   11b64:	e5923014 	ldr	r3, [r2, #20]
   11b68:	e3130020 	tst	r3, #32	; 0x20
   11b6c:	0afffffb 	beq	11b60 <putchar_serial0+0x20>
    return (U0THR = ch);
   11b70:	e5820000 	str	r0, [r2]
   11b74:	e5920000 	ldr	r0, [r2]
}
   11b78:	e12fff1e 	bx	lr
   11b7c:	e000c000 	and	ip, r0, r0

00011b80 <putc_serial0>:

/* Write character to Serial Port 0 without \n -> \r\n  */
int putc_serial0 (int ch)
{
    while (!(U0LSR & 0x20));
   11b80:	e59f2014 	ldr	r2, [pc, #20]	; 11b9c <.text+0x1b9c>
   11b84:	e5923014 	ldr	r3, [r2, #20]
   11b88:	e3130020 	tst	r3, #32	; 0x20
   11b8c:	0afffffb 	beq	11b80 <putc_serial0>
    return (U0THR = ch);
   11b90:	e5820000 	str	r0, [r2]
   11b94:	e5920000 	ldr	r0, [r2]
}
   11b98:	e12fff1e 	bx	lr
   11b9c:	e000c000 	and	ip, r0, r0

00011ba0 <putc_serial1>:

/* Write character to Serial Port 1 without \n -> \r\n  */
int putc_serial1 (int ch)
{
    while (!(U1LSR & 0x20));
   11ba0:	e59f2014 	ldr	r2, [pc, #20]	; 11bbc <.text+0x1bbc>
   11ba4:	e5923014 	ldr	r3, [r2, #20]
   11ba8:	e3130020 	tst	r3, #32	; 0x20
   11bac:	0afffffb 	beq	11ba0 <putc_serial1>
    return (U1THR = ch);
   11bb0:	e5820000 	str	r0, [r2]
   11bb4:	e5920000 	ldr	r0, [r2]
}
   11bb8:	e12fff1e 	bx	lr
   11bbc:	e0010000 	and	r0, r1, r0

00011bc0 <putstring_serial0>:

void putstring_serial0 (const char *string)
{
   11bc0:	e92d4010 	stmdb	sp!, {r4, lr}
   11bc4:	e1a04000 	mov	r4, r0
   11bc8:	ea000000 	b	11bd0 <putstring_serial0+0x10>
    char ch;

    while ((ch = *string))
    {
        putchar_serial0(ch);
   11bcc:	ebffffdb 	bl	11b40 <putchar_serial0>
   11bd0:	e5d43000 	ldrb	r3, [r4]
   11bd4:	e2530000 	subs	r0, r3, #0	; 0x0
        string++;
   11bd8:	e2844001 	add	r4, r4, #1	; 0x1
   11bdc:	1afffffa 	bne	11bcc <putstring_serial0+0xc>
    }
}
   11be0:	e8bd4010 	ldmia	sp!, {r4, lr}
   11be4:	e12fff1e 	bx	lr

00011be8 <getkey_serial0>:


/* Read character from Serial Port   */
int getkey_serial0 (void)
{
	if (U0LSR & 0x01)
   11be8:	e59f2010 	ldr	r2, [pc, #16]	; 11c00 <.text+0x1c00>
   11bec:	e5923014 	ldr	r3, [r2, #20]
   11bf0:	e2133001 	ands	r3, r3, #1	; 0x1
   11bf4:	e1a00003 	mov	r0, r3
    {
        return (U0RBR);
   11bf8:	15920000 	ldrne	r0, [r2]
    }
    else
    {
        return 0;
    }
}
   11bfc:	e12fff1e 	bx	lr
   11c00:	e000c000 	and	ip, r0, r0

00011c04 <getc0>:

/* Read character from Serial Port   */
int getc0 (void)
{
	while ( (U0LSR & 0x01) == 0 ); //Wait for character
   11c04:	e59f2010 	ldr	r2, [pc, #16]	; 11c1c <.text+0x1c1c>
   11c08:	e5923014 	ldr	r3, [r2, #20]
   11c0c:	e3130001 	tst	r3, #1	; 0x1
   11c10:	0afffffb 	beq	11c04 <getc0>
	return U0RBR;
   11c14:	e5920000 	ldr	r0, [r2]
}
   11c18:	e12fff1e 	bx	lr
   11c1c:	e000c000 	and	ip, r0, r0

00011c20 <getc1>:

/* Read character from Serial Port   */
int getc1 (void)
{
	while ( (U1LSR & 0x01) == 0 ); //Wait for character
   11c20:	e59f2010 	ldr	r2, [pc, #16]	; 11c38 <.text+0x1c38>
   11c24:	e5923014 	ldr	r3, [r2, #20]
   11c28:	e3130001 	tst	r3, #1	; 0x1
   11c2c:	0afffffb 	beq	11c20 <getc1>
	return U1RBR;
   11c30:	e5920000 	ldr	r0, [r2]
}
   11c34:	e12fff1e 	bx	lr
   11c38:	e0010000 	and	r0, r1, r0

00011c3c <SPI0_Init>:
#include <stdio.h>

void SPI0_Init(void)		//This function needs to go in bootup() of Main.c
{	
	PINSEL0 = (PINSEL0 & ~(3 << 8)) | (1 << 8); // Enable SCLK0 on P0.4
   11c3c:	e59f2030 	ldr	r2, [pc, #48]	; 11c74 <.text+0x1c74>
   11c40:	e5923000 	ldr	r3, [r2]
   11c44:	e3c33c03 	bic	r3, r3, #768	; 0x300
   11c48:	e3833c01 	orr	r3, r3, #256	; 0x100
   11c4c:	e5823000 	str	r3, [r2]
	PINSEL0 = (PINSEL0 & ~(3 << 10)) | (1 << 10); // Enable MISO0 on P0.5
   11c50:	e5923000 	ldr	r3, [r2]
   11c54:	e3c33b03 	bic	r3, r3, #3072	; 0xc00
   11c58:	e3833b01 	orr	r3, r3, #1024	; 0x400
   11c5c:	e5823000 	str	r3, [r2]
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (1 << 12); // Enable MOSI0 on P0.6
   11c60:	e5923000 	ldr	r3, [r2]
   11c64:	e3c33a03 	bic	r3, r3, #12288	; 0x3000
   11c68:	e3833a01 	orr	r3, r3, #4096	; 0x1000
   11c6c:	e5823000 	str	r3, [r2]

}
   11c70:	e12fff1e 	bx	lr
   11c74:	e002c000 	and	ip, r2, r0

00011c78 <SPI0_send_recv>:

void SPI0_send(char c)
{
    SPI0_send_recv(c);
}

char SPI0_recv(void)
{
    return SPI0_send_recv(0xff);
}

char SPI0_send_recv(char c)
{
    char in;

    S0SPDR = c;						//Place data to be sent into SPI data register
   11c78:	e59f3020 	ldr	r3, [pc, #32]	; 11ca0 <.text+0x1ca0>
   11c7c:	e20000ff 	and	r0, r0, #255	; 0xff
   11c80:	e5830008 	str	r0, [r3, #8]
    while(!(S0SPSR & SPIF));		//Wait for transfer to complete
   11c84:	e59f2014 	ldr	r2, [pc, #20]	; 11ca0 <.text+0x1ca0>
   11c88:	e5923004 	ldr	r3, [r2, #4]
   11c8c:	e3130080 	tst	r3, #128	; 0x80
   11c90:	0afffffb 	beq	11c84 <SPI0_send_recv+0xc>
    in = S0SPDR&0xff;				//Return the character placed in the SPI data register by the slave
   11c94:	e5920008 	ldr	r0, [r2, #8]
   11c98:	e20000ff 	and	r0, r0, #255	; 0xff
    return in;
}
   11c9c:	e12fff1e 	bx	lr
   11ca0:	e0020000 	and	r0, r2, r0

00011ca4 <SPI0_recv>:
   11ca4:	e52de004 	str	lr, [sp, #-4]!
   11ca8:	e3a000ff 	mov	r0, #255	; 0xff
   11cac:	ebfffff1 	bl	11c78 <SPI0_send_recv>
   11cb0:	e49de004 	ldr	lr, [sp], #4
   11cb4:	e12fff1e 	bx	lr

00011cb8 <SPI0_send>:
   11cb8:	e20000ff 	and	r0, r0, #255	; 0xff
   11cbc:	eaffffed 	b	11c78 <SPI0_send_recv>

00011cc0 <root_file_exists>:

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   11cc0:	e59f3020 	ldr	r3, [pc, #32]	; 11ce8 <.text+0x1ce8>
   11cc4:	e5931000 	ldr	r1, [r3]
   11cc8:	e59f301c 	ldr	r3, [pc, #28]	; 11cec <.text+0x1cec>
   11ccc:	e1a02000 	mov	r2, r0
   11cd0:	e52de004 	str	lr, [sp, #-4]!
   11cd4:	e5930000 	ldr	r0, [r3]
   11cd8:	e59f3010 	ldr	r3, [pc, #16]	; 11cf0 <.text+0x1cf0>
   11cdc:	eb0006f5 	bl	138b8 <find_file_in_dir>
}
   11ce0:	e49de004 	ldr	lr, [sp], #4
   11ce4:	e12fff1e 	bx	lr
   11ce8:	4000163c 	andmi	r1, r0, ip, lsr r6
   11cec:	40001604 	andmi	r1, r0, r4, lsl #12
   11cf0:	40001608 	andmi	r1, r0, r8, lsl #12

00011cf4 <root_delete>:

/* returns NULL if error, pointer if file opened */
struct fat16_file_struct * root_open_new(char* name)
{
    if(fat16_create_file(dd,name,&dir_entry))
    {
        return(open_file_in_dir(fs,dd,name));
    }
    else
    {
        return NULL;
    }
}

struct fat16_file_struct * root_open(char* name)
{
    return(open_file_in_dir(fs,dd,name));
}

uint8_t print_disk_info(const struct fat16_fs_struct* disk_fs)
{
    if(!disk_fs)
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
        return 0;

//    int temp = get_output();
//    set_output(UART_ONLY);
    rprintf("manuf:  0x%02x\n\r", disk_info.manufacturer);
    rprintf("oem:    %s\n\r", disk_info.oem);
    rprintf("prod:   %s\n\r", disk_info.product);
    rprintf("rev:    %02x\n\r", disk_info.revision);
    rprintf("serial: 0x%08lx\n\r", disk_info.serial);
    rprintf("date:   %02d/%02d\n\r", disk_info.manufacturing_month, disk_info.manufacturing_year);
    rprintf("size:   %ld\n\r", disk_info.capacity);
    rprintf("copy:   %d\n\r", disk_info.flag_copy);
    rprintf("wr.pr.: %d/%d\n\r", disk_info.flag_write_protect_temp, disk_info.flag_write_protect);
    rprintf("format: %d\n\r", disk_info.format);
    rprintf("free:   %ld/%ld\n\r", fat16_get_fs_free(disk_fs), fat16_get_fs_size(disk_fs));
//    set_output(temp);
    return 1;
}

void root_disk_info(void)
{
    print_disk_info(fs);
}

/* sequential calls return sequential characters
 * of the sequence of file names in the rootdir
 * in place of '\0' it returns ',' only
 * returning a zero when the end of all files
 * has been reached.
 *
 * Assert (1) reset whenever you want to re-start
 */
char rootDirectory_files_stream(int reset)
{

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
    {
        fat16_reset_dir(dd);
        return 0;
    }

    /* Whenever IDX is zero, we're gonna start a new file,
       * so read a new one.
       * if there's no new file,
       * return 0, because it's over
       */
    if(idx == 0)
    {
        if(fat16_read_dir(dd,&dir_entry)==0)
        {
            return '\0';
        }
    }

    /* If we've reached the end of a string,
       * return comma instead of \0,
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
    {
        idx = 0;
        return ',';
    }


    return dir_entry.long_name[idx++];

}
//Description: Fills buf with len number of chars.  Returns the number of files
//				that were cycled through during the read
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
    {
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
            len--;
            if(len==1)
            {
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
        num++;
        len--;
        if(len==1)
        {
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
            return 1;
        }
    }
    *buf='\0';
    return num;
}

void root_format(void)
{
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
    {
        fat16_delete_file(fs,&dir_entry);
        fat16_reset_dir(dd);
    }
}

int root_delete(char* filename)
{
   11cf4:	e92d4010 	stmdb	sp!, {r4, lr}
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   11cf8:	e59f3038 	ldr	r3, [pc, #56]	; 11d38 <.text+0x1d38>
   11cfc:	e59f4038 	ldr	r4, [pc, #56]	; 11d3c <.text+0x1d3c>
   11d00:	e5931000 	ldr	r1, [r3]
   11d04:	e1a02000 	mov	r2, r0
   11d08:	e59f3030 	ldr	r3, [pc, #48]	; 11d40 <.text+0x1d40>
   11d0c:	e5940000 	ldr	r0, [r4]
   11d10:	eb0006e8 	bl	138b8 <find_file_in_dir>
   11d14:	e3500000 	cmp	r0, #0	; 0x0
    {
        fat16_delete_file(fs,&dir_entry);
   11d18:	e59f1020 	ldr	r1, [pc, #32]	; 11d40 <.text+0x1d40>
   11d1c:	e3a00001 	mov	r0, #1	; 0x1
   11d20:	0a000002 	beq	11d30 <root_delete+0x3c>
   11d24:	e5940000 	ldr	r0, [r4]
   11d28:	eb0005e5 	bl	134c4 <fat16_delete_file>
   11d2c:	e3a00000 	mov	r0, #0	; 0x0
        return 0;
    }
    return 1;
}
   11d30:	e8bd4010 	ldmia	sp!, {r4, lr}
   11d34:	e12fff1e 	bx	lr
   11d38:	4000163c 	andmi	r1, r0, ip, lsr r6
   11d3c:	40001604 	andmi	r1, r0, r4, lsl #12
   11d40:	40001608 	andmi	r1, r0, r8, lsl #12

00011d44 <root_format>:
   11d44:	e92d4010 	stmdb	sp!, {r4, lr}
   11d48:	e59f303c 	ldr	r3, [pc, #60]	; 11d8c <.text+0x1d8c>
   11d4c:	e5930000 	ldr	r0, [r3]
   11d50:	ea000003 	b	11d64 <root_format+0x20>
   11d54:	e59f3034 	ldr	r3, [pc, #52]	; 11d90 <.text+0x1d90>
   11d58:	e5930000 	ldr	r0, [r3]
   11d5c:	eb0005d8 	bl	134c4 <fat16_delete_file>
   11d60:	e5940000 	ldr	r0, [r4]
   11d64:	e59f4020 	ldr	r4, [pc, #32]	; 11d8c <.text+0x1d8c>
   11d68:	eb0005c6 	bl	13488 <fat16_reset_dir>
   11d6c:	e59f1020 	ldr	r1, [pc, #32]	; 11d94 <.text+0x1d94>
   11d70:	e5940000 	ldr	r0, [r4]
   11d74:	eb000649 	bl	136a0 <fat16_read_dir>
   11d78:	e3500000 	cmp	r0, #0	; 0x0
   11d7c:	e59f1010 	ldr	r1, [pc, #16]	; 11d94 <.text+0x1d94>
   11d80:	1afffff3 	bne	11d54 <root_format+0x10>
   11d84:	e8bd4010 	ldmia	sp!, {r4, lr}
   11d88:	e12fff1e 	bx	lr
   11d8c:	4000163c 	andmi	r1, r0, ip, lsr r6
   11d90:	40001604 	andmi	r1, r0, r4, lsl #12
   11d94:	40001608 	andmi	r1, r0, r8, lsl #12

00011d98 <rootDirectory_files>:
   11d98:	e59f30a0 	ldr	r3, [pc, #160]	; 11e40 <.text+0x1e40>
   11d9c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   11da0:	e1a04000 	mov	r4, r0
   11da4:	e5930000 	ldr	r0, [r3]
   11da8:	e1a05001 	mov	r5, r1
   11dac:	eb0005b5 	bl	13488 <fat16_reset_dir>
   11db0:	e3a06000 	mov	r6, #0	; 0x0
   11db4:	ea000017 	b	11e18 <rootDirectory_files+0x80>
   11db8:	e3520001 	cmp	r2, #1	; 0x1
   11dbc:	e5c41000 	strb	r1, [r4]
   11dc0:	e1a04000 	mov	r4, r0
   11dc4:	1a000004 	bne	11ddc <rootDirectory_files+0x44>
   11dc8:	e3a03000 	mov	r3, #0	; 0x0
   11dcc:	e1a06002 	mov	r6, r2
   11dd0:	e5c03000 	strb	r3, [r0]
   11dd4:	ea000016 	b	11e34 <rootDirectory_files+0x9c>
   11dd8:	e59f3064 	ldr	r3, [pc, #100]	; 11e44 <.text+0x1e44>
   11ddc:	e5d31000 	ldrb	r1, [r3]
   11de0:	e2452001 	sub	r2, r5, #1	; 0x1
   11de4:	e3510000 	cmp	r1, #0	; 0x0
   11de8:	e2833001 	add	r3, r3, #1	; 0x1
   11dec:	e1a05002 	mov	r5, r2
   11df0:	e2840001 	add	r0, r4, #1	; 0x1
   11df4:	1affffef 	bne	11db8 <rootDirectory_files+0x20>
   11df8:	e3a0302c 	mov	r3, #44	; 0x2c
   11dfc:	e3520001 	cmp	r2, #1	; 0x1
   11e00:	e5c43000 	strb	r3, [r4]
   11e04:	e1a04000 	mov	r4, r0
   11e08:	01a06002 	moveq	r6, r2
   11e0c:	05c01000 	streqb	r1, [r0]
   11e10:	0a000007 	beq	11e34 <rootDirectory_files+0x9c>
   11e14:	e2866001 	add	r6, r6, #1	; 0x1
   11e18:	e59f3020 	ldr	r3, [pc, #32]	; 11e40 <.text+0x1e40>
   11e1c:	e59f1020 	ldr	r1, [pc, #32]	; 11e44 <.text+0x1e44>
   11e20:	e5930000 	ldr	r0, [r3]
   11e24:	eb00061d 	bl	136a0 <fat16_read_dir>
   11e28:	e3500000 	cmp	r0, #0	; 0x0
   11e2c:	1affffe9 	bne	11dd8 <rootDirectory_files+0x40>
   11e30:	e5c40000 	strb	r0, [r4]
   11e34:	e1a00006 	mov	r0, r6
   11e38:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   11e3c:	e12fff1e 	bx	lr
   11e40:	4000163c 	andmi	r1, r0, ip, lsr r6
   11e44:	40001608 	andmi	r1, r0, r8, lsl #12

00011e48 <rootDirectory_files_stream>:
   11e48:	e3500000 	cmp	r0, #0	; 0x0
   11e4c:	e52de004 	str	lr, [sp, #-4]!
   11e50:	0a000004 	beq	11e68 <rootDirectory_files_stream+0x20>
   11e54:	e59f3064 	ldr	r3, [pc, #100]	; 11ec0 <.text+0x1ec0>
   11e58:	e5930000 	ldr	r0, [r3]
   11e5c:	eb000589 	bl	13488 <fat16_reset_dir>
   11e60:	e3a00000 	mov	r0, #0	; 0x0
   11e64:	ea000013 	b	11eb8 <rootDirectory_files_stream+0x70>
   11e68:	e59f3054 	ldr	r3, [pc, #84]	; 11ec4 <.text+0x1ec4>
   11e6c:	e5933000 	ldr	r3, [r3]
   11e70:	e3530000 	cmp	r3, #0	; 0x0
   11e74:	e59f104c 	ldr	r1, [pc, #76]	; 11ec8 <.text+0x1ec8>
   11e78:	1a000004 	bne	11e90 <rootDirectory_files_stream+0x48>
   11e7c:	e59f303c 	ldr	r3, [pc, #60]	; 11ec0 <.text+0x1ec0>
   11e80:	e5930000 	ldr	r0, [r3]
   11e84:	eb000605 	bl	136a0 <fat16_read_dir>
   11e88:	e3500000 	cmp	r0, #0	; 0x0
   11e8c:	0a000009 	beq	11eb8 <rootDirectory_files_stream+0x70>
   11e90:	e59f102c 	ldr	r1, [pc, #44]	; 11ec4 <.text+0x1ec4>
   11e94:	e59f302c 	ldr	r3, [pc, #44]	; 11ec8 <.text+0x1ec8>
   11e98:	e5912000 	ldr	r2, [r1]
   11e9c:	e7d33002 	ldrb	r3, [r3, r2]
   11ea0:	e2822001 	add	r2, r2, #1	; 0x1
   11ea4:	e3530000 	cmp	r3, #0	; 0x0
   11ea8:	05813000 	streq	r3, [r1]
   11eac:	15812000 	strne	r2, [r1]
   11eb0:	e3a0002c 	mov	r0, #44	; 0x2c
   11eb4:	11a00003 	movne	r0, r3
   11eb8:	e49de004 	ldr	lr, [sp], #4
   11ebc:	e12fff1e 	bx	lr
   11ec0:	4000163c 	andmi	r1, r0, ip, lsr r6
   11ec4:	400008c0 	andmi	r0, r0, r0, asr #17
   11ec8:	40001608 	andmi	r1, r0, r8, lsl #12

00011ecc <print_disk_info>:
   11ecc:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   11ed0:	e2505000 	subs	r5, r0, #0	; 0x0
   11ed4:	e24dd01c 	sub	sp, sp, #28	; 0x1c
   11ed8:	e1a0400d 	mov	r4, sp
   11edc:	e1a0000d 	mov	r0, sp
   11ee0:	0a00002d 	beq	11f9c <print_disk_info+0xd0>
   11ee4:	eb0000fc 	bl	122dc <sd_raw_get_info>
   11ee8:	e3500000 	cmp	r0, #0	; 0x0
   11eec:	e59f00b8 	ldr	r0, [pc, #184]	; 11fac <.text+0x1fac>
   11ef0:	0a000029 	beq	11f9c <print_disk_info+0xd0>
   11ef4:	e5dd1000 	ldrb	r1, [sp]
   11ef8:	ebfffe46 	bl	11818 <rprintf>
   11efc:	e59f00ac 	ldr	r0, [pc, #172]	; 11fb0 <.text+0x1fb0>
   11f00:	e28d1001 	add	r1, sp, #1	; 0x1
   11f04:	ebfffe43 	bl	11818 <rprintf>
   11f08:	e28d1004 	add	r1, sp, #4	; 0x4
   11f0c:	e59f00a0 	ldr	r0, [pc, #160]	; 11fb4 <.text+0x1fb4>
   11f10:	ebfffe40 	bl	11818 <rprintf>
   11f14:	e59f009c 	ldr	r0, [pc, #156]	; 11fb8 <.text+0x1fb8>
   11f18:	e5dd100a 	ldrb	r1, [sp, #10]
   11f1c:	ebfffe3d 	bl	11818 <rprintf>
   11f20:	e59f0094 	ldr	r0, [pc, #148]	; 11fbc <.text+0x1fbc>
   11f24:	e59d100c 	ldr	r1, [sp, #12]
   11f28:	ebfffe3a 	bl	11818 <rprintf>
   11f2c:	e5dd2010 	ldrb	r2, [sp, #16]
   11f30:	e59f0088 	ldr	r0, [pc, #136]	; 11fc0 <.text+0x1fc0>
   11f34:	e5dd1011 	ldrb	r1, [sp, #17]
   11f38:	ebfffe36 	bl	11818 <rprintf>
   11f3c:	e59f0080 	ldr	r0, [pc, #128]	; 11fc4 <.text+0x1fc4>
   11f40:	e59d1014 	ldr	r1, [sp, #20]
   11f44:	ebfffe33 	bl	11818 <rprintf>
   11f48:	e59f0078 	ldr	r0, [pc, #120]	; 11fc8 <.text+0x1fc8>
   11f4c:	e5dd1018 	ldrb	r1, [sp, #24]
   11f50:	ebfffe30 	bl	11818 <rprintf>
   11f54:	e5dd2019 	ldrb	r2, [sp, #25]
   11f58:	e59f006c 	ldr	r0, [pc, #108]	; 11fcc <.text+0x1fcc>
   11f5c:	e5dd101a 	ldrb	r1, [sp, #26]
   11f60:	ebfffe2c 	bl	11818 <rprintf>
   11f64:	e5dd101b 	ldrb	r1, [sp, #27]
   11f68:	e59f0060 	ldr	r0, [pc, #96]	; 11fd0 <.text+0x1fd0>
   11f6c:	ebfffe29 	bl	11818 <rprintf>
   11f70:	e1a00005 	mov	r0, r5
   11f74:	eb000586 	bl	13594 <fat16_get_fs_free>
   11f78:	e1a04000 	mov	r4, r0
   11f7c:	e1a00005 	mov	r0, r5
   11f80:	eb00057a 	bl	13570 <fat16_get_fs_size>
   11f84:	e1a01004 	mov	r1, r4
   11f88:	e1a02000 	mov	r2, r0
   11f8c:	e59f0040 	ldr	r0, [pc, #64]	; 11fd4 <.text+0x1fd4>
   11f90:	ebfffe20 	bl	11818 <rprintf>
   11f94:	e3a00001 	mov	r0, #1	; 0x1
   11f98:	ea000000 	b	11fa0 <print_disk_info+0xd4>
   11f9c:	e3a00000 	mov	r0, #0	; 0x0
   11fa0:	e28dd01c 	add	sp, sp, #28	; 0x1c
   11fa4:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   11fa8:	e12fff1e 	bx	lr
   11fac:	0001de30 	andeq	sp, r1, r0, lsr lr
   11fb0:	0001de44 	andeq	sp, r1, r4, asr #28
   11fb4:	0001de54 	andeq	sp, r1, r4, asr lr
   11fb8:	0001de64 	andeq	sp, r1, r4, ror #28
   11fbc:	0001de74 	andeq	sp, r1, r4, ror lr
   11fc0:	0001de88 	andeq	sp, r1, r8, lsl #29
   11fc4:	0001de9c 	muleq	r1, ip, lr
   11fc8:	0001deac 	andeq	sp, r1, ip, lsr #29
   11fcc:	0001debc 	streqh	sp, [r1], -ip
   11fd0:	0001decc 	andeq	sp, r1, ip, asr #29
   11fd4:	0001dedc 	ldreqd	sp, [r1], -ip

00011fd8 <root_disk_info>:
   11fd8:	e59f3004 	ldr	r3, [pc, #4]	; 11fe4 <.text+0x1fe4>
   11fdc:	e5930000 	ldr	r0, [r3]
   11fe0:	eaffffb9 	b	11ecc <print_disk_info>
   11fe4:	40001604 	andmi	r1, r0, r4, lsl #12

00011fe8 <root_open>:
   11fe8:	e59f301c 	ldr	r3, [pc, #28]	; 1200c <.text+0x200c>
   11fec:	e5931000 	ldr	r1, [r3]
   11ff0:	e59f3018 	ldr	r3, [pc, #24]	; 12010 <.text+0x2010>
   11ff4:	e1a02000 	mov	r2, r0
   11ff8:	e52de004 	str	lr, [sp, #-4]!
   11ffc:	e5930000 	ldr	r0, [r3]
   12000:	eb00084e 	bl	14140 <open_file_in_dir>
   12004:	e49de004 	ldr	lr, [sp], #4
   12008:	e12fff1e 	bx	lr
   1200c:	4000163c 	andmi	r1, r0, ip, lsr r6
   12010:	40001604 	andmi	r1, r0, r4, lsl #12

00012014 <root_open_new>:
   12014:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   12018:	e59f5030 	ldr	r5, [pc, #48]	; 12050 <.text+0x2050>
   1201c:	e1a04000 	mov	r4, r0
   12020:	e1a01000 	mov	r1, r0
   12024:	e59f2028 	ldr	r2, [pc, #40]	; 12054 <.text+0x2054>
   12028:	e5950000 	ldr	r0, [r5]
   1202c:	eb00091a 	bl	1449c <fat16_create_file>
   12030:	e3500000 	cmp	r0, #0	; 0x0
   12034:	e1a02004 	mov	r2, r4
   12038:	159f3018 	ldrne	r3, [pc, #24]	; 12058 <.text+0x2058>
   1203c:	15951000 	ldrne	r1, [r5]
   12040:	15930000 	ldrne	r0, [r3]
   12044:	1b00083d 	blne	14140 <open_file_in_dir>
   12048:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1204c:	e12fff1e 	bx	lr
   12050:	4000163c 	andmi	r1, r0, ip, lsr r6
   12054:	40001608 	andmi	r1, r0, r8, lsl #12
   12058:	40001604 	andmi	r1, r0, r4, lsl #12

0001205c <openroot>:
   1205c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   12060:	e3a03000 	mov	r3, #0	; 0x0
   12064:	e59f10ac 	ldr	r1, [pc, #172]	; 12118 <.text+0x2118>
   12068:	e59f20ac 	ldr	r2, [pc, #172]	; 1211c <.text+0x211c>
   1206c:	e59f00ac 	ldr	r0, [pc, #172]	; 12120 <.text+0x2120>
   12070:	eb000985 	bl	1468c <partition_open>
   12074:	e59f40a8 	ldr	r4, [pc, #168]	; 12124 <.text+0x2124>
   12078:	e1a0c000 	mov	ip, r0
   1207c:	e35c0000 	cmp	ip, #0	; 0x0
   12080:	e3e03000 	mvn	r3, #0	; 0x0
   12084:	e59f108c 	ldr	r1, [pc, #140]	; 12118 <.text+0x2118>
   12088:	e59f208c 	ldr	r2, [pc, #140]	; 1211c <.text+0x211c>
   1208c:	e59f008c 	ldr	r0, [pc, #140]	; 12120 <.text+0x2120>
   12090:	e59f5090 	ldr	r5, [pc, #144]	; 12128 <.text+0x2128>
   12094:	e584c000 	str	ip, [r4]
   12098:	1a000005 	bne	120b4 <openroot+0x58>
   1209c:	eb00097a 	bl	1468c <partition_open>
   120a0:	e1a03000 	mov	r3, r0
   120a4:	e3530000 	cmp	r3, #0	; 0x0
   120a8:	e59f007c 	ldr	r0, [pc, #124]	; 1212c <.text+0x212c>
   120ac:	e5843000 	str	r3, [r4]
   120b0:	0a000013 	beq	12104 <openroot+0xa8>
   120b4:	e59f3068 	ldr	r3, [pc, #104]	; 12124 <.text+0x2124>
   120b8:	e5930000 	ldr	r0, [r3]
   120bc:	eb000879 	bl	142a8 <fat16_open>
   120c0:	e3500000 	cmp	r0, #0	; 0x0
   120c4:	e5850000 	str	r0, [r5]
   120c8:	e59f2060 	ldr	r2, [pc, #96]	; 12130 <.text+0x2130>
   120cc:	e59f1060 	ldr	r1, [pc, #96]	; 12134 <.text+0x2134>
   120d0:	059f0060 	ldreq	r0, [pc, #96]	; 12138 <.text+0x2138>
   120d4:	0a00000a 	beq	12104 <openroot+0xa8>
   120d8:	eb000829 	bl	14184 <fat16_get_dir_entry_of_path>
   120dc:	e59f104c 	ldr	r1, [pc, #76]	; 12130 <.text+0x2130>
   120e0:	e5950000 	ldr	r0, [r5]
   120e4:	eb0007d5 	bl	14040 <fat16_open_dir>
   120e8:	e59f304c 	ldr	r3, [pc, #76]	; 1213c <.text+0x213c>
   120ec:	e1a02000 	mov	r2, r0
   120f0:	e3500000 	cmp	r0, #0	; 0x0
   120f4:	e3a01000 	mov	r1, #0	; 0x0
   120f8:	e59f0040 	ldr	r0, [pc, #64]	; 12140 <.text+0x2140>
   120fc:	e5832000 	str	r2, [r3]
   12100:	1a000001 	bne	1210c <openroot+0xb0>
   12104:	ebfffdc3 	bl	11818 <rprintf>
   12108:	e3a01001 	mov	r1, #1	; 0x1
   1210c:	e1a00001 	mov	r0, r1
   12110:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   12114:	e12fff1e 	bx	lr
   12118:	0001292c 	andeq	r2, r1, ip, lsr #18
   1211c:	000126d0 	ldreqd	r2, [r1], -r0
   12120:	00012570 	andeq	r2, r1, r0, ror r5
   12124:	40001638 	andmi	r1, r0, r8, lsr r6
   12128:	40001604 	andmi	r1, r0, r4, lsl #12
   1212c:	0001def0 	streqd	sp, [r1], -r0
   12130:	40001608 	andmi	r1, r0, r8, lsl #12
   12134:	0001df28 	andeq	sp, r1, r8, lsr #30
   12138:	0001df0c 	andeq	sp, r1, ip, lsl #30
   1213c:	4000163c 	andmi	r1, r0, ip, lsr r6
   12140:	0001df2c 	andeq	sp, r1, ip, lsr #30

00012144 <sd_raw_available>:
 */
unsigned char sd_raw_available()
{
    unsigned int i;
    configure_pin_available();
   12144:	e59f2028 	ldr	r2, [pc, #40]	; 12174 <.text+0x2174>
   12148:	e5923008 	ldr	r3, [r2, #8]
   1214c:	e3c33080 	bic	r3, r3, #128	; 0x80
   12150:	e5823008 	str	r3, [r2, #8]
    for(i=0;i<100000;i++);
    i = get_pin_available();
   12154:	e5921000 	ldr	r1, [r2]
    configure_pin_ss();
   12158:	e5923008 	ldr	r3, [r2, #8]
   1215c:	e3110080 	tst	r1, #128	; 0x80
   12160:	e3833080 	orr	r3, r3, #128	; 0x80
    return i == 0x00;
}
   12164:	03a00000 	moveq	r0, #0	; 0x0
   12168:	13a00001 	movne	r0, #1	; 0x1
   1216c:	e5823008 	str	r3, [r2, #8]
   12170:	e12fff1e 	bx	lr
   12174:	e0028000 	and	r8, r2, r0

00012178 <sd_raw_locked>:

/**
 * \ingroup sd_raw
 * Checks wether the memory card is locked for write access.
 *
 * \returns 1 if the card is locked, 0 if it is not.
 */
unsigned char sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
   12178:	e3a00001 	mov	r0, #1	; 0x1
   1217c:	e12fff1e 	bx	lr

00012180 <sd_raw_rec_byte>:

/**
 * \ingroup sd_raw
 * Sends a raw byte to the memory card.
 *
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(unsigned char b)
{
    S0SPDR = b;
    /* wait for byte to be shifted out */
    while(!(S0SPSR & 0x80));
}

/**
 * \ingroup sd_raw
 * Receives a raw byte from the memory card.
 *
 * \returns The byte which should be read.
 * \see sd_raw_send_byte
 */
unsigned char sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    S0SPDR = 0xff;
   12180:	e59f3020 	ldr	r3, [pc, #32]	; 121a8 <.text+0x21a8>
   12184:	e3a020ff 	mov	r2, #255	; 0xff
   12188:	e5832008 	str	r2, [r3, #8]
    while(!(S0SPSR & 0x80));
   1218c:	e59f2014 	ldr	r2, [pc, #20]	; 121a8 <.text+0x21a8>
   12190:	e5923004 	ldr	r3, [r2, #4]
   12194:	e3130080 	tst	r3, #128	; 0x80
   12198:	0afffffb 	beq	1218c <sd_raw_rec_byte+0xc>

    return S0SPDR;
   1219c:	e5920008 	ldr	r0, [r2, #8]
   121a0:	e20000ff 	and	r0, r0, #255	; 0xff
}
   121a4:	e12fff1e 	bx	lr
   121a8:	e0020000 	and	r0, r2, r0

000121ac <sd_raw_send_command_r1>:

/**
 * \ingroup sd_raw
 * Send a command to the memory card which responses with a R1 response.
 *
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
unsigned char sd_raw_send_command_r1(unsigned char command, unsigned int arg)
{
   121ac:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   121b0:	e20050ff 	and	r5, r0, #255	; 0xff
   121b4:	e1a04001 	mov	r4, r1
    unsigned char response;
    unsigned char i;

    /* wait some clock cycles */
    sd_raw_rec_byte();
   121b8:	ebfffff0 	bl	12180 <sd_raw_rec_byte>
   121bc:	e59f30c4 	ldr	r3, [pc, #196]	; 12288 <.text+0x2288>
   121c0:	e3852040 	orr	r2, r5, #64	; 0x40
   121c4:	e5832008 	str	r2, [r3, #8]
   121c8:	e59f20b8 	ldr	r2, [pc, #184]	; 12288 <.text+0x2288>
   121cc:	e5923004 	ldr	r3, [r2, #4]
   121d0:	e3130080 	tst	r3, #128	; 0x80
   121d4:	0afffffb 	beq	121c8 <sd_raw_send_command_r1+0x1c>
   121d8:	e1a03c24 	mov	r3, r4, lsr #24
   121dc:	e5823008 	str	r3, [r2, #8]
   121e0:	e59f20a0 	ldr	r2, [pc, #160]	; 12288 <.text+0x2288>
   121e4:	e5923004 	ldr	r3, [r2, #4]
   121e8:	e3130080 	tst	r3, #128	; 0x80
   121ec:	0afffffb 	beq	121e0 <sd_raw_send_command_r1+0x34>
   121f0:	e1a03824 	mov	r3, r4, lsr #16
   121f4:	e20330ff 	and	r3, r3, #255	; 0xff
   121f8:	e5823008 	str	r3, [r2, #8]
   121fc:	e59f2084 	ldr	r2, [pc, #132]	; 12288 <.text+0x2288>
   12200:	e5923004 	ldr	r3, [r2, #4]
   12204:	e3130080 	tst	r3, #128	; 0x80
   12208:	0afffffb 	beq	121fc <sd_raw_send_command_r1+0x50>
   1220c:	e1a03424 	mov	r3, r4, lsr #8
   12210:	e20330ff 	and	r3, r3, #255	; 0xff
   12214:	e5823008 	str	r3, [r2, #8]
   12218:	e59f2068 	ldr	r2, [pc, #104]	; 12288 <.text+0x2288>
   1221c:	e5923004 	ldr	r3, [r2, #4]
   12220:	e3130080 	tst	r3, #128	; 0x80
   12224:	0afffffb 	beq	12218 <sd_raw_send_command_r1+0x6c>
   12228:	e20430ff 	and	r3, r4, #255	; 0xff
   1222c:	e5823008 	str	r3, [r2, #8]
   12230:	e59f2050 	ldr	r2, [pc, #80]	; 12288 <.text+0x2288>
   12234:	e5923004 	ldr	r3, [r2, #4]
   12238:	e3130080 	tst	r3, #128	; 0x80
   1223c:	0afffffb 	beq	12230 <sd_raw_send_command_r1+0x84>
   12240:	e3550000 	cmp	r5, #0	; 0x0
   12244:	13a030ff 	movne	r3, #255	; 0xff
   12248:	03a03095 	moveq	r3, #149	; 0x95
   1224c:	e5823008 	str	r3, [r2, #8]
   12250:	e59f3030 	ldr	r3, [pc, #48]	; 12288 <.text+0x2288>
   12254:	e5933004 	ldr	r3, [r3, #4]
   12258:	e3130080 	tst	r3, #128	; 0x80
   1225c:	0afffffb 	beq	12250 <sd_raw_send_command_r1+0xa4>
   12260:	e3a04000 	mov	r4, #0	; 0x0

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    sd_raw_send_byte((command == CMD_GO_IDLE_STATE) ? 0x95 : 0xff);

    /* receive response */
    for(i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
   12264:	ebffffc5 	bl	12180 <sd_raw_rec_byte>
   12268:	e2843001 	add	r3, r4, #1	; 0x1
        if(response != 0xff)
   1226c:	e35000ff 	cmp	r0, #255	; 0xff
   12270:	e20340ff 	and	r4, r3, #255	; 0xff
   12274:	1a000001 	bne	12280 <sd_raw_send_command_r1+0xd4>
   12278:	e354000a 	cmp	r4, #10	; 0xa
   1227c:	1afffff8 	bne	12264 <sd_raw_send_command_r1+0xb8>
            break;
    }

    return response;
}
   12280:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   12284:	e12fff1e 	bx	lr
   12288:	e0020000 	and	r0, r2, r0

0001228c <SDoff>:

/**
 * \ingroup sd_raw
 * Send a command to the memory card which responses with a R2 response.
 *
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
/*
unsigned short sd_raw_send_command_r2(unsigned char command, unsigned int arg)
{
    unsigned short response;
    unsigned char i;

    // wait some clock cycles
    sd_raw_rec_byte();

    // send command via SPI
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    sd_raw_send_byte(command == CMD_GO_IDLE_STATE ? 0x95 : 0xff);

    // receive response
    for(i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
            break;
    }
    response <<= 8;
    response |= sd_raw_rec_byte();

    return response;
}
*/

/**
 * \ingroup sd_raw
 * Reads raw data from the card.
 *
 * \param[in] offset The offset from which to read.
 * \param[out] buffer The buffer into which to write the data.
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write
 */
unsigned char sd_raw_read(unsigned int offset, unsigned char* buffer, unsigned short length)
{
    unsigned int block_address;
    unsigned short block_offset;
    unsigned short read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_address = offset & 0xfffffe00;
        block_offset = offset & 0x01ff;
        read_length = 512 - block_offset; /* read up to block border */
        if(read_length > length)
            read_length = length;

        #if !SD_RAW_SAVE_RAM
            /* check if the requested data is cached */
            if(block_address != raw_block_address)
            #endif
        {
            #if SD_RAW_WRITE_BUFFERING
                if(!raw_block_written)
                {
                    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
                        return 0;
                }
            #endif

            /* address card */
            select_card();

            /* send single block request */
            if(sd_raw_send_command_r1(CMD_READ_SINGLE_BLOCK, block_address))
            {
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);

            #if SD_RAW_SAVE_RAM
                /* read byte block */
                unsigned short read_to = block_offset + read_length;
                for(unsigned short i = 0; i < 512; ++i)
                {
                    unsigned char b = sd_raw_rec_byte();
                    if(i >= block_offset && i < read_to)
                        *buffer++ = b;
                }
            #else
                /* read byte block */
                unsigned char* cache = raw_block;
                unsigned short i;
                for(i = 0; i < 512; ++i)
                    *cache++ = sd_raw_rec_byte();
                raw_block_address = block_address;
    
                memcpy(buffer, raw_block + block_offset, read_length);
                buffer += read_length;
            #endif

            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();

            /* deaddress card */
            unselect_card();

            /* let card some time to finish */
            sd_raw_rec_byte();
        }
        #if !SD_RAW_SAVE_RAM
            else
            {
                /* use cached data */
                memcpy(buffer, raw_block + block_offset, read_length);
            }
        #endif

        length -= read_length;
        offset += read_length;
    }

    return 1;
}

/**
 * \ingroup sd_raw
 * Continuously reads units of \c interval bytes and calls a callback function.
 *
 * This function starts reading at the specified offset. Every \c interval bytes,
 * it calls the callback function with the associated data buffer.
 *
 * By returning zero, the callback may stop reading.
 *
 * \note Within the callback function, you can not start another read or
 *       write operation.
 * \note This function only works if the following conditions are met:
 *       - (offset - (offset % 512)) % interval == 0
 *       - length % interval == 0
 *
 * \param[in] offset Offset from which to start reading.
 * \param[in] buffer Pointer to a buffer which is at least interval bytes in size.
 * \param[in] interval Number of bytes to read before calling the callback function.
 * \param[in] length Number of bytes to read altogether.
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read, sd_raw_write
 */
unsigned char sd_raw_read_interval(unsigned int offset, unsigned char* buffer, unsigned short interval, unsigned short length, sd_raw_interval_handler callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

    #if !SD_RAW_SAVE_RAM
        while(length >= interval)
        {
            /* as reading is now buffered, we directly
                     * hand over the request to sd_raw_read()
                     */
            if(!sd_raw_read(offset, buffer, interval))
                return 0;
            if(!callback(buffer, offset, p))
                break;
            offset += interval;
            length -= interval;
        }
    
        return 1;
    #else
        /* address card */
        select_card();
    
        unsigned short block_offset;
        unsigned short read_length;
        unsigned char* buffer_cur;
        unsigned char finished = 0;
        do
        {
            /* determine byte count to read at once */
            block_offset = offset & 0x01ff;
            read_length = 512 - block_offset;
    
            /* send single block request */
            if(sd_raw_send_command_r1(CMD_READ_SINGLE_BLOCK, offset & 0xfffffe00))
            {
                unselect_card();
                return 0;
            }
    
            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
            unsigned short i;
            /* read up to the data of interest */
            for(i = 0; i < block_offset; ++i)
                sd_raw_rec_byte();
    
            /* read interval bytes of data and execute the callback */
            do
            {
                if(read_length < interval || length < interval)
                    break;
    
                buffer_cur = buffer;
                for(i = 0; i < interval; ++i)
                    *buffer_cur++ = sd_raw_rec_byte();
    
                if(!callback(buffer, offset + (512 - read_length), p))
                {
                    finished = 1;
                    break;
                }
    
                read_length -= interval;
                length -= interval;
    
            }
            while(read_length > 0 && length > 0);
    
            /* read rest of data block */
            while(read_length-- > 0)
                sd_raw_rec_byte();
    
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
    
            if(length < interval)
                break;
    
            offset = (offset & 0xfffffe00) + 512;
    
        }
        while(!finished);
    
        /* deaddress card */
        unselect_card();
    
        /* let card some time to finish */
        sd_raw_rec_byte();
    
        return 1;
    #endif
}

/**
 * \ingroup sd_raw
 * Writes raw data to the card.
 *
 * \note If write buffering is enabled, you might have to
 *       call sd_raw_sync() before disconnecting the card
 *       to ensure all remaining data has been written.
 *
 * \param[in] offset The offset where to start writing.
 * \param[in] buffer The buffer containing the data to be written.
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read
 */
unsigned char sd_raw_write(unsigned int offset, const unsigned char* buffer, unsigned short length)
{
    #if SD_RAW_WRITE_SUPPORT
    
        if(get_pin_locked())
            return 0;
    
        unsigned int block_address;
        unsigned short block_offset;
        unsigned short write_length;
        while(length > 0)
        {
            /* determine byte count to write at once */
            block_address = offset & 0xfffffe00;
            block_offset = offset & 0x01ff;
            write_length = 512 - block_offset; /* write up to block border */
            if(write_length > length)
                write_length = length;
    
            /* Merge the data to write with the content of the block.
                     * Use the cached block if available.
                     */
            if(block_address != raw_block_address)
            {
                #if SD_RAW_WRITE_BUFFERING
                if(!raw_block_written)
                {
                    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
                        return 0;
                }
				#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
            }
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
        {
            memcpy(raw_block + block_offset, buffer, write_length);

            #if SD_RAW_WRITE_BUFFERING
                raw_block_written = 0;
    
                if(length == write_length)
                    return 1;
            #endif
        }

        buffer += write_length;

        /* address card */
        select_card();

        /* send single block request */
        if(sd_raw_send_command_r1(CMD_WRITE_SINGLE_BLOCK, block_address))
        {
            unselect_card();
            return 0;
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        unsigned char* cache = raw_block;
        unsigned short i;
        for(i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();

        length -= write_length;
        offset += write_length;

        #if SD_RAW_WRITE_BUFFERING
            raw_block_written = 1;
        #endif
    }

    return 1;
    #else
        return 0;
    #endif
}

/**
 * \ingroup sd_raw
 * Writes the write buffer's content to the card.
 *
 * \note When write buffering is enabled, you should
 *       call this function before disconnecting the
 *       card to ensure all remaining data has been
 *       written.
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
unsigned char sd_raw_sync()
{
    #if SD_RAW_WRITE_SUPPORT
        #if SD_RAW_WRITE_BUFFERING
        if(raw_block_written)
            return 1;
        if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
            return 0;
    #endif
    return 1;
    #else
    return 0;
    #endif
}

/**
 * \ingroup sd_raw
 * Reads informational data from the card.
 *
 * This function reads and returns the card's registers
 * containing manufacturing and status information.
 *
 * \note: The information retrieved by this function is
 *        not required in any way to operate on the card,
 *        but it might be nice to display some of the data
 *        to the user.
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
unsigned char sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;

    memset(info, 0, sizeof(*info));

    select_card();

    /* read cid register */
    if(sd_raw_send_command_r1(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    unsigned char i;
    for(i = 0; i < 18; ++i)
    {
        unsigned char b = sd_raw_rec_byte();

        switch(i)
        {
            case 0:
                info->manufacturer = b;
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
                break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
                break;
            case 8:
                info->revision = b;
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (unsigned int) b << ((12 - i) * 8);
                break;
            case 13:
                info->manufacturing_year = b << 4;
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
                info->manufacturing_month = b & 0x0f;
                break;
        }
    }

    /* read csd register */
    unsigned char csd_read_bl_len = 0;
    unsigned char csd_c_size_mult = 0;
    unsigned short csd_c_size = 0;
    if(sd_raw_send_command_r1(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(i = 0; i < 18; ++i)
    {
        unsigned char b = sd_raw_rec_byte();

        switch(i)
        {
            case 5:
                csd_read_bl_len = b & 0x0f;
                break;
            case 6:
                csd_c_size = (unsigned short) (b & 0x03) << 8;
                break;
            case 7:
                csd_c_size |= b;
                csd_c_size <<= 2;
                break;
            case 8:
                csd_c_size |= b >> 6;
                ++csd_c_size;
                break;
            case 9:
                csd_c_size_mult = (b & 0x03) << 1;
                break;
            case 10:
                csd_c_size_mult |= b >> 7;

                info->capacity = (unsigned int) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);

                break;
            case 14:
                if(b & 0x40)
                    info->flag_copy = 1;
                if(b & 0x20)
                    info->flag_write_protect = 1;
                if(b & 0x10)
                    info->flag_write_protect_temp = 1;
                info->format = (b & 0x0c) >> 2;
                break;
        }
    }

    unselect_card();

    return 1;
}

void SDoff(void)
{
    SPI_SS_IODIR &= ~(1<<SPI_SS_PIN);
   1228c:	e59f201c 	ldr	r2, [pc, #28]	; 122b0 <.text+0x22b0>
   12290:	e5923008 	ldr	r3, [r2, #8]
   12294:	e3c33080 	bic	r3, r3, #128	; 0x80
   12298:	e5823008 	str	r3, [r2, #8]
    PINSEL0 &= ~(0x1500);
   1229c:	e2822901 	add	r2, r2, #16384	; 0x4000
   122a0:	e5923000 	ldr	r3, [r2]
   122a4:	e3c33c15 	bic	r3, r3, #5376	; 0x1500
   122a8:	e5823000 	str	r3, [r2]
}
   122ac:	e12fff1e 	bx	lr
   122b0:	e0028000 	and	r8, r2, r0

000122b4 <SDon>:

void SDon(void)
{
    SPI_SS_IODIR |= (1<<SPI_SS_PIN);
   122b4:	e59f201c 	ldr	r2, [pc, #28]	; 122d8 <.text+0x22d8>
   122b8:	e5923008 	ldr	r3, [r2, #8]
   122bc:	e3833080 	orr	r3, r3, #128	; 0x80
   122c0:	e5823008 	str	r3, [r2, #8]
    PINSEL0 |= (0x1500);
   122c4:	e2822901 	add	r2, r2, #16384	; 0x4000
   122c8:	e5923000 	ldr	r3, [r2]
   122cc:	e3833c15 	orr	r3, r3, #5376	; 0x1500
   122d0:	e5823000 	str	r3, [r2]
}
   122d4:	e12fff1e 	bx	lr
   122d8:	e0028000 	and	r8, r2, r0

000122dc <sd_raw_get_info>:
   122dc:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122e0:	e2504000 	subs	r4, r0, #0	; 0x0
   122e4:	0a000097 	beq	12548 <.text+0x2548>
   122e8:	ebffff95 	bl	12144 <sd_raw_available>
   122ec:	e3500000 	cmp	r0, #0	; 0x0
   122f0:	0a000094 	beq	12548 <.text+0x2548>
   122f4:	e59f5270 	ldr	r5, [pc, #624]	; 1256c <.text+0x256c>
   122f8:	e3a01000 	mov	r1, #0	; 0x0
   122fc:	e3a0201c 	mov	r2, #28	; 0x1c
   12300:	e1a00004 	mov	r0, r4
   12304:	eb001353 	bl	17058 <memset>
   12308:	e595300c 	ldr	r3, [r5, #12]
   1230c:	e3833080 	orr	r3, r3, #128	; 0x80
   12310:	e3a0000a 	mov	r0, #10	; 0xa
   12314:	e3a01000 	mov	r1, #0	; 0x0
   12318:	e585300c 	str	r3, [r5, #12]
   1231c:	ebffffa2 	bl	121ac <sd_raw_send_command_r1>
   12320:	e3500000 	cmp	r0, #0	; 0x0
   12324:	15953004 	ldrne	r3, [r5, #4]
   12328:	13a00000 	movne	r0, #0	; 0x0
   1232c:	13833080 	orrne	r3, r3, #128	; 0x80
   12330:	15853004 	strne	r3, [r5, #4]
   12334:	1a00008a 	bne	12564 <.text+0x2564>
   12338:	ebffff90 	bl	12180 <sd_raw_rec_byte>
   1233c:	e35000fe 	cmp	r0, #254	; 0xfe
   12340:	1afffffc 	bne	12338 <sd_raw_get_info+0x5c>
   12344:	ebffff8d 	bl	12180 <sd_raw_rec_byte>
   12348:	e3a05000 	mov	r5, #0	; 0x0
   1234c:	ea000012 	b	1239c <.text+0x239c>
   12350:	ebffff8a 	bl	12180 <sd_raw_rec_byte>
   12354:	e355000e 	cmp	r5, #14	; 0xe
   12358:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   1235c:	ea000026 	b	123fc <.text+0x23fc>
   12360:	0001239c 	muleq	r1, ip, r3
   12364:	000123a4 	andeq	r2, r1, r4, lsr #7
   12368:	000123a4 	andeq	r2, r1, r4, lsr #7
   1236c:	000123ac 	andeq	r2, r1, ip, lsr #7
   12370:	000123ac 	andeq	r2, r1, ip, lsr #7
   12374:	000123ac 	andeq	r2, r1, ip, lsr #7
   12378:	000123ac 	andeq	r2, r1, ip, lsr #7
   1237c:	000123ac 	andeq	r2, r1, ip, lsr #7
   12380:	000123b8 	streqh	r2, [r1], -r8
   12384:	000123c0 	andeq	r2, r1, r0, asr #7
   12388:	000123c0 	andeq	r2, r1, r0, asr #7
   1238c:	000123c0 	andeq	r2, r1, r0, asr #7
   12390:	000123c0 	andeq	r2, r1, r0, asr #7
   12394:	000123d8 	ldreqd	r2, [r1], -r8
   12398:	000123e4 	andeq	r2, r1, r4, ror #7
   1239c:	e5c40000 	strb	r0, [r4]
   123a0:	ea00006a 	b	12550 <.text+0x2550>
   123a4:	e7c50004 	strb	r0, [r5, r4]
   123a8:	ea000013 	b	123fc <.text+0x23fc>
   123ac:	e0853004 	add	r3, r5, r4
   123b0:	e5c30001 	strb	r0, [r3, #1]
   123b4:	ea000010 	b	123fc <.text+0x23fc>
   123b8:	e5c4000a 	strb	r0, [r4, #10]
   123bc:	ea000063 	b	12550 <.text+0x2550>
   123c0:	e594200c 	ldr	r2, [r4, #12]
   123c4:	e265300c 	rsb	r3, r5, #12	; 0xc
   123c8:	e1a03183 	mov	r3, r3, lsl #3
   123cc:	e1822310 	orr	r2, r2, r0, lsl r3
   123d0:	e584200c 	str	r2, [r4, #12]
   123d4:	ea000008 	b	123fc <.text+0x23fc>
   123d8:	e1a03200 	mov	r3, r0, lsl #4
   123dc:	e5c43010 	strb	r3, [r4, #16]
   123e0:	ea00005a 	b	12550 <.text+0x2550>
   123e4:	e5d43010 	ldrb	r3, [r4, #16]
   123e8:	e200200f 	and	r2, r0, #15	; 0xf
   123ec:	e1833220 	orr	r3, r3, r0, lsr #4
   123f0:	e5c43010 	strb	r3, [r4, #16]
   123f4:	e5c42011 	strb	r2, [r4, #17]
   123f8:	ea000054 	b	12550 <.text+0x2550>
   123fc:	e2853001 	add	r3, r5, #1	; 0x1
   12400:	e20350ff 	and	r5, r3, #255	; 0xff
   12404:	e3550011 	cmp	r5, #17	; 0x11
   12408:	9affffd0 	bls	12350 <sd_raw_get_info+0x74>
   1240c:	e3a00009 	mov	r0, #9	; 0x9
   12410:	e3a01000 	mov	r1, #0	; 0x0
   12414:	ebffff64 	bl	121ac <sd_raw_send_command_r1>
   12418:	e3500000 	cmp	r0, #0	; 0x0
   1241c:	159f2148 	ldrne	r2, [pc, #328]	; 1256c <.text+0x256c>
   12420:	15923004 	ldrne	r3, [r2, #4]
   12424:	13a00000 	movne	r0, #0	; 0x0
   12428:	13833080 	orrne	r3, r3, #128	; 0x80
   1242c:	1a000043 	bne	12540 <.text+0x2540>
   12430:	ebffff52 	bl	12180 <sd_raw_rec_byte>
   12434:	e35000fe 	cmp	r0, #254	; 0xfe
   12438:	1afffffc 	bne	12430 <.text+0x2430>
   1243c:	ebffff4f 	bl	12180 <sd_raw_rec_byte>
   12440:	e3a07000 	mov	r7, #0	; 0x0
   12444:	e3a05001 	mov	r5, #1	; 0x1
   12448:	e1a08007 	mov	r8, r7
   1244c:	e1a06007 	mov	r6, r7
   12450:	ebffff4a 	bl	12180 <sd_raw_rec_byte>
   12454:	e2453005 	sub	r3, r5, #5	; 0x5
   12458:	e2852001 	add	r2, r5, #1	; 0x1
   1245c:	e3530009 	cmp	r3, #9	; 0x9
   12460:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   12464:	ea00002e 	b	12524 <.text+0x2524>
   12468:	00012490 	muleq	r1, r0, r4
   1246c:	00012498 	muleq	r1, r8, r4
   12470:	000124a4 	andeq	r2, r1, r4, lsr #9
   12474:	000124b0 	streqh	r2, [r1], -r0
   12478:	000124c8 	andeq	r2, r1, r8, asr #9
   1247c:	000124d4 	ldreqd	r2, [r1], -r4
   12480:	00012524 	andeq	r2, r1, r4, lsr #10
   12484:	00012524 	andeq	r2, r1, r4, lsr #10
   12488:	00012524 	andeq	r2, r1, r4, lsr #10
   1248c:	000124f0 	streqd	r2, [r1], -r0
   12490:	e200800f 	and	r8, r0, #15	; 0xf
   12494:	ea000030 	b	1255c <.text+0x255c>
   12498:	e2003003 	and	r3, r0, #3	; 0x3
   1249c:	e1a06403 	mov	r6, r3, lsl #8
   124a0:	ea00002d 	b	1255c <.text+0x255c>
   124a4:	e1863000 	orr	r3, r6, r0
   124a8:	e1a03903 	mov	r3, r3, lsl #18
   124ac:	ea000003 	b	124c0 <.text+0x24c0>
   124b0:	e1a03900 	mov	r3, r0, lsl #18
   124b4:	e1863c23 	orr	r3, r6, r3, lsr #24
   124b8:	e2833001 	add	r3, r3, #1	; 0x1
   124bc:	e1a03803 	mov	r3, r3, lsl #16
   124c0:	e1a06823 	mov	r6, r3, lsr #16
   124c4:	ea000024 	b	1255c <.text+0x255c>
   124c8:	e2003003 	and	r3, r0, #3	; 0x3
   124cc:	e1a07083 	mov	r7, r3, lsl #1
   124d0:	ea000021 	b	1255c <.text+0x255c>
   124d4:	e18733a0 	orr	r3, r7, r0, lsr #7
   124d8:	e20370ff 	and	r7, r3, #255	; 0xff
   124dc:	e2883002 	add	r3, r8, #2	; 0x2
   124e0:	e0873003 	add	r3, r7, r3
   124e4:	e1a03316 	mov	r3, r6, lsl r3
   124e8:	e5843014 	str	r3, [r4, #20]
   124ec:	ea00001a 	b	1255c <.text+0x255c>
   124f0:	e3100040 	tst	r0, #64	; 0x40
   124f4:	13a03001 	movne	r3, #1	; 0x1
   124f8:	15c43018 	strneb	r3, [r4, #24]
   124fc:	e3100020 	tst	r0, #32	; 0x20
   12500:	13a03001 	movne	r3, #1	; 0x1
   12504:	15c43019 	strneb	r3, [r4, #25]
   12508:	e3100010 	tst	r0, #16	; 0x10
   1250c:	13a03001 	movne	r3, #1	; 0x1
   12510:	15c4301a 	strneb	r3, [r4, #26]
   12514:	e200300c 	and	r3, r0, #12	; 0xc
   12518:	e1a03143 	mov	r3, r3, asr #2
   1251c:	e5c4301b 	strb	r3, [r4, #27]
   12520:	ea00000d 	b	1255c <.text+0x255c>
   12524:	e20250ff 	and	r5, r2, #255	; 0xff
   12528:	e3550011 	cmp	r5, #17	; 0x11
   1252c:	9affffc7 	bls	12450 <.text+0x2450>
   12530:	e59f2034 	ldr	r2, [pc, #52]	; 1256c <.text+0x256c>
   12534:	e5923004 	ldr	r3, [r2, #4]
   12538:	e3a00001 	mov	r0, #1	; 0x1
   1253c:	e3833080 	orr	r3, r3, #128	; 0x80
   12540:	e5823004 	str	r3, [r2, #4]
   12544:	ea000006 	b	12564 <.text+0x2564>
   12548:	e3a00000 	mov	r0, #0	; 0x0
   1254c:	ea000004 	b	12564 <.text+0x2564>
   12550:	e2853001 	add	r3, r5, #1	; 0x1
   12554:	e20350ff 	and	r5, r3, #255	; 0xff
   12558:	eaffff7c 	b	12350 <sd_raw_get_info+0x74>
   1255c:	e20250ff 	and	r5, r2, #255	; 0xff
   12560:	eaffffba 	b	12450 <.text+0x2450>
   12564:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   12568:	e12fff1e 	bx	lr
   1256c:	e0028000 	and	r8, r2, r0

00012570 <sd_raw_read>:
   12570:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12574:	e1a02802 	mov	r2, r2, lsl #16
   12578:	e1a09000 	mov	r9, r0
   1257c:	e1a0a001 	mov	sl, r1
   12580:	e1a08822 	mov	r8, r2, lsr #16
   12584:	ea000046 	b	126a4 <sd_raw_read+0x134>
   12588:	e1a06b89 	mov	r6, r9, lsl #23
   1258c:	e1a06ba6 	mov	r6, r6, lsr #23
   12590:	e59f3120 	ldr	r3, [pc, #288]	; 126b8 <.text+0x26b8>
   12594:	e2662c02 	rsb	r2, r6, #512	; 0x200
   12598:	e1a02802 	mov	r2, r2, lsl #16
   1259c:	e5930000 	ldr	r0, [r3]
   125a0:	e3c95f7f 	bic	r5, r9, #508	; 0x1fc
   125a4:	e3c55003 	bic	r5, r5, #3	; 0x3
   125a8:	e1a02822 	mov	r2, r2, lsr #16
   125ac:	e1580002 	cmp	r8, r2
   125b0:	31a07008 	movcc	r7, r8
   125b4:	21a07002 	movcs	r7, r2
   125b8:	e1550000 	cmp	r5, r0
   125bc:	0a00002f 	beq	12680 <sd_raw_read+0x110>
   125c0:	e59f30f4 	ldr	r3, [pc, #244]	; 126bc <.text+0x26bc>
   125c4:	e5d33000 	ldrb	r3, [r3]
   125c8:	e3530000 	cmp	r3, #0	; 0x0
   125cc:	1a000004 	bne	125e4 <sd_raw_read+0x74>
   125d0:	e59f10e8 	ldr	r1, [pc, #232]	; 126c0 <.text+0x26c0>
   125d4:	e3a02c02 	mov	r2, #512	; 0x200
   125d8:	eb00003c 	bl	126d0 <sd_raw_write>
   125dc:	e3500000 	cmp	r0, #0	; 0x0
   125e0:	0a000032 	beq	126b0 <sd_raw_read+0x140>
   125e4:	e59f40d8 	ldr	r4, [pc, #216]	; 126c4 <.text+0x26c4>
   125e8:	e594300c 	ldr	r3, [r4, #12]
   125ec:	e3833080 	orr	r3, r3, #128	; 0x80
   125f0:	e3a00011 	mov	r0, #17	; 0x11
   125f4:	e1a01005 	mov	r1, r5
   125f8:	e584300c 	str	r3, [r4, #12]
   125fc:	ebfffeea 	bl	121ac <sd_raw_send_command_r1>
   12600:	e3500000 	cmp	r0, #0	; 0x0
   12604:	15943004 	ldrne	r3, [r4, #4]
   12608:	13a00000 	movne	r0, #0	; 0x0
   1260c:	13833080 	orrne	r3, r3, #128	; 0x80
   12610:	15843004 	strne	r3, [r4, #4]
   12614:	1a000025 	bne	126b0 <sd_raw_read+0x140>
   12618:	ebfffed8 	bl	12180 <sd_raw_rec_byte>
   1261c:	e35000fe 	cmp	r0, #254	; 0xfe
   12620:	1afffffc 	bne	12618 <sd_raw_read+0xa8>
   12624:	e59f409c 	ldr	r4, [pc, #156]	; 126c8 <.text+0x26c8>
   12628:	ebfffed4 	bl	12180 <sd_raw_rec_byte>
   1262c:	e59f3098 	ldr	r3, [pc, #152]	; 126cc <.text+0x26cc>
   12630:	e5440001 	strb	r0, [r4, #-1]
   12634:	e2844001 	add	r4, r4, #1	; 0x1
   12638:	e1540003 	cmp	r4, r3
   1263c:	1afffff9 	bne	12628 <sd_raw_read+0xb8>
   12640:	e59f3070 	ldr	r3, [pc, #112]	; 126b8 <.text+0x26b8>
   12644:	e59f1074 	ldr	r1, [pc, #116]	; 126c0 <.text+0x26c0>
   12648:	e1a02007 	mov	r2, r7
   1264c:	e5835000 	str	r5, [r3]
   12650:	e0861001 	add	r1, r6, r1
   12654:	e1a0000a 	mov	r0, sl
   12658:	eb001276 	bl	17038 <memcpy>
   1265c:	ebfffec7 	bl	12180 <sd_raw_rec_byte>
   12660:	ebfffec6 	bl	12180 <sd_raw_rec_byte>
   12664:	e59f2058 	ldr	r2, [pc, #88]	; 126c4 <.text+0x26c4>
   12668:	e5923004 	ldr	r3, [r2, #4]
   1266c:	e3833080 	orr	r3, r3, #128	; 0x80
   12670:	e5823004 	str	r3, [r2, #4]
   12674:	e08aa007 	add	sl, sl, r7
   12678:	ebfffec0 	bl	12180 <sd_raw_rec_byte>
   1267c:	ea000004 	b	12694 <sd_raw_read+0x124>
   12680:	e59f1038 	ldr	r1, [pc, #56]	; 126c0 <.text+0x26c0>
   12684:	e1a0000a 	mov	r0, sl
   12688:	e0861001 	add	r1, r6, r1
   1268c:	e1a02007 	mov	r2, r7
   12690:	eb001268 	bl	17038 <memcpy>
   12694:	e0673008 	rsb	r3, r7, r8
   12698:	e1a03803 	mov	r3, r3, lsl #16
   1269c:	e0899007 	add	r9, r9, r7
   126a0:	e1a08823 	mov	r8, r3, lsr #16
   126a4:	e3580000 	cmp	r8, #0	; 0x0
   126a8:	1affffb6 	bne	12588 <sd_raw_read+0x18>
   126ac:	e3a00001 	mov	r0, #1	; 0x1
   126b0:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126b4:	e12fff1e 	bx	lr
   126b8:	40000ac4 	andmi	r0, r0, r4, asr #21
   126bc:	40000ac8 	andmi	r0, r0, r8, asr #21
   126c0:	400008c4 	andmi	r0, r0, r4, asr #17
   126c4:	e0028000 	and	r8, r2, r0
   126c8:	400008c5 	andmi	r0, r0, r5, asr #17
   126cc:	40000ac5 	andmi	r0, r0, r5, asr #21

000126d0 <sd_raw_write>:
   126d0:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126d4:	e1a02802 	mov	r2, r2, lsl #16
   126d8:	e1a0a000 	mov	sl, r0
   126dc:	e1a08001 	mov	r8, r1
   126e0:	e1a07822 	mov	r7, r2, lsr #16
   126e4:	ea000069 	b	12890 <sd_raw_write+0x1c0>
   126e8:	e1a04b8a 	mov	r4, sl, lsl #23
   126ec:	e1a04ba4 	mov	r4, r4, lsr #23
   126f0:	e59f91cc 	ldr	r9, [pc, #460]	; 128c4 <.text+0x28c4>
   126f4:	e2643c02 	rsb	r3, r4, #512	; 0x200
   126f8:	e1a03803 	mov	r3, r3, lsl #16
   126fc:	e3ca5f7f 	bic	r5, sl, #508	; 0x1fc
   12700:	e5990000 	ldr	r0, [r9]
   12704:	e3c55003 	bic	r5, r5, #3	; 0x3
   12708:	e1a03823 	mov	r3, r3, lsr #16
   1270c:	e1570003 	cmp	r7, r3
   12710:	31a06007 	movcc	r6, r7
   12714:	21a06003 	movcs	r6, r3
   12718:	e1550000 	cmp	r5, r0
   1271c:	0a000017 	beq	12780 <sd_raw_write+0xb0>
   12720:	e59f31a0 	ldr	r3, [pc, #416]	; 128c8 <.text+0x28c8>
   12724:	e5d33000 	ldrb	r3, [r3]
   12728:	e3530000 	cmp	r3, #0	; 0x0
   1272c:	1a000004 	bne	12744 <sd_raw_write+0x74>
   12730:	e59f1194 	ldr	r1, [pc, #404]	; 128cc <.text+0x28cc>
   12734:	e3a02c02 	mov	r2, #512	; 0x200
   12738:	ebffffe4 	bl	126d0 <sd_raw_write>
   1273c:	e3500000 	cmp	r0, #0	; 0x0
   12740:	0a000055 	beq	1289c <sd_raw_write+0x1cc>
   12744:	e59f3184 	ldr	r3, [pc, #388]	; 128d0 <.text+0x28d0>
   12748:	e1560003 	cmp	r6, r3
   1274c:	83a03000 	movhi	r3, #0	; 0x0
   12750:	93a03001 	movls	r3, #1	; 0x1
   12754:	e3540000 	cmp	r4, #0	; 0x0
   12758:	13833001 	orrne	r3, r3, #1	; 0x1
   1275c:	e3530000 	cmp	r3, #0	; 0x0
   12760:	0a000005 	beq	1277c <sd_raw_write+0xac>
   12764:	e1a00005 	mov	r0, r5
   12768:	e59f115c 	ldr	r1, [pc, #348]	; 128cc <.text+0x28cc>
   1276c:	e3a02c02 	mov	r2, #512	; 0x200
   12770:	ebffff7e 	bl	12570 <sd_raw_read>
   12774:	e3500000 	cmp	r0, #0	; 0x0
   12778:	0a000047 	beq	1289c <sd_raw_write+0x1cc>
   1277c:	e5895000 	str	r5, [r9]
   12780:	e59f3144 	ldr	r3, [pc, #324]	; 128cc <.text+0x28cc>
   12784:	e1580003 	cmp	r8, r3
   12788:	0a000008 	beq	127b0 <sd_raw_write+0xe0>
   1278c:	e0840003 	add	r0, r4, r3
   12790:	e1a02006 	mov	r2, r6
   12794:	e1a01008 	mov	r1, r8
   12798:	eb001226 	bl	17038 <memcpy>
   1279c:	e59f3124 	ldr	r3, [pc, #292]	; 128c8 <.text+0x28c8>
   127a0:	e3a02000 	mov	r2, #0	; 0x0
   127a4:	e1570006 	cmp	r7, r6
   127a8:	e5c32000 	strb	r2, [r3]
   127ac:	0a000041 	beq	128b8 <sd_raw_write+0x1e8>
   127b0:	e59f411c 	ldr	r4, [pc, #284]	; 128d4 <.text+0x28d4>
   127b4:	e594300c 	ldr	r3, [r4, #12]
   127b8:	e3833080 	orr	r3, r3, #128	; 0x80
   127bc:	e1a01005 	mov	r1, r5
   127c0:	e3a00018 	mov	r0, #24	; 0x18
   127c4:	e584300c 	str	r3, [r4, #12]
   127c8:	ebfffe77 	bl	121ac <sd_raw_send_command_r1>
   127cc:	e3500000 	cmp	r0, #0	; 0x0
   127d0:	1a000033 	bne	128a4 <sd_raw_write+0x1d4>
   127d4:	e59f30fc 	ldr	r3, [pc, #252]	; 128d8 <.text+0x28d8>
   127d8:	e3a020fe 	mov	r2, #254	; 0xfe
   127dc:	e5832008 	str	r2, [r3, #8]
   127e0:	e59f30f0 	ldr	r3, [pc, #240]	; 128d8 <.text+0x28d8>
   127e4:	e5933004 	ldr	r3, [r3, #4]
   127e8:	e3130080 	tst	r3, #128	; 0x80
   127ec:	0afffffb 	beq	127e0 <sd_raw_write+0x110>
   127f0:	e59f10e4 	ldr	r1, [pc, #228]	; 128dc <.text+0x28dc>
   127f4:	e5512001 	ldrb	r2, [r1, #-1]
   127f8:	e59f30d8 	ldr	r3, [pc, #216]	; 128d8 <.text+0x28d8>
   127fc:	e5832008 	str	r2, [r3, #8]
   12800:	e59f20d0 	ldr	r2, [pc, #208]	; 128d8 <.text+0x28d8>
   12804:	e5923004 	ldr	r3, [r2, #4]
   12808:	e3130080 	tst	r3, #128	; 0x80
   1280c:	0afffffb 	beq	12800 <sd_raw_write+0x130>
   12810:	e59f30c8 	ldr	r3, [pc, #200]	; 128e0 <.text+0x28e0>
   12814:	e2811001 	add	r1, r1, #1	; 0x1
   12818:	e1510003 	cmp	r1, r3
   1281c:	1afffff4 	bne	127f4 <sd_raw_write+0x124>
   12820:	e3a030ff 	mov	r3, #255	; 0xff
   12824:	e5823008 	str	r3, [r2, #8]
   12828:	e59f20a8 	ldr	r2, [pc, #168]	; 128d8 <.text+0x28d8>
   1282c:	e5923004 	ldr	r3, [r2, #4]
   12830:	e3130080 	tst	r3, #128	; 0x80
   12834:	0afffffb 	beq	12828 <sd_raw_write+0x158>
   12838:	e3a030ff 	mov	r3, #255	; 0xff
   1283c:	e5823008 	str	r3, [r2, #8]
   12840:	e59f3090 	ldr	r3, [pc, #144]	; 128d8 <.text+0x28d8>
   12844:	e5933004 	ldr	r3, [r3, #4]
   12848:	e3130080 	tst	r3, #128	; 0x80
   1284c:	0afffffb 	beq	12840 <sd_raw_write+0x170>
   12850:	ebfffe4a 	bl	12180 <sd_raw_rec_byte>
   12854:	e35000ff 	cmp	r0, #255	; 0xff
   12858:	1afffffc 	bne	12850 <sd_raw_write+0x180>
   1285c:	ebfffe47 	bl	12180 <sd_raw_rec_byte>
   12860:	e59f206c 	ldr	r2, [pc, #108]	; 128d4 <.text+0x28d4>
   12864:	e5923004 	ldr	r3, [r2, #4]
   12868:	e3833080 	orr	r3, r3, #128	; 0x80
   1286c:	e5823004 	str	r3, [r2, #4]
   12870:	e59f3050 	ldr	r3, [pc, #80]	; 128c8 <.text+0x28c8>
   12874:	e0661007 	rsb	r1, r6, r7
   12878:	e3a02001 	mov	r2, #1	; 0x1
   1287c:	e1a01801 	mov	r1, r1, lsl #16
   12880:	e5c32000 	strb	r2, [r3]
   12884:	e08aa006 	add	sl, sl, r6
   12888:	e0888006 	add	r8, r8, r6
   1288c:	e1a07821 	mov	r7, r1, lsr #16
   12890:	e3570000 	cmp	r7, #0	; 0x0
   12894:	1affff93 	bne	126e8 <sd_raw_write+0x18>
   12898:	ea000006 	b	128b8 <sd_raw_write+0x1e8>
   1289c:	e3a00000 	mov	r0, #0	; 0x0
   128a0:	ea000005 	b	128bc <sd_raw_write+0x1ec>
   128a4:	e5943004 	ldr	r3, [r4, #4]
   128a8:	e3a00000 	mov	r0, #0	; 0x0
   128ac:	e3833080 	orr	r3, r3, #128	; 0x80
   128b0:	e5843004 	str	r3, [r4, #4]
   128b4:	ea000000 	b	128bc <sd_raw_write+0x1ec>
   128b8:	e3a00001 	mov	r0, #1	; 0x1
   128bc:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128c0:	e12fff1e 	bx	lr
   128c4:	40000ac4 	andmi	r0, r0, r4, asr #21
   128c8:	40000ac8 	andmi	r0, r0, r8, asr #21
   128cc:	400008c4 	andmi	r0, r0, r4, asr #17
   128d0:	000001ff 	streqd	r0, [r0], -pc
   128d4:	e0028000 	and	r8, r2, r0
   128d8:	e0020000 	and	r0, r2, r0
   128dc:	400008c5 	andmi	r0, r0, r5, asr #17
   128e0:	40000ac5 	andmi	r0, r0, r5, asr #21

000128e4 <sd_raw_sync>:
   128e4:	e52de004 	str	lr, [sp, #-4]!
   128e8:	e59f3030 	ldr	r3, [pc, #48]	; 12920 <.text+0x2920>
   128ec:	e5d33000 	ldrb	r3, [r3]
   128f0:	e3530000 	cmp	r3, #0	; 0x0
   128f4:	e59f1028 	ldr	r1, [pc, #40]	; 12924 <.text+0x2924>
   128f8:	e3a02c02 	mov	r2, #512	; 0x200
   128fc:	e3a00001 	mov	r0, #1	; 0x1
   12900:	1a000004 	bne	12918 <sd_raw_sync+0x34>
   12904:	e59f301c 	ldr	r3, [pc, #28]	; 12928 <.text+0x2928>
   12908:	e5930000 	ldr	r0, [r3]
   1290c:	ebffff6f 	bl	126d0 <sd_raw_write>
   12910:	e2500000 	subs	r0, r0, #0	; 0x0
   12914:	13a00001 	movne	r0, #1	; 0x1
   12918:	e49de004 	ldr	lr, [sp], #4
   1291c:	e12fff1e 	bx	lr
   12920:	40000ac8 	andmi	r0, r0, r8, asr #21
   12924:	400008c4 	andmi	r0, r0, r4, asr #17
   12928:	40000ac4 	andmi	r0, r0, r4, asr #21

0001292c <sd_raw_read_interval>:
   1292c:	e1a02802 	mov	r2, r2, lsl #16
   12930:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   12934:	e1a03803 	mov	r3, r3, lsl #16
   12938:	e3520000 	cmp	r2, #0	; 0x0
   1293c:	13510000 	cmpne	r1, #0	; 0x0
   12940:	e1a07001 	mov	r7, r1
   12944:	e1a06000 	mov	r6, r0
   12948:	e1a05823 	mov	r5, r3, lsr #16
   1294c:	e28d801c 	add	r8, sp, #28	; 0x1c
   12950:	e8980500 	ldmia	r8, {r8, sl}
   12954:	e1a04822 	mov	r4, r2, lsr #16
   12958:	0a00001a 	beq	129c8 <sd_raw_read_interval+0x9c>
   1295c:	e2783001 	rsbs	r3, r8, #1	; 0x1
   12960:	33a03000 	movcc	r3, #0	; 0x0
   12964:	e1550004 	cmp	r5, r4
   12968:	33833001 	orrcc	r3, r3, #1	; 0x1
   1296c:	e3530000 	cmp	r3, #0	; 0x0
   12970:	0a00000e 	beq	129b0 <sd_raw_read_interval+0x84>
   12974:	ea000013 	b	129c8 <sd_raw_read_interval+0x9c>
   12978:	ebfffefc 	bl	12570 <sd_raw_read>
   1297c:	e3500000 	cmp	r0, #0	; 0x0
   12980:	e1a01006 	mov	r1, r6
   12984:	e1a0200a 	mov	r2, sl
   12988:	e1a00007 	mov	r0, r7
   1298c:	e0866004 	add	r6, r6, r4
   12990:	0a00000c 	beq	129c8 <sd_raw_read_interval+0x9c>
   12994:	e1a0e00f 	mov	lr, pc
   12998:	e12fff18 	bx	r8
   1299c:	e3500000 	cmp	r0, #0	; 0x0
   129a0:	0a00000a 	beq	129d0 <sd_raw_read_interval+0xa4>
   129a4:	e0643005 	rsb	r3, r4, r5
   129a8:	e1a03803 	mov	r3, r3, lsl #16
   129ac:	e1a05823 	mov	r5, r3, lsr #16
   129b0:	e1550004 	cmp	r5, r4
   129b4:	e1a00006 	mov	r0, r6
   129b8:	e1a01007 	mov	r1, r7
   129bc:	e1a02004 	mov	r2, r4
   129c0:	2affffec 	bcs	12978 <sd_raw_read_interval+0x4c>
   129c4:	ea000001 	b	129d0 <sd_raw_read_interval+0xa4>
   129c8:	e3a00000 	mov	r0, #0	; 0x0
   129cc:	ea000000 	b	129d4 <sd_raw_read_interval+0xa8>
   129d0:	e3a00001 	mov	r0, #1	; 0x1
   129d4:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   129d8:	e12fff1e 	bx	lr

000129dc <sd_raw_init>:
   129dc:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   129e0:	e59f41e0 	ldr	r4, [pc, #480]	; 12bc8 <.text+0x2bc8>
   129e4:	e5943008 	ldr	r3, [r4, #8]
   129e8:	e3833080 	orr	r3, r3, #128	; 0x80
   129ec:	e5843008 	str	r3, [r4, #8]
   129f0:	e59f21d4 	ldr	r2, [pc, #468]	; 12bcc <.text+0x2bcc>
   129f4:	e5923000 	ldr	r3, [r2]
   129f8:	e3833a01 	orr	r3, r3, #4096	; 0x1000
   129fc:	e5823000 	str	r3, [r2]
   12a00:	e5923000 	ldr	r3, [r2]
   12a04:	e3833b01 	orr	r3, r3, #1024	; 0x400
   12a08:	e5823000 	str	r3, [r2]
   12a0c:	e5923000 	ldr	r3, [r2]
   12a10:	e3833c01 	orr	r3, r3, #256	; 0x100
   12a14:	e5823000 	str	r3, [r2]
   12a18:	e5943004 	ldr	r3, [r4, #4]
   12a1c:	e3833080 	orr	r3, r3, #128	; 0x80
   12a20:	e5843004 	str	r3, [r4, #4]
   12a24:	e2422903 	sub	r2, r2, #49152	; 0xc000
   12a28:	e3a03096 	mov	r3, #150	; 0x96
   12a2c:	e582300c 	str	r3, [r2, #12]
   12a30:	e3a03038 	mov	r3, #56	; 0x38
   12a34:	e5823000 	str	r3, [r2]
   12a38:	ebfffdc1 	bl	12144 <sd_raw_available>
   12a3c:	e2505000 	subs	r5, r0, #0	; 0x0
   12a40:	1a000002 	bne	12a50 <sd_raw_init+0x74>
   12a44:	e59f0184 	ldr	r0, [pc, #388]	; 12bd0 <.text+0x2bd0>
   12a48:	ebfffb72 	bl	11818 <rprintf>
   12a4c:	ea000045 	b	12b68 <sd_raw_init+0x18c>
   12a50:	e5943008 	ldr	r3, [r4, #8]
   12a54:	e3833080 	orr	r3, r3, #128	; 0x80
   12a58:	e5843008 	str	r3, [r4, #8]
   12a5c:	e5943004 	ldr	r3, [r4, #4]
   12a60:	e3833080 	orr	r3, r3, #128	; 0x80
   12a64:	e5843004 	str	r3, [r4, #4]
   12a68:	e3a04000 	mov	r4, #0	; 0x0
   12a6c:	ebfffdc3 	bl	12180 <sd_raw_rec_byte>
   12a70:	e2843001 	add	r3, r4, #1	; 0x1
   12a74:	e1a03803 	mov	r3, r3, lsl #16
   12a78:	e1a04823 	mov	r4, r3, lsr #16
   12a7c:	e354000a 	cmp	r4, #10	; 0xa
   12a80:	1afffff9 	bne	12a6c <sd_raw_init+0x90>
   12a84:	e59f213c 	ldr	r2, [pc, #316]	; 12bc8 <.text+0x2bc8>
   12a88:	e592300c 	ldr	r3, [r2, #12]
   12a8c:	e3833080 	orr	r3, r3, #128	; 0x80
   12a90:	e582300c 	str	r3, [r2, #12]
   12a94:	e3a04000 	mov	r4, #0	; 0x0
   12a98:	e3a00000 	mov	r0, #0	; 0x0
   12a9c:	e1a01000 	mov	r1, r0
   12aa0:	ebfffdc1 	bl	121ac <sd_raw_send_command_r1>
   12aa4:	e2843001 	add	r3, r4, #1	; 0x1
   12aa8:	e3500001 	cmp	r0, #1	; 0x1
   12aac:	e1a02803 	mov	r2, r3, lsl #16
   12ab0:	0a000004 	beq	12ac8 <sd_raw_init+0xec>
   12ab4:	e59f3118 	ldr	r3, [pc, #280]	; 12bd4 <.text+0x2bd4>
   12ab8:	e1540003 	cmp	r4, r3
   12abc:	e1a04822 	mov	r4, r2, lsr #16
   12ac0:	0a00002a 	beq	12b70 <sd_raw_init+0x194>
   12ac4:	eafffff3 	b	12a98 <sd_raw_init+0xbc>
   12ac8:	e3a04000 	mov	r4, #0	; 0x0
   12acc:	e3a01000 	mov	r1, #0	; 0x0
   12ad0:	e3a00001 	mov	r0, #1	; 0x1
   12ad4:	ebfffdb4 	bl	121ac <sd_raw_send_command_r1>
   12ad8:	e2843001 	add	r3, r4, #1	; 0x1
   12adc:	e3100001 	tst	r0, #1	; 0x1
   12ae0:	e1a02803 	mov	r2, r3, lsl #16
   12ae4:	0a000004 	beq	12afc <sd_raw_init+0x120>
   12ae8:	e59f30e8 	ldr	r3, [pc, #232]	; 12bd8 <.text+0x2bd8>
   12aec:	e1540003 	cmp	r4, r3
   12af0:	e1a04822 	mov	r4, r2, lsr #16
   12af4:	0a000026 	beq	12b94 <sd_raw_init+0x1b8>
   12af8:	eafffff3 	b	12acc <sd_raw_init+0xf0>
   12afc:	e3a00010 	mov	r0, #16	; 0x10
   12b00:	e3a01c02 	mov	r1, #512	; 0x200
   12b04:	ebfffda8 	bl	121ac <sd_raw_send_command_r1>
   12b08:	e3500000 	cmp	r0, #0	; 0x0
   12b0c:	159f20b4 	ldrne	r2, [pc, #180]	; 12bc8 <.text+0x2bc8>
   12b10:	15923004 	ldrne	r3, [r2, #4]
   12b14:	159f00c0 	ldrne	r0, [pc, #192]	; 12bdc <.text+0x2bdc>
   12b18:	13833080 	orrne	r3, r3, #128	; 0x80
   12b1c:	1a000020 	bne	12ba4 <sd_raw_init+0x1c8>
   12b20:	e59fc0a0 	ldr	ip, [pc, #160]	; 12bc8 <.text+0x2bc8>
   12b24:	e59c3004 	ldr	r3, [ip, #4]
   12b28:	e3833080 	orr	r3, r3, #128	; 0x80
   12b2c:	e58c3004 	str	r3, [ip, #4]
   12b30:	e59f30a8 	ldr	r3, [pc, #168]	; 12be0 <.text+0x2be0>
   12b34:	e3e0c000 	mvn	ip, #0	; 0x0
   12b38:	e583c000 	str	ip, [r3]
   12b3c:	e59f30a0 	ldr	r3, [pc, #160]	; 12be4 <.text+0x2be4>
   12b40:	e28cc03d 	add	ip, ip, #61	; 0x3d
   12b44:	e583c00c 	str	ip, [r3, #12]
   12b48:	e59f3098 	ldr	r3, [pc, #152]	; 12be8 <.text+0x2be8>
   12b4c:	e3a05001 	mov	r5, #1	; 0x1
   12b50:	e59f1094 	ldr	r1, [pc, #148]	; 12bec <.text+0x2bec>
   12b54:	e3a02c02 	mov	r2, #512	; 0x200
   12b58:	e5c35000 	strb	r5, [r3]
   12b5c:	ebfffe83 	bl	12570 <sd_raw_read>
   12b60:	e2504000 	subs	r4, r0, #0	; 0x0
   12b64:	0a000012 	beq	12bb4 <sd_raw_init+0x1d8>
   12b68:	e1a00005 	mov	r0, r5
   12b6c:	ea000013 	b	12bc0 <sd_raw_init+0x1e4>
   12b70:	e1a01000 	mov	r1, r0
   12b74:	e59f0074 	ldr	r0, [pc, #116]	; 12bf0 <.text+0x2bf0>
   12b78:	ebfffb26 	bl	11818 <rprintf>
   12b7c:	e59f2044 	ldr	r2, [pc, #68]	; 12bc8 <.text+0x2bc8>
   12b80:	e5923004 	ldr	r3, [r2, #4]
   12b84:	e3a00000 	mov	r0, #0	; 0x0
   12b88:	e3833080 	orr	r3, r3, #128	; 0x80
   12b8c:	e5823004 	str	r3, [r2, #4]
   12b90:	ea00000a 	b	12bc0 <sd_raw_init+0x1e4>
   12b94:	e59f202c 	ldr	r2, [pc, #44]	; 12bc8 <.text+0x2bc8>
   12b98:	e5923004 	ldr	r3, [r2, #4]
   12b9c:	e59f0050 	ldr	r0, [pc, #80]	; 12bf4 <.text+0x2bf4>
   12ba0:	e3833080 	orr	r3, r3, #128	; 0x80
   12ba4:	e5823004 	str	r3, [r2, #4]
   12ba8:	ebfffb1a 	bl	11818 <rprintf>
   12bac:	e3a00000 	mov	r0, #0	; 0x0
   12bb0:	ea000002 	b	12bc0 <sd_raw_init+0x1e4>
   12bb4:	e59f003c 	ldr	r0, [pc, #60]	; 12bf8 <.text+0x2bf8>
   12bb8:	ebfffb16 	bl	11818 <rprintf>
   12bbc:	e1a00004 	mov	r0, r4
   12bc0:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   12bc4:	e12fff1e 	bx	lr
   12bc8:	e0028000 	and	r8, r2, r0
   12bcc:	e002c000 	and	ip, r2, r0
   12bd0:	0001df4c 	andeq	sp, r1, ip, asr #30
   12bd4:	000001ff 	streqd	r0, [r0], -pc
   12bd8:	00007fff 	streqd	r7, [r0], -pc
   12bdc:	0001df88 	andeq	sp, r1, r8, lsl #31
   12be0:	40000ac4 	andmi	r0, r0, r4, asr #21
   12be4:	e0020000 	and	r0, r2, r0
   12be8:	40000ac8 	andmi	r0, r0, r8, asr #21
   12bec:	400008c4 	andmi	r0, r0, r4, asr #17
   12bf0:	0001df64 	andeq	sp, r1, r4, ror #30
   12bf4:	0001df78 	andeq	sp, r1, r8, ror pc
   12bf8:	0001dfa0 	andeq	sp, r1, r0, lsr #31

00012bfc <format_card>:

//NES : 10-28-7 
//Low-level formats a 512MB card
//Assumes *many* things
//You must pass this fuction 0xAA to get it to work (safety check)
char format_card(char make_sure)
{
   12bfc:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c00:	e20000ff 	and	r0, r0, #255	; 0xff
	#define MBR_LOCATION	0x00
	#define BR_LOCATION		(MBR_LOCATION+0x80000)
	#define FAT_TABLE		(BR_LOCATION + (0x200 * 512))
	#define ROOT_DIR		(BR_LOCATION + (0x0200 * 512) + (0x00F5 * 2 * 512))

	//Safety check
	if (make_sure != 0xAA) return 0;
   12c04:	e35000aa 	cmp	r0, #170	; 0xaa
   12c08:	e24ddc02 	sub	sp, sp, #512	; 0x200
   12c0c:	13a00000 	movne	r0, #0	; 0x0
   12c10:	1a00006d 	bne	12dcc <format_card+0x1d0>
   12c14:	e3a04000 	mov	r4, #0	; 0x0
	
	int i;
	unsigned char my_buff[512];
	for(i = 0 ; i < 512 ; i++) my_buff[i] = 0x00;
   12c18:	e3a06000 	mov	r6, #0	; 0x0
   12c1c:	e7c4600d 	strb	r6, [r4, sp]
   12c20:	e2844001 	add	r4, r4, #1	; 0x1
   12c24:	e3540c02 	cmp	r4, #512	; 0x200
   12c28:	1afffffa 	bne	12c18 <format_card+0x1c>
	
	//Init SD card interface
	sd_raw_init();
   12c2c:	ebffff6a 	bl	129dc <sd_raw_init>

	//Erase Master Boot record
	sd_raw_sync();
   12c30:	ebffff2b 	bl	128e4 <sd_raw_sync>
	sd_raw_write(MBR_LOCATION, my_buff, 512);
   12c34:	e1a02004 	mov	r2, r4
   12c38:	e1a0100d 	mov	r1, sp
   12c3c:	e1a00006 	mov	r0, r6
   12c40:	ebfffea2 	bl	126d0 <sd_raw_write>

	//Erase Boot record
	sd_raw_sync();
   12c44:	ebffff26 	bl	128e4 <sd_raw_sync>
	sd_raw_write(BR_LOCATION, my_buff, 512);
   12c48:	e1a02004 	mov	r2, r4
   12c4c:	e1a0100d 	mov	r1, sp
   12c50:	e3a00702 	mov	r0, #524288	; 0x80000
   12c54:	ebfffe9d 	bl	126d0 <sd_raw_write>
   12c58:	e3a04703 	mov	r4, #786432	; 0xc0000

	//Erase FAT tables
	for(i = 0 ; i < 0x00F5 ; i++) //0x00F5 = 245 bytes : comes from byte 0x16 from Boot Record
	{
		sd_raw_sync();
   12c5c:	ebffff20 	bl	128e4 <sd_raw_sync>
		sd_raw_write( (FAT_TABLE + (i*512)), my_buff, 512);
   12c60:	e1a00004 	mov	r0, r4
   12c64:	e1a0100d 	mov	r1, sp
   12c68:	e3a02c02 	mov	r2, #512	; 0x200
   12c6c:	ebfffe97 	bl	126d0 <sd_raw_write>
   12c70:	e59f3160 	ldr	r3, [pc, #352]	; 12dd8 <.text+0x2dd8>
   12c74:	e2844c02 	add	r4, r4, #512	; 0x200
   12c78:	e1540003 	cmp	r4, r3
   12c7c:	e1a0900d 	mov	r9, sp
   12c80:	1afffff5 	bne	12c5c <format_card+0x60>
	}
	
	//Write Master Boot Record
	#define PART1	0x01BE
	my_buff[PART1 + 0] = 0x00;
	my_buff[PART1 + 1] = 0x00;
	my_buff[PART1 + 2] = 0x01;
	my_buff[PART1 + 3] = 0x01;
	my_buff[PART1 + 4] = 0x06;
   12c84:	e3a03006 	mov	r3, #6	; 0x6
   12c88:	e5cd31c2 	strb	r3, [sp, #450]
	my_buff[PART1 + 5] = 0x1F;
   12c8c:	e2833019 	add	r3, r3, #25	; 0x19
   12c90:	e5cd31c3 	strb	r3, [sp, #451]
	my_buff[PART1 + 6] = 0xE0;
   12c94:	e3e0301f 	mvn	r3, #31	; 0x1f
   12c98:	e3a04000 	mov	r4, #0	; 0x0
   12c9c:	e3a02001 	mov	r2, #1	; 0x1
	my_buff[PART1 + 7] = 0xD3;
	my_buff[PART1 + 8] = 0x00;
	my_buff[PART1 + 9] = 0x04;
	my_buff[PART1 + 10] = 0x00;
	my_buff[PART1 + 11] = 0x00;
	my_buff[PART1 + 12] = 0x00;
	my_buff[PART1 + 13] = 0x4C;
	my_buff[PART1 + 14] = 0x0F;
	my_buff[510] = 0x55;
   12ca0:	e3a05055 	mov	r5, #85	; 0x55
   12ca4:	e3a06004 	mov	r6, #4	; 0x4
   12ca8:	e3a0704c 	mov	r7, #76	; 0x4c
   12cac:	e3a0800f 	mov	r8, #15	; 0xf
	my_buff[511] = 0xAA;
   12cb0:	e3e0a055 	mvn	sl, #85	; 0x55
   12cb4:	e5cd31c4 	strb	r3, [sp, #452]
   12cb8:	e3e0302c 	mvn	r3, #44	; 0x2c
   12cbc:	e5cd31c5 	strb	r3, [sp, #453]
   12cc0:	e5cd21c1 	strb	r2, [sp, #449]
   12cc4:	e5cd21c0 	strb	r2, [sp, #448]
   12cc8:	e5cd41be 	strb	r4, [sp, #446]
   12ccc:	e5cd41bf 	strb	r4, [sp, #447]
   12cd0:	e5cd41c6 	strb	r4, [sp, #454]
   12cd4:	e5cd61c7 	strb	r6, [sp, #455]
   12cd8:	e5cd41c8 	strb	r4, [sp, #456]
   12cdc:	e5cd41c9 	strb	r4, [sp, #457]
   12ce0:	e5cd41ca 	strb	r4, [sp, #458]
   12ce4:	e5cd71cb 	strb	r7, [sp, #459]
   12ce8:	e5cd81cc 	strb	r8, [sp, #460]
   12cec:	e5cd51fe 	strb	r5, [sp, #510]
   12cf0:	e5cda1ff 	strb	sl, [sp, #511]

	sd_raw_sync();
   12cf4:	ebfffefa 	bl	128e4 <sd_raw_sync>
	sd_raw_write(MBR_LOCATION, my_buff, 512);
   12cf8:	e1a0100d 	mov	r1, sp
   12cfc:	e3a02c02 	mov	r2, #512	; 0x200
   12d00:	e1a00004 	mov	r0, r4
   12d04:	ebfffe71 	bl	126d0 <sd_raw_write>
	sd_raw_sync();
   12d08:	ebfffef5 	bl	128e4 <sd_raw_sync>

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
   12d0c:	e3e03014 	mvn	r3, #20	; 0x14
   12d10:	e5cd3000 	strb	r3, [sp]
	my_buff[1] = 0xFE;
   12d14:	e2833013 	add	r3, r3, #19	; 0x13
   12d18:	e5cd3001 	strb	r3, [sp, #1]
	my_buff[2] = 0x90;
   12d1c:	e3e0306f 	mvn	r3, #111	; 0x6f
   12d20:	e5cd3002 	strb	r3, [sp, #2]
	my_buff[12] = 0x02;
	my_buff[13] = 0x10;
   12d24:	e2833080 	add	r3, r3, #128	; 0x80
   12d28:	e5cd300d 	strb	r3, [sp, #13]
	my_buff[14] = 0x16;
   12d2c:	e2833006 	add	r3, r3, #6	; 0x6
   12d30:	e5cd300e 	strb	r3, [sp, #14]
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
   12d34:	e3e03007 	mvn	r3, #7	; 0x7
   12d38:	e5cd3015 	strb	r3, [sp, #21]
	my_buff[22] = 0xF5;
   12d3c:	e3e0300a 	mvn	r3, #10	; 0xa
   12d40:	e5cd3016 	strb	r3, [sp, #22]
	my_buff[24] = 0x20;
	my_buff[26] = 0x20;
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
   12d44:	e2833034 	add	r3, r3, #52	; 0x34
   12d48:	e5cd3026 	strb	r3, [sp, #38]
	my_buff[54] = 0x46;
   12d4c:	e283301d 	add	r3, r3, #29	; 0x1d
   12d50:	e5cd3036 	strb	r3, [sp, #54]
	my_buff[55] = 0x41;
   12d54:	e3a03041 	mov	r3, #65	; 0x41
   12d58:	e5cd3037 	strb	r3, [sp, #55]
	my_buff[56] = 0x54;
   12d5c:	e2833013 	add	r3, r3, #19	; 0x13
   12d60:	e5cd3038 	strb	r3, [sp, #56]
	my_buff[57] = 0x31;
   12d64:	e3a03031 	mov	r3, #49	; 0x31
   12d68:	e3a02020 	mov	r2, #32	; 0x20
   12d6c:	e3a01002 	mov	r1, #2	; 0x2
   12d70:	e5cd3039 	strb	r3, [sp, #57]
	my_buff[58] = 0x36;
   12d74:	e2833005 	add	r3, r3, #5	; 0x5
   12d78:	e5cd303a 	strb	r3, [sp, #58]
   12d7c:	e5cd1012 	strb	r1, [sp, #18]
	my_buff[59] = 0x20;
	my_buff[60] = 0x20;
	my_buff[61] = 0x20;
   12d80:	e5cd203d 	strb	r2, [sp, #61]
   12d84:	e5cd100c 	strb	r1, [sp, #12]
   12d88:	e5cd1010 	strb	r1, [sp, #16]
   12d8c:	e5cd2018 	strb	r2, [sp, #24]
   12d90:	e5cd201a 	strb	r2, [sp, #26]
   12d94:	e5cd203b 	strb	r2, [sp, #59]
   12d98:	e5cd203c 	strb	r2, [sp, #60]
   12d9c:	e5cd601d 	strb	r6, [sp, #29]
   12da0:	e5cd7021 	strb	r7, [sp, #33]
   12da4:	e5cd8022 	strb	r8, [sp, #34]
	my_buff[510] = 0x55;
	my_buff[511] = 0xAA;
   12da8:	e5cda1ff 	strb	sl, [sp, #511]
   12dac:	e5cd51fe 	strb	r5, [sp, #510]
	
	sd_raw_sync();
   12db0:	ebfffecb 	bl	128e4 <sd_raw_sync>
	sd_raw_write(BR_LOCATION, my_buff, 512);
   12db4:	e1a0100d 	mov	r1, sp
   12db8:	e3a02c02 	mov	r2, #512	; 0x200
   12dbc:	e3a00702 	mov	r0, #524288	; 0x80000
   12dc0:	ebfffe42 	bl	126d0 <sd_raw_write>
	sd_raw_sync();
   12dc4:	ebfffec6 	bl	128e4 <sd_raw_sync>
   12dc8:	e1a00005 	mov	r0, r5
	
	return(0x55); //Successful format
}
   12dcc:	e28ddc02 	add	sp, sp, #512	; 0x200
   12dd0:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12dd4:	e12fff1e 	bx	lr
   12dd8:	000dea00 	andeq	lr, sp, r0, lsl #20

00012ddc <fat16_dir_entry_seek_callback>:
{
    struct fat16_read_callback_arg* arg = p;

    /* skip deleted or empty entries */
    if(buffer[0] == FAT16_DIRENTRY_DELETED || !buffer[0])
   12ddc:	e5d03000 	ldrb	r3, [r0]
   12de0:	e3530000 	cmp	r3, #0	; 0x0
   12de4:	135300e5 	cmpne	r3, #229	; 0xe5
   12de8:	0a000015 	beq	12e44 <fat16_dir_entry_seek_callback+0x68>
        return 1;

    if(arg->entry_cur == arg->entry_num)
   12dec:	e1d2c0b0 	ldrh	ip, [r2]
   12df0:	e1d230b2 	ldrh	r3, [r2, #2]
   12df4:	e153000c 	cmp	r3, ip
   12df8:	1a00000b 	bne	12e2c <fat16_dir_entry_seek_callback+0x50>
    {
        arg->entry_offset = offset;
   12dfc:	e5821004 	str	r1, [r2, #4]
        arg->byte_count = buffer[11] == 0x0f ?
   12e00:	e5d0300b 	ldrb	r3, [r0, #11]
   12e04:	e353000f 	cmp	r3, #15	; 0xf
   12e08:	05d03000 	ldreqb	r3, [r0]
   12e0c:	0203303f 	andeq	r3, r3, #63	; 0x3f
   12e10:	01a03283 	moveq	r3, r3, lsl #5
   12e14:	02833020 	addeq	r3, r3, #32	; 0x20
   12e18:	e3a01020 	mov	r1, #32	; 0x20
   12e1c:	e3a00000 	mov	r0, #0	; 0x0
   12e20:	020310ff 	andeq	r1, r3, #255	; 0xff
   12e24:	e5c21008 	strb	r1, [r2, #8]
   12e28:	e12fff1e 	bx	lr
        ((buffer[0] & FAT16_DIRENTRY_LFNSEQMASK) + 1) * 32 :
        32;
        return 0;
    }

    /* if we read a 8.3 entry, we reached a new directory entry */
    if(buffer[11] != 0x0f)
   12e2c:	e5d0300b 	ldrb	r3, [r0, #11]
        ++arg->entry_cur;
   12e30:	e28c1001 	add	r1, ip, #1	; 0x1
   12e34:	e353000f 	cmp	r3, #15	; 0xf
   12e38:	e3a00001 	mov	r0, #1	; 0x1
   12e3c:	11c210b0 	strneh	r1, [r2]
   12e40:	112fff1e 	bxne	lr
   12e44:	e3a00001 	mov	r0, #1	; 0x1

    return 1;
}
   12e48:	e12fff1e 	bx	lr

00012e4c <fat16_dir_entry_read_callback>:

/**
 * \ingroup fat16_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat16_dir_entry_read_callback(uint8_t* buffer, uint32_t offset, void* p)
{
   12e4c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    struct fat16_dir_entry_struct* dir_entry = p;

    /* there should not be any deleted or empty entries */
    if(buffer[0] == FAT16_DIRENTRY_DELETED || !buffer[0])
   12e50:	e5d03000 	ldrb	r3, [r0]
   12e54:	e3530000 	cmp	r3, #0	; 0x0
   12e58:	135300e5 	cmpne	r3, #229	; 0xe5
   12e5c:	e1a0c002 	mov	ip, r2
   12e60:	0a000062 	beq	12ff0 <fat16_dir_entry_read_callback+0x1a4>
        return 0;

    if(!dir_entry->entry_offset)
   12e64:	e5923028 	ldr	r3, [r2, #40]
   12e68:	e3530000 	cmp	r3, #0	; 0x0
        dir_entry->entry_offset = offset;
   12e6c:	05821028 	streq	r1, [r2, #40]

    switch(fat16_interpret_dir_entry(dir_entry, buffer))
    {
        case 0: /* failure */
            return 0;
            case 1: /* buffer successfully parsed, continue */
            return 1;
            case 2: /* directory entry complete, finish */
            return 0;
        }

    return 0;
}

/**
 * \ingroup fat16_fs
 * Interprets a raw directory entry and puts the contained
 * information into the directory entry.
 *
 * For a single file there may exist multiple directory
 * entries. All except the last one are lfn entries, which
 * contain parts of the long filename. The last directory
 * entry is a traditional 8.3 style one. It contains all
 * other information like size, cluster, date and time.
 *
 * \param[in,out] dir_entry The directory entry to fill.
 * \param[in] raw_entry A pointer to 32 bytes of raw data.
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat16_interpret_dir_entry(struct fat16_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
   12e70:	e5d02000 	ldrb	r2, [r0]
   12e74:	e3520000 	cmp	r2, #0	; 0x0
   12e78:	0a00005c 	beq	12ff0 <fat16_dir_entry_read_callback+0x1a4>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
   12e7c:	e5d0300b 	ldrb	r3, [r0, #11]
   12e80:	e353000f 	cmp	r3, #15	; 0xf
   12e84:	e280500b 	add	r5, r0, #11	; 0xb
   12e88:	1a000026 	bne	12f28 <fat16_dir_entry_read_callback+0xdc>
    {
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
   12e8c:	e202203f 	and	r2, r2, #63	; 0x3f
   12e90:	e3a0300d 	mov	r3, #13	; 0xd
   12e94:	e0030392 	mul	r3, r2, r3
   12e98:	e243300d 	sub	r3, r3, #13	; 0xd
   12e9c:	e1a03803 	mov	r3, r3, lsl #16
   12ea0:	e1a02823 	mov	r2, r3, lsr #16

        if(char_offset + 12 < sizeof(dir_entry->long_name))
   12ea4:	e282300c 	add	r3, r2, #12	; 0xc
   12ea8:	e353001f 	cmp	r3, #31	; 0x1f
   12eac:	83a00001 	movhi	r0, #1	; 0x1
   12eb0:	8a00004f 	bhi	12ff4 <fat16_dir_entry_read_callback+0x1a8>
        {
            /* Lfn supports unicode, but we do not, for now.
                                                 * So we assume pure ascii and read only every
                                                 * second byte.
                                                 */
            long_name[char_offset + 0] = raw_entry[1];
   12eb4:	e5d03001 	ldrb	r3, [r0, #1]
   12eb8:	e7cc3002 	strb	r3, [ip, r2]
            long_name[char_offset + 1] = raw_entry[3];
   12ebc:	e5d03003 	ldrb	r3, [r0, #3]
   12ec0:	e08c2002 	add	r2, ip, r2
   12ec4:	e5c23001 	strb	r3, [r2, #1]
            long_name[char_offset + 2] = raw_entry[5];
   12ec8:	e5d03005 	ldrb	r3, [r0, #5]
   12ecc:	e5c23002 	strb	r3, [r2, #2]
            long_name[char_offset + 3] = raw_entry[7];
   12ed0:	e5d03007 	ldrb	r3, [r0, #7]
   12ed4:	e5c23003 	strb	r3, [r2, #3]
            long_name[char_offset + 4] = raw_entry[9];
   12ed8:	e5d03009 	ldrb	r3, [r0, #9]
   12edc:	e5c23004 	strb	r3, [r2, #4]
            long_name[char_offset + 5] = raw_entry[14];
   12ee0:	e5d0300e 	ldrb	r3, [r0, #14]
   12ee4:	e5c23005 	strb	r3, [r2, #5]
            long_name[char_offset + 6] = raw_entry[16];
   12ee8:	e5d03010 	ldrb	r3, [r0, #16]
   12eec:	e5c23006 	strb	r3, [r2, #6]
            long_name[char_offset + 7] = raw_entry[18];
   12ef0:	e5d03012 	ldrb	r3, [r0, #18]
   12ef4:	e5c23007 	strb	r3, [r2, #7]
            long_name[char_offset + 8] = raw_entry[20];
   12ef8:	e5d03014 	ldrb	r3, [r0, #20]
   12efc:	e5c23008 	strb	r3, [r2, #8]
            long_name[char_offset + 9] = raw_entry[22];
   12f00:	e5d03016 	ldrb	r3, [r0, #22]
   12f04:	e5c23009 	strb	r3, [r2, #9]
            long_name[char_offset + 10] = raw_entry[24];
   12f08:	e5d03018 	ldrb	r3, [r0, #24]
   12f0c:	e5c2300a 	strb	r3, [r2, #10]
            long_name[char_offset + 11] = raw_entry[28];
   12f10:	e5d0301c 	ldrb	r3, [r0, #28]
   12f14:	e5c2300b 	strb	r3, [r2, #11]
            long_name[char_offset + 12] = raw_entry[30];
   12f18:	e5d0301e 	ldrb	r3, [r0, #30]
   12f1c:	e3a00001 	mov	r0, #1	; 0x1
   12f20:	e5c2300c 	strb	r3, [r2, #12]
   12f24:	ea000032 	b	12ff4 <fat16_dir_entry_read_callback+0x1a8>
        }

        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
   12f28:	e5dc2000 	ldrb	r2, [ip]
   12f2c:	e3520000 	cmp	r2, #0	; 0x0
   12f30:	1a00001d 	bne	12fac <fat16_dir_entry_read_callback+0x160>
   12f34:	e1a01002 	mov	r1, r2
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
   12f38:	e7d23000 	ldrb	r3, [r2, r0]
   12f3c:	e3530020 	cmp	r3, #32	; 0x20
   12f40:	e281e001 	add	lr, r1, #1	; 0x1
   12f44:	0a000004 	beq	12f5c <fat16_dir_entry_read_callback+0x110>
   12f48:	e20e10ff 	and	r1, lr, #255	; 0xff
   12f4c:	e3510008 	cmp	r1, #8	; 0x8
                    break;
                long_name[i] = raw_entry[i];
   12f50:	e7c2300c 	strb	r3, [r2, ip]
   12f54:	e2822001 	add	r2, r2, #1	; 0x1
   12f58:	1afffff6 	bne	12f38 <fat16_dir_entry_read_callback+0xec>
            }
            if(raw_entry[8] != ' ')
   12f5c:	e5d03008 	ldrb	r3, [r0, #8]
   12f60:	e3530020 	cmp	r3, #32	; 0x20
   12f64:	0a00000e 	beq	12fa4 <fat16_dir_entry_read_callback+0x158>
            {
                long_name[i++] = '.';
   12f68:	e3a0302e 	mov	r3, #46	; 0x2e
   12f6c:	e2812001 	add	r2, r1, #1	; 0x1
   12f70:	e7cc3001 	strb	r3, [ip, r1]
   12f74:	e20210ff 	and	r1, r2, #255	; 0xff
   12f78:	e1a03000 	mov	r3, r0

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(raw_entry[j] != ' ')
   12f7c:	e5d32008 	ldrb	r2, [r3, #8]
   12f80:	e3520020 	cmp	r2, #32	; 0x20
   12f84:	e280e003 	add	lr, r0, #3	; 0x3
                    {
                        long_name[i++] = raw_entry[j];
   12f88:	e2814001 	add	r4, r1, #1	; 0x1
   12f8c:	e2833001 	add	r3, r3, #1	; 0x1
   12f90:	0a000003 	beq	12fa4 <fat16_dir_entry_read_callback+0x158>
   12f94:	e153000e 	cmp	r3, lr
   12f98:	e7cc2001 	strb	r2, [ip, r1]
   12f9c:	e20410ff 	and	r1, r4, #255	; 0xff
   12fa0:	1afffff5 	bne	12f7c <fat16_dir_entry_read_callback+0x130>
                    }
                    else
                    {
                        break;
                    }
                }
            }

            long_name[i] = '\0';
   12fa4:	e3a03000 	mov	r3, #0	; 0x0
   12fa8:	e7cc3001 	strb	r3, [ip, r1]
        }

        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
   12fac:	e5d53000 	ldrb	r3, [r5]
   12fb0:	e5cc3020 	strb	r3, [ip, #32]
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
   12fb4:	e5d0201b 	ldrb	r2, [r0, #27]
   12fb8:	e5d0301a 	ldrb	r3, [r0, #26]
   12fbc:	e1833402 	orr	r3, r3, r2, lsl #8
   12fc0:	e1cc32b2 	strh	r3, [ip, #34]
        ((uint16_t) raw_entry[27] << 8);
        dir_entry->file_size = ((uint32_t) raw_entry[28]) |
   12fc4:	e5d0301e 	ldrb	r3, [r0, #30]
   12fc8:	e5d0201c 	ldrb	r2, [r0, #28]
   12fcc:	e5d0101d 	ldrb	r1, [r0, #29]
   12fd0:	e5d0001f 	ldrb	r0, [r0, #31]
   12fd4:	e1a03803 	mov	r3, r3, lsl #16
   12fd8:	e1833c00 	orr	r3, r3, r0, lsl #24
   12fdc:	e1822401 	orr	r2, r2, r1, lsl #8
   12fe0:	e1822003 	orr	r2, r2, r3
   12fe4:	e3a00000 	mov	r0, #0	; 0x0
   12fe8:	e58c2024 	str	r2, [ip, #36]
   12fec:	ea000000 	b	12ff4 <fat16_dir_entry_read_callback+0x1a8>
   12ff0:	e3a00000 	mov	r0, #0	; 0x0
   12ff4:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   12ff8:	e12fff1e 	bx	lr

00012ffc <fat16_get_next_cluster>:
        ((uint32_t) raw_entry[29] << 8) |
        ((uint32_t) raw_entry[30] << 16) |
        ((uint32_t) raw_entry[31] << 24);

        return 2;
    }
}

/**
 * \ingroup fat16_file
 * Retrieves the directory entry of a path.
 *
 * The given path may both describe a file or a directory.
 *
 * \param[in] fs The FAT16 filesystem on which to search.
 * \param[in] path The path of which to read the directory entry.
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_get_dir_entry_of_path(struct fat16_fs_struct* fs, const char* path, struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;

    if(path[0] == '/')
        ++path;

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT16_ATTRIB_DIR;

    if(path[0] == '\0')
        return 1;

    while(1)
    {
        struct fat16_dir_struct* dd = fat16_open_dir(fs, dir_entry);
        if(!dd)
            break;

        /* extract the next hierarchy we will search for */
        const char* sep_pos = strchr(path, '/');
        if(!sep_pos)
            sep_pos = path + strlen(path);
        uint8_t length_to_sep = sep_pos - path;

        /* read directory entries */
        while(fat16_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
            continue;

            fat16_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT16_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sep_pos + 1;
                break;
            }

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat16_close_dir(dd);
    }

    return 0;
}

/**
 * \ingroup fat16_fs
 * Retrieves the next following cluster of a given cluster.
 *
 * Using the filesystem file allocation table, this function returns
 * the number of the cluster containing the data directly following
 * the data within the cluster with the given number.
 *
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
uint16_t fat16_get_next_cluster(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
   12ffc:	e52de004 	str	lr, [sp, #-4]!
   13000:	e1a03801 	mov	r3, r1, lsl #16
   13004:	e1a03823 	mov	r3, r3, lsr #16
   13008:	e24dd004 	sub	sp, sp, #4	; 0x4
    if(!fs || cluster_num < 2)
        return 0;

    /* read appropriate fat entry */
    uint8_t fat_entry[2];
    if(!fs->partition->device_read(fs->header.fat_offset + 2 * cluster_num, fat_entry, 2))
   1300c:	e3a02002 	mov	r2, #2	; 0x2
   13010:	e3500000 	cmp	r0, #0	; 0x0
   13014:	13530001 	cmpne	r3, #1	; 0x1
   13018:	e08d1002 	add	r1, sp, r2
   1301c:	e1a0c000 	mov	ip, r0
   13020:	9a00001a 	bls	13090 <fat16_get_next_cluster+0x94>
   13024:	e5900008 	ldr	r0, [r0, #8]
   13028:	e0200293 	mla	r0, r3, r2, r0
   1302c:	e59c3000 	ldr	r3, [ip]
   13030:	e593c000 	ldr	ip, [r3]
   13034:	e1a0e00f 	mov	lr, pc
   13038:	e12fff1c 	bx	ip
   1303c:	e3500000 	cmp	r0, #0	; 0x0
        return 0;

    /* determine next cluster from fat */
    cluster_num = ((uint16_t) fat_entry[0]) |
    ((uint16_t) fat_entry[1] << 8);
	///*
    if(cluster_num == FAT16_CLUSTER_FREE ||
   13040:	e59f1058 	ldr	r1, [pc, #88]	; 130a0 <.text+0x30a0>
   13044:	0a000011 	beq	13090 <fat16_get_next_cluster+0x94>
   13048:	e5dd2002 	ldrb	r2, [sp, #2]
   1304c:	e5dd3003 	ldrb	r3, [sp, #3]
   13050:	e1920403 	orrs	r0, r2, r3, lsl #8
   13054:	13a03000 	movne	r3, #0	; 0x0
   13058:	03a03001 	moveq	r3, #1	; 0x1
   1305c:	e1500001 	cmp	r0, r1
   13060:	03833001 	orreq	r3, r3, #1	; 0x1
   13064:	e2802010 	add	r2, r0, #16	; 0x10
   13068:	e3530000 	cmp	r3, #0	; 0x0
   1306c:	e1a02802 	mov	r2, r2, lsl #16
   13070:	1a000006 	bne	13090 <fat16_get_next_cluster+0x94>
   13074:	e1500001 	cmp	r0, r1
   13078:	93a03000 	movls	r3, #0	; 0x0
   1307c:	83a03001 	movhi	r3, #1	; 0x1
   13080:	e3520806 	cmp	r2, #393216	; 0x60000
   13084:	93833001 	orrls	r3, r3, #1	; 0x1
   13088:	e3530000 	cmp	r3, #0	; 0x0
   1308c:	0a000000 	beq	13094 <fat16_get_next_cluster+0x98>
        cluster_num == FAT16_CLUSTER_BAD ||
       (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
       (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
    //*/
	return 0;

    return cluster_num;
   13090:	e3a00000 	mov	r0, #0	; 0x0
}
   13094:	e28dd004 	add	sp, sp, #4	; 0x4
   13098:	e49de004 	ldr	lr, [sp], #4
   1309c:	e12fff1e 	bx	lr
   130a0:	0000fff7 	streqd	pc, [r0], -r7

000130a4 <fat16_free_clusters>:

/**
 * \ingroup fat16_fs
 * Appends a new cluster chain to an existing one.
 *
 * Set cluster_num to zero to create a completely new one.
 *
 * \param[in] fs The file system on which to operate.
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
uint16_t fat16_append_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num, uint16_t count)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs)
            return 0;
    
        device_read_t device_read = fs->partition->device_read;
        device_write_t device_write = fs->partition->device_write;
        uint32_t fat_offset = fs->header.fat_offset;
        uint16_t cluster_max = fs->header.fat_size / 2;
        uint16_t cluster_next = 0;
        uint16_t count_left = count;
        uint8_t buffer[2];
        uint16_t cluster_new;
        for(cluster_new = 0; cluster_new < cluster_max; ++cluster_new)
        {
            if(!device_read(fat_offset + 2 * cluster_new, buffer, sizeof(buffer)))
                return 0;
    
            /* check if this is a free cluster */
            if(buffer[0] == (FAT16_CLUSTER_FREE & 0xff) &&
                buffer[1] == ((FAT16_CLUSTER_FREE >> 8) & 0xff))
            {
                /* allocate cluster */
                if(count_left == count)
                {
                    buffer[0] = FAT16_CLUSTER_LAST_MAX & 0xff;
                    buffer[1] = (FAT16_CLUSTER_LAST_MAX >> 8) & 0xff;
                }
                else
                {
                    buffer[0] = cluster_next & 0xff;
                    buffer[1] = (cluster_next >> 8) & 0xff;
                }
    
                if(!device_write(fat_offset + 2 * cluster_new, buffer, sizeof(buffer)))
                    break;
    
                cluster_next = cluster_new;
                if(--count_left == 0)
                    break;
            }
        }
    
        do
        {
            if(count_left > 0)
                break;
    
            /* We allocated a new cluster chain. Now join
                                             * it with the existing one.
                                             */
            if(cluster_num >= 2)
            {
                buffer[0] = cluster_next & 0xff;
                buffer[1] = (cluster_next >> 8) & 0xff;
                if(!device_write(fat_offset + 2 * cluster_num, buffer, sizeof(buffer)))
                    break;
            }
    
            return cluster_next;
    
        }
        while(0);
    
        /* No space left on device or writing error.
                             * Free up all clusters already allocated.
                             */
        fat16_free_clusters(fs, cluster_next);
    
        return 0;
    #else
        return 0;
    #endif
}

/**
 * \ingroup fat16_fs
 * Frees a cluster chain, or a part thereof.
 *
 * Marks the specified cluster and all clusters which are sequentially
 * referenced by it as free. They may then be used again for future
 * file allocations.
 *
 * \note If this function is used for freeing just a part of a cluster
 *       chain, the new end of the chain is not correctly terminated
 *       within the FAT. Use fat16_terminate_clusters() instead.
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat16_terminate_clusters
 */
uint8_t fat16_free_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
   130a4:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   130a8:	e1a01801 	mov	r1, r1, lsl #16
   130ac:	e1a03821 	mov	r3, r1, lsr #16
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
   130b0:	e3500000 	cmp	r0, #0	; 0x0
   130b4:	13530001 	cmpne	r3, #1	; 0x1
   130b8:	e24dd004 	sub	sp, sp, #4	; 0x4
   130bc:	e1a05000 	mov	r5, r0
            return 0;
    
        uint32_t fat_offset = fs->header.fat_offset;
   130c0:	85907008 	ldrhi	r7, [r0, #8]
   130c4:	8a00001d 	bhi	13140 <fat16_free_clusters+0x9c>
   130c8:	ea000024 	b	13160 <fat16_free_clusters+0xbc>
        uint8_t buffer[2];
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + 2 * cluster_num, buffer, 2))
   130cc:	e5953000 	ldr	r3, [r5]
   130d0:	e593c000 	ldr	ip, [r3]
   130d4:	e1a0e00f 	mov	lr, pc
   130d8:	e12fff1c 	bx	ip
                return 0;
    
            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ((uint16_t) buffer[0]) |
            ((uint16_t) buffer[1] << 8);
    
            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
                (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
               cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
               )
            return 0;
			///*
            if((cluster_num_next >= FAT16_CLUSTER_LAST_MIN) &&
                (cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
               )
			//*/
            cluster_num_next = 0;
    
            /* free cluster */
            buffer[0] = FAT16_CLUSTER_FREE & 0xff;
   130dc:	e3a0e000 	mov	lr, #0	; 0x0
   130e0:	e150000e 	cmp	r0, lr
            buffer[1] = (FAT16_CLUSTER_FREE >> 8) & 0xff;
            fs->partition->device_write(fat_offset + 2 * cluster_num, buffer, 2);
   130e4:	e1a01006 	mov	r1, r6
   130e8:	e3a02002 	mov	r2, #2	; 0x2
   130ec:	e1a00004 	mov	r0, r4
   130f0:	0a00001a 	beq	13160 <fat16_free_clusters+0xbc>
   130f4:	e5dd3002 	ldrb	r3, [sp, #2]
   130f8:	e5ddc003 	ldrb	ip, [sp, #3]
   130fc:	e193340c 	orrs	r3, r3, ip, lsl #8
   13100:	e1a04003 	mov	r4, r3
   13104:	e2833010 	add	r3, r3, #16	; 0x10
   13108:	e1a03803 	mov	r3, r3, lsl #16
   1310c:	0a000015 	beq	13168 <fat16_free_clusters+0xc4>
   13110:	e3530807 	cmp	r3, #458752	; 0x70000
   13114:	9a000011 	bls	13160 <fat16_free_clusters+0xbc>
   13118:	e59f3058 	ldr	r3, [pc, #88]	; 13178 <.text+0x3178>
   1311c:	e5cde003 	strb	lr, [sp, #3]
   13120:	e5cde002 	strb	lr, [sp, #2]
   13124:	e1540003 	cmp	r4, r3
   13128:	81a0400e 	movhi	r4, lr
   1312c:	e5953000 	ldr	r3, [r5]
   13130:	e593c008 	ldr	ip, [r3, #8]
   13134:	e1a0e00f 	mov	lr, pc
   13138:	e12fff1c 	bx	ip
   1313c:	e1a03004 	mov	r3, r4
   13140:	e0874083 	add	r4, r7, r3, lsl #1
   13144:	e28d6002 	add	r6, sp, #2	; 0x2
   13148:	e3530000 	cmp	r3, #0	; 0x0
   1314c:	e1a01006 	mov	r1, r6
   13150:	e3a02002 	mov	r2, #2	; 0x2
   13154:	e1a00004 	mov	r0, r4
   13158:	1affffdb 	bne	130cc <fat16_free_clusters+0x28>
   1315c:	ea000001 	b	13168 <fat16_free_clusters+0xc4>
   13160:	e3a00000 	mov	r0, #0	; 0x0
   13164:	ea000000 	b	1316c <fat16_free_clusters+0xc8>
   13168:	e3a00001 	mov	r0, #1	; 0x1
    
            /* We continue in any case here, even if freeing the cluster failed.
                                             * The cluster is lost, but maybe we can still free up some later ones.
                                             */
    
            cluster_num = cluster_num_next;
        }
    
        return 1;
    #else
        return 0;
    #endif
}
   1316c:	e28dd004 	add	sp, sp, #4	; 0x4
   13170:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   13174:	e12fff1e 	bx	lr
   13178:	0000fff7 	streqd	pc, [r0], -r7

0001317c <fat16_append_clusters>:
   1317c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13180:	e1a01801 	mov	r1, r1, lsl #16
   13184:	e24dd014 	sub	sp, sp, #20	; 0x14
   13188:	e1a02802 	mov	r2, r2, lsl #16
   1318c:	e1a01821 	mov	r1, r1, lsr #16
   13190:	e2507000 	subs	r7, r0, #0	; 0x0
   13194:	e58d1000 	str	r1, [sp]
   13198:	e1a09822 	mov	r9, r2, lsr #16
   1319c:	0a00004e 	beq	132dc <fat16_append_clusters+0x160>
   131a0:	e5972000 	ldr	r2, [r7]
   131a4:	e597300c 	ldr	r3, [r7, #12]
   131a8:	e5921008 	ldr	r1, [r2, #8]
   131ac:	e1a03783 	mov	r3, r3, lsl #15
   131b0:	e3a04000 	mov	r4, #0	; 0x0
   131b4:	e5922000 	ldr	r2, [r2]
   131b8:	e597b008 	ldr	fp, [r7, #8]
   131bc:	e1a03823 	mov	r3, r3, lsr #16
   131c0:	e1a05009 	mov	r5, r9
   131c4:	e1a0a004 	mov	sl, r4
   131c8:	e58d1008 	str	r1, [sp, #8]
   131cc:	e58d2004 	str	r2, [sp, #4]
   131d0:	e58d300c 	str	r3, [sp, #12]
   131d4:	ea000023 	b	13268 <fat16_append_clusters+0xec>
   131d8:	e08b8086 	add	r8, fp, r6, lsl #1
   131dc:	e1a00008 	mov	r0, r8
   131e0:	e28d1012 	add	r1, sp, #18	; 0x12
   131e4:	e3a02002 	mov	r2, #2	; 0x2
   131e8:	e59d3004 	ldr	r3, [sp, #4]
   131ec:	e1a0e00f 	mov	lr, pc
   131f0:	e12fff13 	bx	r3
   131f4:	e3500000 	cmp	r0, #0	; 0x0
   131f8:	0a000037 	beq	132dc <fat16_append_clusters+0x160>
   131fc:	e5dd3012 	ldrb	r3, [sp, #18]
   13200:	e3530000 	cmp	r3, #0	; 0x0
   13204:	1a000016 	bne	13264 <fat16_append_clusters+0xe8>
   13208:	e5dd3013 	ldrb	r3, [sp, #19]
   1320c:	e3530000 	cmp	r3, #0	; 0x0
   13210:	1a000013 	bne	13264 <fat16_append_clusters+0xe8>
   13214:	e1550009 	cmp	r5, r9
   13218:	03e03000 	mvneq	r3, #0	; 0x0
   1321c:	11a03424 	movne	r3, r4, lsr #8
   13220:	05cd3013 	streqb	r3, [sp, #19]
   13224:	05cd3012 	streqb	r3, [sp, #18]
   13228:	15cd3013 	strneb	r3, [sp, #19]
   1322c:	15cd4012 	strneb	r4, [sp, #18]
   13230:	e1a00008 	mov	r0, r8
   13234:	e28d1012 	add	r1, sp, #18	; 0x12
   13238:	e3a02002 	mov	r2, #2	; 0x2
   1323c:	e59d3008 	ldr	r3, [sp, #8]
   13240:	e1a0e00f 	mov	lr, pc
   13244:	e12fff13 	bx	r3
   13248:	e3500000 	cmp	r0, #0	; 0x0
   1324c:	0a00000a 	beq	1327c <fat16_append_clusters+0x100>
   13250:	e2453001 	sub	r3, r5, #1	; 0x1
   13254:	e1a03803 	mov	r3, r3, lsl #16
   13258:	e1b05823 	movs	r5, r3, lsr #16
   1325c:	0a000019 	beq	132c8 <fat16_append_clusters+0x14c>
   13260:	e1a04006 	mov	r4, r6
   13264:	e28aa001 	add	sl, sl, #1	; 0x1
   13268:	e59d100c 	ldr	r1, [sp, #12]
   1326c:	e1a0380a 	mov	r3, sl, lsl #16
   13270:	e15a0001 	cmp	sl, r1
   13274:	e1a06823 	mov	r6, r3, lsr #16
   13278:	1affffd6 	bne	131d8 <fat16_append_clusters+0x5c>
   1327c:	e3550000 	cmp	r5, #0	; 0x0
   13280:	1a000012 	bne	132d0 <fat16_append_clusters+0x154>
   13284:	e59d3000 	ldr	r3, [sp]
   13288:	e3530001 	cmp	r3, #1	; 0x1
   1328c:	9a00000b 	bls	132c0 <fat16_append_clusters+0x144>
   13290:	e59d1000 	ldr	r1, [sp]
   13294:	e1a03424 	mov	r3, r4, lsr #8
   13298:	e5cd3013 	strb	r3, [sp, #19]
   1329c:	e08b0081 	add	r0, fp, r1, lsl #1
   132a0:	e5cd4012 	strb	r4, [sp, #18]
   132a4:	e28d1012 	add	r1, sp, #18	; 0x12
   132a8:	e3a02002 	mov	r2, #2	; 0x2
   132ac:	e59d3008 	ldr	r3, [sp, #8]
   132b0:	e1a0e00f 	mov	lr, pc
   132b4:	e12fff13 	bx	r3
   132b8:	e3500000 	cmp	r0, #0	; 0x0
   132bc:	0a000003 	beq	132d0 <fat16_append_clusters+0x154>
   132c0:	e1a00004 	mov	r0, r4
   132c4:	ea000005 	b	132e0 <fat16_append_clusters+0x164>
   132c8:	e1a04006 	mov	r4, r6
   132cc:	eaffffec 	b	13284 <fat16_append_clusters+0x108>
   132d0:	e1a00007 	mov	r0, r7
   132d4:	e1a01004 	mov	r1, r4
   132d8:	ebffff71 	bl	130a4 <fat16_free_clusters>
   132dc:	e3a00000 	mov	r0, #0	; 0x0
   132e0:	e28dd014 	add	sp, sp, #20	; 0x14
   132e4:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e8:	e12fff1e 	bx	lr

000132ec <fat16_read_file>:

/**
 * \ingroup fat16_fs
 * Frees a part of a cluster chain and correctly terminates the rest.
 *
 * Marks the specified cluster as the new end of a cluster chain and
 * frees all following clusters.
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The new end of the cluster chain.
 * \returns 0 on failure, 1 on success.
 * \see fat16_free_clusters
 */
uint8_t fat16_terminate_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
            return 0;
    
        /* fetch next cluster before overwriting the cluster entry */
        uint16_t cluster_num_next = fat16_get_next_cluster(fs, cluster_num);
    
        /* mark cluster as the last one */
        uint8_t buffer[2];
        buffer[0] = FAT16_CLUSTER_LAST_MAX & 0xff;
        buffer[1] = (FAT16_CLUSTER_LAST_MAX >> 8) & 0xff;
        if(!fs->partition->device_write(fs->header.fat_offset + 2 * cluster_num, buffer, 2))
            return 0;
    
        /* free remaining clusters */
        if(cluster_num_next)
            return fat16_free_clusters(fs, cluster_num_next);
        else
            return 1;
    #else
        return 0;
    #endif
}

/**
 * \ingroup fat16_file
 * Opens a file on a FAT16 filesystem.
 *
 * \param[in] fs The filesystem on which the file to open lies.
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat16_close_file
 */
struct fat16_file_struct* fat16_open_file(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT16_ATTRIB_DIR))
        return 0;

    struct fat16_file_struct* fd = malloc(sizeof(*fd));
    if(!fd)
        return 0;

    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}

/**
 * \ingroup fat16_file
 * Closes a file.
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat16_open_file
 */
void fat16_close_file(struct fat16_file_struct* fd)
{
    if(fd)
        free(fd);
}

/**
 * \ingroup fat16_file
 * Reads data from a file.
 *
 * The data requested is read from the current file location.
 *
 * \param[in] fd The file handle of the file from which to read.
 * \param[out] buffer The buffer into which to write.
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat16_write_file
 */
int16_t fat16_read_file(struct fat16_file_struct* fd, uint8_t* buffer, uint16_t buffer_len)
{
   132ec:	e1a02802 	mov	r2, r2, lsl #16
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   132f0:	e3510000 	cmp	r1, #0	; 0x0
   132f4:	13500000 	cmpne	r0, #0	; 0x0
   132f8:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132fc:	e1a06000 	mov	r6, r0
   13300:	e1a0b001 	mov	fp, r1
   13304:	e1a08822 	mov	r8, r2, lsr #16
   13308:	0a000050 	beq	13450 <fat16_read_file+0x164>
   1330c:	e3580000 	cmp	r8, #0	; 0x0
   13310:	0a00004e 	beq	13450 <fat16_read_file+0x164>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
   13314:	e5907030 	ldr	r7, [r0, #48]
   13318:	e5902028 	ldr	r2, [r0, #40]
   1331c:	e0873008 	add	r3, r7, r8
   13320:	e1530002 	cmp	r3, r2
   13324:	9a000003 	bls	13338 <fat16_read_file+0x4c>
        buffer_len = fd->dir_entry.file_size - fd->pos;
   13328:	e0673002 	rsb	r3, r7, r2
   1332c:	e1a03803 	mov	r3, r3, lsl #16
    if(buffer_len == 0)
   13330:	e1b08823 	movs	r8, r3, lsr #16
   13334:	0a000050 	beq	1347c <fat16_read_file+0x190>
        return 0;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint16_t cluster_num = fd->pos_cluster;
   13338:	e1d653b4 	ldrh	r5, [r6, #52]
   1333c:	e5963000 	ldr	r3, [r6]
    uint16_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = fd->pos % cluster_size;

    /* find cluster in which to start reading */
    if(!cluster_num)
   13340:	e3550000 	cmp	r5, #0	; 0x0
   13344:	e1d391b2 	ldrh	r9, [r3, #18]
   13348:	1a000011 	bne	13394 <fat16_read_file+0xa8>
    {
        cluster_num = fd->dir_entry.cluster;
   1334c:	e1d652b6 	ldrh	r5, [r6, #38]

        if(!cluster_num)
   13350:	e3550000 	cmp	r5, #0	; 0x0
   13354:	1a000002 	bne	13364 <fat16_read_file+0x78>
        {
            if(!fd->pos)
   13358:	e3570000 	cmp	r7, #0	; 0x0
   1335c:	0a000046 	beq	1347c <fat16_read_file+0x190>
   13360:	ea00003a 	b	13450 <fat16_read_file+0x164>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
   13364:	e3570000 	cmp	r7, #0	; 0x0
   13368:	11a04007 	movne	r4, r7
   1336c:	1a000004 	bne	13384 <fat16_read_file+0x98>
   13370:	ea000007 	b	13394 <fat16_read_file+0xa8>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat16_get_next_cluster(fd->fs, cluster_num);
   13374:	e5960000 	ldr	r0, [r6]
   13378:	ebffff1f 	bl	12ffc <fat16_get_next_cluster>
                if(!cluster_num)
   1337c:	e2505000 	subs	r5, r0, #0	; 0x0
   13380:	0a000032 	beq	13450 <fat16_read_file+0x164>
   13384:	e1540009 	cmp	r4, r9
   13388:	e1a01005 	mov	r1, r5
   1338c:	e0694004 	rsb	r4, r9, r4
   13390:	2afffff7 	bcs	13374 <fat16_read_file+0x88>
   13394:	e1a00007 	mov	r0, r7
   13398:	e1a01009 	mov	r1, r9
   1339c:	eb0026ac 	bl	1ce54 <__umodsi3>
   133a0:	e1a00800 	mov	r0, r0, lsl #16
   133a4:	e1a0a820 	mov	sl, r0, lsr #16
   133a8:	e1a07008 	mov	r7, r8
                    return -1;
            }
        }
    }

    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
        (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
   133ac:	e06a3009 	rsb	r3, sl, r9
   133b0:	e596c000 	ldr	ip, [r6]
   133b4:	e1a03803 	mov	r3, r3, lsl #16
   133b8:	e1a03823 	mov	r3, r3, lsr #16
   133bc:	e1570003 	cmp	r7, r3
   133c0:	31a03007 	movcc	r3, r7
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
   133c4:	e59c2018 	ldr	r2, [ip, #24]
   133c8:	e1a03803 	mov	r3, r3, lsl #16
   133cc:	e1a04823 	mov	r4, r3, lsr #16
   133d0:	e08a2002 	add	r2, sl, r2
   133d4:	e2453002 	sub	r3, r5, #2	; 0x2
   133d8:	e0202399 	mla	r0, r9, r3, r2
   133dc:	e1a0100b 	mov	r1, fp
   133e0:	e1a02004 	mov	r2, r4
   133e4:	e59c3000 	ldr	r3, [ip]
   133e8:	e593c000 	ldr	ip, [r3]
   133ec:	e1a0e00f 	mov	lr, pc
   133f0:	e12fff1c 	bx	ip
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
   133f4:	e0643007 	rsb	r3, r4, r7
   133f8:	e3500000 	cmp	r0, #0	; 0x0
        fd->pos += copy_length;

        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat16_get_next_cluster(fd->fs, cluster_num)))
   133fc:	e1a01005 	mov	r1, r5
   13400:	e08bb004 	add	fp, fp, r4
   13404:	e08a2004 	add	r2, sl, r4
   13408:	e1a00803 	mov	r0, r3, lsl #16
   1340c:	0a000011 	beq	13458 <fat16_read_file+0x16c>
   13410:	e5963030 	ldr	r3, [r6, #48]
   13414:	e1520009 	cmp	r2, r9
   13418:	e0833004 	add	r3, r3, r4
   1341c:	e5863030 	str	r3, [r6, #48]
   13420:	e1a07820 	mov	r7, r0, lsr #16
   13424:	ba000004 	blt	1343c <fat16_read_file+0x150>
   13428:	e5960000 	ldr	r0, [r6]
   1342c:	ebfffef2 	bl	12ffc <fat16_get_next_cluster>
   13430:	e2505000 	subs	r5, r0, #0	; 0x0
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
   13434:	e3a0a000 	mov	sl, #0	; 0x0
   13438:	0a00000a 	beq	13468 <fat16_read_file+0x17c>
            }
        }

        fd->pos_cluster = cluster_num;

    }
    while(buffer_left > 0); /* check if we are done */
   1343c:	e3570000 	cmp	r7, #0	; 0x0
   13440:	e1c653b4 	strh	r5, [r6, #52]
   13444:	1affffd8 	bne	133ac <fat16_read_file+0xc0>

    return buffer_len;
   13448:	e1a03808 	mov	r3, r8, lsl #16
   1344c:	ea000003 	b	13460 <fat16_read_file+0x174>
   13450:	e3e00000 	mvn	r0, #0	; 0x0
   13454:	ea000009 	b	13480 <fat16_read_file+0x194>
   13458:	e0673008 	rsb	r3, r7, r8
   1345c:	e1a03803 	mov	r3, r3, lsl #16
   13460:	e1a00843 	mov	r0, r3, asr #16
   13464:	ea000005 	b	13480 <fat16_read_file+0x194>
   13468:	e0673008 	rsb	r3, r7, r8
   1346c:	e1a03803 	mov	r3, r3, lsl #16
   13470:	e1a00843 	mov	r0, r3, asr #16
   13474:	e1c653b4 	strh	r5, [r6, #52]
   13478:	ea000000 	b	13480 <fat16_read_file+0x194>
   1347c:	e3a00000 	mov	r0, #0	; 0x0
}
   13480:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13484:	e12fff1e 	bx	lr

00013488 <fat16_reset_dir>:

/**
 * \ingroup fat16_file
 * Writes data to a file.
 *
 * The data is written to the current file location.
 *
 * \param[in] fd The file handle of the file to which to write.
 * \param[in] buffer The buffer from which to read the data to be written.
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat16_read_file
 */
int16_t fat16_write_file(struct fat16_file_struct* fd, const uint8_t* buffer, uint16_t buffer_len)
{
    #if FAT16_WRITE_SUPPORT
        /* check arguments */
        if(!fd || !buffer || buffer_len < 1)
            return -1;
        if(fd->pos > fd->dir_entry.file_size)
            return -1;
    
        uint16_t cluster_size = fd->fs->header.cluster_size;
        uint16_t cluster_num = fd->pos_cluster;
        uint16_t buffer_left = buffer_len;
        uint16_t first_cluster_offset = fd->pos % cluster_size;
    
        /* find cluster in which to start writing */
        if(!cluster_num)
        {
            cluster_num = fd->dir_entry.cluster;
    
            if(!cluster_num)
            {
                if(!fd->pos)
                {
                    /* empty file */
                    fd->dir_entry.cluster = cluster_num = fat16_append_clusters(fd->fs, 0, 1);
                    if(!cluster_num)
                        return -1;
                }
                else
                {
                    return -2;
                }
            }
    
            if(fd->pos)
            {
                uint32_t pos = fd->pos;
                uint16_t cluster_num_next;
                while(pos >= cluster_size)
                {
                    pos -= cluster_size;
                    cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                    if(!cluster_num_next && pos == 0)
        /* the file exactly ends on a cluster boundary, and we append to it */
                        cluster_num_next = fat16_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return -3;
    
                    cluster_num = cluster_num_next;
                }
            }
        }
    
        /* write data */
        do
        {
            /* calculate data size to write to cluster */
            uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
            (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
            uint16_t write_length = cluster_size - first_cluster_offset;
            if(write_length > buffer_left)
                write_length = buffer_left;
    
            /* write data which fits into the current cluster */
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
                break;
    
            /* calculate new file position */
            buffer += write_length;
            buffer_left -= write_length;
            fd->pos += write_length;
    
            if(first_cluster_offset + write_length >= cluster_size)
            {
                /* we are on a cluster boundary, so get the next cluster */
                uint16_t cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && buffer_left > 0)
        /* we reached the last cluster, append a new one */
                    cluster_num_next = fat16_append_clusters(fd->fs, cluster_num, 1);
                if(!cluster_num_next)
                {
                    fd->pos_cluster = 0;
                    break;
                }
    
                cluster_num = cluster_num_next;
                first_cluster_offset = 0;
            }
    
            fd->pos_cluster = cluster_num;
    
        }
        while(buffer_left > 0); /* check if we are done */
    
        /* update directory entry */
        if(fd->pos > fd->dir_entry.file_size)
        {
            uint32_t size_old = fd->dir_entry.file_size;
    
            /* update file size */
            fd->dir_entry.file_size = fd->pos;
            /* write directory entry */
            if(!fat16_write_dir_entry(fd->fs, &fd->dir_entry))
            {
                /* We do not return an error here since we actually wrote
                                                             * some data to disk. So we calculate the amount of data
                                                             * we wrote to disk and which lies within the old file size.
                                                             */
                buffer_left = fd->pos - size_old;
                fd->pos = size_old;
            }
        }
    
        return buffer_len - buffer_left;
    
    #else
        return -4;
    #endif
}

/**
 * \ingroup fat16_file
 * Repositions the read/write file offset.
 *
 * Changes the file offset where the next call to fat16_read_file()
 * or fat16_write_file() starts reading/writing.
 *
 * If the new offset is beyond the end of the file, fat16_resize_file()
 * is implicitly called, i.e. the file is expanded.
 *
 * The new offset can be given in different ways determined by
 * the \c whence parameter:
 * - \b FAT16_SEEK_SET: \c *offset is relative to the beginning of the file.
 * - \b FAT16_SEEK_CUR: \c *offset is relative to the current file position.
 * - \b FAT16_SEEK_END: \c *offset is relative to the end of the file.
 *
 * The resulting absolute offset is written to the location the \c offset
 * parameter points to.
 *
 * \param[in] fd The file decriptor of the file on which to seek.
 * \param[in,out] offset A pointer to the new offset, as affected by the \c whence
 *                   parameter. The function writes the new absolute offset
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_seek_file(struct fat16_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    switch(whence)
    {
        case FAT16_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT16_SEEK_CUR:
            new_pos += *offset;
            break;
        case FAT16_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size && !fat16_resize_file(fd, new_pos))
        return 0;

    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = new_pos;
    return 1;
}

/**
 * \ingroup fat16_file
 * Resizes a file to have a specific size.
 *
 * Enlarges or shrinks the file pointed to by the file descriptor to have
 * exactly the specified size.
 *
 * If the file is truncated, all bytes having an equal or larger offset
 * than the given size are lost. If the file is expanded, the additional
 * bytes are allocated.
 *
 * \note Please be aware that this function just allocates or deallocates disk
 * space, it does not explicitely clear it. To avoid data leakage, this
 * must be done manually.
 *
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_resize_file(struct fat16_file_struct* fd, uint32_t size)
{
    #if FAT16_WRITE_SUPPORT
        if(!fd)
            return 0;
    
        uint16_t cluster_num = fd->dir_entry.cluster;
        uint16_t cluster_size = fd->fs->header.cluster_size;
        uint32_t size_new = size;
    
        do
        {
            if(cluster_num == 0 && size_new == 0)
        /* the file stays empty */
                break;
    
            /* seek to the next cluster as long as we need the space */
            while(size_new > cluster_size)
            {
                /* get next cluster of file */
                uint16_t cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                if(cluster_num_next)
                {
                    cluster_num = cluster_num_next;
                    size_new -= cluster_size;
                }
                else
                {
                    break;
                }
            }
    
            if(size_new > cluster_size || cluster_num == 0)
            {
                /* Allocate new cluster chain and append
                                                             * it to the existing one, if available.
                                                             */
                uint16_t cluster_count = size_new / cluster_size;
                if((uint32_t) cluster_count * cluster_size < size_new)
                    ++cluster_count;
                uint16_t cluster_new_chain = fat16_append_clusters(fd->fs, cluster_num, cluster_count);
                if(!cluster_new_chain)
                    return 0;
    
                if(!cluster_num)
                {
                    cluster_num = cluster_new_chain;
                    fd->dir_entry.cluster = cluster_num;
                }
            }
    
            /* write new directory entry */
            fd->dir_entry.file_size = size;
            if(size == 0)
                fd->dir_entry.cluster = 0;
            if(!fat16_write_dir_entry(fd->fs, &fd->dir_entry))
                return 0;
    
            if(size == 0)
            {
                /* free all clusters of file */
                fat16_free_clusters(fd->fs, cluster_num);
            }
            else if(size_new <= cluster_size)
            {
                /* free all clusters no longer needed */
                fat16_terminate_clusters(fd->fs, cluster_num);
            }
    
        }
        while(0);
    
        /* correct file position */
        if(size < fd->pos)
        {
            fd->pos = size;
            fd->pos_cluster = 0;
        }
    
        return 1;
    #else
        return 0;
    #endif
}

/**
 * \ingroup fat16_dir
 * Opens a directory.
 *
 * \param[in] fs The filesystem on which the directory to open resides.
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat16_close_dir
 */
struct fat16_dir_struct* fat16_open_dir(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT16_ATTRIB_DIR))
        return 0;

    struct fat16_dir_struct* dd = malloc(sizeof(*dd));
    if(!dd)
        return 0;

    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    dd->fs = fs;
    dd->entry_next = 0;

    return dd;
}

/**
 * \ingroup fat16_dir
 * Closes a directory descriptor.
 *
 * This function destroys a directory descriptor which was
 * previously obtained by calling fat16_open_dir(). When this
 * function returns, the given descriptor will be invalid.
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat16_open_dir
 */
void fat16_close_dir(struct fat16_dir_struct* dd)
{
    if(dd)
        free(dd);
}

/**
 * \ingroup fat16_dir
 * Reads the next directory entry contained within a parent directory.
 *
 * \param[in] dd The descriptor of the parent directory from which to read the entry.
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat16_reset_dir
 */
uint8_t fat16_read_dir(struct fat16_dir_struct* dd, struct fat16_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;

    if(dd->dir_entry.cluster == 0)
    {
        /* read entry from root directory */
        if(fat16_read_root_dir_entry(dd->fs, dd->entry_next, dir_entry))
        {
            ++dd->entry_next;
            return 1;
        }
    }
    else
    {
        /* read entry from a subdirectory */
        if(fat16_read_sub_dir_entry(dd->fs, dd->entry_next, &dd->dir_entry, dir_entry))
        {
            ++dd->entry_next;
            return 1;
        }
    }

    /* restart reading */
    dd->entry_next = 0;

    return 0;
}

/**
 * \ingroup fat16_dir
 * Resets a directory handle.
 *
 * Resets the directory handle such that reading restarts
 * with the first directory entry.
 *
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_reset_dir(struct fat16_dir_struct* dd)
{
    if(!dd)
   13488:	e3500000 	cmp	r0, #0	; 0x0
   1348c:	e1a03000 	mov	r3, r0
        return 0;

    dd->entry_next = 0;
   13490:	13a03000 	movne	r3, #0	; 0x0
   13494:	11c033b0 	strneh	r3, [r0, #48]
   13498:	13a03001 	movne	r3, #1	; 0x1
    return 1;
}
   1349c:	e1a00003 	mov	r0, r3
   134a0:	e12fff1e 	bx	lr

000134a4 <fat16_set_dir>:

uint8_t fat16_set_dir(struct fat16_dir_struct* dd, uint16_t offset)
{
    if(!dd)
   134a4:	e3500000 	cmp	r0, #0	; 0x0
   134a8:	e1a01801 	mov	r1, r1, lsl #16
   134ac:	e1a03000 	mov	r3, r0
   134b0:	e1a01821 	mov	r1, r1, lsr #16
        return 0;

    dd->entry_next = offset;
   134b4:	13a03001 	movne	r3, #1	; 0x1
   134b8:	11c013b0 	strneh	r1, [r0, #48]
    return 1;
}
   134bc:	e1a00003 	mov	r0, r3
   134c0:	e12fff1e 	bx	lr

000134c4 <fat16_delete_file>:

/**
 * \ingroup fat16_fs
 * Writes a directory entry to disk.
 *
 * \note The file name is not checked for invalid characters.
 *
 * \note The generation of the short 8.3 file name is quite
 * simple. The first eight characters are used for the filename.
 * The extension, if any, is made up of the first three characters
 * following the last dot within the long filename. If the
 * filename (without the extension) is longer than eight characters,
 * the lower byte of the cluster number replaces the last two
 * characters to avoid name clashes. In any other case, it is your
 * responsibility to avoid name clashes.
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_write_dir_entry(const struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
            return 0;
    
        device_write_t device_write = fs->partition->device_write;
        uint32_t offset = dir_entry->entry_offset;
        uint8_t name_len = strlen(dir_entry->long_name);
        uint8_t lfn_entry_count = (name_len + 12) / 13;
        uint8_t buffer[32];
    
        /* write 8.3 entry */
    
        /* generate 8.3 file name */
        memset(&buffer[0], ' ', 11);
        char* name_ext = strrchr(dir_entry->long_name, '.');
        if(name_ext)
        {
            ++name_ext;
    
            uint8_t name_ext_len = strlen(name_ext);
            name_len -= name_ext_len + 1;
    
            if(name_ext_len > 3)
                name_ext_len = 3;
    
            memcpy(&buffer[8], name_ext, name_ext_len);
        }
    
        if(name_len <= 8)
        {
            memcpy(buffer, dir_entry->long_name, name_len);
        }
        else
        {
            memcpy(buffer, dir_entry->long_name, 8);
    
            /* Minimize 8.3 name clashes by appending
                                             * the lower byte of the cluster number.
                                             */
            uint8_t num = dir_entry->cluster & 0xff;
    
            buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
            num &= 0x0f;
            buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
        }
    
        /* fill directory entry buffer */
        memset(&buffer[11], 0, sizeof(buffer) - 11);
        buffer[0x0b] = dir_entry->attributes;

        //Not used in bootloader
		#ifdef MAIN_FIRMWARE
			//Added modified date/time 12-26-07
			//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
			char * current_time;
/*			current_time = GPS_get_time();
			char * current_date;
			current_date = GPS_get_date();
			
			uint16_t modified_time, modified_date;
			uint8_t c_hour, c_minute, c_second;
			uint8_t c_year, c_month, c_day;
			
			c_hour = (current_time[0] - '0') * 10;
			c_hour += (current_time[1] - '0');
			c_minute = (current_time[3] - '0') * 10;
			c_minute += (current_time[4] - '0');
			c_second = (current_time[6] - '0') * 10;
			c_second += (current_time[7] - '0');
			
			c_day = (current_date[0] - '0') * 10;
			c_day += (current_date[1] - '0');
			c_month = (current_date[3] - '0') * 10;
			c_month += (current_date[4] - '0');
			c_year = (current_date[6] - '0') * 10;
			c_year += (current_date[7] - '0');
			
			//Correct for 1980 = 0, 2000 = 20, year code
			c_year += 20;
			
			modified_time = (c_hour << (16-5)) | (c_minute << (16-11)) | (c_second);
			modified_date = (c_year << (16-7)) | (c_month << (16-11)) | (c_day);

			//Do a little error correction
			if (c_year < 26) //26 = 2006
			{
				modified_time = 0;
				modified_date = 0;
			}

			//rprintf("c_time=%d, %d, %d\n", c_hour, c_minute, c_second);
			//rprintf("c_date=%d, %d, %d\n", c_month, c_day, c_year);
			//rprintf("mod_time=%x\n", modified_time);
			//rprintf("mod_date=%x\n", modified_date);
			
			buffer[0x16] = (modified_time >> 0) & 0xFF;
			buffer[0x17] = (modified_time >> 8) & 0xFF;
			buffer[0x18] = (modified_date >> 0) & 0xFF;
			buffer[0x19] = (modified_date >> 8) & 0xFF;
			*/
			//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		#endif

        buffer[0x1a] = (dir_entry->cluster >> 0) & 0xff;
        buffer[0x1b] = (dir_entry->cluster >> 8) & 0xff;
        buffer[0x1c] = (dir_entry->file_size >> 0) & 0xff;
        buffer[0x1d] = (dir_entry->file_size >> 8) & 0xff;
        buffer[0x1e] = (dir_entry->file_size >> 16) & 0xff;
        buffer[0x1f] = (dir_entry->file_size >> 24) & 0xff;
    
        /* write to disk */
        if(!device_write(offset + (uint32_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
            return 0;
    
        /* calculate checksum of 8.3 name */
        uint8_t checksum = buffer[0];
        uint8_t i;
        for(i = 1; i < 11; ++i)
            checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
        /* write lfn entries */
        uint8_t lfn_entry;
        for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
        {
            memset(buffer, 0, sizeof(buffer));
            memset(&buffer[0x01], 0xff, 10);
            memset(&buffer[0x0e], 0xff, 12);
            memset(&buffer[0x1c], 0xff, 4);
    
            buffer[0x00] = lfn_entry;
            if(lfn_entry == lfn_entry_count)
                buffer[0x00] |= FAT16_DIRENTRY_LFNLAST;
    
            /* set file name */
            const char* long_name_curr = dir_entry->long_name + (lfn_entry - 1) * 13;
            i = 1;
            while(i < 0x1f)
            {
                buffer[i++] = *long_name_curr;
                buffer[i++] = 0;
    
                switch(i)
                {
                    case 0x0b:
                        i = 0x0e;
                        break;
                    case 0x1a:
                        i = 0x1c;
                        break;
                }
    
                if(!*long_name_curr++)
                    break;
            }
    
            /* mark as lfn entry */
            buffer[0x0b] = 0x0f;
    
            /* set checksum */
            buffer[0x0d] = checksum;
    
            /* write entry */
            device_write(offset, buffer, sizeof(buffer));
    
            offset += sizeof(buffer);
        }
    
        return 1;
    
    #else
        return 0;
    #endif
}

/**
 * \ingroup fat16_file
 * Creates a file.
 *
 * Creates a file and obtains the directory entry of the
 * new file. If the file to create already exists, the
 * directory entry of the existing file will be returned
 * within the dir_entry parameter.
 *
 * \note The file name is not checked for invalid characters.
 *
 * \note The generation of the short 8.3 file name is quite
 * simple. The first eight characters are used for the filename.
 * The extension, if any, is made up of the first three characters
 * following the last dot within the long filename. If the
 * filename (without the extension) is longer than eight characters,
 * the lower byte of the cluster number replaces the last two
 * characters to avoid name clashes. In any other case, it is your
 * responsibility to avoid name clashes.
 *
 * \param[in] parent The handle of the directory in which to create the file.
 * \param[in] file The name of the file to create.
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat16_delete_file
 */
uint8_t fat16_create_file(struct fat16_dir_struct* parent, const char* file, struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!parent || !file || !file[0])
            return 0;
    
        /* check if the file already exists */
        while(1)
        {
            if(!fat16_read_dir(parent, dir_entry))
                break;
    
            if(strcmp(file, dir_entry->long_name) == 0)
            {
                fat16_reset_dir(parent);
                return 1;
            }
        }
    
        memset(dir_entry, 0, sizeof(*dir_entry));
        strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    
        /* search for a place where to write the directory entry to disk */
        uint8_t free_dir_entries_needed = strlen(file) / 13 + 1 + 1;
        uint8_t free_dir_entries_found = 0;
        struct fat16_fs_struct* fs = parent->fs;
        uint16_t cluster_num = parent->dir_entry.cluster;
        uint32_t dir_entry_offset = 0;
        uint32_t offset = 0;
        uint32_t offset_to = 0;
    
        if(cluster_num == 0)
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
            offset_to = fs->header.cluster_zero_offset;
            dir_entry_offset = offset;
        }
    
        while(1)
        {
            if(offset == offset_to)
            {
                if(cluster_num == 0)
				/* We iterated through the whole root directory entry
                * and could not find enough space for the directory entry.
                */
                return 0;
    
                if(offset)
                {
                    /* We reached a cluster boundary and have to
                    * switch to the next cluster.
                    */
    
                    uint16_t cluster_next = fat16_get_next_cluster(fs, cluster_num);
                    if(!cluster_next)
                    {
                        cluster_next = fat16_append_clusters(fs, cluster_num, 1);
                        if(!cluster_next)
                            return 0;
    
                        /* we appended a new cluster and know it is free */
                        dir_entry_offset = fs->header.cluster_zero_offset +
                        (uint32_t) (cluster_next - 2) * fs->header.cluster_size;
    
                        /* TODO: This cluster has to be zeroed in an efficient way, or at least
                        *       every 32th byte should be set to FAT16_DIRENTRY_DELETED.
                        */
                        break;
                    }
                    cluster_num = cluster_next;
                }
    
                offset = fs->header.cluster_zero_offset +
                (uint32_t) (cluster_num - 2) * fs->header.cluster_size;
                offset_to = offset + fs->header.cluster_size;
                dir_entry_offset = offset;
                free_dir_entries_found = 0;
            }
    
            /* read next lfn or 8.3 entry */
            uint8_t first_char;
            if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
                return 0;
    
            /* check if we found a free directory entry */
            if(first_char == FAT16_DIRENTRY_DELETED || !first_char)
            {
                /* check if we have the needed number of available entries */
                ++free_dir_entries_found;
                if(free_dir_entries_found >= free_dir_entries_needed)
                    break;
    
                offset += 32;
            }
            else
            {
                offset += 32;
                dir_entry_offset = offset;
                free_dir_entries_found = 0;
            }
        }

        /* write directory entry to disk */
        dir_entry->entry_offset = dir_entry_offset;
        if(!fat16_write_dir_entry(fs, dir_entry))
            return 0;
    
        return 1;
    
    #else
        return 0;
    #endif
}

/**
 * \ingroup fat16_file
 * Deletes a file or directory.
 *
 * It is not checked if the file to delete is a directory.
 * If a directory is deleted without first deleting its
 * subdirectories and files, disk space occupied by these
 * files will get wasted as there is no chance to release
 * it and mark it as free.
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat16_create_file
 */
uint8_t fat16_delete_file(struct fat16_fs_struct* fs, struct fat16_dir_entry_struct* dir_entry)
{
   134c4:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   134c8:	e3510000 	cmp	r1, #0	; 0x0
   134cc:	13500000 	cmpne	r0, #0	; 0x0
   134d0:	e24dd00c 	sub	sp, sp, #12	; 0xc
   134d4:	e1a06000 	mov	r6, r0
   134d8:	e1a07001 	mov	r7, r1
   134dc:	0a00001f 	beq	13560 <fat16_delete_file+0x9c>
            return 0;
    
        /* get offset of the file's directory entry */
        uint32_t dir_entry_offset = dir_entry->entry_offset;
   134e0:	e5915028 	ldr	r5, [r1, #40]
        if(!dir_entry_offset)
   134e4:	e3550000 	cmp	r5, #0	; 0x0
   134e8:	0a00001c 	beq	13560 <fat16_delete_file+0x9c>
            return 0;
    
        uint8_t buffer[12];
        while(1)
        {
            /* read directory entry */
            if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
   134ec:	e1a0100d 	mov	r1, sp
   134f0:	e1a00005 	mov	r0, r5
   134f4:	e3a0200c 	mov	r2, #12	; 0xc
   134f8:	e5963000 	ldr	r3, [r6]
   134fc:	e593c000 	ldr	ip, [r3]
   13500:	e1a0e00f 	mov	lr, pc
   13504:	e12fff1c 	bx	ip
   13508:	e3500000 	cmp	r0, #0	; 0x0
   1350c:	e1a0400d 	mov	r4, sp
                return 0;
    
            /* mark the directory entry as deleted */
            buffer[0] = FAT16_DIRENTRY_DELETED;
    
            /* write back entry */
            if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
   13510:	e1a00005 	mov	r0, r5
   13514:	e1a0100d 	mov	r1, sp
   13518:	e3a0200c 	mov	r2, #12	; 0xc
                return 0;
    
            /* check if we deleted the whole entry */
            if(buffer[11] != 0x0f)
                break;
    
            dir_entry_offset += 32;
   1351c:	e2855020 	add	r5, r5, #32	; 0x20
   13520:	0a00000e 	beq	13560 <fat16_delete_file+0x9c>
   13524:	e3e0301a 	mvn	r3, #26	; 0x1a
   13528:	e5cd3000 	strb	r3, [sp]
   1352c:	e5963000 	ldr	r3, [r6]
   13530:	e593c008 	ldr	ip, [r3, #8]
   13534:	e1a0e00f 	mov	lr, pc
   13538:	e12fff1c 	bx	ip
   1353c:	e3500000 	cmp	r0, #0	; 0x0
   13540:	0a000006 	beq	13560 <fat16_delete_file+0x9c>
   13544:	e5dd300b 	ldrb	r3, [sp, #11]
   13548:	e353000f 	cmp	r3, #15	; 0xf
   1354c:	0affffe6 	beq	134ec <fat16_delete_file+0x28>
        }
    
        /* We deleted the directory entry. The next thing to do is
                             * marking all occupied clusters as free.
                             */
        return fat16_free_clusters(fs, dir_entry->cluster);
   13550:	e1a00006 	mov	r0, r6
   13554:	e1d712b2 	ldrh	r1, [r7, #34]
   13558:	ebfffed1 	bl	130a4 <fat16_free_clusters>
   1355c:	ea000000 	b	13564 <fat16_delete_file+0xa0>
   13560:	e3a00000 	mov	r0, #0	; 0x0
    #else
        return 0;
    #endif
}
   13564:	e28dd00c 	add	sp, sp, #12	; 0xc
   13568:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   1356c:	e12fff1e 	bx	lr

00013570 <fat16_get_fs_size>:

/**
 * \ingroup fat16_fs
 * Returns the amount of total storage capacity of the filesystem in bytes.
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
uint32_t fat16_get_fs_size(const struct fat16_fs_struct* fs)
{
    if(!fs)
   13570:	e3500000 	cmp	r0, #0	; 0x0
        return 0;

    return (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
   13574:	1590300c 	ldrne	r3, [r0, #12]
   13578:	e1a02000 	mov	r2, r0
   1357c:	11a030a3 	movne	r3, r3, lsr #1
   13580:	11d021b2 	ldrneh	r2, [r0, #18]
   13584:	12433002 	subne	r3, r3, #2	; 0x2
   13588:	10020293 	mulne	r2, r3, r2
}
   1358c:	e1a00002 	mov	r0, r2
   13590:	e12fff1e 	bx	lr

00013594 <fat16_get_fs_free>:

/**
 * \ingroup fat16_fs
 * Returns the amount of free storage capacity on the filesystem in bytes.
 *
 * \note As the FAT16 filesystem is cluster based, this function does not
 *       return continuous values but multiples of the cluster size.
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
uint32_t fat16_get_fs_free(const struct fat16_fs_struct* fs)
{
   13594:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    if(!fs)
   13598:	e2506000 	subs	r6, r0, #0	; 0x0
   1359c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   135a0:	0a000021 	beq	1362c <fat16_get_fs_free+0x98>
        return 0;

    uint8_t fat[32];
    struct fat16_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);
   135a4:	e3a03020 	mov	r3, #32	; 0x20
   135a8:	e5cd302a 	strb	r3, [sp, #42]

    uint32_t fat_offset = fs->header.fat_offset;
   135ac:	e5967008 	ldr	r7, [r6, #8]
    uint32_t fat_size = fs->header.fat_size;
   135b0:	e596500c 	ldr	r5, [r6, #12]
   135b4:	e3a03000 	mov	r3, #0	; 0x0
   135b8:	e1cd32b8 	strh	r3, [sp, #40]
   135bc:	ea000012 	b	1360c <fat16_get_fs_free+0x78>
    while(fat_size > 0)
    {
        uint16_t length = UINT16_MAX - 1;
        if(fat_size < length)
   135c0:	e59f3074 	ldr	r3, [pc, #116]	; 1363c <.text+0x363c>
   135c4:	e1550003 	cmp	r5, r3
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   135c8:	e59f3070 	ldr	r3, [pc, #112]	; 13640 <.text+0x3640>
   135cc:	91a04822 	movls	r4, r2, lsr #16
   135d0:	e596c000 	ldr	ip, [r6]
   135d4:	e58d3000 	str	r3, [sp]
   135d8:	e28d3028 	add	r3, sp, #40	; 0x28
   135dc:	e58d3004 	str	r3, [sp, #4]
   135e0:	e1a00007 	mov	r0, r7
   135e4:	e28d1008 	add	r1, sp, #8	; 0x8
   135e8:	e3a02020 	mov	r2, #32	; 0x20
   135ec:	e1a03004 	mov	r3, r4
   135f0:	e59cc004 	ldr	ip, [ip, #4]
   135f4:	e1a0e00f 	mov	lr, pc
   135f8:	e12fff1c 	bx	ip
   135fc:	e3500000 	cmp	r0, #0	; 0x0
   13600:	0a000009 	beq	1362c <fat16_get_fs_free+0x98>
            fat,
           sizeof(fat),
           length,
           fat16_get_fs_free_callback,
           &count_arg
           )
           )
        return 0;

        fat_offset += length;
        fat_size -= length;
   13604:	e0645005 	rsb	r5, r4, r5
   13608:	e0877004 	add	r7, r7, r4
   1360c:	e3550000 	cmp	r5, #0	; 0x0
   13610:	e59f402c 	ldr	r4, [pc, #44]	; 13644 <.text+0x3644>
   13614:	e1a02805 	mov	r2, r5, lsl #16
   13618:	1affffe8 	bne	135c0 <fat16_get_fs_free+0x2c>
    }

    return (uint32_t) count_arg.cluster_count * fs->header.cluster_size;
   1361c:	e1d621b2 	ldrh	r2, [r6, #18]
   13620:	e1dd32b8 	ldrh	r3, [sp, #40]
   13624:	e0000392 	mul	r0, r2, r3
   13628:	ea000000 	b	13630 <fat16_get_fs_free+0x9c>
   1362c:	e3a00000 	mov	r0, #0	; 0x0
}
   13630:	e28dd02c 	add	sp, sp, #44	; 0x2c
   13634:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   13638:	e12fff1e 	bx	lr
   1363c:	0000fffd 	streqd	pc, [r0], -sp
   13640:	00013648 	andeq	r3, r1, r8, asr #12
   13644:	0000fffe 	streqd	pc, [r0], -lr

00013648 <fat16_get_fs_free_callback>:

/**
 * \ingroup fat16_fs
 * Callback function used for counting free clusters.
 */
uint8_t fat16_get_fs_free_callback(uint8_t* buffer, uint32_t offset, void* p)
{
   13648:	e92d4010 	stmdb	sp!, {r4, lr}
    struct fat16_usage_count_callback_arg* count_arg = (struct fat16_usage_count_callback_arg*) p;
    uint8_t buffer_size = count_arg->buffer_size;
   1364c:	e5d24002 	ldrb	r4, [r2, #2]
   13650:	e1a0c002 	mov	ip, r2
   13654:	e1a01000 	mov	r1, r0
   13658:	e3a0e000 	mov	lr, #0	; 0x0
   1365c:	ea000007 	b	13680 <fat16_get_fs_free_callback+0x38>
    uint8_t i;
    for(i = 0; i < buffer_size; i += 2)
    {
        if((((uint16_t) buffer[1] << 8) | ((uint16_t) buffer[0] << 0)) == FAT16_CLUSTER_FREE)
   13660:	e7de3000 	ldrb	r3, [lr, r0]
   13664:	e5d12001 	ldrb	r2, [r1, #1]
   13668:	e1932402 	orrs	r2, r3, r2, lsl #8
            ++(count_arg->cluster_count);
   1366c:	01dc30b0 	ldreqh	r3, [ip]
   13670:	02833001 	addeq	r3, r3, #1	; 0x1
   13674:	01cc30b0 	streqh	r3, [ip]

        buffer += 2;
   13678:	e2811002 	add	r1, r1, #2	; 0x2
   1367c:	e28ee002 	add	lr, lr, #2	; 0x2
   13680:	e20e30ff 	and	r3, lr, #255	; 0xff
   13684:	e1530004 	cmp	r3, r4
   13688:	3afffff4 	bcc	13660 <fat16_get_fs_free_callback+0x18>
    }

    return 1;
}
   1368c:	e3a00001 	mov	r0, #1	; 0x1
   13690:	e8bd4010 	ldmia	sp!, {r4, lr}
   13694:	e12fff1e 	bx	lr

00013698 <fat16_file_size>:

uint8_t find_file_in_dir(struct fat16_fs_struct* fs, struct fat16_dir_struct* dd, const char* name, struct fat16_dir_entry_struct* dir_entry)
{
    while(fat16_read_dir(dd, dir_entry))
    {
        if(strcmp(dir_entry->long_name, name) == 0)
        {
            fat16_reset_dir(dd);
            return 1;
        }
    }

    return 0;
}

struct fat16_file_struct* open_file_in_dir(struct fat16_fs_struct* fs, struct fat16_dir_struct* dd, const char* name)
{
    struct fat16_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat16_open_file(fs, &file_entry);
}

int fat16_file_size(struct fat16_file_struct * file)
{
    return(file->dir_entry.file_size);
}
   13698:	e5900028 	ldr	r0, [r0, #40]
   1369c:	e12fff1e 	bx	lr

000136a0 <fat16_read_dir>:
   136a0:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a4:	e1a0a001 	mov	sl, r1
   136a8:	e2711001 	rsbs	r1, r1, #1	; 0x1
   136ac:	33a01000 	movcc	r1, #0	; 0x0
   136b0:	e35a0000 	cmp	sl, #0	; 0x0
   136b4:	13500000 	cmpne	r0, #0	; 0x0
   136b8:	e24dd038 	sub	sp, sp, #56	; 0x38
   136bc:	e1a08000 	mov	r8, r0
   136c0:	0a000076 	beq	138a0 <fat16_read_dir+0x200>
   136c4:	e1d032b6 	ldrh	r3, [r0, #38]
   136c8:	e3530000 	cmp	r3, #0	; 0x0
   136cc:	e1d093b0 	ldrh	r9, [r0, #48]
   136d0:	e5906000 	ldr	r6, [r0]
   136d4:	1a00002c 	bne	1378c <fat16_read_dir+0xec>
   136d8:	e3560000 	cmp	r6, #0	; 0x0
   136dc:	11a07001 	movne	r7, r1
   136e0:	03817001 	orreq	r7, r1, #1	; 0x1
   136e4:	e3570000 	cmp	r7, #0	; 0x0
   136e8:	1a00006a 	bne	13898 <fat16_read_dir+0x1f8>
   136ec:	e5963000 	ldr	r3, [r6]
   136f0:	e28d502c 	add	r5, sp, #44	; 0x2c
   136f4:	e2864004 	add	r4, r6, #4	; 0x4
   136f8:	e1a01007 	mov	r1, r7
   136fc:	e3a0200c 	mov	r2, #12	; 0xc
   13700:	e1a00005 	mov	r0, r5
   13704:	e5936004 	ldr	r6, [r3, #4]
   13708:	eb000e52 	bl	17058 <memset>
   1370c:	e2840010 	add	r0, r4, #16	; 0x10
   13710:	e8900009 	ldmia	r0, {r0, r3}
   13714:	e59f2194 	ldr	r2, [pc, #404]	; 138b0 <.text+0x38b0>
   13718:	e0603003 	rsb	r3, r0, r3
   1371c:	e1a03803 	mov	r3, r3, lsl #16
   13720:	e28d400c 	add	r4, sp, #12	; 0xc
   13724:	e58d2000 	str	r2, [sp]
   13728:	e1cd92be 	strh	r9, [sp, #46]
   1372c:	e58d5004 	str	r5, [sp, #4]
   13730:	e1a03823 	mov	r3, r3, lsr #16
   13734:	e1a01004 	mov	r1, r4
   13738:	e3a02020 	mov	r2, #32	; 0x20
   1373c:	e1a0e00f 	mov	lr, pc
   13740:	e12fff16 	bx	r6
   13744:	e3500000 	cmp	r0, #0	; 0x0
   13748:	0a000052 	beq	13898 <fat16_read_dir+0x1f8>
   1374c:	e59d3030 	ldr	r3, [sp, #48]
   13750:	e3530000 	cmp	r3, #0	; 0x0
   13754:	0a00004f 	beq	13898 <fat16_read_dir+0x1f8>
   13758:	e1a01007 	mov	r1, r7
   1375c:	e3a0202c 	mov	r2, #44	; 0x2c
   13760:	e1a0000a 	mov	r0, sl
   13764:	eb000e3b 	bl	17058 <memset>
   13768:	e59f2144 	ldr	r2, [pc, #324]	; 138b4 <.text+0x38b4>
   1376c:	e5dd3034 	ldrb	r3, [sp, #52]
   13770:	e88d0404 	stmia	sp, {r2, sl}
   13774:	e1a01004 	mov	r1, r4
   13778:	e59d0030 	ldr	r0, [sp, #48]
   1377c:	e3a02020 	mov	r2, #32	; 0x20
   13780:	e1a0e00f 	mov	lr, pc
   13784:	e12fff16 	bx	r6
   13788:	ea000039 	b	13874 <fat16_read_dir+0x1d4>
   1378c:	e3560000 	cmp	r6, #0	; 0x0
   13790:	e58d9008 	str	r9, [sp, #8]
   13794:	0a00003f 	beq	13898 <fat16_read_dir+0x1f8>
   13798:	e3510000 	cmp	r1, #0	; 0x0
   1379c:	1a00003d 	bne	13898 <fat16_read_dir+0x1f8>
   137a0:	e2800004 	add	r0, r0, #4	; 0x4
   137a4:	e5d03020 	ldrb	r3, [r0, #32]
   137a8:	e3130010 	tst	r3, #16	; 0x10
   137ac:	0a000039 	beq	13898 <fat16_read_dir+0x1f8>
   137b0:	e1d072b2 	ldrh	r7, [r0, #34]
   137b4:	e1d691b2 	ldrh	r9, [r6, #18]
   137b8:	e5962018 	ldr	r2, [r6, #24]
   137bc:	e2473002 	sub	r3, r7, #2	; 0x2
   137c0:	e0252399 	mla	r5, r9, r3, r2
   137c4:	e28d402c 	add	r4, sp, #44	; 0x2c
   137c8:	e3a01000 	mov	r1, #0	; 0x0
   137cc:	e3a0200c 	mov	r2, #12	; 0xc
   137d0:	e1a00004 	mov	r0, r4
   137d4:	eb000e1f 	bl	17058 <memset>
   137d8:	e59d3008 	ldr	r3, [sp, #8]
   137dc:	e1cd32be 	strh	r3, [sp, #46]
   137e0:	e59f30c8 	ldr	r3, [pc, #200]	; 138b0 <.text+0x38b0>
   137e4:	e28db00c 	add	fp, sp, #12	; 0xc
   137e8:	e596c000 	ldr	ip, [r6]
   137ec:	e1a0100b 	mov	r1, fp
   137f0:	e58d3000 	str	r3, [sp]
   137f4:	e1a00005 	mov	r0, r5
   137f8:	e58d4004 	str	r4, [sp, #4]
   137fc:	e3a02020 	mov	r2, #32	; 0x20
   13800:	e1a03009 	mov	r3, r9
   13804:	e59cc004 	ldr	ip, [ip, #4]
   13808:	e1a0e00f 	mov	lr, pc
   1380c:	e12fff1c 	bx	ip
   13810:	e3500000 	cmp	r0, #0	; 0x0
   13814:	e1a01007 	mov	r1, r7
   13818:	e1a00006 	mov	r0, r6
   1381c:	0a00001d 	beq	13898 <fat16_read_dir+0x1f8>
   13820:	e59d3030 	ldr	r3, [sp, #48]
   13824:	e3530000 	cmp	r3, #0	; 0x0
   13828:	1a000003 	bne	1383c <fat16_read_dir+0x19c>
   1382c:	ebfffdf2 	bl	12ffc <fat16_get_next_cluster>
   13830:	e2507000 	subs	r7, r0, #0	; 0x0
   13834:	0a000017 	beq	13898 <fat16_read_dir+0x1f8>
   13838:	eaffffde 	b	137b8 <fat16_read_dir+0x118>
   1383c:	e3a01000 	mov	r1, #0	; 0x0
   13840:	e3a0202c 	mov	r2, #44	; 0x2c
   13844:	e1a0000a 	mov	r0, sl
   13848:	eb000e02 	bl	17058 <memset>
   1384c:	e59f2060 	ldr	r2, [pc, #96]	; 138b4 <.text+0x38b4>
   13850:	e596c000 	ldr	ip, [r6]
   13854:	e5dd3034 	ldrb	r3, [sp, #52]
   13858:	e88d0404 	stmia	sp, {r2, sl}
   1385c:	e1a0100b 	mov	r1, fp
   13860:	e59d0030 	ldr	r0, [sp, #48]
   13864:	e3a02020 	mov	r2, #32	; 0x20
   13868:	e59cc004 	ldr	ip, [ip, #4]
   1386c:	e1a0e00f 	mov	lr, pc
   13870:	e12fff1c 	bx	ip
   13874:	e3500000 	cmp	r0, #0	; 0x0
   13878:	0a000006 	beq	13898 <fat16_read_dir+0x1f8>
   1387c:	e5da3000 	ldrb	r3, [sl]
   13880:	e3530000 	cmp	r3, #0	; 0x0
   13884:	11d833b0 	ldrneh	r3, [r8, #48]
   13888:	13a00001 	movne	r0, #1	; 0x1
   1388c:	12833001 	addne	r3, r3, #1	; 0x1
   13890:	11c833b0 	strneh	r3, [r8, #48]
   13894:	1a000002 	bne	138a4 <fat16_read_dir+0x204>
   13898:	e3a03000 	mov	r3, #0	; 0x0
   1389c:	e1c833b0 	strh	r3, [r8, #48]
   138a0:	e3a00000 	mov	r0, #0	; 0x0
   138a4:	e28dd038 	add	sp, sp, #56	; 0x38
   138a8:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138ac:	e12fff1e 	bx	lr
   138b0:	00012ddc 	ldreqd	r2, [r1], -ip
   138b4:	00012e4c 	andeq	r2, r1, ip, asr #28

000138b8 <find_file_in_dir>:
   138b8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   138bc:	e1a04001 	mov	r4, r1
   138c0:	e1a06002 	mov	r6, r2
   138c4:	e1a05003 	mov	r5, r3
   138c8:	ea000007 	b	138ec <find_file_in_dir+0x34>
   138cc:	eb000e2d 	bl	17188 <strcmp>
   138d0:	e3500000 	cmp	r0, #0	; 0x0
   138d4:	1a000004 	bne	138ec <find_file_in_dir+0x34>
   138d8:	e3540000 	cmp	r4, #0	; 0x0
   138dc:	03a03001 	moveq	r3, #1	; 0x1
   138e0:	13a03001 	movne	r3, #1	; 0x1
   138e4:	11c403b0 	strneh	r0, [r4, #48]
   138e8:	ea000006 	b	13908 <find_file_in_dir+0x50>
   138ec:	e1a01005 	mov	r1, r5
   138f0:	e1a00004 	mov	r0, r4
   138f4:	ebffff69 	bl	136a0 <fat16_read_dir>
   138f8:	e2503000 	subs	r3, r0, #0	; 0x0
   138fc:	e1a01006 	mov	r1, r6
   13900:	e1a00005 	mov	r0, r5
   13904:	1afffff0 	bne	138cc <find_file_in_dir+0x14>
   13908:	e1a00003 	mov	r0, r3
   1390c:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   13910:	e12fff1e 	bx	lr

00013914 <fat16_write_dir_entry>:
   13914:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13918:	e3510000 	cmp	r1, #0	; 0x0
   1391c:	13500000 	cmpne	r0, #0	; 0x0
   13920:	e24dd020 	sub	sp, sp, #32	; 0x20
   13924:	e1a06001 	mov	r6, r1
   13928:	0a000098 	beq	13b90 <fat16_write_dir_entry+0x27c>
   1392c:	e5903000 	ldr	r3, [r0]
   13930:	e1a00001 	mov	r0, r1
   13934:	e5939008 	ldr	r9, [r3, #8]
   13938:	eb000e24 	bl	171d0 <strlen>
   1393c:	e20050ff 	and	r5, r0, #255	; 0xff
   13940:	e3a0100d 	mov	r1, #13	; 0xd
   13944:	e285000c 	add	r0, r5, #12	; 0xc
   13948:	eb0024f0 	bl	1cd10 <__aeabi_idiv>
   1394c:	e3a01020 	mov	r1, #32	; 0x20
   13950:	e1a03000 	mov	r3, r0
   13954:	e3a0200b 	mov	r2, #11	; 0xb
   13958:	e1a0000d 	mov	r0, sp
   1395c:	e203a0ff 	and	sl, r3, #255	; 0xff
   13960:	e5968028 	ldr	r8, [r6, #40]
   13964:	eb000dbb 	bl	17058 <memset>
   13968:	e1a00006 	mov	r0, r6
   1396c:	e3a0102e 	mov	r1, #46	; 0x2e
   13970:	eb000e45 	bl	1728c <strrchr>
   13974:	e3500000 	cmp	r0, #0	; 0x0
   13978:	e1a0700d 	mov	r7, sp
   1397c:	0a00000b 	beq	139b0 <fat16_write_dir_entry+0x9c>
   13980:	e2804001 	add	r4, r0, #1	; 0x1
   13984:	e1a00004 	mov	r0, r4
   13988:	eb000e10 	bl	171d0 <strlen>
   1398c:	e20020ff 	and	r2, r0, #255	; 0xff
   13990:	e0623005 	rsb	r3, r2, r5
   13994:	e2433001 	sub	r3, r3, #1	; 0x1
   13998:	e3520003 	cmp	r2, #3	; 0x3
   1399c:	23a02003 	movcs	r2, #3	; 0x3
   139a0:	e1a01004 	mov	r1, r4
   139a4:	e28d0008 	add	r0, sp, #8	; 0x8
   139a8:	e20350ff 	and	r5, r3, #255	; 0xff
   139ac:	eb000da1 	bl	17038 <memcpy>
   139b0:	e3550008 	cmp	r5, #8	; 0x8
   139b4:	8a000004 	bhi	139cc <fat16_write_dir_entry+0xb8>
   139b8:	e1a0000d 	mov	r0, sp
   139bc:	e1a02005 	mov	r2, r5
   139c0:	e1a01006 	mov	r1, r6
   139c4:	eb000d9b 	bl	17038 <memcpy>
   139c8:	ea00000e 	b	13a08 <fat16_write_dir_entry+0xf4>
   139cc:	e3a02008 	mov	r2, #8	; 0x8
   139d0:	e1a0000d 	mov	r0, sp
   139d4:	e1a01006 	mov	r1, r6
   139d8:	eb000d96 	bl	17038 <memcpy>
   139dc:	e5d63022 	ldrb	r3, [r6, #34]
   139e0:	e353009f 	cmp	r3, #159	; 0x9f
   139e4:	e1a02223 	mov	r2, r3, lsr #4
   139e8:	e203300f 	and	r3, r3, #15	; 0xf
   139ec:	92822030 	addls	r2, r2, #48	; 0x30
   139f0:	82822061 	addhi	r2, r2, #97	; 0x61
   139f4:	e3530009 	cmp	r3, #9	; 0x9
   139f8:	92833030 	addls	r3, r3, #48	; 0x30
   139fc:	82833061 	addhi	r3, r3, #97	; 0x61
   13a00:	e5cd2006 	strb	r2, [sp, #6]
   13a04:	e5cd3007 	strb	r3, [sp, #7]
   13a08:	e3a01000 	mov	r1, #0	; 0x0
   13a0c:	e3a02015 	mov	r2, #21	; 0x15
   13a10:	e28d000b 	add	r0, sp, #11	; 0xb
   13a14:	eb000d8f 	bl	17058 <memset>
   13a18:	e5d63020 	ldrb	r3, [r6, #32]
   13a1c:	e5cd300b 	strb	r3, [sp, #11]
   13a20:	e1d622b2 	ldrh	r2, [r6, #34]
   13a24:	e1a03422 	mov	r3, r2, lsr #8
   13a28:	e5cd201a 	strb	r2, [sp, #26]
   13a2c:	e5cd301b 	strb	r3, [sp, #27]
   13a30:	e5963024 	ldr	r3, [r6, #36]
   13a34:	e1a00c23 	mov	r0, r3, lsr #24
   13a38:	e1a02423 	mov	r2, r3, lsr #8
   13a3c:	e1a01823 	mov	r1, r3, lsr #16
   13a40:	e5cd201d 	strb	r2, [sp, #29]
   13a44:	e5cd101e 	strb	r1, [sp, #30]
   13a48:	e5cd001f 	strb	r0, [sp, #31]
   13a4c:	e5cd301c 	strb	r3, [sp, #28]
   13a50:	e088028a 	add	r0, r8, sl, lsl #5
   13a54:	e1a0100d 	mov	r1, sp
   13a58:	e3a02020 	mov	r2, #32	; 0x20
   13a5c:	e1a0e00f 	mov	lr, pc
   13a60:	e12fff19 	bx	r9
   13a64:	e3500000 	cmp	r0, #0	; 0x0
   13a68:	e1a0400d 	mov	r4, sp
   13a6c:	0a000047 	beq	13b90 <fat16_write_dir_entry+0x27c>
   13a70:	e5dd7000 	ldrb	r7, [sp]
   13a74:	e1a0100d 	mov	r1, sp
   13a78:	e5f12001 	ldrb	r2, [r1, #1]!
   13a7c:	e1a03387 	mov	r3, r7, lsl #7
   13a80:	e18330a7 	orr	r3, r3, r7, lsr #1
   13a84:	e0833002 	add	r3, r3, r2
   13a88:	e28d200a 	add	r2, sp, #10	; 0xa
   13a8c:	e1510002 	cmp	r1, r2
   13a90:	e20370ff 	and	r7, r3, #255	; 0xff
   13a94:	1afffff7 	bne	13a78 <fat16_write_dir_entry+0x164>
   13a98:	e1a0500a 	mov	r5, sl
   13a9c:	ea000037 	b	13b80 <fat16_write_dir_entry+0x26c>
   13aa0:	e3a01000 	mov	r1, #0	; 0x0
   13aa4:	e3a02020 	mov	r2, #32	; 0x20
   13aa8:	e1a0000d 	mov	r0, sp
   13aac:	eb000d69 	bl	17058 <memset>
   13ab0:	e3a010ff 	mov	r1, #255	; 0xff
   13ab4:	e3a0200a 	mov	r2, #10	; 0xa
   13ab8:	e28d0001 	add	r0, sp, #1	; 0x1
   13abc:	eb000d65 	bl	17058 <memset>
   13ac0:	e3a010ff 	mov	r1, #255	; 0xff
   13ac4:	e3a0200c 	mov	r2, #12	; 0xc
   13ac8:	e28d000e 	add	r0, sp, #14	; 0xe
   13acc:	eb000d61 	bl	17058 <memset>
   13ad0:	e28d001c 	add	r0, sp, #28	; 0x1c
   13ad4:	e3a010ff 	mov	r1, #255	; 0xff
   13ad8:	e3a02004 	mov	r2, #4	; 0x4
   13adc:	eb000d5d 	bl	17058 <memset>
   13ae0:	e155000a 	cmp	r5, sl
   13ae4:	03853040 	orreq	r3, r5, #64	; 0x40
   13ae8:	e5cd5000 	strb	r5, [sp]
   13aec:	05cd3000 	streqb	r3, [sp]
   13af0:	e3a0300d 	mov	r3, #13	; 0xd
   13af4:	e02e6395 	mla	lr, r5, r3, r6
   13af8:	e3a0c001 	mov	ip, #1	; 0x1
   13afc:	e28c3001 	add	r3, ip, #1	; 0x1
   13b00:	e20330ff 	and	r3, r3, #255	; 0xff
   13b04:	e2832001 	add	r2, r3, #1	; 0x1
   13b08:	e28d4020 	add	r4, sp, #32	; 0x20
   13b0c:	e55e000d 	ldrb	r0, [lr, #-13]
   13b10:	e084100c 	add	r1, r4, ip
   13b14:	e202c0ff 	and	ip, r2, #255	; 0xff
   13b18:	e35c000b 	cmp	ip, #11	; 0xb
   13b1c:	e0842003 	add	r2, r4, r3
   13b20:	e3a03000 	mov	r3, #0	; 0x0
   13b24:	e5410020 	strb	r0, [r1, #-32]
   13b28:	03a0c00e 	moveq	ip, #14	; 0xe
   13b2c:	e5423020 	strb	r3, [r2, #-32]
   13b30:	0a000001 	beq	13b3c <fat16_write_dir_entry+0x228>
   13b34:	e35c001a 	cmp	ip, #26	; 0x1a
   13b38:	028cc002 	addeq	ip, ip, #2	; 0x2
   13b3c:	e55e300d 	ldrb	r3, [lr, #-13]
   13b40:	e3530000 	cmp	r3, #0	; 0x0
   13b44:	e28ee001 	add	lr, lr, #1	; 0x1
   13b48:	0a000001 	beq	13b54 <fat16_write_dir_entry+0x240>
   13b4c:	e35c001e 	cmp	ip, #30	; 0x1e
   13b50:	9affffe9 	bls	13afc <fat16_write_dir_entry+0x1e8>
   13b54:	e3a0300f 	mov	r3, #15	; 0xf
   13b58:	e5cd300b 	strb	r3, [sp, #11]
   13b5c:	e1a00008 	mov	r0, r8
   13b60:	e5cd700d 	strb	r7, [sp, #13]
   13b64:	e1a0100d 	mov	r1, sp
   13b68:	e3a02020 	mov	r2, #32	; 0x20
   13b6c:	e1a0e00f 	mov	lr, pc
   13b70:	e12fff19 	bx	r9
   13b74:	e2453001 	sub	r3, r5, #1	; 0x1
   13b78:	e2888020 	add	r8, r8, #32	; 0x20
   13b7c:	e20350ff 	and	r5, r3, #255	; 0xff
   13b80:	e3550000 	cmp	r5, #0	; 0x0
   13b84:	1affffc5 	bne	13aa0 <fat16_write_dir_entry+0x18c>
   13b88:	e3a00001 	mov	r0, #1	; 0x1
   13b8c:	ea000000 	b	13b94 <fat16_write_dir_entry+0x280>
   13b90:	e3a00000 	mov	r0, #0	; 0x0
   13b94:	e28dd020 	add	sp, sp, #32	; 0x20
   13b98:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b9c:	e12fff1e 	bx	lr

00013ba0 <fat16_resize_file>:
   13ba0:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ba4:	e2506000 	subs	r6, r0, #0	; 0x0
   13ba8:	e24dd004 	sub	sp, sp, #4	; 0x4
   13bac:	e1a0a001 	mov	sl, r1
   13bb0:	0a00005b 	beq	13d24 <fat16_resize_file+0x184>
   13bb4:	e1d642b6 	ldrh	r4, [r6, #38]
   13bb8:	e5963000 	ldr	r3, [r6]
   13bbc:	e2719001 	rsbs	r9, r1, #1	; 0x1
   13bc0:	33a09000 	movcc	r9, #0	; 0x0
   13bc4:	e3540000 	cmp	r4, #0	; 0x0
   13bc8:	03510000 	cmpeq	r1, #0	; 0x0
   13bcc:	e1d381b2 	ldrh	r8, [r3, #18]
   13bd0:	11a07001 	movne	r7, r1
   13bd4:	1a000006 	bne	13bf4 <fat16_resize_file+0x54>
   13bd8:	ea000049 	b	13d04 <fat16_resize_file+0x164>
   13bdc:	e5960000 	ldr	r0, [r6]
   13be0:	ebfffd05 	bl	12ffc <fat16_get_next_cluster>
   13be4:	e3500000 	cmp	r0, #0	; 0x0
   13be8:	0a00004f 	beq	13d2c <fat16_resize_file+0x18c>
   13bec:	e0687007 	rsb	r7, r8, r7
   13bf0:	e1a04000 	mov	r4, r0
   13bf4:	e1570008 	cmp	r7, r8
   13bf8:	e1a01004 	mov	r1, r4
   13bfc:	8afffff6 	bhi	13bdc <fat16_resize_file+0x3c>
   13c00:	e2745001 	rsbs	r5, r4, #1	; 0x1
   13c04:	33a05000 	movcc	r5, #0	; 0x0
   13c08:	e3550000 	cmp	r5, #0	; 0x0
   13c0c:	0a000011 	beq	13c58 <fat16_resize_file+0xb8>
   13c10:	e1a01008 	mov	r1, r8
   13c14:	e1a00007 	mov	r0, r7
   13c18:	eb0023f7 	bl	1cbfc <__aeabi_uidiv>
   13c1c:	e1a00800 	mov	r0, r0, lsl #16
   13c20:	e1a02820 	mov	r2, r0, lsr #16
   13c24:	e0030298 	mul	r3, r8, r2
   13c28:	e1530007 	cmp	r3, r7
   13c2c:	32823001 	addcc	r3, r2, #1	; 0x1
   13c30:	31a03803 	movcc	r3, r3, lsl #16
   13c34:	31a02823 	movcc	r2, r3, lsr #16
   13c38:	e5960000 	ldr	r0, [r6]
   13c3c:	e1a01004 	mov	r1, r4
   13c40:	ebfffd4d 	bl	1317c <fat16_append_clusters>
   13c44:	e3500000 	cmp	r0, #0	; 0x0
   13c48:	0a000035 	beq	13d24 <fat16_resize_file+0x184>
   13c4c:	e3550000 	cmp	r5, #0	; 0x0
   13c50:	11c602b6 	strneh	r0, [r6, #38]
   13c54:	11a04000 	movne	r4, r0
   13c58:	e3590000 	cmp	r9, #0	; 0x0
   13c5c:	13a03000 	movne	r3, #0	; 0x0
   13c60:	11c632b6 	strneh	r3, [r6, #38]
   13c64:	e586a028 	str	sl, [r6, #40]
   13c68:	e5960000 	ldr	r0, [r6]
   13c6c:	e2861004 	add	r1, r6, #4	; 0x4
   13c70:	ebffff27 	bl	13914 <fat16_write_dir_entry>
   13c74:	e3500000 	cmp	r0, #0	; 0x0
   13c78:	0a000029 	beq	13d24 <fat16_resize_file+0x184>
   13c7c:	e3590000 	cmp	r9, #0	; 0x0
   13c80:	11a01004 	movne	r1, r4
   13c84:	15960000 	ldrne	r0, [r6]
   13c88:	1a00001c 	bne	13d00 <fat16_resize_file+0x160>
   13c8c:	e1570008 	cmp	r7, r8
   13c90:	8a00001b 	bhi	13d04 <fat16_resize_file+0x164>
   13c94:	e1a03804 	mov	r3, r4, lsl #16
   13c98:	e5965000 	ldr	r5, [r6]
   13c9c:	e1a04823 	mov	r4, r3, lsr #16
   13ca0:	e3550000 	cmp	r5, #0	; 0x0
   13ca4:	13540001 	cmpne	r4, #1	; 0x1
   13ca8:	9a000015 	bls	13d04 <fat16_resize_file+0x164>
   13cac:	e1a01004 	mov	r1, r4
   13cb0:	e1a00005 	mov	r0, r5
   13cb4:	ebfffcd0 	bl	12ffc <fat16_get_next_cluster>
   13cb8:	e3e03000 	mvn	r3, #0	; 0x0
   13cbc:	e5cd3003 	strb	r3, [sp, #3]
   13cc0:	e5cd3002 	strb	r3, [sp, #2]
   13cc4:	e1a07000 	mov	r7, r0
   13cc8:	e5950008 	ldr	r0, [r5, #8]
   13ccc:	e5953000 	ldr	r3, [r5]
   13cd0:	e0800084 	add	r0, r0, r4, lsl #1
   13cd4:	e28d1002 	add	r1, sp, #2	; 0x2
   13cd8:	e3a02002 	mov	r2, #2	; 0x2
   13cdc:	e593c008 	ldr	ip, [r3, #8]
   13ce0:	e1a0e00f 	mov	lr, pc
   13ce4:	e12fff1c 	bx	ip
   13ce8:	e3500000 	cmp	r0, #0	; 0x0
   13cec:	0a000004 	beq	13d04 <fat16_resize_file+0x164>
   13cf0:	e3570000 	cmp	r7, #0	; 0x0
   13cf4:	0a000002 	beq	13d04 <fat16_resize_file+0x164>
   13cf8:	e1a00005 	mov	r0, r5
   13cfc:	e1a01007 	mov	r1, r7
   13d00:	ebfffce7 	bl	130a4 <fat16_free_clusters>
   13d04:	e5963030 	ldr	r3, [r6, #48]
   13d08:	e15a0003 	cmp	sl, r3
   13d0c:	33a03000 	movcc	r3, #0	; 0x0
   13d10:	23a00001 	movcs	r0, #1	; 0x1
   13d14:	33a00001 	movcc	r0, #1	; 0x1
   13d18:	3586a030 	strcc	sl, [r6, #48]
   13d1c:	31c633b4 	strcch	r3, [r6, #52]
   13d20:	ea000004 	b	13d38 <fat16_resize_file+0x198>
   13d24:	e3a00000 	mov	r0, #0	; 0x0
   13d28:	ea000002 	b	13d38 <fat16_resize_file+0x198>
   13d2c:	e2745001 	rsbs	r5, r4, #1	; 0x1
   13d30:	33a05000 	movcc	r5, #0	; 0x0
   13d34:	eaffffb5 	b	13c10 <fat16_resize_file+0x70>
   13d38:	e28dd004 	add	sp, sp, #4	; 0x4
   13d3c:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d40:	e12fff1e 	bx	lr

00013d44 <fat16_seek_file>:
   13d44:	e3510000 	cmp	r1, #0	; 0x0
   13d48:	13500000 	cmpne	r0, #0	; 0x0
   13d4c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   13d50:	e20220ff 	and	r2, r2, #255	; 0xff
   13d54:	e1a05000 	mov	r5, r0
   13d58:	e1a06001 	mov	r6, r1
   13d5c:	0a00001b 	beq	13dd0 <fat16_seek_file+0x8c>
   13d60:	e3520001 	cmp	r2, #1	; 0x1
   13d64:	e5901030 	ldr	r1, [r0, #48]
   13d68:	0a000004 	beq	13d80 <fat16_seek_file+0x3c>
   13d6c:	35964000 	ldrcc	r4, [r6]
   13d70:	3a000008 	bcc	13d98 <fat16_seek_file+0x54>
   13d74:	e3520002 	cmp	r2, #2	; 0x2
   13d78:	1a000014 	bne	13dd0 <fat16_seek_file+0x8c>
   13d7c:	ea000002 	b	13d8c <fat16_seek_file+0x48>
   13d80:	e5963000 	ldr	r3, [r6]
   13d84:	e0814003 	add	r4, r1, r3
   13d88:	ea000002 	b	13d98 <fat16_seek_file+0x54>
   13d8c:	e5902028 	ldr	r2, [r0, #40]
   13d90:	e5963000 	ldr	r3, [r6]
   13d94:	e0824003 	add	r4, r2, r3
   13d98:	e5953028 	ldr	r3, [r5, #40]
   13d9c:	e1540003 	cmp	r4, r3
   13da0:	9a000004 	bls	13db8 <fat16_seek_file+0x74>
   13da4:	e1a00005 	mov	r0, r5
   13da8:	e1a01004 	mov	r1, r4
   13dac:	ebffff7b 	bl	13ba0 <fat16_resize_file>
   13db0:	e3500000 	cmp	r0, #0	; 0x0
   13db4:	0a000005 	beq	13dd0 <fat16_seek_file+0x8c>
   13db8:	e3a03000 	mov	r3, #0	; 0x0
   13dbc:	e3a00001 	mov	r0, #1	; 0x1
   13dc0:	e5854030 	str	r4, [r5, #48]
   13dc4:	e1c533b4 	strh	r3, [r5, #52]
   13dc8:	e5864000 	str	r4, [r6]
   13dcc:	ea000000 	b	13dd4 <fat16_seek_file+0x90>
   13dd0:	e3a00000 	mov	r0, #0	; 0x0
   13dd4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   13dd8:	e12fff1e 	bx	lr

00013ddc <fat16_write_file>:
   13ddc:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13de0:	e1a02802 	mov	r2, r2, lsl #16
   13de4:	e24dd004 	sub	sp, sp, #4	; 0x4
   13de8:	e1a02822 	mov	r2, r2, lsr #16
   13dec:	e3510000 	cmp	r1, #0	; 0x0
   13df0:	13500000 	cmpne	r0, #0	; 0x0
   13df4:	e1a04000 	mov	r4, r0
   13df8:	e1a0b001 	mov	fp, r1
   13dfc:	e58d2000 	str	r2, [sp]
   13e00:	0a00007b 	beq	13ff4 <fat16_write_file+0x218>
   13e04:	e3520000 	cmp	r2, #0	; 0x0
   13e08:	0a000079 	beq	13ff4 <fat16_write_file+0x218>
   13e0c:	e590a030 	ldr	sl, [r0, #48]
   13e10:	e5903028 	ldr	r3, [r0, #40]
   13e14:	e15a0003 	cmp	sl, r3
   13e18:	8a000075 	bhi	13ff4 <fat16_write_file+0x218>
   13e1c:	e1d053b4 	ldrh	r5, [r0, #52]
   13e20:	e5900000 	ldr	r0, [r0]
   13e24:	e3550000 	cmp	r5, #0	; 0x0
   13e28:	e1d081b2 	ldrh	r8, [r0, #18]
   13e2c:	1a000024 	bne	13ec4 <fat16_write_file+0xe8>
   13e30:	e1d452b6 	ldrh	r5, [r4, #38]
   13e34:	e3550000 	cmp	r5, #0	; 0x0
   13e38:	1a00000c 	bne	13e70 <fat16_write_file+0x94>
   13e3c:	e35a0000 	cmp	sl, #0	; 0x0
   13e40:	13e00001 	mvnne	r0, #1	; 0x1
   13e44:	1a00006b 	bne	13ff8 <fat16_write_file+0x21c>
   13e48:	ea000001 	b	13e54 <fat16_write_file+0x78>
   13e4c:	e1c403b4 	strh	r0, [r4, #52]
   13e50:	ea000052 	b	13fa0 <fat16_write_file+0x1c4>
   13e54:	e1a01005 	mov	r1, r5
   13e58:	e3a02001 	mov	r2, #1	; 0x1
   13e5c:	ebfffcc6 	bl	1317c <fat16_append_clusters>
   13e60:	e3500000 	cmp	r0, #0	; 0x0
   13e64:	e1a05000 	mov	r5, r0
   13e68:	e1c402b6 	strh	r0, [r4, #38]
   13e6c:	0a000060 	beq	13ff4 <fat16_write_file+0x218>
   13e70:	e5946030 	ldr	r6, [r4, #48]
   13e74:	e3560000 	cmp	r6, #0	; 0x0
   13e78:	12689000 	rsbne	r9, r8, #0	; 0x0
   13e7c:	10687006 	rsbne	r7, r8, r6
   13e80:	1a00000c 	bne	13eb8 <fat16_write_file+0xdc>
   13e84:	ea00000e 	b	13ec4 <fat16_write_file+0xe8>
   13e88:	e5940000 	ldr	r0, [r4]
   13e8c:	ebfffc5a 	bl	12ffc <fat16_get_next_cluster>
   13e90:	e3500000 	cmp	r0, #0	; 0x0
   13e94:	03570000 	cmpeq	r7, #0	; 0x0
   13e98:	e0866009 	add	r6, r6, r9
   13e9c:	e0877009 	add	r7, r7, r9
   13ea0:	e1a01005 	mov	r1, r5
   13ea4:	e3a02001 	mov	r2, #1	; 0x1
   13ea8:	05940000 	ldreq	r0, [r4]
   13eac:	0bfffcb2 	bleq	1317c <fat16_append_clusters>
   13eb0:	e2505000 	subs	r5, r0, #0	; 0x0
   13eb4:	0a00004c 	beq	13fec <fat16_write_file+0x210>
   13eb8:	e1560008 	cmp	r6, r8
   13ebc:	e1a01005 	mov	r1, r5
   13ec0:	2afffff0 	bcs	13e88 <fat16_write_file+0xac>
   13ec4:	e1a0000a 	mov	r0, sl
   13ec8:	e1a01008 	mov	r1, r8
   13ecc:	eb0023e0 	bl	1ce54 <__umodsi3>
   13ed0:	e59d7000 	ldr	r7, [sp]
   13ed4:	e1a00800 	mov	r0, r0, lsl #16
   13ed8:	e1a0a820 	mov	sl, r0, lsr #16
   13edc:	e594c000 	ldr	ip, [r4]
   13ee0:	e06a3008 	rsb	r3, sl, r8
   13ee4:	e59c2018 	ldr	r2, [ip, #24]
   13ee8:	e1a03803 	mov	r3, r3, lsl #16
   13eec:	e1a03823 	mov	r3, r3, lsr #16
   13ef0:	e1570003 	cmp	r7, r3
   13ef4:	31a06007 	movcc	r6, r7
   13ef8:	21a06003 	movcs	r6, r3
   13efc:	e08a2002 	add	r2, sl, r2
   13f00:	e2453002 	sub	r3, r5, #2	; 0x2
   13f04:	e0202398 	mla	r0, r8, r3, r2
   13f08:	e1a0100b 	mov	r1, fp
   13f0c:	e1a02006 	mov	r2, r6
   13f10:	e59c3000 	ldr	r3, [ip]
   13f14:	e593c008 	ldr	ip, [r3, #8]
   13f18:	e1a0e00f 	mov	lr, pc
   13f1c:	e12fff1c 	bx	ip
   13f20:	e0663007 	rsb	r3, r6, r7
   13f24:	e3500000 	cmp	r0, #0	; 0x0
   13f28:	e1a01005 	mov	r1, r5
   13f2c:	e08bb006 	add	fp, fp, r6
   13f30:	e08a2006 	add	r2, sl, r6
   13f34:	e1a00803 	mov	r0, r3, lsl #16
   13f38:	0a000018 	beq	13fa0 <fat16_write_file+0x1c4>
   13f3c:	e5943030 	ldr	r3, [r4, #48]
   13f40:	e1520008 	cmp	r2, r8
   13f44:	e0833006 	add	r3, r3, r6
   13f48:	e5843030 	str	r3, [r4, #48]
   13f4c:	e1a07820 	mov	r7, r0, lsr #16
   13f50:	ba00000f 	blt	13f94 <fat16_write_file+0x1b8>
   13f54:	e5940000 	ldr	r0, [r4]
   13f58:	ebfffc27 	bl	12ffc <fat16_get_next_cluster>
   13f5c:	e3a0a000 	mov	sl, #0	; 0x0
   13f60:	e150000a 	cmp	r0, sl
   13f64:	13a03000 	movne	r3, #0	; 0x0
   13f68:	03a03001 	moveq	r3, #1	; 0x1
   13f6c:	e157000a 	cmp	r7, sl
   13f70:	03a03000 	moveq	r3, #0	; 0x0
   13f74:	e153000a 	cmp	r3, sl
   13f78:	e1a01005 	mov	r1, r5
   13f7c:	e3a02001 	mov	r2, #1	; 0x1
   13f80:	15940000 	ldrne	r0, [r4]
   13f84:	1bfffc7c 	blne	1317c <fat16_append_clusters>
   13f88:	e3500000 	cmp	r0, #0	; 0x0
   13f8c:	e1a05000 	mov	r5, r0
   13f90:	0affffad 	beq	13e4c <fat16_write_file+0x70>
   13f94:	e3570000 	cmp	r7, #0	; 0x0
   13f98:	e1c453b4 	strh	r5, [r4, #52]
   13f9c:	1affffce 	bne	13edc <fat16_write_file+0x100>
   13fa0:	e5943030 	ldr	r3, [r4, #48]
   13fa4:	e5945028 	ldr	r5, [r4, #40]
   13fa8:	e1530005 	cmp	r3, r5
   13fac:	9a000009 	bls	13fd8 <fat16_write_file+0x1fc>
   13fb0:	e5843028 	str	r3, [r4, #40]
   13fb4:	e5940000 	ldr	r0, [r4]
   13fb8:	e2841004 	add	r1, r4, #4	; 0x4
   13fbc:	ebfffe54 	bl	13914 <fat16_write_dir_entry>
   13fc0:	e3500000 	cmp	r0, #0	; 0x0
   13fc4:	05943030 	ldreq	r3, [r4, #48]
   13fc8:	00653003 	rsbeq	r3, r5, r3
   13fcc:	01a03803 	moveq	r3, r3, lsl #16
   13fd0:	05845030 	streq	r5, [r4, #48]
   13fd4:	01a07823 	moveq	r7, r3, lsr #16
   13fd8:	e59d2000 	ldr	r2, [sp]
   13fdc:	e0673002 	rsb	r3, r7, r2
   13fe0:	e1a03803 	mov	r3, r3, lsl #16
   13fe4:	e1a00843 	mov	r0, r3, asr #16
   13fe8:	ea000002 	b	13ff8 <fat16_write_file+0x21c>
   13fec:	e3e00002 	mvn	r0, #2	; 0x2
   13ff0:	ea000000 	b	13ff8 <fat16_write_file+0x21c>
   13ff4:	e3e00000 	mvn	r0, #0	; 0x0
   13ff8:	e28dd004 	add	sp, sp, #4	; 0x4
   13ffc:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14000:	e12fff1e 	bx	lr

00014004 <fat16_close_dir>:
   14004:	e3500000 	cmp	r0, #0	; 0x0
   14008:	e52de004 	str	lr, [sp, #-4]!
   1400c:	1b000a57 	blne	16970 <free>
   14010:	e49de004 	ldr	lr, [sp], #4
   14014:	e12fff1e 	bx	lr

00014018 <fat16_close_file>:
   14018:	e3500000 	cmp	r0, #0	; 0x0
   1401c:	e52de004 	str	lr, [sp, #-4]!
   14020:	1b000a52 	blne	16970 <free>
   14024:	e49de004 	ldr	lr, [sp], #4
   14028:	e12fff1e 	bx	lr

0001402c <fat16_close>:
   1402c:	e3500000 	cmp	r0, #0	; 0x0
   14030:	e52de004 	str	lr, [sp, #-4]!
   14034:	1b000a4d 	blne	16970 <free>
   14038:	e49de004 	ldr	lr, [sp], #4
   1403c:	e12fff1e 	bx	lr

00014040 <fat16_open_dir>:
   14040:	e3510000 	cmp	r1, #0	; 0x0
   14044:	13500000 	cmpne	r0, #0	; 0x0
   14048:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1404c:	e1a07000 	mov	r7, r0
   14050:	e1a05001 	mov	r5, r1
   14054:	13a08000 	movne	r8, #0	; 0x0
   14058:	03a08001 	moveq	r8, #1	; 0x1
   1405c:	0a000013 	beq	140b0 <fat16_open_dir+0x70>
   14060:	e5d13020 	ldrb	r3, [r1, #32]
   14064:	e3130010 	tst	r3, #16	; 0x10
   14068:	e3a00034 	mov	r0, #52	; 0x34
   1406c:	0a00000f 	beq	140b0 <fat16_open_dir+0x70>
   14070:	eb000a46 	bl	16990 <malloc>
   14074:	e3500000 	cmp	r0, #0	; 0x0
   14078:	e1a06000 	mov	r6, r0
   1407c:	e2804004 	add	r4, r0, #4	; 0x4
   14080:	0a00000a 	beq	140b0 <fat16_open_dir+0x70>
   14084:	e1a0c005 	mov	ip, r5
   14088:	e8bc000f 	ldmia	ip!, {r0, r1, r2, r3}
   1408c:	e1a0e004 	mov	lr, r4
   14090:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14094:	e8bc000f 	ldmia	ip!, {r0, r1, r2, r3}
   14098:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   1409c:	e89c0007 	ldmia	ip, {r0, r1, r2}
   140a0:	e5867000 	str	r7, [r6]
   140a4:	e88e0007 	stmia	lr, {r0, r1, r2}
   140a8:	e1c683b0 	strh	r8, [r6, #48]
   140ac:	ea000000 	b	140b4 <fat16_open_dir+0x74>
   140b0:	e3a06000 	mov	r6, #0	; 0x0
   140b4:	e1a00006 	mov	r0, r6
   140b8:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   140bc:	e12fff1e 	bx	lr

000140c0 <fat16_open_file>:
   140c0:	e3510000 	cmp	r1, #0	; 0x0
   140c4:	13500000 	cmpne	r0, #0	; 0x0
   140c8:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140cc:	e1a05001 	mov	r5, r1
   140d0:	e1a07000 	mov	r7, r0
   140d4:	0a000015 	beq	14130 <fat16_open_file+0x70>
   140d8:	e5d13020 	ldrb	r3, [r1, #32]
   140dc:	e2138010 	ands	r8, r3, #16	; 0x10
   140e0:	e3a00038 	mov	r0, #56	; 0x38
   140e4:	1a000011 	bne	14130 <fat16_open_file+0x70>
   140e8:	eb000a28 	bl	16990 <malloc>
   140ec:	e3500000 	cmp	r0, #0	; 0x0
   140f0:	e1a06000 	mov	r6, r0
   140f4:	e2804004 	add	r4, r0, #4	; 0x4
   140f8:	0a00000c 	beq	14130 <fat16_open_file+0x70>
   140fc:	e1a0c005 	mov	ip, r5
   14100:	e8bc000f 	ldmia	ip!, {r0, r1, r2, r3}
   14104:	e1a0e004 	mov	lr, r4
   14108:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   1410c:	e8bc000f 	ldmia	ip!, {r0, r1, r2, r3}
   14110:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14114:	e89c0007 	ldmia	ip, {r0, r1, r2}
   14118:	e88e0007 	stmia	lr, {r0, r1, r2}
   1411c:	e1d552b2 	ldrh	r5, [r5, #34]
   14120:	e5867000 	str	r7, [r6]
   14124:	e5868030 	str	r8, [r6, #48]
   14128:	e1c653b4 	strh	r5, [r6, #52]
   1412c:	ea000000 	b	14134 <fat16_open_file+0x74>
   14130:	e3a06000 	mov	r6, #0	; 0x0
   14134:	e1a00006 	mov	r0, r6
   14138:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   1413c:	e12fff1e 	bx	lr

00014140 <open_file_in_dir>:
   14140:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   14144:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   14148:	e1a0300d 	mov	r3, sp
   1414c:	e1a04000 	mov	r4, r0
   14150:	ebfffdd8 	bl	138b8 <find_file_in_dir>
   14154:	e3500000 	cmp	r0, #0	; 0x0
   14158:	e1a03000 	mov	r3, r0
   1415c:	e1a0500d 	mov	r5, sp
   14160:	e1a00004 	mov	r0, r4
   14164:	e1a0100d 	mov	r1, sp
   14168:	0a000001 	beq	14174 <open_file_in_dir+0x34>
   1416c:	ebffffd3 	bl	140c0 <fat16_open_file>
   14170:	e1a03000 	mov	r3, r0
   14174:	e1a00003 	mov	r0, r3
   14178:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1417c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   14180:	e12fff1e 	bx	lr

00014184 <fat16_get_dir_entry_of_path>:
   14184:	e3510000 	cmp	r1, #0	; 0x0
   14188:	13500000 	cmpne	r0, #0	; 0x0
   1418c:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14190:	e1a09000 	mov	r9, r0
   14194:	e1a04001 	mov	r4, r1
   14198:	e1a05002 	mov	r5, r2
   1419c:	0a00003c 	beq	14294 <fat16_get_dir_entry_of_path+0x110>
   141a0:	e5d13000 	ldrb	r3, [r1]
   141a4:	e3520000 	cmp	r2, #0	; 0x0
   141a8:	13530000 	cmpne	r3, #0	; 0x0
   141ac:	13a01000 	movne	r1, #0	; 0x0
   141b0:	03a01001 	moveq	r1, #1	; 0x1
   141b4:	0a000036 	beq	14294 <fat16_get_dir_entry_of_path+0x110>
   141b8:	e353002f 	cmp	r3, #47	; 0x2f
   141bc:	e1a00002 	mov	r0, r2
   141c0:	e3a0202c 	mov	r2, #44	; 0x2c
   141c4:	02844001 	addeq	r4, r4, #1	; 0x1
   141c8:	eb000ba2 	bl	17058 <memset>
   141cc:	e3a03010 	mov	r3, #16	; 0x10
   141d0:	e5c53020 	strb	r3, [r5, #32]
   141d4:	e5d43000 	ldrb	r3, [r4]
   141d8:	e3530000 	cmp	r3, #0	; 0x0
   141dc:	0a00002e 	beq	1429c <fat16_get_dir_entry_of_path+0x118>
   141e0:	e1a00009 	mov	r0, r9
   141e4:	e1a01005 	mov	r1, r5
   141e8:	ebffff94 	bl	14040 <fat16_open_dir>
   141ec:	e2507000 	subs	r7, r0, #0	; 0x0
   141f0:	0a000027 	beq	14294 <fat16_get_dir_entry_of_path+0x110>
   141f4:	e1a00004 	mov	r0, r4
   141f8:	e3a0102f 	mov	r1, #47	; 0x2f
   141fc:	eb000bd5 	bl	17158 <strchr>
   14200:	e2508000 	subs	r8, r0, #0	; 0x0
   14204:	1a000002 	bne	14214 <fat16_get_dir_entry_of_path+0x90>
   14208:	e1a00004 	mov	r0, r4
   1420c:	eb000bef 	bl	171d0 <strlen>
   14210:	e0848000 	add	r8, r4, r0
   14214:	e0643008 	rsb	r3, r4, r8
   14218:	e20360ff 	and	r6, r3, #255	; 0xff
   1421c:	ea000013 	b	14270 <fat16_get_dir_entry_of_path+0xec>
   14220:	eb000bea 	bl	171d0 <strlen>
   14224:	e1500006 	cmp	r0, r6
   14228:	e1a01005 	mov	r1, r5
   1422c:	e1a02006 	mov	r2, r6
   14230:	e1a00004 	mov	r0, r4
   14234:	1a00000d 	bne	14270 <fat16_get_dir_entry_of_path+0xec>
   14238:	eb000bec 	bl	171f0 <strncmp>
   1423c:	e250a000 	subs	sl, r0, #0	; 0x0
   14240:	1a00000a 	bne	14270 <fat16_get_dir_entry_of_path+0xec>
   14244:	e1a00007 	mov	r0, r7
   14248:	ebffff6d 	bl	14004 <fat16_close_dir>
   1424c:	e7d43006 	ldrb	r3, [r4, r6]
   14250:	e3530000 	cmp	r3, #0	; 0x0
   14254:	0a000010 	beq	1429c <fat16_get_dir_entry_of_path+0x118>
   14258:	e5d53020 	ldrb	r3, [r5, #32]
   1425c:	e3130010 	tst	r3, #16	; 0x10
   14260:	0a00000b 	beq	14294 <fat16_get_dir_entry_of_path+0x110>
   14264:	e2884001 	add	r4, r8, #1	; 0x1
   14268:	e1a0700a 	mov	r7, sl
   1426c:	ea000005 	b	14288 <fat16_get_dir_entry_of_path+0x104>
   14270:	e1a01005 	mov	r1, r5
   14274:	e1a00007 	mov	r0, r7
   14278:	ebfffd08 	bl	136a0 <fat16_read_dir>
   1427c:	e3500000 	cmp	r0, #0	; 0x0
   14280:	e1a00005 	mov	r0, r5
   14284:	1affffe5 	bne	14220 <fat16_get_dir_entry_of_path+0x9c>
   14288:	e1a00007 	mov	r0, r7
   1428c:	ebffff5c 	bl	14004 <fat16_close_dir>
   14290:	eaffffd2 	b	141e0 <fat16_get_dir_entry_of_path+0x5c>
   14294:	e3a00000 	mov	r0, #0	; 0x0
   14298:	ea000000 	b	142a0 <fat16_get_dir_entry_of_path+0x11c>
   1429c:	e3a00001 	mov	r0, #1	; 0x1
   142a0:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   142a4:	e12fff1e 	bx	lr

000142a8 <fat16_open>:
   142a8:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ac:	e2508000 	subs	r8, r0, #0	; 0x0
   142b0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   142b4:	0a000071 	beq	14480 <fat16_open+0x1d8>
   142b8:	e5983008 	ldr	r3, [r8, #8]
   142bc:	e3530000 	cmp	r3, #0	; 0x0
   142c0:	0a00006e 	beq	14480 <fat16_open+0x1d8>
   142c4:	e3a0001c 	mov	r0, #28	; 0x1c
   142c8:	eb0009b0 	bl	16990 <malloc>
   142cc:	e250b000 	subs	fp, r0, #0	; 0x0
   142d0:	1a000003 	bne	142e4 <fat16_open+0x3c>
   142d4:	e59f01b8 	ldr	r0, [pc, #440]	; 14494 <.text+0x4494>
   142d8:	ebfff54e 	bl	11818 <rprintf>
   142dc:	e1a0a00b 	mov	sl, fp
   142e0:	ea000067 	b	14484 <fat16_open+0x1dc>
   142e4:	e3a01000 	mov	r1, #0	; 0x0
   142e8:	e3a0201c 	mov	r2, #28	; 0x1c
   142ec:	eb000b59 	bl	17058 <memset>
   142f0:	e5983010 	ldr	r3, [r8, #16]
   142f4:	e1a03483 	mov	r3, r3, lsl #9
   142f8:	e58d3008 	str	r3, [sp, #8]
   142fc:	e58b8000 	str	r8, [fp]
   14300:	e283000b 	add	r0, r3, #11	; 0xb
   14304:	e28d1023 	add	r1, sp, #35	; 0x23
   14308:	e3a02019 	mov	r2, #25	; 0x19
   1430c:	e598c000 	ldr	ip, [r8]
   14310:	e1a0e00f 	mov	lr, pc
   14314:	e12fff1c 	bx	ip
   14318:	e3500000 	cmp	r0, #0	; 0x0
   1431c:	e1a0a00b 	mov	sl, fp
   14320:	0a000052 	beq	14470 <fat16_open+0x1c8>
   14324:	e5dd202e 	ldrb	r2, [sp, #46]
   14328:	e5dd302f 	ldrb	r3, [sp, #47]
   1432c:	e1923403 	orrs	r3, r2, r3, lsl #8
   14330:	e5dd0023 	ldrb	r0, [sp, #35]
   14334:	e5dd2024 	ldrb	r2, [sp, #36]
   14338:	e58d3010 	str	r3, [sp, #16]
   1433c:	e5dd6026 	ldrb	r6, [sp, #38]
   14340:	e5dd3025 	ldrb	r3, [sp, #37]
   14344:	e58d001c 	str	r0, [sp, #28]
   14348:	e58d2018 	str	r2, [sp, #24]
   1434c:	e58d3004 	str	r3, [sp, #4]
   14350:	e58d6014 	str	r6, [sp, #20]
   14354:	e5dd1027 	ldrb	r1, [sp, #39]
   14358:	e5dd9028 	ldrb	r9, [sp, #40]
   1435c:	e5dd7029 	ldrb	r7, [sp, #41]
   14360:	e5dd502a 	ldrb	r5, [sp, #42]
   14364:	e5dd402b 	ldrb	r4, [sp, #43]
   14368:	e5dde02c 	ldrb	lr, [sp, #44]
   1436c:	e5ddc038 	ldrb	ip, [sp, #56]
   14370:	e5dd2039 	ldrb	r2, [sp, #57]
   14374:	e5dd303a 	ldrb	r3, [sp, #58]
   14378:	e5dd003b 	ldrb	r0, [sp, #59]
   1437c:	0a00003b 	beq	14470 <fat16_open+0x1c8>
   14380:	e1a03803 	mov	r3, r3, lsl #16
   14384:	e18c2402 	orr	r2, ip, r2, lsl #8
   14388:	e1833c00 	orr	r3, r3, r0, lsl #24
   1438c:	e1926003 	orrs	r6, r2, r3
   14390:	1a000002 	bne	143a0 <fat16_open+0xf8>
   14394:	e194240e 	orrs	r2, r4, lr, lsl #8
   14398:	0a000034 	beq	14470 <fat16_open+0x1c8>
   1439c:	e1a06002 	mov	r6, r2
   143a0:	e59d0010 	ldr	r0, [sp, #16]
   143a4:	e0000099 	mul	r0, r9, r0
   143a8:	e59d201c 	ldr	r2, [sp, #28]
   143ac:	e58d000c 	str	r0, [sp, #12]
   143b0:	e59d0018 	ldr	r0, [sp, #24]
   143b4:	e1873405 	orr	r3, r7, r5, lsl #8
   143b8:	e1825400 	orr	r5, r2, r0, lsl #8
   143bc:	e59d2014 	ldr	r2, [sp, #20]
   143c0:	e1a03283 	mov	r3, r3, lsl #5
   143c4:	e1829401 	orr	r9, r2, r1, lsl #8
   143c8:	e58d3000 	str	r3, [sp]
   143cc:	e0830005 	add	r0, r3, r5
   143d0:	e59d300c 	ldr	r3, [sp, #12]
   143d4:	e1a01005 	mov	r1, r5
   143d8:	e2400001 	sub	r0, r0, #1	; 0x1
   143dc:	e0694006 	rsb	r4, r9, r6
   143e0:	e0634004 	rsb	r4, r3, r4
   143e4:	eb002249 	bl	1cd10 <__aeabi_idiv>
   143e8:	e59d1004 	ldr	r1, [sp, #4]
   143ec:	e0600004 	rsb	r0, r0, r4
   143f0:	eb002201 	bl	1cbfc <__aeabi_uidiv>
   143f4:	e2403eff 	sub	r3, r0, #4080	; 0xff0
   143f8:	e2433005 	sub	r3, r3, #5	; 0x5
   143fc:	e3530a0f 	cmp	r3, #61440	; 0xf000
   14400:	e1a07000 	mov	r7, r0
   14404:	2a000019 	bcs	14470 <fat16_open+0x1c8>
   14408:	e28a4004 	add	r4, sl, #4	; 0x4
   1440c:	e3a03006 	mov	r3, #6	; 0x6
   14410:	e5c8300c 	strb	r3, [r8, #12]
   14414:	e3a01000 	mov	r1, #0	; 0x0
   14418:	e3a02018 	mov	r2, #24	; 0x18
   1441c:	e1a00004 	mov	r0, r4
   14420:	eb000b0c 	bl	17058 <memset>
   14424:	e59dc008 	ldr	ip, [sp, #8]
   14428:	e02cc995 	mla	ip, r5, r9, ip
   1442c:	e59de00c 	ldr	lr, [sp, #12]
   14430:	e59d0004 	ldr	r0, [sp, #4]
   14434:	e02ece95 	mla	lr, r5, lr, ip
   14438:	e0010695 	mul	r1, r5, r6
   1443c:	e0000095 	mul	r0, r5, r0
   14440:	e59d6000 	ldr	r6, [sp]
   14444:	e1a03087 	mov	r3, r7, lsl #1
   14448:	e08e2006 	add	r2, lr, r6
   1444c:	e2833004 	add	r3, r3, #4	; 0x4
   14450:	e5842014 	str	r2, [r4, #20]
   14454:	e58a1004 	str	r1, [sl, #4]
   14458:	e5843008 	str	r3, [r4, #8]
   1445c:	e1c400be 	strh	r0, [r4, #14]
   14460:	e584c004 	str	ip, [r4, #4]
   14464:	e1c450bc 	strh	r5, [r4, #12]
   14468:	e584e010 	str	lr, [r4, #16]
   1446c:	ea000004 	b	14484 <fat16_open+0x1dc>
   14470:	e59f0020 	ldr	r0, [pc, #32]	; 14498 <.text+0x4498>
   14474:	ebfff4e7 	bl	11818 <rprintf>
   14478:	e1a0000b 	mov	r0, fp
   1447c:	eb00093b 	bl	16970 <free>
   14480:	e3a0a000 	mov	sl, #0	; 0x0
   14484:	e1a0000a 	mov	r0, sl
   14488:	e28dd03c 	add	sp, sp, #60	; 0x3c
   1448c:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14490:	e12fff1e 	bx	lr
   14494:	0001dfb4 	streqh	sp, [r1], -r4
   14498:	0001dfc4 	andeq	sp, r1, r4, asr #31

0001449c <fat16_create_file>:
   1449c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144a0:	e2706001 	rsbs	r6, r0, #1	; 0x1
   144a4:	33a06000 	movcc	r6, #0	; 0x0
   144a8:	e3500000 	cmp	r0, #0	; 0x0
   144ac:	13510000 	cmpne	r1, #0	; 0x0
   144b0:	e24dd004 	sub	sp, sp, #4	; 0x4
   144b4:	e1a05000 	mov	r5, r0
   144b8:	e1a04001 	mov	r4, r1
   144bc:	e1a08002 	mov	r8, r2
   144c0:	0a000065 	beq	1465c <fat16_create_file+0x1c0>
   144c4:	e5d13000 	ldrb	r3, [r1]
   144c8:	e3530000 	cmp	r3, #0	; 0x0
   144cc:	0a000062 	beq	1465c <fat16_create_file+0x1c0>
   144d0:	e1a01008 	mov	r1, r8
   144d4:	e1a00005 	mov	r0, r5
   144d8:	ebfffc70 	bl	136a0 <fat16_read_dir>
   144dc:	e250a000 	subs	sl, r0, #0	; 0x0
   144e0:	e1a01008 	mov	r1, r8
   144e4:	e1a00004 	mov	r0, r4
   144e8:	0a000007 	beq	1450c <fat16_create_file+0x70>
   144ec:	eb000b25 	bl	17188 <strcmp>
   144f0:	e3500000 	cmp	r0, #0	; 0x0
   144f4:	1afffff5 	bne	144d0 <fat16_create_file+0x34>
   144f8:	e3560000 	cmp	r6, #0	; 0x0
   144fc:	12800001 	addne	r0, r0, #1	; 0x1
   14500:	03a00001 	moveq	r0, #1	; 0x1
   14504:	01c563b0 	streqh	r6, [r5, #48]
   14508:	ea000054 	b	14660 <fat16_create_file+0x1c4>
   1450c:	e1a0100a 	mov	r1, sl
   14510:	e3a0202c 	mov	r2, #44	; 0x2c
   14514:	e1a00008 	mov	r0, r8
   14518:	eb000ace 	bl	17058 <memset>
   1451c:	e1a01004 	mov	r1, r4
   14520:	e3a0201f 	mov	r2, #31	; 0x1f
   14524:	e1a00008 	mov	r0, r8
   14528:	eb000b44 	bl	17240 <strncpy>
   1452c:	e1a00004 	mov	r0, r4
   14530:	eb000b26 	bl	171d0 <strlen>
   14534:	e3a0100d 	mov	r1, #13	; 0xd
   14538:	eb0021af 	bl	1cbfc <__aeabi_uidiv>
   1453c:	e1d572b6 	ldrh	r7, [r5, #38]
   14540:	e5955000 	ldr	r5, [r5]
   14544:	e3570000 	cmp	r7, #0	; 0x0
   14548:	05954014 	ldreq	r4, [r5, #20]
   1454c:	11a0600a 	movne	r6, sl
   14550:	e2800002 	add	r0, r0, #2	; 0x2
   14554:	0595a018 	ldreq	sl, [r5, #24]
   14558:	e200b0ff 	and	fp, r0, #255	; 0xff
   1455c:	11a04006 	movne	r4, r6
   14560:	11a0a006 	movne	sl, r6
   14564:	01a06004 	moveq	r6, r4
   14568:	e3a09000 	mov	r9, #0	; 0x0
   1456c:	e154000a 	cmp	r4, sl
   14570:	1a00001b 	bne	145e4 <fat16_create_file+0x148>
   14574:	e3570000 	cmp	r7, #0	; 0x0
   14578:	0a000037 	beq	1465c <fat16_create_file+0x1c0>
   1457c:	e3540000 	cmp	r4, #0	; 0x0
   14580:	0a000010 	beq	145c8 <fat16_create_file+0x12c>
   14584:	e1a00005 	mov	r0, r5
   14588:	e1a01007 	mov	r1, r7
   1458c:	ebfffa9a 	bl	12ffc <fat16_get_next_cluster>
   14590:	e3500000 	cmp	r0, #0	; 0x0
   14594:	1a00000a 	bne	145c4 <fat16_create_file+0x128>
   14598:	e1a01007 	mov	r1, r7
   1459c:	e1a00005 	mov	r0, r5
   145a0:	e3a02001 	mov	r2, #1	; 0x1
   145a4:	ebfffaf4 	bl	1317c <fat16_append_clusters>
   145a8:	e3500000 	cmp	r0, #0	; 0x0
   145ac:	0a00002a 	beq	1465c <fat16_create_file+0x1c0>
   145b0:	e1d511b2 	ldrh	r1, [r5, #18]
   145b4:	e5952018 	ldr	r2, [r5, #24]
   145b8:	e2403002 	sub	r3, r0, #2	; 0x2
   145bc:	e0262391 	mla	r6, r1, r3, r2
   145c0:	ea00001e 	b	14640 <fat16_create_file+0x1a4>
   145c4:	e1a07000 	mov	r7, r0
   145c8:	e1d511b2 	ldrh	r1, [r5, #18]
   145cc:	e5952018 	ldr	r2, [r5, #24]
   145d0:	e2473002 	sub	r3, r7, #2	; 0x2
   145d4:	e0242391 	mla	r4, r1, r3, r2
   145d8:	e3a09000 	mov	r9, #0	; 0x0
   145dc:	e084a001 	add	sl, r4, r1
   145e0:	e1a06004 	mov	r6, r4
   145e4:	e5953000 	ldr	r3, [r5]
   145e8:	e1a00004 	mov	r0, r4
   145ec:	e28d1003 	add	r1, sp, #3	; 0x3
   145f0:	e3a02001 	mov	r2, #1	; 0x1
   145f4:	e593c000 	ldr	ip, [r3]
   145f8:	e1a0e00f 	mov	lr, pc
   145fc:	e12fff1c 	bx	ip
   14600:	e3500000 	cmp	r0, #0	; 0x0
   14604:	0a000014 	beq	1465c <fat16_create_file+0x1c0>
   14608:	e5dd3003 	ldrb	r3, [sp, #3]
   1460c:	e3530000 	cmp	r3, #0	; 0x0
   14610:	135300e5 	cmpne	r3, #229	; 0xe5
   14614:	13a03000 	movne	r3, #0	; 0x0
   14618:	03a03001 	moveq	r3, #1	; 0x1
   1461c:	12846020 	addne	r6, r4, #32	; 0x20
   14620:	11a09003 	movne	r9, r3
   14624:	11a04006 	movne	r4, r6
   14628:	1affffcf 	bne	1456c <fat16_create_file+0xd0>
   1462c:	e2893001 	add	r3, r9, #1	; 0x1
   14630:	e20390ff 	and	r9, r3, #255	; 0xff
   14634:	e159000b 	cmp	r9, fp
   14638:	32844020 	addcc	r4, r4, #32	; 0x20
   1463c:	3affffca 	bcc	1456c <fat16_create_file+0xd0>
   14640:	e5886028 	str	r6, [r8, #40]
   14644:	e1a00005 	mov	r0, r5
   14648:	e1a01008 	mov	r1, r8
   1464c:	ebfffcb0 	bl	13914 <fat16_write_dir_entry>
   14650:	e2500000 	subs	r0, r0, #0	; 0x0
   14654:	13a00001 	movne	r0, #1	; 0x1
   14658:	ea000000 	b	14660 <fat16_create_file+0x1c4>
   1465c:	e3a00000 	mov	r0, #0	; 0x0
   14660:	e28dd004 	add	sp, sp, #4	; 0x4
   14664:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14668:	e12fff1e 	bx	lr

0001466c <partition_close>:
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
   1466c:	e2503000 	subs	r3, r0, #0	; 0x0
   14670:	e52de004 	str	lr, [sp, #-4]!
   14674:	0a000001 	beq	14680 <partition_close+0x14>
        return 0;

    /* destroy partition descriptor */
    free(partition);
   14678:	eb0008bc 	bl	16970 <free>
   1467c:	e3a03001 	mov	r3, #1	; 0x1

    return 1;
}
   14680:	e1a00003 	mov	r0, r3
   14684:	e49de004 	ldr	lr, [sp], #4
   14688:	e12fff1e 	bx	lr

0001468c <partition_open>:
   1468c:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14690:	e3510000 	cmp	r1, #0	; 0x0
   14694:	13500000 	cmpne	r0, #0	; 0x0
   14698:	e24dd010 	sub	sp, sp, #16	; 0x10
   1469c:	e1a06000 	mov	r6, r0
   146a0:	e1a07001 	mov	r7, r1
   146a4:	13a04000 	movne	r4, #0	; 0x0
   146a8:	03a04001 	moveq	r4, #1	; 0x1
   146ac:	e1a08002 	mov	r8, r2
   146b0:	e20330ff 	and	r3, r3, #255	; 0xff
   146b4:	0a000033 	beq	14788 <partition_open+0xfc>
   146b8:	e1a03c03 	mov	r3, r3, lsl #24
   146bc:	e1a05c43 	mov	r5, r3, asr #24
   146c0:	e3550003 	cmp	r5, #3	; 0x3
   146c4:	ca00002f 	bgt	14788 <partition_open+0xfc>
   146c8:	e3550000 	cmp	r5, #0	; 0x0
   146cc:	ba00000b 	blt	14700 <partition_open+0x74>
   146d0:	e1a00205 	mov	r0, r5, lsl #4
   146d4:	e2800f6f 	add	r0, r0, #444	; 0x1bc
   146d8:	e2800002 	add	r0, r0, #2	; 0x2
   146dc:	e1a0100d 	mov	r1, sp
   146e0:	e3a02010 	mov	r2, #16	; 0x10
   146e4:	e1a0e00f 	mov	lr, pc
   146e8:	e12fff16 	bx	r6
   146ec:	e3500000 	cmp	r0, #0	; 0x0
   146f0:	0a000024 	beq	14788 <partition_open+0xfc>
   146f4:	e5dd3004 	ldrb	r3, [sp, #4]
   146f8:	e3530000 	cmp	r3, #0	; 0x0
   146fc:	0a000021 	beq	14788 <partition_open+0xfc>
   14700:	e3a00018 	mov	r0, #24	; 0x18
   14704:	eb0008a1 	bl	16990 <malloc>
   14708:	e2503000 	subs	r3, r0, #0	; 0x0
   1470c:	0a00001d 	beq	14788 <partition_open+0xfc>
   14710:	e1a01004 	mov	r1, r4
   14714:	e3a02018 	mov	r2, #24	; 0x18
   14718:	e1a04003 	mov	r4, r3
   1471c:	eb000a4d 	bl	17058 <memset>
   14720:	e3550000 	cmp	r5, #0	; 0x0
   14724:	b3e03000 	mvnlt	r3, #0	; 0x0
   14728:	e88401c0 	stmia	r4, {r6, r7, r8}
   1472c:	b5c4300c 	strltb	r3, [r4, #12]
   14730:	ba000015 	blt	1478c <partition_open+0x100>
   14734:	e5dd3004 	ldrb	r3, [sp, #4]
   14738:	e5c4300c 	strb	r3, [r4, #12]
   1473c:	e5dd300a 	ldrb	r3, [sp, #10]
   14740:	e5dd1009 	ldrb	r1, [sp, #9]
   14744:	e5dd000b 	ldrb	r0, [sp, #11]
   14748:	e5dd2008 	ldrb	r2, [sp, #8]
   1474c:	e1a03803 	mov	r3, r3, lsl #16
   14750:	e1833c00 	orr	r3, r3, r0, lsl #24
   14754:	e1822401 	orr	r2, r2, r1, lsl #8
   14758:	e1822003 	orr	r2, r2, r3
   1475c:	e5842010 	str	r2, [r4, #16]
   14760:	e5dd300e 	ldrb	r3, [sp, #14]
   14764:	e5dd200c 	ldrb	r2, [sp, #12]
   14768:	e5dd100d 	ldrb	r1, [sp, #13]
   1476c:	e5dd000f 	ldrb	r0, [sp, #15]
   14770:	e1a03803 	mov	r3, r3, lsl #16
   14774:	e1822401 	orr	r2, r2, r1, lsl #8
   14778:	e1833c00 	orr	r3, r3, r0, lsl #24
   1477c:	e1822003 	orr	r2, r2, r3
   14780:	e5842014 	str	r2, [r4, #20]
   14784:	ea000000 	b	1478c <partition_open+0x100>
   14788:	e3a04000 	mov	r4, #0	; 0x0
   1478c:	e1a00004 	mov	r0, r4
   14790:	e28dd010 	add	sp, sp, #16	; 0x10
   14794:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   14798:	e12fff1e 	bx	lr

0001479c <powerdownAccel>:
	return value;
}

void powerdownAccel(void){
	SelectAccelerometer();
   1479c:	e59f200c 	ldr	r2, [pc, #12]	; 147b0 <.text+0x47b0>
   147a0:	e3a03802 	mov	r3, #131072	; 0x20000
   147a4:	e582300c 	str	r3, [r2, #12]
	//SPI0_send(WRITE | Ctrl_Reg1);
	//SPI0_send(~PD);
	UnselectAccelerometer();
   147a8:	e5823004 	str	r3, [r2, #4]
}
   147ac:	e12fff1e 	bx	lr
   147b0:	e0028000 	and	r8, r2, r0

000147b4 <adxl345_write>:

char adxl345_read(char register_address){
	char read_address=0x80 | register_address;
	char register_value=0;
	int spcr_setting=0;
	
	spcr_setting = S0SPCR;	//Save the current SPI Control Register Settings
	S0SPCR  = 0x38;         // Master, no interrupt enable, 8 bits, Active Low SCK pin, CPHA=1	
		
	SelectAccelerometer();
	delay_ms(1);
	SPI0_send(read_address);
	register_value=SPI0_recv();
	delay_ms(1);
	UnselectAccelerometer();
	
	S0SPCR = spcr_setting;
	return register_value;
}

void adxl345_write(char register_address, char register_value){
   147b4:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
	int spcr_setting=0;
	
	spcr_setting = S0SPCR;	//Save the current SPI Control Register Settings
   147b8:	e59f604c 	ldr	r6, [pc, #76]	; 1480c <.text+0x480c>
	S0SPCR  = 0x38;         // Master, no interrupt enable, 8 bits, Active Low SCK pin, CPHA=1	
		
	SelectAccelerometer();
   147bc:	e59f804c 	ldr	r8, [pc, #76]	; 14810 <.text+0x4810>
   147c0:	e3a03038 	mov	r3, #56	; 0x38
   147c4:	e3a07802 	mov	r7, #131072	; 0x20000
   147c8:	e596a000 	ldr	sl, [r6]
   147cc:	e20050ff 	and	r5, r0, #255	; 0xff
   147d0:	e5863000 	str	r3, [r6]
	delay_ms(1);
   147d4:	e3a00001 	mov	r0, #1	; 0x1
   147d8:	e588700c 	str	r7, [r8, #12]
   147dc:	e20140ff 	and	r4, r1, #255	; 0xff
   147e0:	ebffee6b 	bl	10194 <delay_ms>
	SPI0_send(register_address);
   147e4:	e1a00005 	mov	r0, r5
   147e8:	ebfff532 	bl	11cb8 <SPI0_send>
	SPI0_send(register_value);
   147ec:	e1a00004 	mov	r0, r4
   147f0:	ebfff530 	bl	11cb8 <SPI0_send>
	delay_ms(1);
   147f4:	e3a00001 	mov	r0, #1	; 0x1
   147f8:	ebffee65 	bl	10194 <delay_ms>
	UnselectAccelerometer();
   147fc:	e5887004 	str	r7, [r8, #4]
	
	S0SPCR = spcr_setting;
   14800:	e586a000 	str	sl, [r6]
}
   14804:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   14808:	e12fff1e 	bx	lr
   1480c:	e0020000 	and	r0, r2, r0
   14810:	e0028000 	and	r8, r2, r0

00014814 <initAccel>:
   14814:	e52de004 	str	lr, [sp, #-4]!
   14818:	e3a00031 	mov	r0, #49	; 0x31
   1481c:	e3a01002 	mov	r1, #2	; 0x2
   14820:	ebffffe3 	bl	147b4 <adxl345_write>
   14824:	e3a00028 	mov	r0, #40	; 0x28
   14828:	e3a0100e 	mov	r1, #14	; 0xe
   1482c:	ebffffe0 	bl	147b4 <adxl345_write>
   14830:	e3a00029 	mov	r0, #41	; 0x29
   14834:	e3a0100a 	mov	r1, #10	; 0xa
   14838:	ebffffdd 	bl	147b4 <adxl345_write>
   1483c:	e3a0002c 	mov	r0, #44	; 0x2c
   14840:	e3a01007 	mov	r1, #7	; 0x7
   14844:	ebffffda 	bl	147b4 <adxl345_write>
   14848:	e3a0002f 	mov	r0, #47	; 0x2f
   1484c:	e3a010fb 	mov	r1, #251	; 0xfb
   14850:	ebffffd7 	bl	147b4 <adxl345_write>
   14854:	e3a0002e 	mov	r0, #46	; 0x2e
   14858:	e3a01004 	mov	r1, #4	; 0x4
   1485c:	ebffffd4 	bl	147b4 <adxl345_write>
   14860:	e3a0002d 	mov	r0, #45	; 0x2d
   14864:	e3a01008 	mov	r1, #8	; 0x8
   14868:	e49de004 	ldr	lr, [sp], #4
   1486c:	eaffffd0 	b	147b4 <adxl345_write>

00014870 <adxl345_read>:
   14870:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14874:	e59f504c 	ldr	r5, [pc, #76]	; 148c8 <.text+0x48c8>
   14878:	e59f704c 	ldr	r7, [pc, #76]	; 148cc <.text+0x48cc>
   1487c:	e3a03038 	mov	r3, #56	; 0x38
   14880:	e3a06802 	mov	r6, #131072	; 0x20000
   14884:	e5958000 	ldr	r8, [r5]
   14888:	e20040ff 	and	r4, r0, #255	; 0xff
   1488c:	e5853000 	str	r3, [r5]
   14890:	e3a00001 	mov	r0, #1	; 0x1
   14894:	e587600c 	str	r6, [r7, #12]
   14898:	ebffee3d 	bl	10194 <delay_ms>
   1489c:	e3840080 	orr	r0, r4, #128	; 0x80
   148a0:	ebfff504 	bl	11cb8 <SPI0_send>
   148a4:	ebfff4fe 	bl	11ca4 <SPI0_recv>
   148a8:	e1a04000 	mov	r4, r0
   148ac:	e3a00001 	mov	r0, #1	; 0x1
   148b0:	ebffee37 	bl	10194 <delay_ms>
   148b4:	e1a00004 	mov	r0, r4
   148b8:	e5876004 	str	r6, [r7, #4]
   148bc:	e5858000 	str	r8, [r5]
   148c0:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   148c4:	e12fff1e 	bx	lr
   148c8:	e0020000 	and	r0, r2, r0
   148cc:	e0028000 	and	r8, r2, r0

000148d0 <accelZ>:
   148d0:	e92d4010 	stmdb	sp!, {r4, lr}
   148d4:	e3a00037 	mov	r0, #55	; 0x37
   148d8:	ebffffe4 	bl	14870 <adxl345_read>
   148dc:	e1a04000 	mov	r4, r0
   148e0:	e3a00036 	mov	r0, #54	; 0x36
   148e4:	ebffffe1 	bl	14870 <adxl345_read>
   148e8:	e1800404 	orr	r0, r0, r4, lsl #8
   148ec:	e8bd4010 	ldmia	sp!, {r4, lr}
   148f0:	e12fff1e 	bx	lr

000148f4 <accelY>:
   148f4:	e92d4010 	stmdb	sp!, {r4, lr}
   148f8:	e3a00035 	mov	r0, #53	; 0x35
   148fc:	ebffffdb 	bl	14870 <adxl345_read>
   14900:	e1a04000 	mov	r4, r0
   14904:	e3a00034 	mov	r0, #52	; 0x34
   14908:	ebffffd8 	bl	14870 <adxl345_read>
   1490c:	e1800404 	orr	r0, r0, r4, lsl #8
   14910:	e8bd4010 	ldmia	sp!, {r4, lr}
   14914:	e12fff1e 	bx	lr

00014918 <accelX>:
   14918:	e92d4010 	stmdb	sp!, {r4, lr}
   1491c:	e3a00033 	mov	r0, #51	; 0x33
   14920:	ebffffd2 	bl	14870 <adxl345_read>
   14924:	e1a04000 	mov	r4, r0
   14928:	e3a00032 	mov	r0, #50	; 0x32
   1492c:	ebffffcf 	bl	14870 <adxl345_read>
   14930:	e1800404 	orr	r0, r0, r4, lsl #8
   14934:	e8bd4010 	ldmia	sp!, {r4, lr}
   14938:	e12fff1e 	bx	lr

0001493c <readSCP>:
	UnselectSCP();
}

void readSCP(unsigned int *scp_pressure, int *scp_temperature)
{
   1493c:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SelectSCP();
   14940:	e59f6084 	ldr	r6, [pc, #132]	; 149cc <.text+0x49cc>
   14944:	e3a05301 	mov	r5, #67108864	; 0x4000000
   14948:	e1a08000 	mov	r8, r0
   1494c:	e586501c 	str	r5, [r6, #28]
	SPI0_send(((TEMPOUT<<2) & 0xFC) | SCP_READ);
   14950:	e3a00084 	mov	r0, #132	; 0x84
   14954:	e1a07001 	mov	r7, r1
   14958:	ebfff4d6 	bl	11cb8 <SPI0_send>
	*scp_temperature=(SPI0_recv()<<8);
   1495c:	ebfff4d0 	bl	11ca4 <SPI0_recv>
   14960:	e1a04400 	mov	r4, r0, lsl #8
   14964:	e5874000 	str	r4, [r7]
	*scp_temperature|=SPI0_recv();			
   14968:	ebfff4cd 	bl	11ca4 <SPI0_recv>
   1496c:	e1844000 	orr	r4, r4, r0
   14970:	e5874000 	str	r4, [r7]
	UnselectSCP();
	//rprintf("SCP Temp: %d\n", scp_temperature/2);

	SelectSCP();
	SPI0_send(((DATARD8<<2) & 0xFC) | SCP_READ);
   14974:	e3a0007c 	mov	r0, #124	; 0x7c
   14978:	e5865014 	str	r5, [r6, #20]
   1497c:	e586501c 	str	r5, [r6, #28]
   14980:	ebfff4cc 	bl	11cb8 <SPI0_send>
	*scp_pressure=((SPI0_recv()&0x0007)<<16);
   14984:	ebfff4c6 	bl	11ca4 <SPI0_recv>
   14988:	e2000007 	and	r0, r0, #7	; 0x7
   1498c:	e1a00800 	mov	r0, r0, lsl #16
   14990:	e5880000 	str	r0, [r8]
	UnselectSCP();	
   14994:	e5865014 	str	r5, [r6, #20]

	SelectSCP();
	SPI0_send(((DATARD16<<2) & 0xFC) | SCP_READ);
   14998:	e3a00080 	mov	r0, #128	; 0x80
   1499c:	e586501c 	str	r5, [r6, #28]
   149a0:	ebfff4c4 	bl	11cb8 <SPI0_send>
	*scp_pressure|=(SPI0_recv()<<8);
   149a4:	e5984000 	ldr	r4, [r8]
   149a8:	ebfff4bd 	bl	11ca4 <SPI0_recv>
   149ac:	e1844400 	orr	r4, r4, r0, lsl #8
   149b0:	e5884000 	str	r4, [r8]
	*scp_pressure|=SPI0_recv();
   149b4:	ebfff4ba 	bl	11ca4 <SPI0_recv>
   149b8:	e1844000 	orr	r4, r4, r0
   149bc:	e5884000 	str	r4, [r8]
	UnselectSCP();		
   149c0:	e5865014 	str	r5, [r6, #20]
	//rprintf("SCP Pressure: %d\n\n", scp_pressure/4);
}
   149c4:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   149c8:	e12fff1e 	bx	lr
   149cc:	e0028000 	and	r8, r2, r0

000149d0 <SCPinit>:
   149d0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   149d4:	e59f5058 	ldr	r5, [pc, #88]	; 14a34 <.text+0x4a34>
   149d8:	e3a04301 	mov	r4, #67108864	; 0x4000000
   149dc:	e3a00000 	mov	r0, #0	; 0x0
   149e0:	e585401c 	str	r4, [r5, #28]
   149e4:	ebfff4b3 	bl	11cb8 <SPI0_send>
   149e8:	e3a0001c 	mov	r0, #28	; 0x1c
   149ec:	e5854014 	str	r4, [r5, #20]
   149f0:	e585401c 	str	r4, [r5, #28]
   149f4:	ebfff4af 	bl	11cb8 <SPI0_send>
   149f8:	ebfff4a9 	bl	11ca4 <SPI0_recv>
   149fc:	e3a0000e 	mov	r0, #14	; 0xe
   14a00:	e5854014 	str	r4, [r5, #20]
   14a04:	e585401c 	str	r4, [r5, #28]
   14a08:	ebfff4aa 	bl	11cb8 <SPI0_send>
   14a0c:	e3a0000a 	mov	r0, #10	; 0xa
   14a10:	ebfff4a8 	bl	11cb8 <SPI0_send>
   14a14:	e3a0000c 	mov	r0, #12	; 0xc
   14a18:	e5854014 	str	r4, [r5, #20]
   14a1c:	e585401c 	str	r4, [r5, #28]
   14a20:	ebfff4a4 	bl	11cb8 <SPI0_send>
   14a24:	ebfff49e 	bl	11ca4 <SPI0_recv>
   14a28:	e5854014 	str	r4, [r5, #20]
   14a2c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   14a30:	e12fff1e 	bx	lr
   14a34:	e0028000 	and	r8, r2, r0

00014a38 <sht15_start>:

}
//Specific SHT start command
void sht15_start(void)
{
   14a38:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    IODIR0 |= I2C_SDA;	//Write-SDA is an output
   14a3c:	e59f4064 	ldr	r4, [pc, #100]	; 14aa8 <.text+0x4aa8>
   14a40:	e5943008 	ldr	r3, [r4, #8]
    IOSET0 = I2C_SDA;; //SHT_SDA = 1;
    IOSET0 = I2C_SCL; //SHT_SCK = 1;
   14a44:	e3a05004 	mov	r5, #4	; 0x4
   14a48:	e3833008 	orr	r3, r3, #8	; 0x8
   14a4c:	e3a06008 	mov	r6, #8	; 0x8
   14a50:	e5843008 	str	r3, [r4, #8]
    delay_ms(SCL_DELAY);
   14a54:	e3a00001 	mov	r0, #1	; 0x1
   14a58:	e5846004 	str	r6, [r4, #4]
   14a5c:	e5845004 	str	r5, [r4, #4]
   14a60:	ebffedcb 	bl	10194 <delay_ms>

    IOCLR0 = I2C_SDA; //SHT_SDA = 0;
    delay_ms(SCL_DELAY);
   14a64:	e3a00001 	mov	r0, #1	; 0x1
   14a68:	e584600c 	str	r6, [r4, #12]
   14a6c:	ebffedc8 	bl	10194 <delay_ms>
    IOCLR0 = I2C_SCL; //SHT_SCK = 0;
    delay_ms(SCL_DELAY);
   14a70:	e3a00001 	mov	r0, #1	; 0x1
   14a74:	e584500c 	str	r5, [r4, #12]
   14a78:	ebffedc5 	bl	10194 <delay_ms>
    IOSET0 = I2C_SCL; //SHT_SCK = 1;
    delay_ms(SCL_DELAY);
   14a7c:	e3a00001 	mov	r0, #1	; 0x1
   14a80:	e5845004 	str	r5, [r4, #4]
   14a84:	ebffedc2 	bl	10194 <delay_ms>
    IOSET0 = I2C_SDA;; //SHT_SDA = 1;
    delay_ms(SCL_DELAY);
   14a88:	e3a00001 	mov	r0, #1	; 0x1
   14a8c:	e5846004 	str	r6, [r4, #4]
   14a90:	ebffedbf 	bl	10194 <delay_ms>
    IOCLR0 = I2C_SCL; //SHT_SCK = 0;
    delay_ms(SCL_DELAY);
   14a94:	e3a00001 	mov	r0, #1	; 0x1
   14a98:	e584500c 	str	r5, [r4, #12]
   14a9c:	ebffedbc 	bl	10194 <delay_ms>
	
}
   14aa0:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   14aa4:	e12fff1e 	bx	lr
   14aa8:	e0028000 	and	r8, r2, r0

00014aac <sht15_send_byte>:
   14aac:	e59f30a4 	ldr	r3, [pc, #164]	; 14b58 <.text+0x4b58>
   14ab0:	e5932008 	ldr	r2, [r3, #8]
   14ab4:	e3822008 	orr	r2, r2, #8	; 0x8
   14ab8:	e5832008 	str	r2, [r3, #8]
   14abc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   14ac0:	e20070ff 	and	r7, r0, #255	; 0xff
   14ac4:	e3a05008 	mov	r5, #8	; 0x8
   14ac8:	e59f4088 	ldr	r4, [pc, #136]	; 14b58 <.text+0x4b58>
   14acc:	e3a03004 	mov	r3, #4	; 0x4
   14ad0:	e584300c 	str	r3, [r4, #12]
   14ad4:	e2455001 	sub	r5, r5, #1	; 0x1
   14ad8:	e3a00001 	mov	r0, #1	; 0x1
   14adc:	ebffedac 	bl	10194 <delay_ms>
   14ae0:	e1a03557 	mov	r3, r7, asr r5
   14ae4:	e3130001 	tst	r3, #1	; 0x1
   14ae8:	13a03008 	movne	r3, #8	; 0x8
   14aec:	03a03008 	moveq	r3, #8	; 0x8
   14af0:	15843004 	strne	r3, [r4, #4]
   14af4:	0584300c 	streq	r3, [r4, #12]
   14af8:	e59f4058 	ldr	r4, [pc, #88]	; 14b58 <.text+0x4b58>
   14afc:	e3a06004 	mov	r6, #4	; 0x4
   14b00:	e3a00001 	mov	r0, #1	; 0x1
   14b04:	e5846004 	str	r6, [r4, #4]
   14b08:	ebffeda1 	bl	10194 <delay_ms>
   14b0c:	e3550000 	cmp	r5, #0	; 0x0
   14b10:	1affffec 	bne	14ac8 <sht15_send_byte+0x1c>
   14b14:	e584600c 	str	r6, [r4, #12]
   14b18:	e5943008 	ldr	r3, [r4, #8]
   14b1c:	e3c33008 	bic	r3, r3, #8	; 0x8
   14b20:	e5843008 	str	r3, [r4, #8]
   14b24:	e59f502c 	ldr	r5, [pc, #44]	; 14b58 <.text+0x4b58>
   14b28:	e5953000 	ldr	r3, [r5]
   14b2c:	e3130008 	tst	r3, #8	; 0x8
   14b30:	1afffffb 	bne	14b24 <sht15_send_byte+0x78>
   14b34:	e3a04004 	mov	r4, #4	; 0x4
   14b38:	e3a00001 	mov	r0, #1	; 0x1
   14b3c:	e5854004 	str	r4, [r5, #4]
   14b40:	ebffed93 	bl	10194 <delay_ms>
   14b44:	e3a00001 	mov	r0, #1	; 0x1
   14b48:	e585400c 	str	r4, [r5, #12]
   14b4c:	ebffed90 	bl	10194 <delay_ms>
   14b50:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   14b54:	e12fff1e 	bx	lr
   14b58:	e0028000 	and	r8, r2, r0

00014b5c <sht15_read_byte>:
   14b5c:	e59f2094 	ldr	r2, [pc, #148]	; 14bf8 <.text+0x4bf8>
   14b60:	e3a03004 	mov	r3, #4	; 0x4
   14b64:	e582300c 	str	r3, [r2, #12]
   14b68:	e5923008 	ldr	r3, [r2, #8]
   14b6c:	e3c33008 	bic	r3, r3, #8	; 0x8
   14b70:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   14b74:	e5823008 	str	r3, [r2, #8]
   14b78:	e3a06000 	mov	r6, #0	; 0x0
   14b7c:	e1a07006 	mov	r7, r6
   14b80:	e59f4070 	ldr	r4, [pc, #112]	; 14bf8 <.text+0x4bf8>
   14b84:	e3a05004 	mov	r5, #4	; 0x4
   14b88:	e3a00001 	mov	r0, #1	; 0x1
   14b8c:	e584500c 	str	r5, [r4, #12]
   14b90:	ebffed7f 	bl	10194 <delay_ms>
   14b94:	e3a00001 	mov	r0, #1	; 0x1
   14b98:	e5845004 	str	r5, [r4, #4]
   14b9c:	ebffed7c 	bl	10194 <delay_ms>
   14ba0:	e5943000 	ldr	r3, [r4]
   14ba4:	e3130008 	tst	r3, #8	; 0x8
   14ba8:	e1a03086 	mov	r3, r6, lsl #1
   14bac:	e2877001 	add	r7, r7, #1	; 0x1
   14bb0:	e20360ff 	and	r6, r3, #255	; 0xff
   14bb4:	13866001 	orrne	r6, r6, #1	; 0x1
   14bb8:	e3570008 	cmp	r7, #8	; 0x8
   14bbc:	1affffef 	bne	14b80 <sht15_read_byte+0x24>
   14bc0:	e584500c 	str	r5, [r4, #12]
   14bc4:	e5943008 	ldr	r3, [r4, #8]
   14bc8:	e3833008 	orr	r3, r3, #8	; 0x8
   14bcc:	e5843008 	str	r3, [r4, #8]
   14bd0:	e3a00001 	mov	r0, #1	; 0x1
   14bd4:	e584700c 	str	r7, [r4, #12]
   14bd8:	e5845004 	str	r5, [r4, #4]
   14bdc:	ebffed6c 	bl	10194 <delay_ms>
   14be0:	e3a00001 	mov	r0, #1	; 0x1
   14be4:	e584500c 	str	r5, [r4, #12]
   14be8:	ebffed69 	bl	10194 <delay_ms>
   14bec:	e1a00006 	mov	r0, r6
   14bf0:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   14bf4:	e12fff1e 	bx	lr
   14bf8:	e0028000 	and	r8, r2, r0

00014bfc <sht15_read>:
   14bfc:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   14c00:	e1a05000 	mov	r5, r0
   14c04:	e1a06001 	mov	r6, r1
   14c08:	ebffff8a 	bl	14a38 <sht15_start>
   14c0c:	e3a00003 	mov	r0, #3	; 0x3
   14c10:	ebffffa5 	bl	14aac <sht15_send_byte>
   14c14:	e59f30b8 	ldr	r3, [pc, #184]	; 14cd4 <.text+0x4cd4>
   14c18:	e5933000 	ldr	r3, [r3]
   14c1c:	e3130008 	tst	r3, #8	; 0x8
   14c20:	1afffffb 	bne	14c14 <sht15_read+0x18>
   14c24:	ebffffcc 	bl	14b5c <sht15_read_byte>
   14c28:	e1a04400 	mov	r4, r0, lsl #8
   14c2c:	ebffffca 	bl	14b5c <sht15_read_byte>
   14c30:	e3a03012 	mov	r3, #18	; 0x12
   14c34:	e1844000 	orr	r4, r4, r0
   14c38:	e0030394 	mul	r3, r4, r3
   14c3c:	e5853000 	str	r3, [r5]
   14c40:	ebffffc5 	bl	14b5c <sht15_read_byte>
   14c44:	e5950000 	ldr	r0, [r5]
   14c48:	e2400c99 	sub	r0, r0, #39168	; 0x9900
   14c4c:	e3a0100a 	mov	r1, #10	; 0xa
   14c50:	e2400084 	sub	r0, r0, #132	; 0x84
   14c54:	eb001fe8 	bl	1cbfc <__aeabi_uidiv>
   14c58:	e5850000 	str	r0, [r5]
   14c5c:	ebffff75 	bl	14a38 <sht15_start>
   14c60:	e3a00005 	mov	r0, #5	; 0x5
   14c64:	ebffff90 	bl	14aac <sht15_send_byte>
   14c68:	e59f3064 	ldr	r3, [pc, #100]	; 14cd4 <.text+0x4cd4>
   14c6c:	e5933000 	ldr	r3, [r3]
   14c70:	e3130008 	tst	r3, #8	; 0x8
   14c74:	1afffffb 	bne	14c68 <sht15_read+0x6c>
   14c78:	ebffffb7 	bl	14b5c <sht15_read_byte>
   14c7c:	e1a04400 	mov	r4, r0, lsl #8
   14c80:	ebffffb5 	bl	14b5c <sht15_read_byte>
   14c84:	e1844000 	orr	r4, r4, r0
   14c88:	e5864000 	str	r4, [r6]
   14c8c:	ebffffb2 	bl	14b5c <sht15_read_byte>
   14c90:	e5962000 	ldr	r2, [r6]
   14c94:	e3a0301c 	mov	r3, #28	; 0x1c
   14c98:	e0010392 	mul	r1, r2, r3
   14c9c:	e59f3034 	ldr	r3, [pc, #52]	; 14cd8 <.text+0x4cd8>
   14ca0:	e0050291 	mul	r5, r1, r2
   14ca4:	e0000392 	mul	r0, r2, r3
   14ca8:	e3a01064 	mov	r1, #100	; 0x64
   14cac:	eb001fd2 	bl	1cbfc <__aeabi_uidiv>
   14cb0:	e59f1024 	ldr	r1, [pc, #36]	; 14cdc <.text+0x4cdc>
   14cb4:	e1a04000 	mov	r4, r0
   14cb8:	e1a00005 	mov	r0, r5
   14cbc:	eb001fce 	bl	1cbfc <__aeabi_uidiv>
   14cc0:	e0604004 	rsb	r4, r0, r4
   14cc4:	e2444e19 	sub	r4, r4, #400	; 0x190
   14cc8:	e5864000 	str	r4, [r6]
   14ccc:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   14cd0:	e12fff1e 	bx	lr
   14cd4:	e0028000 	and	r8, r2, r0
   14cd8:	00000195 	muleq	r0, r5, r1
   14cdc:	000186a0 	andeq	r8, r1, r0, lsr #13

00014ce0 <configure_gps_waas>:
	putc_serial1('\n');

}

void configure_gps_waas(unsigned char const enable){
   14ce0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   14ce4:	e24dd014 	sub	sp, sp, #20	; 0x14
   14ce8:	e20020ff 	and	r2, r0, #255	; 0xff
	char gps_string[20];
	unsigned char cksum;
	
	sprintf( gps_string, "PSRF151,%d", enable );
   14cec:	e59f108c 	ldr	r1, [pc, #140]	; 14d80 <.text+0x4d80>
   14cf0:	e1a0000d 	mov	r0, sp
   14cf4:	eb0008e0 	bl	1707c <sprintf>
	GPS_CHECKSUM(gps_string,cksum) 
   14cf8:	e1a0000d 	mov	r0, sp
   14cfc:	eb000933 	bl	171d0 <strlen>
   14d00:	e3a05000 	mov	r5, #0	; 0x0
   14d04:	e1a02005 	mov	r2, r5
   14d08:	ea000002 	b	14d18 <configure_gps_waas+0x38>
   14d0c:	e7d2300d 	ldrb	r3, [r2, sp]
   14d10:	e2822001 	add	r2, r2, #1	; 0x1
   14d14:	e0255003 	eor	r5, r5, r3
   14d18:	e1520000 	cmp	r2, r0
   14d1c:	1afffffa 	bne	14d0c <configure_gps_waas+0x2c>

	putc_serial1('$');
   14d20:	e3a00024 	mov	r0, #36	; 0x24
   14d24:	ebfff39d 	bl	11ba0 <putc_serial1>
   14d28:	e3a04000 	mov	r4, #0	; 0x0
   14d2c:	ea000000 	b	14d34 <configure_gps_waas+0x54>
	for(int i=0; gps_string[i] != '\0'; i++)
	{
		putc_serial1(gps_string[i]);
   14d30:	ebfff39a 	bl	11ba0 <putc_serial1>
   14d34:	e7d4300d 	ldrb	r3, [r4, sp]
   14d38:	e2530000 	subs	r0, r3, #0	; 0x0
   14d3c:	e2844001 	add	r4, r4, #1	; 0x1
   14d40:	1afffffa 	bne	14d30 <configure_gps_waas+0x50>
	}
	putc_serial1('*');
   14d44:	e3a0002a 	mov	r0, #42	; 0x2a
   14d48:	ebfff394 	bl	11ba0 <putc_serial1>
	putc_serial1(((cksum&0xF0)>>4)+'0');
   14d4c:	e1a00225 	mov	r0, r5, lsr #4
   14d50:	e2800030 	add	r0, r0, #48	; 0x30
   14d54:	ebfff391 	bl	11ba0 <putc_serial1>
	putc_serial1((cksum&0x0F)+'0');
   14d58:	e205000f 	and	r0, r5, #15	; 0xf
   14d5c:	e2800030 	add	r0, r0, #48	; 0x30
   14d60:	ebfff38e 	bl	11ba0 <putc_serial1>
	putc_serial1('\r');
   14d64:	e3a0000d 	mov	r0, #13	; 0xd
   14d68:	ebfff38c 	bl	11ba0 <putc_serial1>
	putc_serial1('\n');
   14d6c:	e3a0000a 	mov	r0, #10	; 0xa
   14d70:	ebfff38a 	bl	11ba0 <putc_serial1>
}
   14d74:	e28dd014 	add	sp, sp, #20	; 0x14
   14d78:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   14d7c:	e12fff1e 	bx	lr
   14d80:	0001dfdc 	ldreqd	sp, [r1], -ip

00014d84 <disable_waas>:


//Disable all possibile GPS messages that could be generated by the
//receiver.
void disable_all_gps_msgs(void) {
    config_gps_msgs( 0, 0 ); //Turn off GGA messages
    config_gps_msgs( 1, 0 ); //Turn off GLL messages
    config_gps_msgs( 2, 0 ); //Turn off GSA messages
    config_gps_msgs( 3, 0 ); //Turn off GSV messages
    config_gps_msgs( 4, 0 ); //Turn off RMC messages
    config_gps_msgs( 5, 0 ); //Turn off VTG messages
    config_gps_msgs( 6, 0 ); //Turn off MSS messages
    config_gps_msgs( 7, 0 ); //Turn off messages #7 --currently not defined--

}

//Enable the RMC message with the specified frequency
void enable_gps_rmc_msgs(unsigned char freq) {
    config_gps_msgs( 4, freq );
}

void disable_gps_rmc_msgs(void) {
    config_gps_msgs( 4, 0 );
}

void enable_gps_gga_msgs(unsigned char freq) {
    config_gps_msgs( 0, freq );
}

void disable_gps_gga_msgs(void) {
    config_gps_msgs( 0, 0 );
}

void enable_waas(void){
	configure_gps_waas(1);
}

void disable_waas(void){
	configure_gps_waas(0);
   14d84:	e3a00000 	mov	r0, #0	; 0x0
   14d88:	eaffffd4 	b	14ce0 <configure_gps_waas>

00014d8c <enable_waas>:
   14d8c:	e3a00001 	mov	r0, #1	; 0x1
   14d90:	eaffffd2 	b	14ce0 <configure_gps_waas>

00014d94 <config_gps_msgs>:
   14d94:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   14d98:	e24dd014 	sub	sp, sp, #20	; 0x14
   14d9c:	e20020ff 	and	r2, r0, #255	; 0xff
   14da0:	e20130ff 	and	r3, r1, #255	; 0xff
   14da4:	e1a0000d 	mov	r0, sp
   14da8:	e59f1088 	ldr	r1, [pc, #136]	; 14e38 <.text+0x4e38>
   14dac:	eb0008b2 	bl	1707c <sprintf>
   14db0:	e1a0000d 	mov	r0, sp
   14db4:	eb000905 	bl	171d0 <strlen>
   14db8:	e3a05000 	mov	r5, #0	; 0x0
   14dbc:	e1a02005 	mov	r2, r5
   14dc0:	ea000002 	b	14dd0 <config_gps_msgs+0x3c>
   14dc4:	e7d2300d 	ldrb	r3, [r2, sp]
   14dc8:	e2822001 	add	r2, r2, #1	; 0x1
   14dcc:	e0255003 	eor	r5, r5, r3
   14dd0:	e1520000 	cmp	r2, r0
   14dd4:	1afffffa 	bne	14dc4 <config_gps_msgs+0x30>
   14dd8:	e3a00024 	mov	r0, #36	; 0x24
   14ddc:	ebfff36f 	bl	11ba0 <putc_serial1>
   14de0:	e3a04000 	mov	r4, #0	; 0x0
   14de4:	ea000000 	b	14dec <config_gps_msgs+0x58>
   14de8:	ebfff36c 	bl	11ba0 <putc_serial1>
   14dec:	e7d4300d 	ldrb	r3, [r4, sp]
   14df0:	e2530000 	subs	r0, r3, #0	; 0x0
   14df4:	e2844001 	add	r4, r4, #1	; 0x1
   14df8:	1afffffa 	bne	14de8 <config_gps_msgs+0x54>
   14dfc:	e3a0002a 	mov	r0, #42	; 0x2a
   14e00:	ebfff366 	bl	11ba0 <putc_serial1>
   14e04:	e1a00225 	mov	r0, r5, lsr #4
   14e08:	e2800030 	add	r0, r0, #48	; 0x30
   14e0c:	ebfff363 	bl	11ba0 <putc_serial1>
   14e10:	e205000f 	and	r0, r5, #15	; 0xf
   14e14:	e2800030 	add	r0, r0, #48	; 0x30
   14e18:	ebfff360 	bl	11ba0 <putc_serial1>
   14e1c:	e3a0000d 	mov	r0, #13	; 0xd
   14e20:	ebfff35e 	bl	11ba0 <putc_serial1>
   14e24:	e3a0000a 	mov	r0, #10	; 0xa
   14e28:	ebfff35c 	bl	11ba0 <putc_serial1>
   14e2c:	e28dd014 	add	sp, sp, #20	; 0x14
   14e30:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   14e34:	e12fff1e 	bx	lr
   14e38:	0001dfe8 	andeq	sp, r1, r8, ror #31

00014e3c <disable_gps_gga_msgs>:
   14e3c:	e3a00000 	mov	r0, #0	; 0x0
   14e40:	e1a01000 	mov	r1, r0
   14e44:	eaffffd2 	b	14d94 <config_gps_msgs>

00014e48 <enable_gps_gga_msgs>:
   14e48:	e20010ff 	and	r1, r0, #255	; 0xff
   14e4c:	e3a00000 	mov	r0, #0	; 0x0
   14e50:	eaffffcf 	b	14d94 <config_gps_msgs>

00014e54 <disable_gps_rmc_msgs>:
   14e54:	e3a00004 	mov	r0, #4	; 0x4
   14e58:	e3a01000 	mov	r1, #0	; 0x0
   14e5c:	eaffffcc 	b	14d94 <config_gps_msgs>

00014e60 <enable_gps_rmc_msgs>:
   14e60:	e20010ff 	and	r1, r0, #255	; 0xff
   14e64:	e3a00004 	mov	r0, #4	; 0x4
   14e68:	eaffffc9 	b	14d94 <config_gps_msgs>

00014e6c <disable_all_gps_msgs>:
   14e6c:	e3a00000 	mov	r0, #0	; 0x0
   14e70:	e52de004 	str	lr, [sp, #-4]!
   14e74:	e1a01000 	mov	r1, r0
   14e78:	ebffffc5 	bl	14d94 <config_gps_msgs>
   14e7c:	e3a00001 	mov	r0, #1	; 0x1
   14e80:	e3a01000 	mov	r1, #0	; 0x0
   14e84:	ebffffc2 	bl	14d94 <config_gps_msgs>
   14e88:	e3a00002 	mov	r0, #2	; 0x2
   14e8c:	e3a01000 	mov	r1, #0	; 0x0
   14e90:	ebffffbf 	bl	14d94 <config_gps_msgs>
   14e94:	e3a00003 	mov	r0, #3	; 0x3
   14e98:	e3a01000 	mov	r1, #0	; 0x0
   14e9c:	ebffffbc 	bl	14d94 <config_gps_msgs>
   14ea0:	e3a00004 	mov	r0, #4	; 0x4
   14ea4:	e3a01000 	mov	r1, #0	; 0x0
   14ea8:	ebffffb9 	bl	14d94 <config_gps_msgs>
   14eac:	e3a00005 	mov	r0, #5	; 0x5
   14eb0:	e3a01000 	mov	r1, #0	; 0x0
   14eb4:	ebffffb6 	bl	14d94 <config_gps_msgs>
   14eb8:	e3a00006 	mov	r0, #6	; 0x6
   14ebc:	e3a01000 	mov	r1, #0	; 0x0
   14ec0:	ebffffb3 	bl	14d94 <config_gps_msgs>
   14ec4:	e3a00007 	mov	r0, #7	; 0x7
   14ec8:	e3a01000 	mov	r1, #0	; 0x0
   14ecc:	e49de004 	ldr	lr, [sp], #4
   14ed0:	eaffffaf 	b	14d94 <config_gps_msgs>

00014ed4 <GPS_init_strings>:
   14ed4:	e92d4010 	stmdb	sp!, {r4, lr}
   14ed8:	e59f4018 	ldr	r4, [pc, #24]	; 14ef8 <.text+0x4ef8>
   14edc:	ea000000 	b	14ee4 <GPS_init_strings+0x10>
   14ee0:	ebfff32e 	bl	11ba0 <putc_serial1>
   14ee4:	e4d43001 	ldrb	r3, [r4], #1
   14ee8:	e2530000 	subs	r0, r3, #0	; 0x0
   14eec:	1afffffb 	bne	14ee0 <GPS_init_strings+0xc>
   14ef0:	e8bd4010 	ldmia	sp!, {r4, lr}
   14ef4:	e12fff1e 	bx	lr
   14ef8:	0001da78 	andeq	sp, r1, r8, ror sl

00014efc <main_msc>:
    msc_main
    ====
**************************************************************************/
int main_msc(void)
{
   14efc:	e52de004 	str	lr, [sp, #-4]!
    // initialise the SD card
    BlockDevInit();
   14f00:	eb0002e9 	bl	15aac <BlockDevInit>

    rprintf("Initialising USB stack\n");
   14f04:	e59f006c 	ldr	r0, [pc, #108]	; 14f78 <.text+0x4f78>
   14f08:	ebfff242 	bl	11818 <rprintf>

    // initialise stack
    USBInit();
   14f0c:	eb0003da 	bl	15e7c <USBInit>

    // enable bulk-in interrupts on NAKs
    // these are required to get the BOT protocol going again after a STALL
    USBHwNakIntEnable(INACK_BI);
   14f10:	e3a00020 	mov	r0, #32	; 0x20
   14f14:	eb00046c 	bl	160cc <USBHwNakIntEnable>

    // register descriptors
    USBRegisterDescriptors(abDescriptors);
   14f18:	e59f005c 	ldr	r0, [pc, #92]	; 14f7c <.text+0x4f7c>
   14f1c:	eb0005cc 	bl	16654 <USBRegisterDescriptors>

    // register class request handler
    USBRegisterRequestHandler(REQTYPE_TYPE_CLASS, HandleClassRequest, abClassReqData);
   14f20:	e59f2058 	ldr	r2, [pc, #88]	; 14f80 <.text+0x4f80>
   14f24:	e3a00001 	mov	r0, #1	; 0x1
   14f28:	e59f1054 	ldr	r1, [pc, #84]	; 14f84 <.text+0x4f84>
   14f2c:	eb000554 	bl	16484 <USBRegisterRequestHandler>

    // register endpoint handlers
    USBHwRegisterEPIntHandler(MSC_BULK_IN_EP, MSCBotBulkIn);
   14f30:	e3a00085 	mov	r0, #133	; 0x85
   14f34:	e59f104c 	ldr	r1, [pc, #76]	; 14f88 <.text+0x4f88>
   14f38:	eb000436 	bl	16018 <USBHwRegisterEPIntHandler>
    USBHwRegisterEPIntHandler(MSC_BULK_OUT_EP, MSCBotBulkOut);
   14f3c:	e59f1048 	ldr	r1, [pc, #72]	; 14f8c <.text+0x4f8c>
   14f40:	e3a00002 	mov	r0, #2	; 0x2
   14f44:	eb000433 	bl	16018 <USBHwRegisterEPIntHandler>

    rprintf("Starting USB communication\n");
   14f48:	e59f0040 	ldr	r0, [pc, #64]	; 14f90 <.text+0x4f90>
   14f4c:	ebfff231 	bl	11818 <rprintf>
	
    // connect to bus
    USBHwConnect(TRUE);
   14f50:	e3a00001 	mov	r0, #1	; 0x1
   14f54:	eb000458 	bl	160bc <USBHwConnect>
   14f58:	ea000000 	b	14f60 <main_msc+0x64>

    // call USB interrupt handler continuously
    while (IOPIN0 & (1<<23))
	{
		USBHwISR();
   14f5c:	eb0004bd 	bl	16258 <USBHwISR>
   14f60:	e59f302c 	ldr	r3, [pc, #44]	; 14f94 <.text+0x4f94>
   14f64:	e5933000 	ldr	r3, [r3]
   14f68:	e2130502 	ands	r0, r3, #8388608	; 0x800000
   14f6c:	1afffffa 	bne	14f5c <main_msc+0x60>
    }

    return 0;
}
   14f70:	e49de004 	ldr	lr, [sp], #4
   14f74:	e12fff1e 	bx	lr
   14f78:	0001dffc 	streqd	sp, [r1], -ip
   14f7c:	40000000 	andmi	r0, r0, r0
   14f80:	40000ad0 	ldrmid	r0, [r0], -r0
   14f84:	00014f98 	muleq	r1, r8, pc
   14f88:	00015158 	andeq	r5, r1, r8, asr r1
   14f8c:	000151bc 	streqh	r5, [r1], -ip
   14f90:	0001e014 	andeq	lr, r1, r4, lsl r0
   14f94:	e0028000 	and	r8, r2, r0

00014f98 <HandleClassRequest>:
   14f98:	e1d030b4 	ldrh	r3, [r0, #4]
   14f9c:	e3530000 	cmp	r3, #0	; 0x0
   14fa0:	e92d4010 	stmdb	sp!, {r4, lr}
   14fa4:	e1a03002 	mov	r3, r2
   14fa8:	e1a04001 	mov	r4, r1
   14fac:	1a000012 	bne	14ffc <HandleClassRequest+0x64>
   14fb0:	e1d0e0b2 	ldrh	lr, [r0, #2]
   14fb4:	e35e0000 	cmp	lr, #0	; 0x0
   14fb8:	1a00000f 	bne	14ffc <HandleClassRequest+0x64>
   14fbc:	e5d0c001 	ldrb	ip, [r0, #1]
   14fc0:	e35c00fe 	cmp	ip, #254	; 0xfe
   14fc4:	05933000 	ldreq	r3, [r3]
   14fc8:	e3a02001 	mov	r2, #1	; 0x1
   14fcc:	05c3e000 	streqb	lr, [r3]
   14fd0:	e1a01002 	mov	r1, r2
   14fd4:	05842000 	streq	r2, [r4]
   14fd8:	0a000008 	beq	15000 <HandleClassRequest+0x68>
   14fdc:	e35c00ff 	cmp	ip, #255	; 0xff
   14fe0:	1a000005 	bne	14ffc <HandleClassRequest+0x64>
   14fe4:	e1d030b6 	ldrh	r3, [r0, #6]
   14fe8:	e3530000 	cmp	r3, #0	; 0x0
   14fec:	1a000002 	bne	14ffc <HandleClassRequest+0x64>
   14ff0:	eb000103 	bl	15404 <MSCBotReset>
   14ff4:	e3a01001 	mov	r1, #1	; 0x1
   14ff8:	ea000000 	b	15000 <HandleClassRequest+0x68>
   14ffc:	e3a01000 	mov	r1, #0	; 0x0
   15000:	e1a00001 	mov	r0, r1
   15004:	e8bd4010 	ldmia	sp!, {r4, lr}
   15008:	e12fff1e 	bx	lr

0001500c <SendCSW>:
static void SendCSW(U8 bStatus)
{
    int iResidue;

    iResidue = CBW.dwCBWDataTransferLength - dwTransferSize;
   1500c:	e59f203c 	ldr	r2, [pc, #60]	; 15050 <.text+0x5050>
   15010:	e59f303c 	ldr	r3, [pc, #60]	; 15054 <.text+0x5054>
   15014:	e5921008 	ldr	r1, [r2, #8]
   15018:	e5933000 	ldr	r3, [r3]

    // construct CSW
    CSW.dwCSWSignature      = CSW_SIGNATURE;
    CSW.dwCSWTag            = CBW.dwCBWTag;
   1501c:	e592c004 	ldr	ip, [r2, #4]
   15020:	e59f2030 	ldr	r2, [pc, #48]	; 15058 <.text+0x5058>
   15024:	e0631001 	rsb	r1, r3, r1
    CSW.dwCSWDataResidue    = MAX(iResidue, 0);
    CSW.bmCSWStatus         = bStatus;

    DBG("CSW: status=%x, residue=%d\n", bStatus, CSW.dwCSWDataResidue);

    // next state
    eState = eCSW;
   15028:	e59f302c 	ldr	r3, [pc, #44]	; 1505c <.text+0x505c>
   1502c:	e5c2000c 	strb	r0, [r2, #12]
   15030:	e3a00003 	mov	r0, #3	; 0x3
   15034:	e5830000 	str	r0, [r3]
   15038:	e59f3020 	ldr	r3, [pc, #32]	; 15060 <.text+0x5060>
   1503c:	e3510000 	cmp	r1, #0	; 0x0
   15040:	b3a01000 	movlt	r1, #0	; 0x0
   15044:	e8821008 	stmia	r2, {r3, ip}
   15048:	e5821008 	str	r1, [r2, #8]
}
   1504c:	e12fff1e 	bx	lr
   15050:	40000adc 	ldrmid	r0, [r0], -ip
   15054:	40000ad4 	ldrmid	r0, [r0], -r4
   15058:	40000afc 	strmid	r0, [r0], -ip
   1505c:	40000b0c 	andmi	r0, r0, ip, lsl #22
   15060:	53425355 	movtpl	r5, #9045	; 0x2355

00015064 <BOTStall>:


/*************************************************************************
    CheckCBW
    ========
        Checks if CBW is valid and meaningful

    IN      pCBW    Command block wrapper
            iLen    Length of CBW

    Returns TRUE if valid and meaningful
**************************************************************************/
static BOOL CheckCBW(TCBW *pCBW, int iLen)
{
    // CBW valid?
    if (iLen != 31)
    {
        DBG("Invalid length (%d)\n", iLen);
        return FALSE;
    }
    if (pCBW->dwCBWSignature != CBW_SIGNATURE)
    {
        DBG("Invalid signature %x\n", pCBW->dwCBWSignature);
        return FALSE;
    }

    // CBW meaningful?
    if (pCBW->bCBWLun != 0)
    {
        DBG("Invalid LUN %d\n", pCBW->bCBWLun);
        return FALSE;
    }
    if ((pCBW->bCBWCBLength < 1) || (pCBW->bCBWCBLength > 16))
    {
        DBG("Invalid CB len %d\n", pCBW->bCBWCBLength);
        return FALSE;
    }
    return TRUE;
}


/*************************************************************************
    BOTStall
    ========
        Local function to stall ongoing transfer

    Which endpoint to stall is determined by looking at the transfer
    direction intended by the host.

**************************************************************************/
static void BOTStall(void)
{
   15064:	e52de004 	str	lr, [sp, #-4]!
    if ((CBW.bmCBWFlags & 0x80) || (CBW.dwCBWDataTransferLength == 0))
   15068:	e59f202c 	ldr	r2, [pc, #44]	; 1509c <.text+0x509c>
   1506c:	e1d230dc 	ldrsb	r3, [r2, #12]
   15070:	e3530000 	cmp	r3, #0	; 0x0
    {
        // stall data-in or CSW
        USBHwEPStall(MSC_BULK_IN_EP, TRUE);
   15074:	e3a00085 	mov	r0, #133	; 0x85
   15078:	e3a01001 	mov	r1, #1	; 0x1
   1507c:	ba000003 	blt	15090 <BOTStall+0x2c>
   15080:	e5923008 	ldr	r3, [r2, #8]
   15084:	e3530000 	cmp	r3, #0	; 0x0
    }
    else
    {
        // stall data-out
        USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
   15088:	13a00002 	movne	r0, #2	; 0x2
   1508c:	13a01001 	movne	r1, #1	; 0x1
   15090:	eb000419 	bl	160fc <USBHwEPStall>
    }
}
   15094:	e49de004 	ldr	lr, [sp], #4
   15098:	e12fff1e 	bx	lr
   1509c:	40000adc 	ldrmid	r0, [r0], -ip

000150a0 <HandleDataIn>:


/*************************************************************************
    HandleDataIn
    ============
        Handles data from device-to-host

**************************************************************************/
static void HandleDataIn(void)
{
   150a0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    int iChunk;

    // process data for host in SCSI layer
    pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
   150a4:	e59f609c 	ldr	r6, [pc, #156]	; 15148 <.text+0x5148>
   150a8:	e59f409c 	ldr	r4, [pc, #156]	; 1514c <.text+0x514c>
   150ac:	e59f509c 	ldr	r5, [pc, #156]	; 15150 <.text+0x5150>
   150b0:	e5d6100e 	ldrb	r1, [r6, #14]
   150b4:	e5942000 	ldr	r2, [r4]
   150b8:	e5953000 	ldr	r3, [r5]
   150bc:	e286000f 	add	r0, r6, #15	; 0xf
   150c0:	eb000129 	bl	1556c <SCSIHandleData>
    if (pbData == NULL)
   150c4:	e3500000 	cmp	r0, #0	; 0x0
    {
        BOTStall();
        SendCSW(STATUS_FAILED);
        return;
    }

    // send data to host?
    if (dwOffset < dwTransferSize)
   150c8:	e59f7084 	ldr	r7, [pc, #132]	; 15154 <.text+0x5154>
   150cc:	e5840000 	str	r0, [r4]
   150d0:	1a000002 	bne	150e0 <HandleDataIn+0x40>
   150d4:	ebffffe2 	bl	15064 <BOTStall>
   150d8:	e3a00001 	mov	r0, #1	; 0x1
   150dc:	ea000015 	b	15138 <HandleDataIn+0x98>
   150e0:	e5952000 	ldr	r2, [r5]
   150e4:	e5973000 	ldr	r3, [r7]
   150e8:	e1520003 	cmp	r2, r3
    {
        iChunk = MIN(64, dwTransferSize - dwOffset);
        USBHwEPWrite(MSC_BULK_IN_EP, pbData, iChunk);
   150ec:	e1a01000 	mov	r1, r0
   150f0:	e0624003 	rsb	r4, r2, r3
   150f4:	e3a00085 	mov	r0, #133	; 0x85
   150f8:	2a000006 	bcs	15118 <HandleDataIn+0x78>
   150fc:	e3540040 	cmp	r4, #64	; 0x40
   15100:	23a04040 	movcs	r4, #64	; 0x40
   15104:	e1a02004 	mov	r2, r4
   15108:	eb000403 	bl	1611c <USBHwEPWrite>
        dwOffset += iChunk;
   1510c:	e5953000 	ldr	r3, [r5]
   15110:	e0833004 	add	r3, r3, r4
   15114:	e5853000 	str	r3, [r5]
    }

    // are we done now?
    if (dwOffset == dwTransferSize)
   15118:	e5952000 	ldr	r2, [r5]
   1511c:	e5973000 	ldr	r3, [r7]
   15120:	e1520003 	cmp	r2, r3
   15124:	1a000005 	bne	15140 <HandleDataIn+0xa0>
    {
        if (dwOffset != CBW.dwCBWDataTransferLength)
   15128:	e5963008 	ldr	r3, [r6, #8]
   1512c:	e1520003 	cmp	r2, r3
        {
            // stall pipe
            DBG("stalling DIN");
            BOTStall();
   15130:	1bffffcb 	blne	15064 <BOTStall>
        }
        // done
        SendCSW(STATUS_PASSED);
   15134:	e3a00000 	mov	r0, #0	; 0x0
    }
}
   15138:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   1513c:	eaffffb2 	b	1500c <SendCSW>
   15140:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   15144:	e12fff1e 	bx	lr
   15148:	40000adc 	ldrmid	r0, [r0], -ip
   1514c:	40000b10 	andmi	r0, r0, r0, lsl fp
   15150:	40000ad8 	ldrmid	r0, [r0], -r8
   15154:	40000ad4 	ldrmid	r0, [r0], -r4

00015158 <MSCBotBulkIn>:


/*************************************************************************
    HandleDataOut
    =============
        Handles data from host-to-device

**************************************************************************/
static void HandleDataOut(void)
{
    int iChunk;

    if (dwOffset < dwTransferSize)
    {
        // get data from host
        iChunk = USBHwEPRead(MSC_BULK_OUT_EP, pbData, dwTransferSize - dwOffset);
        // process data in SCSI layer
        pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
        if (pbData == NULL)
        {
            BOTStall();
            SendCSW(STATUS_FAILED);
            return;
        }
        dwOffset += iChunk;
    }

    // are we done now?
    if (dwOffset == dwTransferSize)
    {
        if (dwOffset != CBW.dwCBWDataTransferLength)
        {
            // stall pipe
            DBG("stalling DOUT");
            BOTStall();
        }
        SendCSW(STATUS_PASSED);
    }
}


/*************************************************************************
    MSCBotBulkOut
    ===============
        Handles the BOT bulk OUT endpoint

    IN      bEP         Endpoint number
            bEPStatus   Endpoint status (indicates NAK, STALL, etc)

**************************************************************************/
void MSCBotBulkOut(U8 bEP, U8 bEPStatus)
{
    int     iLen, iChunk;
    BOOL    fHostIn, fDevIn;

    // ignore events on stalled EP
    if (bEPStatus & EP_STATUS_STALLED)
    {
        return;
    }

    switch (eState)
    {

        case eCBW:
            iLen = USBHwEPRead(bEP, (U8 *)&CBW, sizeof(CBW));

            // check if we got a good CBW
            if (!CheckCBW(&CBW, iLen))
            {
                // see 6.6.1
                USBHwEPStall(MSC_BULK_IN_EP, TRUE);
                USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
                eState = eStalled;
                break;
            }

            DBG("CBW: len=%d, flags=%x, cmd=%x, cmdlen=%d\n",
                    CBW.dwCBWDataTransferLength, CBW.bmCBWFlags, CBW.CBWCB[0], CBW.bCBWCBLength);

            dwOffset = 0;
            dwTransferSize = 0;
            fHostIn = ((CBW.bmCBWFlags & 0x80) != 0);

            // verify request
            pbData = SCSIHandleCmd(CBW.CBWCB, CBW.bCBWCBLength, &iLen, &fDevIn);
            if (pbData == NULL)
            {
                // unknown command
                BOTStall();
                SendCSW(STATUS_FAILED);
                break;
            }

            // rule: if device and host disagree on direction, send CSW with status 2
            if ((iLen > 0) &&
                ((fHostIn && !fDevIn) ||
                (!fHostIn && fDevIn)))
            {
                DBG("Host and device disagree on direction\n");
                BOTStall();
                SendCSW(STATUS_PHASE_ERR);
                break;
            }

            // rule: if D > H, send CSW with status 2
            if (iLen > CBW.dwCBWDataTransferLength)
            {
                DBG("Negative residue\n");
                BOTStall();
                SendCSW(STATUS_PHASE_ERR);
                break;
            }

            dwTransferSize = iLen;
            if ((dwTransferSize == 0) || fDevIn)
            {
                // data from device-to-host
                eState = eDataIn;
                HandleDataIn();
            }
            else
            {
                // data from host-to-device
                eState = eDataOut;
            }
            break;

        case eDataOut:
            HandleDataOut();
            break;

        case eDataIn:
        case eCSW:
            iChunk = USBHwEPRead(bEP, NULL, 0);
            DBG("Phase error in state %d, %d bytes\n", eState, iChunk);
            eState = eCBW;
            break;

        case eStalled:
        // keep stalling
            USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
            break;

        default:
            DBG("Invalid state %d\n", eState);
//            ASSERT(FALSE);
            break;
    }
}


/*************************************************************************
    MSCBotBulkIn
    ============
        Handles the BOT bulk IN endpoint

    IN      bEP         Endpoint number
            bEPStatus   Endpoint status (indicates NAK, STALL, etc)

**************************************************************************/
void MSCBotBulkIn(U8 bEP, U8 bEPStatus)
{
   15158:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    // ignore events on stalled EP
    if (bEPStatus & EP_STATUS_STALLED)
   1515c:	e2114002 	ands	r4, r1, #2	; 0x2
    {
        return;
    }

    switch (eState)
   15160:	e59f504c 	ldr	r5, [pc, #76]	; 151b4 <.text+0x51b4>
   15164:	1a000010 	bne	151ac <MSCBotBulkIn+0x54>
   15168:	e5953000 	ldr	r3, [r5]
   1516c:	e3530003 	cmp	r3, #3	; 0x3
    {

        case eCBW:
        case eDataOut:
        // ignore possibly old ACKs
            break;

        case eDataIn:
            HandleDataIn();
            break;

        case eCSW:
        // wait for an IN token, then send the CSW
            USBHwEPWrite(MSC_BULK_IN_EP, (U8 *)&CSW, 13);
   15170:	e3a00085 	mov	r0, #133	; 0x85
   15174:	e59f103c 	ldr	r1, [pc, #60]	; 151b8 <.text+0x51b8>
   15178:	e3a0200d 	mov	r2, #13	; 0xd
   1517c:	0a000006 	beq	1519c <MSCBotBulkIn+0x44>
   15180:	e3530004 	cmp	r3, #4	; 0x4
            eState = eCBW;
            break;

        case eStalled:
        // keep stalling
            USBHwEPStall(MSC_BULK_IN_EP, TRUE);
   15184:	e3a01001 	mov	r1, #1	; 0x1
   15188:	0a000006 	beq	151a8 <MSCBotBulkIn+0x50>
   1518c:	e3530002 	cmp	r3, #2	; 0x2
   15190:	1a000005 	bne	151ac <MSCBotBulkIn+0x54>
            break;

        default:
            DBG("Invalid state %d\n", eState);
//            ASSERT(FALSE);
            break;
    }
}
   15194:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   15198:	eaffffc0 	b	150a0 <HandleDataIn>
   1519c:	eb0003de 	bl	1611c <USBHwEPWrite>
   151a0:	e5854000 	str	r4, [r5]
   151a4:	ea000000 	b	151ac <MSCBotBulkIn+0x54>
   151a8:	eb0003d3 	bl	160fc <USBHwEPStall>
   151ac:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   151b0:	e12fff1e 	bx	lr
   151b4:	40000b0c 	andmi	r0, r0, ip, lsl #22
   151b8:	40000afc 	strmid	r0, [r0], -ip

000151bc <MSCBotBulkOut>:
   151bc:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   151c0:	e3110002 	tst	r1, #2	; 0x2
   151c4:	e24dd008 	sub	sp, sp, #8	; 0x8
   151c8:	e20000ff 	and	r0, r0, #255	; 0xff
   151cc:	1a000083 	bne	153e0 <.text+0x53e0>
   151d0:	e59f3214 	ldr	r3, [pc, #532]	; 153ec <.text+0x53ec>
   151d4:	e5933000 	ldr	r3, [r3]
   151d8:	e3530004 	cmp	r3, #4	; 0x4
   151dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   151e0:	ea00007e 	b	153e0 <.text+0x53e0>
   151e4:	000151f8 	streqd	r5, [r1], -r8
   151e8:	000152e0 	andeq	r5, r1, r0, ror #5
   151ec:	0001537c 	andeq	r5, r1, ip, ror r3
   151f0:	0001537c 	andeq	r5, r1, ip, ror r3
   151f4:	00015398 	muleq	r1, r8, r3
   151f8:	e59f41f0 	ldr	r4, [pc, #496]	; 153f0 <.text+0x53f0>
   151fc:	e3a02020 	mov	r2, #32	; 0x20
   15200:	e1a01004 	mov	r1, r4
   15204:	eb0003e6 	bl	161a4 <USBHwEPRead>
   15208:	e350001f 	cmp	r0, #31	; 0x1f
   1520c:	e58d0000 	str	r0, [sp]
   15210:	1a00000a 	bne	15240 <.text+0x5240>
   15214:	e5942000 	ldr	r2, [r4]
   15218:	e59f31d4 	ldr	r3, [pc, #468]	; 153f4 <.text+0x53f4>
   1521c:	e1520003 	cmp	r2, r3
   15220:	1a000006 	bne	15240 <.text+0x5240>
   15224:	e5d4e00d 	ldrb	lr, [r4, #13]
   15228:	e35e0000 	cmp	lr, #0	; 0x0
   1522c:	1a000003 	bne	15240 <.text+0x5240>
   15230:	e5d4100e 	ldrb	r1, [r4, #14]
   15234:	e2413001 	sub	r3, r1, #1	; 0x1
   15238:	e353000f 	cmp	r3, #15	; 0xf
   1523c:	9a000059 	bls	153a8 <.text+0x53a8>
   15240:	e3a00085 	mov	r0, #133	; 0x85
   15244:	e3a01001 	mov	r1, #1	; 0x1
   15248:	eb0003ab 	bl	160fc <USBHwEPStall>
   1524c:	e3a00002 	mov	r0, #2	; 0x2
   15250:	e3a01001 	mov	r1, #1	; 0x1
   15254:	eb0003a8 	bl	160fc <USBHwEPStall>
   15258:	e3a02004 	mov	r2, #4	; 0x4
   1525c:	ea00004a 	b	1538c <.text+0x538c>
   15260:	e59d2000 	ldr	r2, [sp]
   15264:	e3520000 	cmp	r2, #0	; 0x0
   15268:	da00000b 	ble	1529c <.text+0x529c>
   1526c:	e3140080 	tst	r4, #128	; 0x80
   15270:	e59d3004 	ldr	r3, [sp, #4]
   15274:	0a000002 	beq	15284 <.text+0x5284>
   15278:	e3530000 	cmp	r3, #0	; 0x0
   1527c:	0a000002 	beq	1528c <.text+0x528c>
   15280:	ea000005 	b	1529c <.text+0x529c>
   15284:	e3530000 	cmp	r3, #0	; 0x0
   15288:	0a000003 	beq	1529c <.text+0x529c>
   1528c:	ebffff74 	bl	15064 <BOTStall>
   15290:	e3a00002 	mov	r0, #2	; 0x2
   15294:	ebffff5c 	bl	1500c <SendCSW>
   15298:	ea000050 	b	153e0 <.text+0x53e0>
   1529c:	e59f314c 	ldr	r3, [pc, #332]	; 153f0 <.text+0x53f0>
   152a0:	e5933008 	ldr	r3, [r3, #8]
   152a4:	e1520003 	cmp	r2, r3
   152a8:	8afffff7 	bhi	1528c <.text+0x528c>
   152ac:	e59f3144 	ldr	r3, [pc, #324]	; 153f8 <.text+0x53f8>
   152b0:	e3520000 	cmp	r2, #0	; 0x0
   152b4:	e5832000 	str	r2, [r3]
   152b8:	0a000003 	beq	152cc <.text+0x52cc>
   152bc:	e59d3004 	ldr	r3, [sp, #4]
   152c0:	e3530000 	cmp	r3, #0	; 0x0
   152c4:	03a02001 	moveq	r2, #1	; 0x1
   152c8:	0a00002f 	beq	1538c <.text+0x538c>
   152cc:	e59f3118 	ldr	r3, [pc, #280]	; 153ec <.text+0x53ec>
   152d0:	e3a02002 	mov	r2, #2	; 0x2
   152d4:	e5832000 	str	r2, [r3]
   152d8:	ebffff70 	bl	150a0 <HandleDataIn>
   152dc:	ea00003f 	b	153e0 <.text+0x53e0>
   152e0:	e59f5114 	ldr	r5, [pc, #276]	; 153fc <.text+0x53fc>
   152e4:	e59f310c 	ldr	r3, [pc, #268]	; 153f8 <.text+0x53f8>
   152e8:	e5951000 	ldr	r1, [r5]
   152ec:	e5932000 	ldr	r2, [r3]
   152f0:	e1510002 	cmp	r1, r2
   152f4:	2a000014 	bcs	1534c <.text+0x534c>
   152f8:	e59f4100 	ldr	r4, [pc, #256]	; 15400 <.text+0x5400>
   152fc:	e0612002 	rsb	r2, r1, r2
   15300:	e3a00002 	mov	r0, #2	; 0x2
   15304:	e5941000 	ldr	r1, [r4]
   15308:	eb0003a5 	bl	161a4 <USBHwEPRead>
   1530c:	e1a06000 	mov	r6, r0
   15310:	e59f00d8 	ldr	r0, [pc, #216]	; 153f0 <.text+0x53f0>
   15314:	e5953000 	ldr	r3, [r5]
   15318:	e5d0100e 	ldrb	r1, [r0, #14]
   1531c:	e5942000 	ldr	r2, [r4]
   15320:	e280000f 	add	r0, r0, #15	; 0xf
   15324:	eb000090 	bl	1556c <SCSIHandleData>
   15328:	e3500000 	cmp	r0, #0	; 0x0
   1532c:	15953000 	ldrne	r3, [r5]
   15330:	10833006 	addne	r3, r3, r6
   15334:	e5840000 	str	r0, [r4]
   15338:	15853000 	strne	r3, [r5]
   1533c:	1a000002 	bne	1534c <.text+0x534c>
   15340:	ebffff47 	bl	15064 <BOTStall>
   15344:	e3a00001 	mov	r0, #1	; 0x1
   15348:	eaffffd1 	b	15294 <.text+0x5294>
   1534c:	e59f30a8 	ldr	r3, [pc, #168]	; 153fc <.text+0x53fc>
   15350:	e5932000 	ldr	r2, [r3]
   15354:	e59f309c 	ldr	r3, [pc, #156]	; 153f8 <.text+0x53f8>
   15358:	e5933000 	ldr	r3, [r3]
   1535c:	e1520003 	cmp	r2, r3
   15360:	1a00001e 	bne	153e0 <.text+0x53e0>
   15364:	e59f3084 	ldr	r3, [pc, #132]	; 153f0 <.text+0x53f0>
   15368:	e5933008 	ldr	r3, [r3, #8]
   1536c:	e1520003 	cmp	r2, r3
   15370:	1bffff3b 	blne	15064 <BOTStall>
   15374:	e3a00000 	mov	r0, #0	; 0x0
   15378:	eaffffc5 	b	15294 <.text+0x5294>
   1537c:	e3a01000 	mov	r1, #0	; 0x0
   15380:	e1a02001 	mov	r2, r1
   15384:	eb000386 	bl	161a4 <USBHwEPRead>
   15388:	e3a02000 	mov	r2, #0	; 0x0
   1538c:	e59f3058 	ldr	r3, [pc, #88]	; 153ec <.text+0x53ec>
   15390:	e5832000 	str	r2, [r3]
   15394:	ea000011 	b	153e0 <.text+0x53e0>
   15398:	e3a00002 	mov	r0, #2	; 0x2
   1539c:	e3a01001 	mov	r1, #1	; 0x1
   153a0:	eb000355 	bl	160fc <USBHwEPStall>
   153a4:	ea00000d 	b	153e0 <.text+0x53e0>
   153a8:	e59fc048 	ldr	ip, [pc, #72]	; 153f8 <.text+0x53f8>
   153ac:	e58ce000 	str	lr, [ip]
   153b0:	e59fc044 	ldr	ip, [pc, #68]	; 153fc <.text+0x53fc>
   153b4:	e284000f 	add	r0, r4, #15	; 0xf
   153b8:	e28d3004 	add	r3, sp, #4	; 0x4
   153bc:	e1a0200d 	mov	r2, sp
   153c0:	e58ce000 	str	lr, [ip]
   153c4:	e5d4400c 	ldrb	r4, [r4, #12]
   153c8:	eb00001a 	bl	15438 <SCSIHandleCmd>
   153cc:	e59f302c 	ldr	r3, [pc, #44]	; 15400 <.text+0x5400>
   153d0:	e3500000 	cmp	r0, #0	; 0x0
   153d4:	e5830000 	str	r0, [r3]
   153d8:	1affffa0 	bne	15260 <.text+0x5260>
   153dc:	eaffffd7 	b	15340 <.text+0x5340>
   153e0:	e28dd008 	add	sp, sp, #8	; 0x8
   153e4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   153e8:	e12fff1e 	bx	lr
   153ec:	40000b0c 	andmi	r0, r0, ip, lsl #22
   153f0:	40000adc 	ldrmid	r0, [r0], -ip
   153f4:	43425355 	movtmi	r5, #9045	; 0x2355
   153f8:	40000ad4 	ldrmid	r0, [r0], -r4
   153fc:	40000ad8 	ldrmid	r0, [r0], -r8
   15400:	40000b10 	andmi	r0, r0, r0, lsl fp

00015404 <MSCBotReset>:
   15404:	e59f3014 	ldr	r3, [pc, #20]	; 15420 <.text+0x5420>
   15408:	e3a02000 	mov	r2, #0	; 0x0
   1540c:	e52de004 	str	lr, [sp, #-4]!
   15410:	e5832000 	str	r2, [r3]
   15414:	eb000002 	bl	15424 <SCSIReset>
   15418:	e49de004 	ldr	lr, [sp], #4
   1541c:	e12fff1e 	bx	lr
   15420:	40000b0c 	andmi	r0, r0, ip, lsl #22

00015424 <SCSIReset>:

**************************************************************************/
void SCSIReset(void)
{
    dwSense = 0;
   15424:	e59f3008 	ldr	r3, [pc, #8]	; 15434 <.text+0x5434>
   15428:	e3a02000 	mov	r2, #0	; 0x0
   1542c:	e5832000 	str	r2, [r3]
}
   15430:	e12fff1e 	bx	lr
   15434:	40000b14 	andmi	r0, r0, r4, lsl fp

00015438 <SCSIHandleCmd>:


/*************************************************************************
    SCSIHandleCmd
    =============
        Verifies a SCSI CDB and indicates the direction and amount of data
        that the device wants to transfer.

    If this call fails, a sense code is set in dwSense.

    IN      pbCDB       Command data block
            iCDBLen     Command data block len
    OUT     *piRspLen   Length of intended response data:
            *pfDevIn    TRUE if data is transferred from device-to-host

    Returns a pointer to the data exchange buffer if successful,
    return NULL otherwise.
**************************************************************************/
U8 * SCSIHandleCmd(U8 *pbCDB, int iCDBLen, int *piRspLen, BOOL *pfDevIn)
{
   15438:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1543c:	e1a04000 	mov	r4, r0
   15440:	e24dd008 	sub	sp, sp, #8	; 0x8
    int     i;
    TCDB6   *pCDB;
    U32     dwLen, dwLBA;

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   15444:	e3a08008 	mov	r8, #8	; 0x8
   15448:	e1a06001 	mov	r6, r1
   1544c:	e1a05002 	mov	r5, r2
   15450:	e1a0000d 	mov	r0, sp
   15454:	e1a02008 	mov	r2, r8
   15458:	e1a01004 	mov	r1, r4
   1545c:	e1a07003 	mov	r7, r3
   15460:	eb0006f4 	bl	17038 <memcpy>
	
    // default direction is from device to host
    *pfDevIn = TRUE;

    switch (pCDB->bOperationCode)
   15464:	e5dd2000 	ldrb	r2, [sp]
   15468:	e3a03001 	mov	r3, #1	; 0x1
   1546c:	e3520012 	cmp	r2, #18	; 0x12
   15470:	e5873000 	str	r3, [r7]
   15474:	0a000013 	beq	154c8 <SCSIHandleCmd+0x90>
   15478:	8a000006 	bhi	15498 <SCSIHandleCmd+0x60>
   1547c:	e3520000 	cmp	r2, #0	; 0x0
    {

        // test unit ready (6)
        case SCSI_CMD_TEST_UNIT_READY:
            DBG("TEST UNIT READY\n");
            *piRspLen = 0;
   15480:	059f00dc 	ldreq	r0, [pc, #220]	; 15564 <.text+0x5564>
   15484:	05852000 	streq	r2, [r5]
   15488:	0a000032 	beq	15558 <SCSIHandleCmd+0x120>
   1548c:	e3520003 	cmp	r2, #3	; 0x3
   15490:	1a000028 	bne	15538 <SCSIHandleCmd+0x100>
   15494:	ea000006 	b	154b4 <SCSIHandleCmd+0x7c>
   15498:	e3520028 	cmp	r2, #40	; 0x28
   1549c:	0a000012 	beq	154ec <SCSIHandleCmd+0xb4>
   154a0:	e352002a 	cmp	r2, #42	; 0x2a
   154a4:	0a000018 	beq	1550c <SCSIHandleCmd+0xd4>
   154a8:	e3520025 	cmp	r2, #37	; 0x25
   154ac:	1a000021 	bne	15538 <SCSIHandleCmd+0x100>
   154b0:	ea00000a 	b	154e0 <SCSIHandleCmd+0xa8>
            break;

        // request sense (6)
        case SCSI_CMD_REQUEST_SENSE:
            DBG("REQUEST SENSE (%06X)\n", dwSense);
            // check params
            *piRspLen = MIN(18, pCDB->bLength);
   154b4:	e5dd3004 	ldrb	r3, [sp, #4]
   154b8:	e59f00a4 	ldr	r0, [pc, #164]	; 15564 <.text+0x5564>
   154bc:	e3530012 	cmp	r3, #18	; 0x12
   154c0:	23a03012 	movcs	r3, #18	; 0x12
   154c4:	ea000003 	b	154d8 <SCSIHandleCmd+0xa0>
            break;

        // inquiry (6)
        case SCSI_CMD_INQUIRY:
            DBG("INQUIRY\n");
            // see SPC20r20, 4.3.4.6
            *piRspLen = MIN(36, pCDB->bLength);
   154c8:	e5dd3004 	ldrb	r3, [sp, #4]
   154cc:	e59f0090 	ldr	r0, [pc, #144]	; 15564 <.text+0x5564>
   154d0:	e3530024 	cmp	r3, #36	; 0x24
   154d4:	23a03024 	movcs	r3, #36	; 0x24
   154d8:	e5853000 	str	r3, [r5]
   154dc:	ea00001d 	b	15558 <SCSIHandleCmd+0x120>
            break;

        // read capacity (10)
        case SCSI_CMD_READ_CAPACITY:
            DBG("READ CAPACITY\n");
            *piRspLen = 8;
   154e0:	e59f007c 	ldr	r0, [pc, #124]	; 15564 <.text+0x5564>
   154e4:	e5858000 	str	r8, [r5]
   154e8:	ea00001a 	b	15558 <SCSIHandleCmd+0x120>
            break;

        // read (10)
        case SCSI_CMD_READ_10:
            if (iCDBLen != 10)
   154ec:	e356000a 	cmp	r6, #10	; 0xa
   154f0:	1a000017 	bne	15554 <SCSIHandleCmd+0x11c>
            {
                return NULL;
            }
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
            dwLen = (pbCDB[7] << 8) | pbCDB[8];
            DBG("READ10, LBA=%d, len=%d\n", dwLBA, dwLen);
            *piRspLen = dwLen * BLOCKSIZE;
   154f4:	e5d43008 	ldrb	r3, [r4, #8]
   154f8:	e5d42007 	ldrb	r2, [r4, #7]
   154fc:	e59f0060 	ldr	r0, [pc, #96]	; 15564 <.text+0x5564>
   15500:	e1833402 	orr	r3, r3, r2, lsl #8
   15504:	e1a03483 	mov	r3, r3, lsl #9
   15508:	eafffff2 	b	154d8 <SCSIHandleCmd+0xa0>
            break;

        // write (10)
        case SCSI_CMD_WRITE_10:
            if (iCDBLen != 10)
   1550c:	e356000a 	cmp	r6, #10	; 0xa
   15510:	1a00000f 	bne	15554 <SCSIHandleCmd+0x11c>
            {
                return NULL;
            }
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
            dwLen = (pbCDB[7] << 8) | pbCDB[8];
            DBG("WRITE10, LBA=%d, len=%d\n", dwLBA, dwLen);
            *piRspLen = dwLen * BLOCKSIZE;
   15514:	e5d43008 	ldrb	r3, [r4, #8]
   15518:	e5d42007 	ldrb	r2, [r4, #7]
   1551c:	e1833402 	orr	r3, r3, r2, lsl #8
   15520:	e1a03483 	mov	r3, r3, lsl #9
            *pfDevIn = FALSE;
   15524:	e59f0038 	ldr	r0, [pc, #56]	; 15564 <.text+0x5564>
   15528:	e5853000 	str	r3, [r5]
   1552c:	e3a03000 	mov	r3, #0	; 0x0
   15530:	e5873000 	str	r3, [r7]
   15534:	ea000007 	b	15558 <SCSIHandleCmd+0x120>
            break;

        default:
            DBG("Unhandled SCSI: ");
            for (i = 0; i < iCDBLen; i++)
            {
                DBG(" %02X", pbCDB[i]);
            }
            DBG("\n");
            // unsupported command
            dwSense = INVALID_CMD_OPCODE;
            *piRspLen = 0;
   15538:	e3a01000 	mov	r1, #0	; 0x0
   1553c:	e59f3024 	ldr	r3, [pc, #36]	; 15568 <.text+0x5568>
   15540:	e3a02a52 	mov	r2, #335872	; 0x52000
   15544:	e1a00001 	mov	r0, r1
   15548:	e5832000 	str	r2, [r3]
   1554c:	e5851000 	str	r1, [r5]
   15550:	ea000000 	b	15558 <SCSIHandleCmd+0x120>
            return NULL;
   15554:	e3a00000 	mov	r0, #0	; 0x0
        }


    return abBlockBuf;
}
   15558:	e28dd008 	add	sp, sp, #8	; 0x8
   1555c:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   15560:	e12fff1e 	bx	lr
   15564:	40000b18 	andmi	r0, r0, r8, lsl fp
   15568:	40000b14 	andmi	r0, r0, r4, lsl fp

0001556c <SCSIHandleData>:


/*************************************************************************
    SCSIHandleData
    ==============
        Handles a block of SCSI data.

    IN      pbCDB       Command data block
            iCDBLen     Command data block len
    IN/OUT  pbData      Data buffer
    IN      dwOffset    Offset in data

    Returns a pointer to the next data to be exchanged if successful,
    returns NULL otherwise.
**************************************************************************/
U8 * SCSIHandleData(U8 *pbCDB, int iCDBLen, U8 *pbData, U32 dwOffset)
{
   1556c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   15570:	e1a04000 	mov	r4, r0
   15574:	e24dd00c 	sub	sp, sp, #12	; 0xc
   15578:	e1a05002 	mov	r5, r2
    TCDB6   *pCDB;
    U32     dwLBA;
    U32     dwBufPos, dwBlockNr;
    U32     dwNumBlocks, dwMaxBlock;

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   1557c:	e1a0000d 	mov	r0, sp
   15580:	e1a01004 	mov	r1, r4
   15584:	e3a02008 	mov	r2, #8	; 0x8
   15588:	e1a06003 	mov	r6, r3
   1558c:	eb0006a9 	bl	17038 <memcpy>
	
    switch (pCDB->bOperationCode)
   15590:	e5dd3000 	ldrb	r3, [sp]
   15594:	e3530012 	cmp	r3, #18	; 0x12
   15598:	0a000022 	beq	15628 <SCSIHandleData+0xbc>
   1559c:	8a000004 	bhi	155b4 <SCSIHandleData+0x48>
   155a0:	e3530000 	cmp	r3, #0	; 0x0
   155a4:	0a000009 	beq	155d0 <SCSIHandleData+0x64>
   155a8:	e3530003 	cmp	r3, #3	; 0x3
   155ac:	1a000065 	bne	15748 <SCSIHandleData+0x1dc>
   155b0:	ea00000d 	b	155ec <SCSIHandleData+0x80>
   155b4:	e3530028 	cmp	r3, #40	; 0x28
   155b8:	0a000034 	beq	15690 <SCSIHandleData+0x124>
   155bc:	e353002a 	cmp	r3, #42	; 0x2a
   155c0:	0a000046 	beq	156e0 <SCSIHandleData+0x174>
   155c4:	e3530025 	cmp	r3, #37	; 0x25
   155c8:	1a00005e 	bne	15748 <SCSIHandleData+0x1dc>
   155cc:	ea00001b 	b	15640 <SCSIHandleData+0xd4>
    {

        // test unit ready
        case 0x00:
            if (dwSense != 0)
   155d0:	e59f3190 	ldr	r3, [pc, #400]	; 15768 <.text+0x5768>
   155d4:	e5932000 	ldr	r2, [r3]
   155d8:	e59f318c 	ldr	r3, [pc, #396]	; 1576c <.text+0x576c>
   155dc:	e3520000 	cmp	r2, #0	; 0x0
   155e0:	01a0e003 	moveq	lr, r3
   155e4:	13a0e000 	movne	lr, #0	; 0x0
   155e8:	ea00005a 	b	15758 <SCSIHandleData+0x1ec>
            {
                return NULL;
            }
            break;

        // request sense
        case SCSI_CMD_REQUEST_SENSE:
            memcpy(pbData, abSense, 18);
   155ec:	e59f117c 	ldr	r1, [pc, #380]	; 15770 <.text+0x5770>
   155f0:	e3a02012 	mov	r2, #18	; 0x12
   155f4:	e1a00005 	mov	r0, r5
   155f8:	eb00068e 	bl	17038 <memcpy>
            // fill in KEY/ASC/ASCQ
            pbData[2] = (dwSense >> 16) & 0xFF;
   155fc:	e59f0164 	ldr	r0, [pc, #356]	; 15768 <.text+0x5768>
   15600:	e5903000 	ldr	r3, [r0]
            pbData[12] = (dwSense >> 8) & 0xFF;
            pbData[13] = (dwSense >> 0) & 0xFF;
            // reset sense data
            dwSense = 0;
   15604:	e59fe160 	ldr	lr, [pc, #352]	; 1576c <.text+0x576c>
   15608:	e1a02823 	mov	r2, r3, lsr #16
   1560c:	e1a01423 	mov	r1, r3, lsr #8
   15610:	e5c5300d 	strb	r3, [r5, #13]
   15614:	e3a03000 	mov	r3, #0	; 0x0
   15618:	e5c52002 	strb	r2, [r5, #2]
   1561c:	e5c5100c 	strb	r1, [r5, #12]
   15620:	e5803000 	str	r3, [r0]
   15624:	ea00004b 	b	15758 <SCSIHandleData+0x1ec>
            break;

        // inquiry
        case SCSI_CMD_INQUIRY:
            memcpy(pbData, abInquiry, sizeof(abInquiry));
   15628:	e1a00005 	mov	r0, r5
   1562c:	e59f1140 	ldr	r1, [pc, #320]	; 15774 <.text+0x5774>
   15630:	e3a02024 	mov	r2, #36	; 0x24
   15634:	eb00067f 	bl	17038 <memcpy>
   15638:	e59fe12c 	ldr	lr, [pc, #300]	; 1576c <.text+0x576c>
   1563c:	ea000045 	b	15758 <SCSIHandleData+0x1ec>
            break;

        // read capacity
        case SCSI_CMD_READ_CAPACITY:
        // get size of drive (bytes)
            BlockDevGetSize(&dwNumBlocks);
   15640:	e28d0008 	add	r0, sp, #8	; 0x8
   15644:	eb000088 	bl	1586c <BlockDevGetSize>
            // calculate highest LBA
            dwMaxBlock = (dwNumBlocks - 1) / 512;
   15648:	e59d3008 	ldr	r3, [sp, #8]
   1564c:	e2433001 	sub	r3, r3, #1	; 0x1
   15650:	e1a004a3 	mov	r0, r3, lsr #9

            pbData[0] = (dwMaxBlock >> 24) & 0xFF;
            pbData[1] = (dwMaxBlock >> 16) & 0xFF;
            pbData[2] = (dwMaxBlock >> 8) & 0xFF;
   15654:	e1a0c8a3 	mov	ip, r3, lsr #17
            pbData[3] = (dwMaxBlock >> 0) & 0xFF;
            pbData[4] = (BLOCKSIZE >> 24) & 0xFF;
            pbData[5] = (BLOCKSIZE >> 16) & 0xFF;
            pbData[6] = (BLOCKSIZE >> 8) & 0xFF;
            pbData[7] = (BLOCKSIZE >> 0) & 0xFF;
   15658:	e59fe10c 	ldr	lr, [pc, #268]	; 1576c <.text+0x576c>
   1565c:	e1a03ca3 	mov	r3, r3, lsr #25
   15660:	e3a02000 	mov	r2, #0	; 0x0
   15664:	e1a01c20 	mov	r1, r0, lsr #24
   15668:	e5c53001 	strb	r3, [r5, #1]
   1566c:	e3a03002 	mov	r3, #2	; 0x2
   15670:	e5c52007 	strb	r2, [r5, #7]
   15674:	e5c51000 	strb	r1, [r5]
   15678:	e5c5c002 	strb	ip, [r5, #2]
   1567c:	e5c50003 	strb	r0, [r5, #3]
   15680:	e5c53006 	strb	r3, [r5, #6]
   15684:	e5c52004 	strb	r2, [r5, #4]
   15688:	e5c52005 	strb	r2, [r5, #5]
   1568c:	ea000031 	b	15758 <SCSIHandleData+0x1ec>
            break;

        // read10
        case SCSI_CMD_READ_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);

            // copy data from block buffer
            dwBufPos = (dwOffset & (BLOCKSIZE - 1));
   15690:	e1a05b86 	mov	r5, r6, lsl #23
   15694:	e1a05ba5 	mov	r5, r5, lsr #23
            if (dwBufPos == 0)
   15698:	e3550000 	cmp	r5, #0	; 0x0
   1569c:	e5d42005 	ldrb	r2, [r4, #5]
   156a0:	e5d43002 	ldrb	r3, [r4, #2]
   156a4:	e5d40003 	ldrb	r0, [r4, #3]
   156a8:	e5d41004 	ldrb	r1, [r4, #4]
   156ac:	1a000022 	bne	1573c <SCSIHandleData+0x1d0>
            {
                // read new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("R");
                if (BlockDevRead(dwBlockNr, abBlockBuf) < 0)
   156b0:	e1a00800 	mov	r0, r0, lsl #16
   156b4:	e1800c03 	orr	r0, r0, r3, lsl #24
   156b8:	e1800002 	orr	r0, r0, r2
   156bc:	e1800401 	orr	r0, r0, r1, lsl #8
   156c0:	e08004a6 	add	r0, r0, r6, lsr #9
   156c4:	e59f10a0 	ldr	r1, [pc, #160]	; 1576c <.text+0x576c>
   156c8:	eb0000d2 	bl	15a18 <BlockDevRead>
   156cc:	e3500000 	cmp	r0, #0	; 0x0
                {
                    dwSense = READ_ERROR;
   156d0:	b1a0e005 	movlt	lr, r5
   156d4:	b59f209c 	ldrlt	r2, [pc, #156]	; 15778 <.text+0x5778>
   156d8:	ba000014 	blt	15730 <SCSIHandleData+0x1c4>
   156dc:	ea000016 	b	1573c <SCSIHandleData+0x1d0>
                    DBG("BlockDevRead failed\n");
                    return NULL;
                }
            }
            // return pointer to data
            return abBlockBuf + dwBufPos;

            // write10
            case SCSI_CMD_WRITE_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);

            // copy data to block buffer
            dwBufPos = ((dwOffset + 64) & (BLOCKSIZE - 1));
   156e0:	e2863040 	add	r3, r6, #64	; 0x40
   156e4:	e1a05b83 	mov	r5, r3, lsl #23
   156e8:	e1a05ba5 	mov	r5, r5, lsr #23
            if (dwBufPos == 0)
   156ec:	e3550000 	cmp	r5, #0	; 0x0
   156f0:	e5d42005 	ldrb	r2, [r4, #5]
   156f4:	e5d43002 	ldrb	r3, [r4, #2]
   156f8:	e5d40003 	ldrb	r0, [r4, #3]
   156fc:	e5d41004 	ldrb	r1, [r4, #4]
   15700:	1a00000d 	bne	1573c <SCSIHandleData+0x1d0>
            {
                // write new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("W");
                if (BlockDevWrite(dwBlockNr, abBlockBuf) < 0)
   15704:	e1a00800 	mov	r0, r0, lsl #16
   15708:	e1800c03 	orr	r0, r0, r3, lsl #24
   1570c:	e1800002 	orr	r0, r0, r2
   15710:	e1800401 	orr	r0, r0, r1, lsl #8
   15714:	e08004a6 	add	r0, r0, r6, lsr #9
   15718:	e59f104c 	ldr	r1, [pc, #76]	; 1576c <.text+0x576c>
   1571c:	eb000039 	bl	15808 <BlockDevWrite>
   15720:	e3500000 	cmp	r0, #0	; 0x0
   15724:	aa000004 	bge	1573c <SCSIHandleData+0x1d0>
                {
                    dwSense = WRITE_ERROR;
   15728:	e1a0e005 	mov	lr, r5
   1572c:	e3a02bc3 	mov	r2, #199680	; 0x30c00
   15730:	e59f3030 	ldr	r3, [pc, #48]	; 15768 <.text+0x5768>
   15734:	e5832000 	str	r2, [r3]
   15738:	ea000006 	b	15758 <SCSIHandleData+0x1ec>
                    DBG("BlockDevWrite failed\n");
                    return NULL;
                }
            }
            // return pointer to next data
            return abBlockBuf + dwBufPos;
   1573c:	e59f3028 	ldr	r3, [pc, #40]	; 1576c <.text+0x576c>
   15740:	e085e003 	add	lr, r5, r3
   15744:	ea000003 	b	15758 <SCSIHandleData+0x1ec>

            default:
            // unsupported command
            dwSense = INVALID_CMD_OPCODE;
   15748:	e59f3018 	ldr	r3, [pc, #24]	; 15768 <.text+0x5768>
   1574c:	e3a02a52 	mov	r2, #335872	; 0x52000
   15750:	e5832000 	str	r2, [r3]
   15754:	e3a0e000 	mov	lr, #0	; 0x0
            return NULL;
        }

    // default: return pointer to start of block buffer
    return abBlockBuf;
}
   15758:	e1a0000e 	mov	r0, lr
   1575c:	e28dd00c 	add	sp, sp, #12	; 0xc
   15760:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   15764:	e12fff1e 	bx	lr
   15768:	40000b14 	andmi	r0, r0, r4, lsl fp
   1576c:	40000b18 	andmi	r0, r0, r8, lsl fp
   15770:	0001db5c 	andeq	sp, r1, ip, asr fp
   15774:	0001db6e 	andeq	sp, r1, lr, ror #22
   15778:	00031100 	andeq	r1, r3, r0, lsl #2

0001577c <Resp8b>:

/*****************************************************************************/

static U8 Resp8b(void)
{
   1577c:	e92d4010 	stmdb	sp!, {r4, lr}
   15780:	e3a04000 	mov	r4, #0	; 0x0
    U8 i;
    U8 resp;

    /* Respone will come after 1 - 8 pings */
    for (i = 0; i < 8; i++)
    {
        resp = SPISend(0xff);
   15784:	e3a000ff 	mov	r0, #255	; 0xff
   15788:	eb000146 	bl	15ca8 <SPISend>
   1578c:	e2843001 	add	r3, r4, #1	; 0x1
        if (resp != 0xff)
   15790:	e35000ff 	cmp	r0, #255	; 0xff
   15794:	e20340ff 	and	r4, r3, #255	; 0xff
   15798:	1a000001 	bne	157a4 <Resp8b+0x28>
   1579c:	e3540008 	cmp	r4, #8	; 0x8
   157a0:	1afffff7 	bne	15784 <Resp8b+0x8>
        {
            return resp;
        }
    }

    return resp;
}
   157a4:	e8bd4010 	ldmia	sp!, {r4, lr}
   157a8:	e12fff1e 	bx	lr

000157ac <Command>:
   157ac:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   157b0:	e1a03001 	mov	r3, r1
   157b4:	e24dd008 	sub	sp, sp, #8	; 0x8
   157b8:	e3804040 	orr	r4, r0, #64	; 0x40
   157bc:	e3e05000 	mvn	r5, #0	; 0x0
   157c0:	e1a02c21 	mov	r2, r1, lsr #24
   157c4:	e1a0c821 	mov	ip, r1, lsr #16
   157c8:	e1a0e421 	mov	lr, r1, lsr #8
   157cc:	e5cd3005 	strb	r3, [sp, #5]
   157d0:	e1a0000d 	mov	r0, sp
   157d4:	e3e0306a 	mvn	r3, #106	; 0x6a
   157d8:	e3a01008 	mov	r1, #8	; 0x8
   157dc:	e5cd4001 	strb	r4, [sp, #1]
   157e0:	e5cd2002 	strb	r2, [sp, #2]
   157e4:	e5cdc003 	strb	ip, [sp, #3]
   157e8:	e5cde004 	strb	lr, [sp, #4]
   157ec:	e5cd3006 	strb	r3, [sp, #6]
   157f0:	e5cd5007 	strb	r5, [sp, #7]
   157f4:	e5cd5000 	strb	r5, [sp]
   157f8:	eb00013e 	bl	15cf8 <SPISendN>
   157fc:	e28dd008 	add	sp, sp, #8	; 0x8
   15800:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   15804:	e12fff1e 	bx	lr

00015808 <BlockDevWrite>:

/*****************************************************************************/

static void Resp8bError(U8 value)
{
    switch (value)
    {
        case 0x40:  rprintf("Argument out of bounds.\n");               break;
        case 0x20:  rprintf("Address out of bounds.\n");                break;
        case 0x10:  rprintf("Error during erase sequence.\n");          break;
        case 0x08:  rprintf("CRC failed.\n");                           break;
        case 0x04:  rprintf("Illegal command.\n");                      break;
        case 0x02:  rprintf("Erase reset (see SanDisk docs p5-13).\n"); break;
//        case 0x01:  rprintf("Card is initialising.\n");                 break;
        case 0x01:  rprintf(".");                 break;
            default:
            rprintf("Unknown error 0x%x (see SanDisk docs p5-13).\n", value);
            break;
    }
}


/* ****************************************************************************
 calculates size of card from CSD
 (extension by Martin Thomas, inspired by code from Holger Klabunde)
 */
int BlockDevGetSize(U32 *pdwDriveSize)
{
    U8 cardresp, i, by;
    U8 iob[16];
    U16 c_size, c_size_mult, read_bl_len;

    Command(CMD_READCSD, 0);
    do
    {
        cardresp = Resp8b();
    }
    while (cardresp != 0xFE);

    rprintf("CSD:");
    for (i = 0; i < 16; i++)
    {
        iob[i] = SPISend(0xFF);
        rprintf(" %02x", iob[i]);
    }
    rprintf("\n");

    SPISend(0xff);
    SPISend(0xff);

    c_size = iob[6] & 0x03;     // bits 1..0
    c_size <<= 10;
    c_size += (U16) iob[7] << 2;
    c_size += iob[8] >> 6;

    by = iob[5] & 0x0F;
    read_bl_len = 1 << by;

    by = iob[9] & 0x03;
    by <<= 1;
    by += iob[10] >> 7;

    c_size_mult = 1 << (2 + by);

    *pdwDriveSize = (U32) (c_size + 1) * (U32) c_size_mult *(U32) read_bl_len;

    return 0;
}

/*****************************************************************************/

static U16 Resp16b(void)
{
    U16 resp;

    resp = (Resp8b() << 8) & 0xff00;
    resp |= SPISend(0xff);

    return resp;
}

/*****************************************************************************/

static int State(void)
{
    U16 value;

    Command(CMD_SENDSTATUS, 0);
    value = Resp16b();

    switch (value)
    {
        case 0x0000: return 1;
        case 0x0001: rprintf("Card is Locked.\n");                                                  break;
        case 0x0002: rprintf("WP Erase Skip, Lock/Unlock Cmd Failed.\n");                           break;
        case 0x0004: rprintf("General / Unknown error -- card broken?.\n");                         break;
        case 0x0008: rprintf("Internal card controller error.\n");                                  break;
        case 0x0010: rprintf("Card internal ECC was applied, but failed to correct the data.\n");   break;
        case 0x0020: rprintf("Write protect violation.\n");                                         break;
        case 0x0040: rprintf("An invalid selection, sectors for erase.\n");                         break;
        case 0x0080: rprintf("Out of Range, CSD_Overwrite.\n");                                     break;
            default:
            if (value > 0x00FF)
            {
                Resp8bError((U8) (value >> 8));
            }
            else
            {
                rprintf("Unknown error: 0x%x (see SanDisk docs p5-14).\n", value);
            }
            break;
    }
    return -1;
}

/*****************************************************************************/


int BlockDevInit(void)
{
    int i;
    U8 resp;

    SPIInit();              /* init at low speed */

    /* Try to send reset command up to 100 times */
    i = 100;
    do
    {
        Command(CMD_GOIDLESTATE, 0);
        resp = Resp8b();
    }
    while (resp != 1 && i--);

    if (resp != 1)
    {
        if (resp == 0xff)
        {
            rprintf("resp=0xff\n");
            return -1;
        }
        else
        {
            Resp8bError(resp);
            rprintf("resp!=0xff\n");
            return -2;
        }
    }

    /* Wait till card is ready initialising (returns 0 on CMD_1) */
    /* Try up to 32000 times. */
    i = 32000;
    do
    {
        Command(CMD_SENDOPCOND, 0);

        resp = Resp8b();
        if (resp != 0)
        {
            Resp8bError(resp);
        }
    }
    while (resp == 1 && i--);

    if (resp != 0)
    {
        Resp8bError(resp);
        return -3;
    }

    /* increase speed after init */
    SPISetSpeed(SPI_PRESCALE_MIN);

    if (State() < 0)
    {
        rprintf("Card didn't return the ready state, breaking up...\n");
        return -2;
    }

    rprintf("SD Init done...\n");

    return 0;
}

/*****************************************************************************/



/*****************************************************************************/


/*****************************************************************************/

/* ****************************************************************************
 * WAIT ?? -- FIXME
 * CMD_WRITE
 * WAIT
 * CARD RESP
 * WAIT
 * DATA BLOCK OUT
 *      START BLOCK
 *      DATA
 *      CHKS (2B)
 * BUSY...
 */

int BlockDevWrite(U32 dwAddress, U8 * pbBuf)
{
    U32 place;
    U16 t = 0;

    place = 512 * dwAddress;
    Command(CMD_WRITE, place);
   15808:	e1a00480 	mov	r0, r0, lsl #9
   1580c:	e92d4010 	stmdb	sp!, {r4, lr}
   15810:	e1a04001 	mov	r4, r1
   15814:	e1a01000 	mov	r1, r0
   15818:	e3a00018 	mov	r0, #24	; 0x18
   1581c:	ebffffe2 	bl	157ac <Command>

    Resp8b();               /* Card response */
   15820:	ebffffd5 	bl	1577c <Resp8b>

    SPISend(0xfe);          /* Start block */
   15824:	e3a000fe 	mov	r0, #254	; 0xfe
   15828:	eb00011e 	bl	15ca8 <SPISend>
    SPISendN(pbBuf, 512);
   1582c:	e3a01c02 	mov	r1, #512	; 0x200
   15830:	e1a00004 	mov	r0, r4
   15834:	eb00012f 	bl	15cf8 <SPISendN>
    SPISend(0xff);          /* Checksum part 1 */
   15838:	e3a000ff 	mov	r0, #255	; 0xff
   1583c:	eb000119 	bl	15ca8 <SPISend>
    SPISend(0xff);          /* Checksum part 2 */
   15840:	e3a000ff 	mov	r0, #255	; 0xff
   15844:	eb000117 	bl	15ca8 <SPISend>

    SPISend(0xff);
   15848:	e3a000ff 	mov	r0, #255	; 0xff
   1584c:	eb000115 	bl	15ca8 <SPISend>

    while (SPISend(0xff) != 0xff)
   15850:	e3a000ff 	mov	r0, #255	; 0xff
   15854:	eb000113 	bl	15ca8 <SPISend>
   15858:	e35000ff 	cmp	r0, #255	; 0xff
   1585c:	1afffffb 	bne	15850 <BlockDevWrite+0x48>
    {
        t++;
    }

    return 0;
}
   15860:	e3a00000 	mov	r0, #0	; 0x0
   15864:	e8bd4010 	ldmia	sp!, {r4, lr}
   15868:	e12fff1e 	bx	lr

0001586c <BlockDevGetSize>:
   1586c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   15870:	e3a01000 	mov	r1, #0	; 0x0
   15874:	e1a05000 	mov	r5, r0
   15878:	e24dd010 	sub	sp, sp, #16	; 0x10
   1587c:	e3a00009 	mov	r0, #9	; 0x9
   15880:	ebffffc9 	bl	157ac <Command>
   15884:	ebffffbc 	bl	1577c <Resp8b>
   15888:	e35000fe 	cmp	r0, #254	; 0xfe
   1588c:	1afffffc 	bne	15884 <BlockDevGetSize+0x18>
   15890:	e59f00bc 	ldr	r0, [pc, #188]	; 15954 <.text+0x5954>
   15894:	ebffefdf 	bl	11818 <rprintf>
   15898:	e3a04000 	mov	r4, #0	; 0x0
   1589c:	e3a000ff 	mov	r0, #255	; 0xff
   158a0:	eb000100 	bl	15ca8 <SPISend>
   158a4:	e1a0300d 	mov	r3, sp
   158a8:	e7c40003 	strb	r0, [r4, r3]
   158ac:	e1a01000 	mov	r1, r0
   158b0:	e2844001 	add	r4, r4, #1	; 0x1
   158b4:	e59f009c 	ldr	r0, [pc, #156]	; 15958 <.text+0x5958>
   158b8:	ebffefd6 	bl	11818 <rprintf>
   158bc:	e3540010 	cmp	r4, #16	; 0x10
   158c0:	1afffff5 	bne	1589c <BlockDevGetSize+0x30>
   158c4:	e59f0090 	ldr	r0, [pc, #144]	; 1595c <.text+0x595c>
   158c8:	ebffefd2 	bl	11818 <rprintf>
   158cc:	e3a000ff 	mov	r0, #255	; 0xff
   158d0:	eb0000f4 	bl	15ca8 <SPISend>
   158d4:	e3a000ff 	mov	r0, #255	; 0xff
   158d8:	eb0000f2 	bl	15ca8 <SPISend>
   158dc:	e5dd1005 	ldrb	r1, [sp, #5]
   158e0:	e3a00001 	mov	r0, #1	; 0x1
   158e4:	e201100f 	and	r1, r1, #15	; 0xf
   158e8:	e1a01110 	mov	r1, r0, lsl r1
   158ec:	e5dd2009 	ldrb	r2, [sp, #9]
   158f0:	e5dd300a 	ldrb	r3, [sp, #10]
   158f4:	e2022003 	and	r2, r2, #3	; 0x3
   158f8:	e1a033a3 	mov	r3, r3, lsr #7
   158fc:	e0833082 	add	r3, r3, r2, lsl #1
   15900:	e2833002 	add	r3, r3, #2	; 0x2
   15904:	e1a00310 	mov	r0, r0, lsl r3
   15908:	e5dd3007 	ldrb	r3, [sp, #7]
   1590c:	e5dd2006 	ldrb	r2, [sp, #6]
   15910:	e5ddc008 	ldrb	ip, [sp, #8]
   15914:	e1a03103 	mov	r3, r3, lsl #2
   15918:	e083332c 	add	r3, r3, ip, lsr #6
   1591c:	e2022003 	and	r2, r2, #3	; 0x3
   15920:	e0833502 	add	r3, r3, r2, lsl #10
   15924:	e1a01801 	mov	r1, r1, lsl #16
   15928:	e1a01821 	mov	r1, r1, lsr #16
   1592c:	e2833001 	add	r3, r3, #1	; 0x1
   15930:	e0030391 	mul	r3, r1, r3
   15934:	e1a00800 	mov	r0, r0, lsl #16
   15938:	e1a00820 	mov	r0, r0, lsr #16
   1593c:	e0030390 	mul	r3, r0, r3
   15940:	e3a00000 	mov	r0, #0	; 0x0
   15944:	e5853000 	str	r3, [r5]
   15948:	e28dd010 	add	sp, sp, #16	; 0x10
   1594c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   15950:	e12fff1e 	bx	lr
   15954:	0001e030 	andeq	lr, r1, r0, lsr r0
   15958:	0001e038 	andeq	lr, r1, r8, lsr r0
   1595c:	0001dd90 	muleq	r1, r0, sp

00015960 <Resp8bError>:
   15960:	e20010ff 	and	r1, r0, #255	; 0xff
   15964:	e3510008 	cmp	r1, #8	; 0x8
   15968:	e52de004 	str	lr, [sp, #-4]!
   1596c:	0a000015 	beq	159c8 <Resp8bError+0x68>
   15970:	8a000006 	bhi	15990 <Resp8bError+0x30>
   15974:	e3510002 	cmp	r1, #2	; 0x2
   15978:	0a000016 	beq	159d8 <Resp8bError+0x78>
   1597c:	e3510004 	cmp	r1, #4	; 0x4
   15980:	0a000012 	beq	159d0 <Resp8bError+0x70>
   15984:	e3510001 	cmp	r1, #1	; 0x1
   15988:	1a000016 	bne	159e8 <Resp8bError+0x88>
   1598c:	ea000013 	b	159e0 <Resp8bError+0x80>
   15990:	e3510020 	cmp	r1, #32	; 0x20
   15994:	0a000006 	beq	159b4 <Resp8bError+0x54>
   15998:	e3510040 	cmp	r1, #64	; 0x40
   1599c:	0a000002 	beq	159ac <Resp8bError+0x4c>
   159a0:	e3510010 	cmp	r1, #16	; 0x10
   159a4:	1a00000f 	bne	159e8 <Resp8bError+0x88>
   159a8:	ea000004 	b	159c0 <Resp8bError+0x60>
   159ac:	e59f0044 	ldr	r0, [pc, #68]	; 159f8 <.text+0x59f8>
   159b0:	ea000000 	b	159b8 <Resp8bError+0x58>
   159b4:	e59f0040 	ldr	r0, [pc, #64]	; 159fc <.text+0x59fc>
   159b8:	ebffef96 	bl	11818 <rprintf>
   159bc:	ea00000b 	b	159f0 <Resp8bError+0x90>
   159c0:	e59f0038 	ldr	r0, [pc, #56]	; 15a00 <.text+0x5a00>
   159c4:	eafffffb 	b	159b8 <Resp8bError+0x58>
   159c8:	e59f0034 	ldr	r0, [pc, #52]	; 15a04 <.text+0x5a04>
   159cc:	eafffff9 	b	159b8 <Resp8bError+0x58>
   159d0:	e59f0030 	ldr	r0, [pc, #48]	; 15a08 <.text+0x5a08>
   159d4:	eafffff7 	b	159b8 <Resp8bError+0x58>
   159d8:	e59f002c 	ldr	r0, [pc, #44]	; 15a0c <.text+0x5a0c>
   159dc:	eafffff5 	b	159b8 <Resp8bError+0x58>
   159e0:	e59f0028 	ldr	r0, [pc, #40]	; 15a10 <.text+0x5a10>
   159e4:	eafffff3 	b	159b8 <Resp8bError+0x58>
   159e8:	e59f0024 	ldr	r0, [pc, #36]	; 15a14 <.text+0x5a14>
   159ec:	ebffef89 	bl	11818 <rprintf>
   159f0:	e49de004 	ldr	lr, [sp], #4
   159f4:	e12fff1e 	bx	lr
   159f8:	0001e040 	andeq	lr, r1, r0, asr #32
   159fc:	0001e05c 	andeq	lr, r1, ip, asr r0
   15a00:	0001e074 	andeq	lr, r1, r4, ror r0
   15a04:	0001e094 	muleq	r1, r4, r0
   15a08:	0001e0a4 	andeq	lr, r1, r4, lsr #1
   15a0c:	0001e0b8 	streqh	lr, [r1], -r8
   15a10:	0001e0e0 	andeq	lr, r1, r0, ror #1
   15a14:	0001e0e4 	andeq	lr, r1, r4, ror #1

00015a18 <BlockDevRead>:

/*****************************************************************************/

/* ****************************************************************************
 * WAIT ?? -- FIXME
 * CMD_CMD_
 * WAIT
 * CARD RESP
 * WAIT
 * DATA BLOCK IN
 *      START BLOCK
 *      DATA
 *      CHKS (2B)
 */

int BlockDevRead(U32 dwAddress, U8 * pbBuf)
{
    U8 cardresp;
    U8 firstblock;
    U16 fb_timeout = 0xffff;
    U32 place;

    place = 512 * dwAddress;
    Command(CMD_READSINGLEBLOCK, place);
   15a18:	e1a00480 	mov	r0, r0, lsl #9
   15a1c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   15a20:	e1a06001 	mov	r6, r1
   15a24:	e1a01000 	mov	r1, r0
   15a28:	e3a00011 	mov	r0, #17	; 0x11
   15a2c:	ebffff5e 	bl	157ac <Command>

    cardresp = Resp8b();        /* Card response */
   15a30:	ebffff51 	bl	1577c <Resp8b>
   15a34:	e59f506c 	ldr	r5, [pc, #108]	; 15aa8 <.text+0x5aa8>
   15a38:	e1a04000 	mov	r4, r0

    /* Wait for startblock */
    do
    {
        firstblock = Resp8b();
   15a3c:	ebffff4e 	bl	1577c <Resp8b>
    }
    while (firstblock == 0xff && fb_timeout--);
   15a40:	e2453001 	sub	r3, r5, #1	; 0x1
   15a44:	e35000ff 	cmp	r0, #255	; 0xff
   15a48:	e1a03803 	mov	r3, r3, lsl #16
   15a4c:	1a000003 	bne	15a60 <BlockDevRead+0x48>
   15a50:	e3730801 	cmn	r3, #65536	; 0x10000
   15a54:	e1a05823 	mov	r5, r3, lsr #16
   15a58:	0a000005 	beq	15a74 <BlockDevRead+0x5c>
   15a5c:	eafffff6 	b	15a3c <BlockDevRead+0x24>

    if (cardresp != 0x00 || firstblock != 0xfe)
   15a60:	e35000fe 	cmp	r0, #254	; 0xfe
   15a64:	03540000 	cmpeq	r4, #0	; 0x0
   15a68:	03a04000 	moveq	r4, #0	; 0x0
   15a6c:	13a04001 	movne	r4, #1	; 0x1
   15a70:	0a000002 	beq	15a80 <BlockDevRead+0x68>
    {
        Resp8bError(firstblock);
   15a74:	ebffffb9 	bl	15960 <Resp8bError>
   15a78:	e3e00000 	mvn	r0, #0	; 0x0
   15a7c:	ea000007 	b	15aa0 <BlockDevRead+0x88>
        return -1;
    }

    SPIRecvN(pbBuf, 512);
   15a80:	e3a01c02 	mov	r1, #512	; 0x200
   15a84:	e1a00006 	mov	r0, r6
   15a88:	eb0000b1 	bl	15d54 <SPIRecvN>

    /* Checksum (2 byte) - ignore for now */
    SPISend(0xff);
   15a8c:	e3a000ff 	mov	r0, #255	; 0xff
   15a90:	eb000084 	bl	15ca8 <SPISend>
    SPISend(0xff);
   15a94:	e3a000ff 	mov	r0, #255	; 0xff
   15a98:	eb000082 	bl	15ca8 <SPISend>
   15a9c:	e1a00004 	mov	r0, r4

    return 0;
}
   15aa0:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   15aa4:	e12fff1e 	bx	lr
   15aa8:	0000ffff 	streqd	pc, [r0], -pc

00015aac <BlockDevInit>:
   15aac:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   15ab0:	eb0000c0 	bl	15db8 <SPIInit>
   15ab4:	e3a04064 	mov	r4, #100	; 0x64
   15ab8:	e3a00000 	mov	r0, #0	; 0x0
   15abc:	e1a01000 	mov	r1, r0
   15ac0:	ebffff39 	bl	157ac <Command>
   15ac4:	ebffff2c 	bl	1577c <Resp8b>
   15ac8:	e3500001 	cmp	r0, #1	; 0x1
   15acc:	e2444001 	sub	r4, r4, #1	; 0x1
   15ad0:	0a00000a 	beq	15b00 <BlockDevInit+0x54>
   15ad4:	e3740001 	cmn	r4, #1	; 0x1
   15ad8:	1afffff6 	bne	15ab8 <BlockDevInit+0xc>
   15adc:	e35000ff 	cmp	r0, #255	; 0xff
   15ae0:	1a000003 	bne	15af4 <BlockDevInit+0x48>
   15ae4:	e59f016c 	ldr	r0, [pc, #364]	; 15c58 <.text+0x5c58>
   15ae8:	ebffef4a 	bl	11818 <rprintf>
   15aec:	e1a00004 	mov	r0, r4
   15af0:	ea000056 	b	15c50 <BlockDevInit+0x1a4>
   15af4:	ebffff99 	bl	15960 <Resp8bError>
   15af8:	e59f015c 	ldr	r0, [pc, #348]	; 15c5c <.text+0x5c5c>
   15afc:	ea000051 	b	15c48 <BlockDevInit+0x19c>
   15b00:	e3a04c7d 	mov	r4, #32000	; 0x7d00
   15b04:	e3a01000 	mov	r1, #0	; 0x0
   15b08:	e3a00001 	mov	r0, #1	; 0x1
   15b0c:	ebffff26 	bl	157ac <Command>
   15b10:	ebffff19 	bl	1577c <Resp8b>
   15b14:	e2505000 	subs	r5, r0, #0	; 0x0
   15b18:	e2444001 	sub	r4, r4, #1	; 0x1
   15b1c:	0a000008 	beq	15b44 <BlockDevInit+0x98>
   15b20:	ebffff8e 	bl	15960 <Resp8bError>
   15b24:	e3550001 	cmp	r5, #1	; 0x1
   15b28:	1a000001 	bne	15b34 <BlockDevInit+0x88>
   15b2c:	e3740001 	cmn	r4, #1	; 0x1
   15b30:	1afffff3 	bne	15b04 <BlockDevInit+0x58>
   15b34:	e1a00005 	mov	r0, r5
   15b38:	ebffff88 	bl	15960 <Resp8bError>
   15b3c:	e3e00002 	mvn	r0, #2	; 0x2
   15b40:	ea000042 	b	15c50 <BlockDevInit+0x1a4>
   15b44:	e3a00008 	mov	r0, #8	; 0x8
   15b48:	eb00004f 	bl	15c8c <SPISetSpeed>
   15b4c:	e1a01005 	mov	r1, r5
   15b50:	e3a0000d 	mov	r0, #13	; 0xd
   15b54:	ebffff14 	bl	157ac <Command>
   15b58:	ebffff07 	bl	1577c <Resp8b>
   15b5c:	e1a04c00 	mov	r4, r0, lsl #24
   15b60:	e3a000ff 	mov	r0, #255	; 0xff
   15b64:	eb00004f 	bl	15ca8 <SPISend>
   15b68:	e1a04824 	mov	r4, r4, lsr #16
   15b6c:	e1844000 	orr	r4, r4, r0
   15b70:	e1a04804 	mov	r4, r4, lsl #16
   15b74:	e1a01824 	mov	r1, r4, lsr #16
   15b78:	e3510008 	cmp	r1, #8	; 0x8
   15b7c:	0a00001a 	beq	15bec <BlockDevInit+0x140>
   15b80:	8a000007 	bhi	15ba4 <BlockDevInit+0xf8>
   15b84:	e3510001 	cmp	r1, #1	; 0x1
   15b88:	0a000010 	beq	15bd0 <BlockDevInit+0x124>
   15b8c:	3a000028 	bcc	15c34 <BlockDevInit+0x188>
   15b90:	e3510002 	cmp	r1, #2	; 0x2
   15b94:	0a00000f 	beq	15bd8 <BlockDevInit+0x12c>
   15b98:	e3510004 	cmp	r1, #4	; 0x4
   15b9c:	1a00001c 	bne	15c14 <BlockDevInit+0x168>
   15ba0:	ea00000f 	b	15be4 <BlockDevInit+0x138>
   15ba4:	e3510020 	cmp	r1, #32	; 0x20
   15ba8:	0a000013 	beq	15bfc <BlockDevInit+0x150>
   15bac:	8a000002 	bhi	15bbc <BlockDevInit+0x110>
   15bb0:	e3510010 	cmp	r1, #16	; 0x10
   15bb4:	1a000016 	bne	15c14 <BlockDevInit+0x168>
   15bb8:	ea00000d 	b	15bf4 <BlockDevInit+0x148>
   15bbc:	e3510040 	cmp	r1, #64	; 0x40
   15bc0:	0a00000f 	beq	15c04 <BlockDevInit+0x158>
   15bc4:	e3510080 	cmp	r1, #128	; 0x80
   15bc8:	1a000011 	bne	15c14 <BlockDevInit+0x168>
   15bcc:	ea00000e 	b	15c0c <BlockDevInit+0x160>
   15bd0:	e59f0088 	ldr	r0, [pc, #136]	; 15c60 <.text+0x5c60>
   15bd4:	ea000000 	b	15bdc <BlockDevInit+0x130>
   15bd8:	e59f0084 	ldr	r0, [pc, #132]	; 15c64 <.text+0x5c64>
   15bdc:	ebffef0d 	bl	11818 <rprintf>
   15be0:	ea000017 	b	15c44 <BlockDevInit+0x198>
   15be4:	e59f007c 	ldr	r0, [pc, #124]	; 15c68 <.text+0x5c68>
   15be8:	eafffffb 	b	15bdc <BlockDevInit+0x130>
   15bec:	e59f0078 	ldr	r0, [pc, #120]	; 15c6c <.text+0x5c6c>
   15bf0:	eafffff9 	b	15bdc <BlockDevInit+0x130>
   15bf4:	e59f0074 	ldr	r0, [pc, #116]	; 15c70 <.text+0x5c70>
   15bf8:	eafffff7 	b	15bdc <BlockDevInit+0x130>
   15bfc:	e59f0070 	ldr	r0, [pc, #112]	; 15c74 <.text+0x5c74>
   15c00:	eafffff5 	b	15bdc <BlockDevInit+0x130>
   15c04:	e59f006c 	ldr	r0, [pc, #108]	; 15c78 <.text+0x5c78>
   15c08:	eafffff3 	b	15bdc <BlockDevInit+0x130>
   15c0c:	e59f0068 	ldr	r0, [pc, #104]	; 15c7c <.text+0x5c7c>
   15c10:	eafffff1 	b	15bdc <BlockDevInit+0x130>
   15c14:	e35100ff 	cmp	r1, #255	; 0xff
   15c18:	9a000002 	bls	15c28 <BlockDevInit+0x17c>
   15c1c:	e1a00421 	mov	r0, r1, lsr #8
   15c20:	ebffff4e 	bl	15960 <Resp8bError>
   15c24:	ea000006 	b	15c44 <BlockDevInit+0x198>
   15c28:	e59f0050 	ldr	r0, [pc, #80]	; 15c80 <.text+0x5c80>
   15c2c:	ebffeef9 	bl	11818 <rprintf>
   15c30:	ea000003 	b	15c44 <BlockDevInit+0x198>
   15c34:	e59f0048 	ldr	r0, [pc, #72]	; 15c84 <.text+0x5c84>
   15c38:	ebffeef6 	bl	11818 <rprintf>
   15c3c:	e1a00005 	mov	r0, r5
   15c40:	ea000002 	b	15c50 <BlockDevInit+0x1a4>
   15c44:	e59f003c 	ldr	r0, [pc, #60]	; 15c88 <.text+0x5c88>
   15c48:	ebffeef2 	bl	11818 <rprintf>
   15c4c:	e3e00001 	mvn	r0, #1	; 0x1
   15c50:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   15c54:	e12fff1e 	bx	lr
   15c58:	0001e114 	andeq	lr, r1, r4, lsl r1
   15c5c:	0001e120 	andeq	lr, r1, r0, lsr #2
   15c60:	0001e12c 	andeq	lr, r1, ip, lsr #2
   15c64:	0001e140 	andeq	lr, r1, r0, asr #2
   15c68:	0001e168 	andeq	lr, r1, r8, ror #2
   15c6c:	0001e194 	muleq	r1, r4, r1
   15c70:	0001e1b8 	streqh	lr, [r1], -r8
   15c74:	0001e1f8 	streqd	lr, [r1], -r8
   15c78:	0001e214 	andeq	lr, r1, r4, lsl r2
   15c7c:	0001e240 	andeq	lr, r1, r0, asr #4
   15c80:	0001e260 	andeq	lr, r1, r0, ror #4
   15c84:	0001e290 	muleq	r1, r0, r2
   15c88:	0001e2a4 	andeq	lr, r1, r4, lsr #5

00015c8c <SPISetSpeed>:
/*****************************************************************************/

void SPISetSpeed(U8 speed)
{
    speed &= 0xFE;
   15c8c:	e20000fe 	and	r0, r0, #254	; 0xfe
    if (speed < SPI_PRESCALE_MIN)
   15c90:	e3500007 	cmp	r0, #7	; 0x7
    {
        speed = SPI_PRESCALE_MIN;
    }
    SPI_PRESCALE_REG = speed;
   15c94:	e59f3008 	ldr	r3, [pc, #8]	; 15ca4 <.text+0x5ca4>
   15c98:	93a00008 	movls	r0, #8	; 0x8
   15c9c:	e583000c 	str	r0, [r3, #12]
}
   15ca0:	e12fff1e 	bx	lr
   15ca4:	e0020000 	and	r0, r2, r0

00015ca8 <SPISend>:


void SPIInit(void)
{
    U8 i;
    //U32 j;

    rprintf("spiInit for SPI(0)\n");

    // setup GPIO
    PINSEL2 = 0;

	SPI_IODIR |= (1 << SPI_SCK_PIN) | (1 << SPI_MOSI_PIN);
    SPI_SS_IODIR |= (1 << SPI_SS_PIN);
    SPI_IODIR &= ~(1 << SPI_MISO_PIN);

    // reset Pin-Functions
    SPI_PINSEL &= ~((3 << SPI_SCK_FUNCBIT) | (3 << SPI_MISO_FUNCBIT) | (3 << SPI_MOSI_FUNCBIT));
    SPI_PINSEL |= ((1 << SPI_SCK_FUNCBIT) | (1 << SPI_MISO_FUNCBIT) | (1 << SPI_MOSI_FUNCBIT));

    // set Chip-Select high - unselect card
    UNSELECT_CARD();

    // enable SPI-Master
    S0SPCR = (1 << MSTR) | (0 << CPOL);   // TODO: check CPOL

    // low speed during init
    SPISetSpeed(254);

    /* Send 20 spi commands with card not selected */
    for (i = 0; i < 21; i++)
    {
        my_SPISend(0xff);
    }
}

/*****************************************************************************/

/*****************************************************************************/

U8 SPISend(U8 outgoing)
{
    U8 incoming;

    SELECT_CARD();
   15ca8:	e59f2040 	ldr	r2, [pc, #64]	; 15cf0 <.text+0x5cf0>
   15cac:	e592300c 	ldr	r3, [r2, #12]
   15cb0:	e3833080 	orr	r3, r3, #128	; 0x80
   15cb4:	e582300c 	str	r3, [r2, #12]
    S0SPDR = outgoing;
   15cb8:	e59f3034 	ldr	r3, [pc, #52]	; 15cf4 <.text+0x5cf4>
   15cbc:	e20000ff 	and	r0, r0, #255	; 0xff
   15cc0:	e5830008 	str	r0, [r3, #8]
    while (!(S0SPSR & (1 << SPIF)));
   15cc4:	e59f1028 	ldr	r1, [pc, #40]	; 15cf4 <.text+0x5cf4>
   15cc8:	e5913004 	ldr	r3, [r1, #4]
   15ccc:	e3130080 	tst	r3, #128	; 0x80
   15cd0:	0afffffb 	beq	15cc4 <SPISend+0x1c>
    incoming = S0SPDR;
    UNSELECT_CARD();
   15cd4:	e59f2014 	ldr	r2, [pc, #20]	; 15cf0 <.text+0x5cf0>
   15cd8:	e5910008 	ldr	r0, [r1, #8]
   15cdc:	e5923004 	ldr	r3, [r2, #4]
   15ce0:	e20000ff 	and	r0, r0, #255	; 0xff
   15ce4:	e3833080 	orr	r3, r3, #128	; 0x80
   15ce8:	e5823004 	str	r3, [r2, #4]

    return incoming;
}
   15cec:	e12fff1e 	bx	lr
   15cf0:	e0028000 	and	r8, r2, r0
   15cf4:	e0020000 	and	r0, r2, r0

00015cf8 <SPISendN>:

void SPISendN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
   15cf8:	e59f204c 	ldr	r2, [pc, #76]	; 15d4c <.text+0x5d4c>
   15cfc:	e592300c 	ldr	r3, [r2, #12]
   15d00:	e3a0c000 	mov	ip, #0	; 0x0
   15d04:	e3833080 	orr	r3, r3, #128	; 0x80
   15d08:	e582300c 	str	r3, [r2, #12]
   15d0c:	ea000007 	b	15d30 <SPISendN+0x38>
    for (i = 0; i < iLen; i++)
    {
        S0SPDR = pbBuf[i];
   15d10:	e7dc2000 	ldrb	r2, [ip, r0]
   15d14:	e59f3034 	ldr	r3, [pc, #52]	; 15d50 <.text+0x5d50>
   15d18:	e5832008 	str	r2, [r3, #8]
        while (!(S0SPSR & (1 << SPIF)));
   15d1c:	e59f302c 	ldr	r3, [pc, #44]	; 15d50 <.text+0x5d50>
   15d20:	e5933004 	ldr	r3, [r3, #4]
   15d24:	e3130080 	tst	r3, #128	; 0x80
   15d28:	0afffffb 	beq	15d1c <SPISendN+0x24>
   15d2c:	e28cc001 	add	ip, ip, #1	; 0x1
   15d30:	e15c0001 	cmp	ip, r1
   15d34:	bafffff5 	blt	15d10 <SPISendN+0x18>
    }
    UNSELECT_CARD();
   15d38:	e59f200c 	ldr	r2, [pc, #12]	; 15d4c <.text+0x5d4c>
   15d3c:	e5923004 	ldr	r3, [r2, #4]
   15d40:	e3833080 	orr	r3, r3, #128	; 0x80
   15d44:	e5823004 	str	r3, [r2, #4]
}
   15d48:	e12fff1e 	bx	lr
   15d4c:	e0028000 	and	r8, r2, r0
   15d50:	e0020000 	and	r0, r2, r0

00015d54 <SPIRecvN>:

void SPIRecvN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
   15d54:	e59f2054 	ldr	r2, [pc, #84]	; 15db0 <.text+0x5db0>
   15d58:	e592300c 	ldr	r3, [r2, #12]
   15d5c:	e3a0c000 	mov	ip, #0	; 0x0
   15d60:	e3833080 	orr	r3, r3, #128	; 0x80
   15d64:	e582300c 	str	r3, [r2, #12]
   15d68:	ea000009 	b	15d94 <SPIRecvN+0x40>
    for (i = 0; i < iLen; i++)
    {
        S0SPDR = 0xFF;
   15d6c:	e59f3040 	ldr	r3, [pc, #64]	; 15db4 <.text+0x5db4>
   15d70:	e3a020ff 	mov	r2, #255	; 0xff
   15d74:	e5832008 	str	r2, [r3, #8]
        while (!(S0SPSR & (1 << SPIF)));
   15d78:	e59f2034 	ldr	r2, [pc, #52]	; 15db4 <.text+0x5db4>
   15d7c:	e5923004 	ldr	r3, [r2, #4]
   15d80:	e3130080 	tst	r3, #128	; 0x80
   15d84:	0afffffb 	beq	15d78 <SPIRecvN+0x24>
        pbBuf[i] = S0SPDR;
   15d88:	e5923008 	ldr	r3, [r2, #8]
   15d8c:	e7cc3000 	strb	r3, [ip, r0]
   15d90:	e28cc001 	add	ip, ip, #1	; 0x1
   15d94:	e15c0001 	cmp	ip, r1
   15d98:	bafffff3 	blt	15d6c <SPIRecvN+0x18>
    }
    UNSELECT_CARD();
   15d9c:	e59f200c 	ldr	r2, [pc, #12]	; 15db0 <.text+0x5db0>
   15da0:	e5923004 	ldr	r3, [r2, #4]
   15da4:	e3833080 	orr	r3, r3, #128	; 0x80
   15da8:	e5823004 	str	r3, [r2, #4]
}
   15dac:	e12fff1e 	bx	lr
   15db0:	e0028000 	and	r8, r2, r0
   15db4:	e0020000 	and	r0, r2, r0

00015db8 <SPIInit>:
   15db8:	e59f00a8 	ldr	r0, [pc, #168]	; 15e68 <.text+0x5e68>
   15dbc:	e52de004 	str	lr, [sp, #-4]!
   15dc0:	ebffee94 	bl	11818 <rprintf>
   15dc4:	e59f10a0 	ldr	r1, [pc, #160]	; 15e6c <.text+0x5e6c>
   15dc8:	e3a00000 	mov	r0, #0	; 0x0
   15dcc:	e5810014 	str	r0, [r1, #20]
   15dd0:	e59f2098 	ldr	r2, [pc, #152]	; 15e70 <.text+0x5e70>
   15dd4:	e5923008 	ldr	r3, [r2, #8]
   15dd8:	e3833050 	orr	r3, r3, #80	; 0x50
   15ddc:	e5823008 	str	r3, [r2, #8]
   15de0:	e5923008 	ldr	r3, [r2, #8]
   15de4:	e3833080 	orr	r3, r3, #128	; 0x80
   15de8:	e5823008 	str	r3, [r2, #8]
   15dec:	e5923008 	ldr	r3, [r2, #8]
   15df0:	e3c33020 	bic	r3, r3, #32	; 0x20
   15df4:	e5823008 	str	r3, [r2, #8]
   15df8:	e5913000 	ldr	r3, [r1]
   15dfc:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
   15e00:	e5813000 	str	r3, [r1]
   15e04:	e5913000 	ldr	r3, [r1]
   15e08:	e3833c15 	orr	r3, r3, #5376	; 0x1500
   15e0c:	e5813000 	str	r3, [r1]
   15e10:	e5923004 	ldr	r3, [r2, #4]
   15e14:	e3833080 	orr	r3, r3, #128	; 0x80
   15e18:	e5823004 	str	r3, [r2, #4]
   15e1c:	e2411903 	sub	r1, r1, #49152	; 0xc000
   15e20:	e3a03020 	mov	r3, #32	; 0x20
   15e24:	e5813000 	str	r3, [r1]
   15e28:	e28330de 	add	r3, r3, #222	; 0xde
   15e2c:	e581300c 	str	r3, [r1, #12]
   15e30:	e59f303c 	ldr	r3, [pc, #60]	; 15e74 <.text+0x5e74>
   15e34:	e3a020ff 	mov	r2, #255	; 0xff
   15e38:	e5832008 	str	r2, [r3, #8]
   15e3c:	e59f2030 	ldr	r2, [pc, #48]	; 15e74 <.text+0x5e74>
   15e40:	e5923004 	ldr	r3, [r2, #4]
   15e44:	e3130080 	tst	r3, #128	; 0x80
   15e48:	0afffffb 	beq	15e3c <SPIInit+0x84>
   15e4c:	e2803001 	add	r3, r0, #1	; 0x1
   15e50:	e20300ff 	and	r0, r3, #255	; 0xff
   15e54:	e3500015 	cmp	r0, #21	; 0x15
   15e58:	e5923008 	ldr	r3, [r2, #8]
   15e5c:	1afffff3 	bne	15e30 <SPIInit+0x78>
   15e60:	e49de004 	ldr	lr, [sp], #4
   15e64:	e12fff1e 	bx	lr
   15e68:	0001e2d8 	ldreqd	lr, [r1], -r8
   15e6c:	e002c000 	and	ip, r2, r0
   15e70:	e0028000 	and	r8, r2, r0
   15e74:	e0020000 	and	r0, r2, r0

00015e78 <HandleUsbReset>:
{
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
   15e78:	e12fff1e 	bx	lr

00015e7c <USBInit>:


/**
	Initialises the USB hardware and sets up the USB stack by
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
   15e7c:	e92d4010 	stmdb	sp!, {r4, lr}
	// init hardware
	USBHwInit();
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
   15e80:	e59f4054 	ldr	r4, [pc, #84]	; 15edc <.text+0x5edc>
   15e84:	eb00013d 	bl	16380 <USBHwInit>
   15e88:	e59f0050 	ldr	r0, [pc, #80]	; 15ee0 <.text+0x5ee0>
   15e8c:	eb000074 	bl	16064 <USBHwRegisterDevIntHandler>
   15e90:	e1a01004 	mov	r1, r4
   15e94:	e3a00000 	mov	r0, #0	; 0x0
   15e98:	eb00005e 	bl	16018 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
   15e9c:	e1a01004 	mov	r1, r4
   15ea0:	e3a00080 	mov	r0, #128	; 0x80
   15ea4:	eb00005b 	bl	16018 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
   15ea8:	e3a00000 	mov	r0, #0	; 0x0
   15eac:	e3a01040 	mov	r1, #64	; 0x40
   15eb0:	eb000041 	bl	15fbc <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
   15eb4:	e3a00080 	mov	r0, #128	; 0x80
   15eb8:	e3a01040 	mov	r1, #64	; 0x40
   15ebc:	eb00003e 	bl	15fbc <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
   15ec0:	e3a00000 	mov	r0, #0	; 0x0
   15ec4:	e59f1018 	ldr	r1, [pc, #24]	; 15ee4 <.text+0x5ee4>
   15ec8:	e59f2018 	ldr	r2, [pc, #24]	; 15ee8 <.text+0x5ee8>
   15ecc:	eb00016c 	bl	16484 <USBRegisterRequestHandler>

	return TRUE;
}
   15ed0:	e3a00001 	mov	r0, #1	; 0x1
   15ed4:	e8bd4010 	ldmia	sp!, {r4, lr}
   15ed8:	e12fff1e 	bx	lr
   15edc:	00016508 	andeq	r6, r1, r8, lsl #10
   15ee0:	00015e78 	andeq	r5, r1, r8, ror lr
   15ee4:	000166f8 	streqd	r6, [r1], -r8
   15ee8:	40000d18 	andmi	r0, r0, r8, lsl sp

00015eec <USBHwCmd>:
		
	@param [in]	bCmd		Command to send
 */
static void USBHwCmd(U8 bCmd)
{
   15eec:	e1a00800 	mov	r0, r0, lsl #16
	// clear CDFULL/CCEMTY
	USBDevIntClr = CDFULL | CCEMTY;
   15ef0:	e59f202c 	ldr	r2, [pc, #44]	; 15f24 <.text+0x5f24>
	// write command code
	USBCmdCode = 0x00000500 | (bCmd << 16);
   15ef4:	e20008ff 	and	r0, r0, #16711680	; 0xff0000
   15ef8:	e3800c05 	orr	r0, r0, #1280	; 0x500
   15efc:	e3a03030 	mov	r3, #48	; 0x30
   15f00:	e5823008 	str	r3, [r2, #8]
   15f04:	e5820010 	str	r0, [r2, #16]
   15f08:	e59f2014 	ldr	r2, [pc, #20]	; 15f24 <.text+0x5f24>
   15f0c:	e5923000 	ldr	r3, [r2]
   15f10:	e2033010 	and	r3, r3, #16	; 0x10
   15f14:	e3530010 	cmp	r3, #16	; 0x10
   15f18:	1afffffa 	bne	15f08 <USBHwCmd+0x1c>
   15f1c:	e5823008 	str	r3, [r2, #8]
	Wait4DevInt(CCEMTY);
}
   15f20:	e12fff1e 	bx	lr
   15f24:	e0090000 	and	r0, r9, r0

00015f28 <USBHwCmdWrite>:


/**
	Local function to send a command + data to the USB protocol engine
		
	@param [in]	bCmd		Command to send
	@param [in]	bData		Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
   15f28:	e92d4010 	stmdb	sp!, {r4, lr}
   15f2c:	e1a04801 	mov	r4, r1, lsl #16
   15f30:	e20000ff 	and	r0, r0, #255	; 0xff
   15f34:	e1a04824 	mov	r4, r4, lsr #16
	// write command code
	USBHwCmd(bCmd);
   15f38:	ebffffeb 	bl	15eec <USBHwCmd>

	// write command data
	USBCmdCode = 0x00000100 | (bData << 16);
   15f3c:	e1a04804 	mov	r4, r4, lsl #16
   15f40:	e59f3024 	ldr	r3, [pc, #36]	; 15f6c <.text+0x5f6c>
   15f44:	e3844c01 	orr	r4, r4, #256	; 0x100
   15f48:	e5834010 	str	r4, [r3, #16]
   15f4c:	e59f2018 	ldr	r2, [pc, #24]	; 15f6c <.text+0x5f6c>
   15f50:	e5923000 	ldr	r3, [r2]
   15f54:	e2033010 	and	r3, r3, #16	; 0x10
   15f58:	e3530010 	cmp	r3, #16	; 0x10
   15f5c:	1afffffa 	bne	15f4c <USBHwCmdWrite+0x24>
   15f60:	e5823008 	str	r3, [r2, #8]
	Wait4DevInt(CCEMTY);
}
   15f64:	e8bd4010 	ldmia	sp!, {r4, lr}
   15f68:	e12fff1e 	bx	lr
   15f6c:	e0090000 	and	r0, r9, r0

00015f70 <USBHwCmdRead>:


/**
	Local function to send a command to the USB protocol engine and read data
		
	@param [in]	bCmd		Command to send

	@return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
   15f70:	e92d4010 	stmdb	sp!, {r4, lr}
   15f74:	e20040ff 	and	r4, r0, #255	; 0xff
	// write command code
	USBHwCmd(bCmd);
   15f78:	e1a00004 	mov	r0, r4
   15f7c:	ebffffda 	bl	15eec <USBHwCmd>
	
	// get data
	USBCmdCode = 0x00000200 | (bCmd << 16);
   15f80:	e1a04804 	mov	r4, r4, lsl #16
   15f84:	e59f302c 	ldr	r3, [pc, #44]	; 15fb8 <.text+0x5fb8>
   15f88:	e3844c02 	orr	r4, r4, #512	; 0x200
   15f8c:	e5834010 	str	r4, [r3, #16]
   15f90:	e59f2020 	ldr	r2, [pc, #32]	; 15fb8 <.text+0x5fb8>
   15f94:	e5923000 	ldr	r3, [r2]
   15f98:	e2033020 	and	r3, r3, #32	; 0x20
   15f9c:	e3530020 	cmp	r3, #32	; 0x20
   15fa0:	1afffffa 	bne	15f90 <USBHwCmdRead+0x20>
   15fa4:	e5823008 	str	r3, [r2, #8]
	Wait4DevInt(CDFULL);
	return USBCmdData;
   15fa8:	e5920014 	ldr	r0, [r2, #20]
   15fac:	e20000ff 	and	r0, r0, #255	; 0xff
}
   15fb0:	e8bd4010 	ldmia	sp!, {r4, lr}
   15fb4:	e12fff1e 	bx	lr
   15fb8:	e0090000 	and	r0, r9, r0

00015fbc <USBHwEPConfig>:


/**
	'Realizes' an endpoint, meaning that buffer space is reserved for
	it. An endpoint needs to be realised before it can be used.
		
	From experiments, it appears that a USB reset causes USBReEP to
	re-initialise to 3 (= just the control endpoints).
	However, a USB bus reset does not disturb the USBMaxPSize settings.
		
	@param [in]	idx			Endpoint index
	@param [in] wMaxPSize	Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
	USBReEP |= (1 << idx);
   15fbc:	e59fc050 	ldr	ip, [pc, #80]	; 16014 <.text+0x6014>
	USBEpInd = idx;
	USBMaxPSize = wMaxPSize;
	Wait4DevInt(EP_RLZED);
}


/**
	Enables or disables an endpoint
		
	@param [in]	idx		Endpoint index
	@param [in]	fEnable	TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
}


/**
	Configures an endpoint and enables it
		
	@param [in]	bEP				Endpoint number
	@param [in]	wMaxPacketSize	Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
	int idx;
	
	idx = EP2IDX(bEP);
   15fc0:	e2003080 	and	r3, r0, #128	; 0x80
   15fc4:	e59c2044 	ldr	r2, [ip, #68]
   15fc8:	e1a033c3 	mov	r3, r3, asr #7
   15fcc:	e200000f 	and	r0, r0, #15	; 0xf
   15fd0:	e1830080 	orr	r0, r3, r0, lsl #1
   15fd4:	e3a03001 	mov	r3, #1	; 0x1
   15fd8:	e1822013 	orr	r2, r2, r3, lsl r0
   15fdc:	e1a01801 	mov	r1, r1, lsl #16
   15fe0:	e1a01821 	mov	r1, r1, lsr #16
   15fe4:	e58c2044 	str	r2, [ip, #68]
   15fe8:	e58c0048 	str	r0, [ip, #72]
   15fec:	e58c104c 	str	r1, [ip, #76]
   15ff0:	e59f201c 	ldr	r2, [pc, #28]	; 16014 <.text+0x6014>
   15ff4:	e5923000 	ldr	r3, [r2]
   15ff8:	e2033c01 	and	r3, r3, #256	; 0x100
   15ffc:	e3530c01 	cmp	r3, #256	; 0x100
   16000:	1afffffa 	bne	15ff0 <USBHwEPConfig+0x34>
   16004:	e3800040 	orr	r0, r0, #64	; 0x40
   16008:	e3a01000 	mov	r1, #0	; 0x0
   1600c:	e5823008 	str	r3, [r2, #8]
   16010:	eaffffc4 	b	15f28 <USBHwCmdWrite>
   16014:	e0090000 	and	r0, r9, r0

00016018 <USBHwRegisterEPIntHandler>:
	
	// realise EP
	USBHwEPRealize(idx, wMaxPacketSize);

	// enable EP
	USBHwEPEnable(idx, TRUE);
}


/**
	Registers an endpoint event callback
		
	@param [in]	bEP				Endpoint number
	@param [in]	pfnHandler		Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
   16018:	e52de004 	str	lr, [sp, #-4]!
	int idx;
	
	idx = EP2IDX(bEP);

	ASSERT(idx<32);

	/* add handler to list of EP handlers */
	_apfnEPIntHandlers[idx / 2] = pfnHandler;
	
	/* enable EP interrupt */
	USBEpIntEn |= (1 << idx);
   1601c:	e59fe038 	ldr	lr, [pc, #56]	; 1605c <.text+0x605c>
   16020:	e2003080 	and	r3, r0, #128	; 0x80
   16024:	e59ec034 	ldr	ip, [lr, #52]
   16028:	e200000f 	and	r0, r0, #15	; 0xf
   1602c:	e1a033c3 	mov	r3, r3, asr #7
   16030:	e1833080 	orr	r3, r3, r0, lsl #1
   16034:	e3a02001 	mov	r2, #1	; 0x1
   16038:	e18cc312 	orr	ip, ip, r2, lsl r3
   1603c:	e58ec034 	str	ip, [lr, #52]
	USBDevIntEn |= EP_SLOW;
   16040:	e59e3004 	ldr	r3, [lr, #4]
   16044:	e59f2014 	ldr	r2, [pc, #20]	; 16060 <.text+0x6060>
   16048:	e3833004 	orr	r3, r3, #4	; 0x4
   1604c:	e7821100 	str	r1, [r2, r0, lsl #2]
   16050:	e58e3004 	str	r3, [lr, #4]
	
	DBG("Registered handler for EP 0x%x\n", bEP);
}
   16054:	e49de004 	ldr	lr, [sp], #4
   16058:	e12fff1e 	bx	lr
   1605c:	e0090000 	and	r0, r9, r0
   16060:	40000d28 	andmi	r0, r0, r8, lsr #26

00016064 <USBHwRegisterDevIntHandler>:


/**
	Registers an device status callback
		
	@param [in]	pfnHandler	Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
	_pfnDevIntHandler = pfnHandler;
	
	// enable device interrupt
	USBDevIntEn |= DEV_STAT;
   16064:	e59f3014 	ldr	r3, [pc, #20]	; 16080 <.text+0x6080>
   16068:	e5932004 	ldr	r2, [r3, #4]
   1606c:	e59f1010 	ldr	r1, [pc, #16]	; 16084 <.text+0x6084>
   16070:	e3822008 	orr	r2, r2, #8	; 0x8
   16074:	e5810000 	str	r0, [r1]
   16078:	e5832004 	str	r2, [r3, #4]

	DBG("Registered handler for device status\n");
}
   1607c:	e12fff1e 	bx	lr
   16080:	e0090000 	and	r0, r9, r0
   16084:	40000d24 	andmi	r0, r0, r4, lsr #26

00016088 <USBHwRegisterFrameHandler>:


/**
	Registers the frame callback
		
	@param [in]	pfnHandler	Callback function
 */
void USBHwRegisterFrameHandler(TFnFrameHandler *pfnHandler)
{
	_pfnFrameHandler = pfnHandler;
	
	// enable device interrupt
	USBDevIntEn |= FRAME;
   16088:	e59f3014 	ldr	r3, [pc, #20]	; 160a4 <.text+0x60a4>
   1608c:	e5932004 	ldr	r2, [r3, #4]
   16090:	e59f1010 	ldr	r1, [pc, #16]	; 160a8 <.text+0x60a8>
   16094:	e3822001 	orr	r2, r2, #1	; 0x1
   16098:	e5810000 	str	r0, [r1]
   1609c:	e5832004 	str	r2, [r3, #4]

	DBG("Registered handler for frame\n");
}
   160a0:	e12fff1e 	bx	lr
   160a4:	e0090000 	and	r0, r9, r0
   160a8:	40000d20 	andmi	r0, r0, r0, lsr #26

000160ac <USBHwSetAddress>:


/**
	Sets the USB address.
		
	@param [in]	bAddr		Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
   160ac:	e20010ff 	and	r1, r0, #255	; 0xff
	USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
   160b0:	e3811080 	orr	r1, r1, #128	; 0x80
   160b4:	e3a000d0 	mov	r0, #208	; 0xd0
   160b8:	eaffff9a 	b	15f28 <USBHwCmdWrite>

000160bc <USBHwConnect>:
}


/**
	Connects or disconnects from the USB bus
		
	@param [in]	fConnect	If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
	USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
   160bc:	e2501000 	subs	r1, r0, #0	; 0x0
   160c0:	13a01001 	movne	r1, #1	; 0x1
   160c4:	e3a000fe 	mov	r0, #254	; 0xfe
   160c8:	eaffff96 	b	15f28 <USBHwCmdWrite>

000160cc <USBHwNakIntEnable>:

}


/**
	Enables interrupt on NAK condition
		
	For IN endpoints a NAK is generated when the host wants to read data
	from the device, but none is available in the endpoint buffer.
	For OUT endpoints a NAK is generated when the host wants to write data
	to the device, but the endpoint buffer is still full.
	
	The endpoint interrupt handlers can distinguish regular (ACK) interrupts
	from NAK interrupt by checking the bits in their bEPStatus argument.
	
	@param [in]	bIntBits	Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
   160cc:	e20010ff 	and	r1, r0, #255	; 0xff
	USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
   160d0:	e3a000f3 	mov	r0, #243	; 0xf3
   160d4:	eaffff93 	b	15f28 <USBHwCmdWrite>

000160d8 <USBHwEPGetStatus>:
}


/**
	Gets the status from a specific endpoint.
		
	@param [in]	bEP		Endpoint number
	@return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8	USBHwEPGetStatus(U8 bEP)
{
   160d8:	e1a03000 	mov	r3, r0
	int idx = EP2IDX(bEP);

	return USBHwCmdRead(CMD_EP_SELECT | idx);
   160dc:	e2000080 	and	r0, r0, #128	; 0x80
   160e0:	e203300f 	and	r3, r3, #15	; 0xf
   160e4:	e1a003c0 	mov	r0, r0, asr #7
   160e8:	e52de004 	str	lr, [sp, #-4]!
   160ec:	e1800083 	orr	r0, r0, r3, lsl #1
   160f0:	ebffff9e 	bl	15f70 <USBHwCmdRead>
}
   160f4:	e49de004 	ldr	lr, [sp], #4
   160f8:	e12fff1e 	bx	lr

000160fc <USBHwEPStall>:


/**
	Sets the stalled property of an endpoint
		
	@param [in]	bEP		Endpoint number
	@param [in]	fStall	TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
	int idx = EP2IDX(bEP);

	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
   160fc:	e2003080 	and	r3, r0, #128	; 0x80
   16100:	e1a033c3 	mov	r3, r3, asr #7
   16104:	e200000f 	and	r0, r0, #15	; 0xf
   16108:	e1833080 	orr	r3, r3, r0, lsl #1
   1610c:	e2511000 	subs	r1, r1, #0	; 0x0
   16110:	13a01001 	movne	r1, #1	; 0x1
   16114:	e3830040 	orr	r0, r3, #64	; 0x40
   16118:	eaffff82 	b	15f28 <USBHwCmdWrite>

0001611c <USBHwEPWrite>:
}


/**
	Writes data to an endpoint buffer
		
	@param [in]	bEP		Endpoint number
	@param [in]	pbBuf	Endpoint data
	@param [in]	iLen	Number of bytes to write
			
	@return TRUE if the data was successfully written or <0 in case of error.
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, int iLen)
{
   1611c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	int idx;
	
	idx = EP2IDX(bEP);
   16120:	e200400f 	and	r4, r0, #15	; 0xf
	
	// set write enable for specific endpoint
	USBCtrl = WR_EN | ((bEP & 0xF) << 2);
   16124:	e59fc074 	ldr	ip, [pc, #116]	; 161a0 <.text+0x61a0>
   16128:	e1a03104 	mov	r3, r4, lsl #2
   1612c:	e3833002 	orr	r3, r3, #2	; 0x2
   16130:	e1a05002 	mov	r5, r2
	
	// set packet length
	USBTxPLen = iLen;
   16134:	e1a0e001 	mov	lr, r1
   16138:	e20000ff 	and	r0, r0, #255	; 0xff
   1613c:	e58c3028 	str	r3, [ip, #40]
   16140:	e58c2024 	str	r2, [ip, #36]
   16144:	ea000008 	b	1616c <USBHwEPWrite+0x50>
	
	// write data
	while (USBCtrl & WR_EN) {
		USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
   16148:	e55e3002 	ldrb	r3, [lr, #-2]
   1614c:	e55e2001 	ldrb	r2, [lr, #-1]
   16150:	e55e1004 	ldrb	r1, [lr, #-4]
   16154:	e1a03803 	mov	r3, r3, lsl #16
   16158:	e1833c02 	orr	r3, r3, r2, lsl #24
   1615c:	e55e2003 	ldrb	r2, [lr, #-3]
   16160:	e1833001 	orr	r3, r3, r1
   16164:	e1833402 	orr	r3, r3, r2, lsl #8
   16168:	e58c301c 	str	r3, [ip, #28]
   1616c:	e59fc02c 	ldr	ip, [pc, #44]	; 161a0 <.text+0x61a0>
   16170:	e59c3028 	ldr	r3, [ip, #40]
   16174:	e3130002 	tst	r3, #2	; 0x2
   16178:	e28ee004 	add	lr, lr, #4	; 0x4
   1617c:	1afffff1 	bne	16148 <USBHwEPWrite+0x2c>
		pbBuf += 4;
	}

	// select endpoint and validate buffer
	USBHwCmd(CMD_EP_SELECT | idx);
   16180:	e1a003a0 	mov	r0, r0, lsr #7
   16184:	e1800084 	orr	r0, r0, r4, lsl #1
   16188:	ebffff57 	bl	15eec <USBHwCmd>
	USBHwCmd(CMD_EP_VALIDATE_BUFFER);
   1618c:	e3a000fa 	mov	r0, #250	; 0xfa
   16190:	ebffff55 	bl	15eec <USBHwCmd>
	
	return iLen;
}
   16194:	e1a00005 	mov	r0, r5
   16198:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1619c:	e12fff1e 	bx	lr
   161a0:	e0090000 	and	r0, r9, r0

000161a4 <USBHwEPRead>:


/**
	Reads data from an endpoint buffer
		
	@param [in]	bEP		Endpoint number
	@param [in]	pbBuf	Endpoint data
	@param [in]	iMaxLen	Maximum number of bytes to read
			
	@return the number of bytes available in the EP (possibly more than iMaxLen),
	or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, int iMaxLen)
{
   161a4:	e92d4010 	stmdb	sp!, {r4, lr}
	int i, idx;
	U32	dwData, dwLen;
	
	idx = EP2IDX(bEP);
   161a8:	e200e00f 	and	lr, r0, #15	; 0xf
	
	// set read enable bit for specific endpoint
	USBCtrl = RD_EN | ((bEP & 0xF) << 2);
   161ac:	e1a0310e 	mov	r3, lr, lsl #2
   161b0:	e59fc08c 	ldr	ip, [pc, #140]	; 16244 <.text+0x6244>
   161b4:	e3833001 	orr	r3, r3, #1	; 0x1
   161b8:	e58c3028 	str	r3, [ip, #40]
   161bc:	e20000ff 	and	r0, r0, #255	; 0xff
	
	// wait for PKT_RDY
	do {
		dwLen = USBRxPLen;
   161c0:	e59f307c 	ldr	r3, [pc, #124]	; 16244 <.text+0x6244>
   161c4:	e5933020 	ldr	r3, [r3, #32]
	} while ((dwLen & PKT_RDY) == 0);
   161c8:	e3130b02 	tst	r3, #2048	; 0x800
   161cc:	0afffffb 	beq	161c0 <USBHwEPRead+0x1c>
	
	// packet valid?
	if ((dwLen & DV) == 0) {
   161d0:	e3130b01 	tst	r3, #1024	; 0x400
   161d4:	03e04000 	mvneq	r4, #0	; 0x0
   161d8:	0a000016 	beq	16238 <USBHwEPRead+0x94>
		return -1;
	}
	
	// get length
	dwLen &= PKT_LNGTH_MASK;
   161dc:	e1a0cb03 	mov	ip, r3, lsl #22
   161e0:	e3a04000 	mov	r4, #0	; 0x0
   161e4:	e1a0cb2c 	mov	ip, ip, lsr #22
   161e8:	e1a03004 	mov	r3, r4
   161ec:	ea000007 	b	16210 <USBHwEPRead+0x6c>
	
	// get data
	dwData = 0;
	for (i = 0; i < dwLen; i++) {
		if ((i % 4) == 0) {
   161f0:	e3140003 	tst	r4, #3	; 0x3
			dwData = USBRxData;
   161f4:	059f3048 	ldreq	r3, [pc, #72]	; 16244 <.text+0x6244>
   161f8:	05933018 	ldreq	r3, [r3, #24]
		}
		if ((pbBuf != NULL) && (i < iMaxLen)) {
   161fc:	e3510000 	cmp	r1, #0	; 0x0
   16200:	11540002 	cmpne	r4, r2
			pbBuf[i] = dwData & 0xFF;
   16204:	b7c43001 	strltb	r3, [r4, r1]
		}
		dwData >>= 8;
   16208:	e1a03423 	mov	r3, r3, lsr #8
   1620c:	e2844001 	add	r4, r4, #1	; 0x1
   16210:	e154000c 	cmp	r4, ip
   16214:	1afffff5 	bne	161f0 <USBHwEPRead+0x4c>
	}

	// make sure RD_EN is clear
	USBCtrl = 0;
   16218:	e59f3024 	ldr	r3, [pc, #36]	; 16244 <.text+0x6244>
   1621c:	e3a02000 	mov	r2, #0	; 0x0

	// select endpoint and clear buffer
	USBHwCmd(CMD_EP_SELECT | idx);
   16220:	e1a003a0 	mov	r0, r0, lsr #7
   16224:	e180008e 	orr	r0, r0, lr, lsl #1
   16228:	e5832028 	str	r2, [r3, #40]
   1622c:	ebffff2e 	bl	15eec <USBHwCmd>
	USBHwCmd(CMD_EP_CLEAR_BUFFER);
   16230:	e3a000f2 	mov	r0, #242	; 0xf2
   16234:	ebffff2c 	bl	15eec <USBHwCmd>
	
	return dwLen;
}
   16238:	e1a00004 	mov	r0, r4
   1623c:	e8bd4010 	ldmia	sp!, {r4, lr}
   16240:	e12fff1e 	bx	lr
   16244:	e0090000 	and	r0, r9, r0

00016248 <USBHwConfigDevice>:


/**
	Sets the 'configured' state.
		
	All registered endpoints are 'realised' and enabled, and the
	'configured' bit is set in the device status register.
		
	@param [in]	fConfigured	If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
	// set configured bit
	USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
   16248:	e2501000 	subs	r1, r0, #0	; 0x0
   1624c:	13a01001 	movne	r1, #1	; 0x1
   16250:	e3a000d8 	mov	r0, #216	; 0xd8
   16254:	eaffff33 	b	15f28 <USBHwCmdWrite>

00016258 <USBHwISR>:
}


/**
	USB interrupt handler
		
	@todo Get all 11 bits of frame number instead of just 8

	Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
	U32	dwStatus;
	U32 dwIntBit;
	U8	bEPStat, bDevStat, bStat;
	int i;
	U16	wFrame;

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

	// handle device interrupts
	dwStatus = USBDevIntSt;
   16258:	e59f2110 	ldr	r2, [pc, #272]	; 16370 <.text+0x6370>
   1625c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   16260:	e5925000 	ldr	r5, [r2]
	
	// frame interrupt
	if (dwStatus & FRAME) {
   16264:	e3150001 	tst	r5, #1	; 0x1
   16268:	0a00000b 	beq	1629c <USBHwISR+0x44>
		// clear int
		USBDevIntClr = FRAME;
		// call handler
		if (_pfnFrameHandler != NULL) {
   1626c:	e59f3100 	ldr	r3, [pc, #256]	; 16374 <.text+0x6374>
   16270:	e5934000 	ldr	r4, [r3]
   16274:	e3a03001 	mov	r3, #1	; 0x1
   16278:	e3540000 	cmp	r4, #0	; 0x0
   1627c:	e5823008 	str	r3, [r2, #8]
   16280:	0a000005 	beq	1629c <USBHwISR+0x44>
			wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
   16284:	e3a000f5 	mov	r0, #245	; 0xf5
   16288:	ebffff38 	bl	15f70 <USBHwCmdRead>
			_pfnFrameHandler(wFrame);
   1628c:	e1a00800 	mov	r0, r0, lsl #16
   16290:	e1a00820 	mov	r0, r0, lsr #16
   16294:	e1a0e00f 	mov	lr, pc
   16298:	e12fff14 	bx	r4
		}
	}
	
	// device status interrupt
	if (dwStatus & DEV_STAT) {
   1629c:	e3150008 	tst	r5, #8	; 0x8
   162a0:	0a00000c 	beq	162d8 <USBHwISR+0x80>
		/*	Clear DEV_STAT interrupt before reading DEV_STAT register.
			This prevents corrupted device status reads, see
			LPC2148 User manual revision 2, 25 july 2006.
		*/
		USBDevIntClr = DEV_STAT;
   162a4:	e59f30c4 	ldr	r3, [pc, #196]	; 16370 <.text+0x6370>
   162a8:	e3a02008 	mov	r2, #8	; 0x8
		bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
   162ac:	e3a000fe 	mov	r0, #254	; 0xfe
   162b0:	e5832008 	str	r2, [r3, #8]
   162b4:	ebffff2d 	bl	15f70 <USBHwCmdRead>
		if (bDevStat & (CON_CH | SUS_CH | RST)) {
   162b8:	e310001a 	tst	r0, #26	; 0x1a
   162bc:	0a000005 	beq	162d8 <USBHwISR+0x80>
			// convert device status into something HW independent
			bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
					((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
					((bDevStat & RST) ? DEV_STATUS_RESET : 0);
			// call handler
			if (_pfnDevIntHandler != NULL) {
   162c0:	e59f30b0 	ldr	r3, [pc, #176]	; 16378 <.text+0x6378>
   162c4:	e5933000 	ldr	r3, [r3]
   162c8:	e3530000 	cmp	r3, #0	; 0x0
DEBUG_LED_ON(8);		
				_pfnDevIntHandler(bStat);
   162cc:	12000015 	andne	r0, r0, #21	; 0x15
   162d0:	11a0e00f 	movne	lr, pc
   162d4:	112fff13 	bxne	r3
DEBUG_LED_OFF(8);		
			}
		}
	}
	
	// endpoint interrupt
	if (dwStatus & EP_SLOW) {
   162d8:	e3150004 	tst	r5, #4	; 0x4
   162dc:	0a000021 	beq	16368 <USBHwISR+0x110>
		// clear EP_SLOW
		USBDevIntClr = EP_SLOW;
   162e0:	e59f3088 	ldr	r3, [pc, #136]	; 16370 <.text+0x6370>
   162e4:	e3a02004 	mov	r2, #4	; 0x4
   162e8:	e5832008 	str	r2, [r3, #8]
   162ec:	e3a04000 	mov	r4, #0	; 0x0
		// check all endpoints
		for (i = 0; i < 32; i++) {
			dwIntBit = (1 << i);
   162f0:	e3a03001 	mov	r3, #1	; 0x1
   162f4:	e1a02413 	mov	r2, r3, lsl r4
			if (USBEpIntSt & dwIntBit) {
   162f8:	e59f1070 	ldr	r1, [pc, #112]	; 16370 <.text+0x6370>
   162fc:	e5913030 	ldr	r3, [r1, #48]
   16300:	e1130002 	tst	r3, r2
   16304:	0a000014 	beq	1635c <USBHwISR+0x104>
				// clear int (and retrieve status)
				USBEpIntClr = dwIntBit;
   16308:	e5812038 	str	r2, [r1, #56]
   1630c:	e59f105c 	ldr	r1, [pc, #92]	; 16370 <.text+0x6370>
   16310:	e5913000 	ldr	r3, [r1]
   16314:	e2030020 	and	r0, r3, #32	; 0x20
   16318:	e3500020 	cmp	r0, #32	; 0x20
   1631c:	1afffffa 	bne	1630c <USBHwISR+0xb4>
				Wait4DevInt(CDFULL);
				bEPStat = USBCmdData;
				// convert EP pipe stat into something HW independent
				bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
						((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
						((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
						((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
						((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
				// call handler
				if (_apfnEPIntHandlers[i / 2] != NULL) {
   16320:	e0843fa4 	add	r3, r4, r4, lsr #31
   16324:	e59f2050 	ldr	r2, [pc, #80]	; 1637c <.text+0x637c>
   16328:	e1a030c3 	mov	r3, r3, asr #1
   1632c:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   16330:	e5810008 	str	r0, [r1, #8]
   16334:	e3530000 	cmp	r3, #0	; 0x0
   16338:	e5911014 	ldr	r1, [r1, #20]
   1633c:	0a000006 	beq	1635c <USBHwISR+0x104>
DEBUG_LED_ON(10);		
					_apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
   16340:	e1a000c4 	mov	r0, r4, asr #1
   16344:	e200000f 	and	r0, r0, #15	; 0xf
   16348:	e1800384 	orr	r0, r0, r4, lsl #7
   1634c:	e200008f 	and	r0, r0, #143	; 0x8f
   16350:	e201101f 	and	r1, r1, #31	; 0x1f
   16354:	e1a0e00f 	mov	lr, pc
   16358:	e12fff13 	bx	r3
   1635c:	e2844001 	add	r4, r4, #1	; 0x1
   16360:	e3540020 	cmp	r4, #32	; 0x20
   16364:	1affffe1 	bne	162f0 <USBHwISR+0x98>
DEBUG_LED_OFF(10);
				}
			}
		}
	}
	
DEBUG_LED_OFF(9);		
}
   16368:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1636c:	e12fff1e 	bx	lr
   16370:	e0090000 	and	r0, r9, r0
   16374:	40000d20 	andmi	r0, r0, r0, lsr #26
   16378:	40000d24 	andmi	r0, r0, r4, lsr #26
   1637c:	40000d28 	andmi	r0, r0, r8, lsr #26

00016380 <USBHwInit>:



/**
	Initialises the USB hardware
		
	This function assumes that the hardware is connected as shown in
	section 10.1 of the LPC2148 data sheet:
	* P0.31 controls a switch to connect a 1.5k pull-up to D+ if low.
	* P0.23 is connected to USB VCC.
	
	Embedded artists board: make sure to disconnect P0.23 LED as it
	acts as a pull-up and so prevents detection of USB disconnect.
		
	@return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
	// configure P0.23 for Vbus sense
	PINSEL1 = (PINSEL1 & ~(3 << 14)) | (1 << 14);	// P0.23
   16380:	e59f20b0 	ldr	r2, [pc, #176]	; 16438 <.text+0x6438>
   16384:	e5923004 	ldr	r3, [r2, #4]
   16388:	e3c33903 	bic	r3, r3, #49152	; 0xc000
   1638c:	e3833901 	orr	r3, r3, #16384	; 0x4000
   16390:	e5823004 	str	r3, [r2, #4]
	// configure P0.31 for CONNECT
	PINSEL1 = (PINSEL1 & ~(3 << 30)) | (2 << 30);	// P0.31
   16394:	e5923004 	ldr	r3, [r2, #4]
   16398:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   1639c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   163a0:	e5823004 	str	r3, [r2, #4]

	// enable PUSB
	PCONP |= (1 << 31);		
   163a4:	e282281d 	add	r2, r2, #1900544	; 0x1d0000
   163a8:	e59230c4 	ldr	r3, [r2, #196]
   163ac:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   163b0:	e58230c4 	str	r3, [r2, #196]
	
	// initialise PLL
	PLL1CON = 1;			// enable PLL
   163b4:	e3a03001 	mov	r3, #1	; 0x1
   163b8:	e58230a0 	str	r3, [r2, #160]
   163bc:	e52de004 	str	lr, [sp, #-4]!
	PLL1CFG = (1 << 5) | 3; // P = 2, M = 4
   163c0:	e2833022 	add	r3, r3, #34	; 0x22
   163c4:	e58230a4 	str	r3, [r2, #164]
	PLL1FEED = 0xAA;
   163c8:	e2833087 	add	r3, r3, #135	; 0x87
   163cc:	e58230ac 	str	r3, [r2, #172]
	PLL1FEED = 0x55;
   163d0:	e3a03055 	mov	r3, #85	; 0x55
   163d4:	e58230ac 	str	r3, [r2, #172]
	while ((PLL1STAT & (1 << 10)) == 0);
   163d8:	e59fe05c 	ldr	lr, [pc, #92]	; 1643c <.text+0x643c>
   163dc:	e59e30a8 	ldr	r3, [lr, #168]
   163e0:	e3130b01 	tst	r3, #1024	; 0x400
   163e4:	0afffffb 	beq	163d8 <USBHwInit+0x58>

	PLL1CON = 3;			// enable and connect
   163e8:	e3a03003 	mov	r3, #3	; 0x3
   163ec:	e58e30a0 	str	r3, [lr, #160]
	PLL1FEED = 0xAA;
	PLL1FEED = 0x55;
	
	// disable/clear all interrupts for now
	USBDevIntEn = 0;
   163f0:	e59f2048 	ldr	r2, [pc, #72]	; 16440 <.text+0x6440>
   163f4:	e28330a7 	add	r3, r3, #167	; 0xa7
   163f8:	e58e30ac 	str	r3, [lr, #172]
   163fc:	e3a01000 	mov	r1, #0	; 0x0
	USBDevIntClr = 0xFFFFFFFF;
   16400:	e3e0c000 	mvn	ip, #0	; 0x0
   16404:	e3a03055 	mov	r3, #85	; 0x55
   16408:	e58e30ac 	str	r3, [lr, #172]
	USBDevIntPri = 0;

	USBEpIntEn = 0;
	USBEpIntClr = 0xFFFFFFFF;
	USBEpIntPri = 0;

	// by default, only ACKs generate interrupts
	USBHwNakIntEnable(0);
   1640c:	e1a00001 	mov	r0, r1
   16410:	e5821004 	str	r1, [r2, #4]
   16414:	e582c008 	str	ip, [r2, #8]
   16418:	e582102c 	str	r1, [r2, #44]
   1641c:	e5821034 	str	r1, [r2, #52]
   16420:	e582c038 	str	ip, [r2, #56]
   16424:	e5821040 	str	r1, [r2, #64]
   16428:	ebffff27 	bl	160cc <USBHwNakIntEnable>
	
	// init debug leds
	DEBUG_LED_INIT(8);
	DEBUG_LED_INIT(9);
	DEBUG_LED_INIT(10);

	return TRUE;
}
   1642c:	e3a00001 	mov	r0, #1	; 0x1
   16430:	e49de004 	ldr	lr, [sp], #4
   16434:	e12fff1e 	bx	lr
   16438:	e002c000 	and	ip, r2, r0
   1643c:	e01fc000 	ands	ip, pc, r0
   16440:	e0090000 	and	r0, r9, r0

00016444 <_HandleRequest>:

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
   16444:	e52de004 	str	lr, [sp, #-4]!
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
	pfnHandler = apfnReqHandlers[iType];
   16448:	e5d03000 	ldrb	r3, [r0]
   1644c:	e59fc02c 	ldr	ip, [pc, #44]	; 16480 <.text+0x6480>
   16450:	e1a032a3 	mov	r3, r3, lsr #5
   16454:	e2033003 	and	r3, r3, #3	; 0x3
   16458:	e79c3103 	ldr	r3, [ip, r3, lsl #2]
	if (pfnHandler == NULL) {
   1645c:	e3530000 	cmp	r3, #0	; 0x0
   16460:	e1a0c003 	mov	ip, r3
   16464:	0a000002 	beq	16474 <_HandleRequest+0x30>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
   16468:	e1a0e00f 	mov	lr, pc
   1646c:	e12fff13 	bx	r3
   16470:	e1a0c000 	mov	ip, r0
}
   16474:	e1a0000c 	mov	r0, ip
   16478:	e49de004 	ldr	lr, [sp], #4
   1647c:	e12fff1e 	bx	lr
   16480:	40000d68 	andmi	r0, r0, r8, ror #26

00016484 <USBRegisterRequestHandler>:


/**
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
	for (i = 0; i < 8; i++) {
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}


/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
	USBHwEPWrite(0x80, pbData, iChunk);
	pbData += iChunk;
	iResidue -= iChunk;
}


/**
 *	Handles IN/OUT transfers on EP0
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
	int iChunk, iType;

	if (bEP == 0x00) {
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
				if (iChunk < 0) {
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
				iResidue -= iChunk;
				if (iResidue == 0) {
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
					pbData = apbDataStore[iType];
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}


/**
	Registers a callback for handling requests
		
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
	apbDataStore[iType] = pbDataStore;
   16484:	e59f300c 	ldr	r3, [pc, #12]	; 16498 <.text+0x6498>
   16488:	e7832100 	str	r2, [r3, r0, lsl #2]
   1648c:	e59f3008 	ldr	r3, [pc, #8]	; 1649c <.text+0x649c>
   16490:	e7831100 	str	r1, [r3, r0, lsl #2]
}
   16494:	e12fff1e 	bx	lr
   16498:	40000d78 	andmi	r0, r0, r8, ror sp
   1649c:	40000d68 	andmi	r0, r0, r8, ror #26

000164a0 <StallControlPipe>:
   164a0:	e52de004 	str	lr, [sp, #-4]!
   164a4:	e3a00080 	mov	r0, #128	; 0x80
   164a8:	e3a01001 	mov	r1, #1	; 0x1
   164ac:	ebffff12 	bl	160fc <USBHwEPStall>
   164b0:	e49de004 	ldr	lr, [sp], #4
   164b4:	e12fff1e 	bx	lr

000164b8 <DataIn>:
   164b8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   164bc:	e59f603c 	ldr	r6, [pc, #60]	; 16500 <.text+0x6500>
   164c0:	e5964000 	ldr	r4, [r6]
   164c4:	e59f5038 	ldr	r5, [pc, #56]	; 16504 <.text+0x6504>
   164c8:	e3540040 	cmp	r4, #64	; 0x40
   164cc:	a3a04040 	movge	r4, #64	; 0x40
   164d0:	e1a02004 	mov	r2, r4
   164d4:	e3a00080 	mov	r0, #128	; 0x80
   164d8:	e5951000 	ldr	r1, [r5]
   164dc:	ebffff0e 	bl	1611c <USBHwEPWrite>
   164e0:	e5953000 	ldr	r3, [r5]
   164e4:	e5962000 	ldr	r2, [r6]
   164e8:	e0833004 	add	r3, r3, r4
   164ec:	e0642002 	rsb	r2, r4, r2
   164f0:	e5853000 	str	r3, [r5]
   164f4:	e5862000 	str	r2, [r6]
   164f8:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   164fc:	e12fff1e 	bx	lr
   16500:	40000d94 	mulmi	r0, r4, sp
   16504:	40000d90 	mulmi	r0, r0, sp

00016508 <USBHandleControlTransfer>:
   16508:	e21000ff 	ands	r0, r0, #255	; 0xff
   1650c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   16510:	e20170ff 	and	r7, r1, #255	; 0xff
   16514:	1a000043 	bne	16628 <USBHandleControlTransfer+0x120>
   16518:	e3110004 	tst	r1, #4	; 0x4
   1651c:	e59f611c 	ldr	r6, [pc, #284]	; 16640 <.text+0x6640>
   16520:	0a00001d 	beq	1659c <USBHandleControlTransfer+0x94>
   16524:	e59f5118 	ldr	r5, [pc, #280]	; 16644 <.text+0x6644>
   16528:	e3a02008 	mov	r2, #8	; 0x8
   1652c:	e1a01005 	mov	r1, r5
   16530:	ebffff1b 	bl	161a4 <USBHwEPRead>
   16534:	e5d50000 	ldrb	r0, [r5]
   16538:	e59f2108 	ldr	r2, [pc, #264]	; 16648 <.text+0x6648>
   1653c:	e1a032a0 	mov	r3, r0, lsr #5
   16540:	e1d510b6 	ldrh	r1, [r5, #6]
   16544:	e2033003 	and	r3, r3, #3	; 0x3
   16548:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   1654c:	e59f40f8 	ldr	r4, [pc, #248]	; 1664c <.text+0x664c>
   16550:	e59f20f8 	ldr	r2, [pc, #248]	; 16650 <.text+0x6650>
   16554:	e3510000 	cmp	r1, #0	; 0x0
   16558:	e5823000 	str	r3, [r2]
   1655c:	e5861000 	str	r1, [r6]
   16560:	e5841000 	str	r1, [r4]
   16564:	0a000001 	beq	16570 <USBHandleControlTransfer+0x68>
   16568:	e1b003a0 	movs	r0, r0, lsr #7
   1656c:	0a000031 	beq	16638 <USBHandleControlTransfer+0x130>
   16570:	e1a00005 	mov	r0, r5
   16574:	e1a01004 	mov	r1, r4
   16578:	ebffffb1 	bl	16444 <_HandleRequest>
   1657c:	e3500000 	cmp	r0, #0	; 0x0
   16580:	0a000021 	beq	1660c <USBHandleControlTransfer+0x104>
   16584:	e1d520b6 	ldrh	r2, [r5, #6]
   16588:	e5943000 	ldr	r3, [r4]
   1658c:	e1520003 	cmp	r2, r3
   16590:	d5862000 	strle	r2, [r6]
   16594:	c5863000 	strgt	r3, [r6]
   16598:	ea000024 	b	16630 <USBHandleControlTransfer+0x128>
   1659c:	e5962000 	ldr	r2, [r6]
   165a0:	e3520000 	cmp	r2, #0	; 0x0
   165a4:	da00001b 	ble	16618 <USBHandleControlTransfer+0x110>
   165a8:	e59f40a0 	ldr	r4, [pc, #160]	; 16650 <.text+0x6650>
   165ac:	e5941000 	ldr	r1, [r4]
   165b0:	ebfffefb 	bl	161a4 <USBHwEPRead>
   165b4:	e3500000 	cmp	r0, #0	; 0x0
   165b8:	ba000013 	blt	1660c <USBHandleControlTransfer+0x104>
   165bc:	e5962000 	ldr	r2, [r6]
   165c0:	e5943000 	ldr	r3, [r4]
   165c4:	e0602002 	rsb	r2, r0, r2
   165c8:	e0833000 	add	r3, r3, r0
   165cc:	e3520000 	cmp	r2, #0	; 0x0
   165d0:	e5843000 	str	r3, [r4]
   165d4:	e5862000 	str	r2, [r6]
   165d8:	1a000016 	bne	16638 <USBHandleControlTransfer+0x130>
   165dc:	e59f0060 	ldr	r0, [pc, #96]	; 16644 <.text+0x6644>
   165e0:	e5d03000 	ldrb	r3, [r0]
   165e4:	e59f205c 	ldr	r2, [pc, #92]	; 16648 <.text+0x6648>
   165e8:	e1a032a3 	mov	r3, r3, lsr #5
   165ec:	e2033003 	and	r3, r3, #3	; 0x3
   165f0:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   165f4:	e59f1050 	ldr	r1, [pc, #80]	; 1664c <.text+0x664c>
   165f8:	e1a02004 	mov	r2, r4
   165fc:	e5843000 	str	r3, [r4]
   16600:	ebffff8f 	bl	16444 <_HandleRequest>
   16604:	e3500000 	cmp	r0, #0	; 0x0
   16608:	1a000008 	bne	16630 <USBHandleControlTransfer+0x128>
   1660c:	e1a00007 	mov	r0, r7
   16610:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   16614:	eaffffa1 	b	164a0 <StallControlPipe>
   16618:	e1a01000 	mov	r1, r0
   1661c:	e1a02000 	mov	r2, r0
   16620:	ebfffedf 	bl	161a4 <USBHwEPRead>
   16624:	ea000003 	b	16638 <USBHandleControlTransfer+0x130>
   16628:	e3500080 	cmp	r0, #128	; 0x80
   1662c:	1a000001 	bne	16638 <USBHandleControlTransfer+0x130>
   16630:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   16634:	eaffff9f 	b	164b8 <DataIn>
   16638:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   1663c:	e12fff1e 	bx	lr
   16640:	40000d94 	mulmi	r0, r4, sp
   16644:	40000d88 	andmi	r0, r0, r8, lsl #27
   16648:	40000d78 	andmi	r0, r0, r8, ror sp
   1664c:	40000d98 	mulmi	r0, r8, sp
   16650:	40000d90 	mulmi	r0, r0, sp

00016654 <USBRegisterDescriptors>:
 */
//void USBRegisterDescriptors(const U8 *pabDescriptors)
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
   16654:	e59f3004 	ldr	r3, [pc, #4]	; 16660 <.text+0x6660>
   16658:	e5830000 	str	r0, [r3]
}
   1665c:	e12fff1e 	bx	lr
   16660:	40000da4 	andmi	r0, r0, r4, lsr #27

00016664 <USBGetDescriptor>:


/**
	Parses the list of installed USB descriptors and attempts to find
	the specified USB descriptor.
		
	@param [in]		wTypeIndex	Type and index of the descriptor
	@param [in]		wLangID		Language ID of the descriptor (currently unused)
	@param [out]	*piLen		Descriptor length
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
   16664:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	U8	bType, bIndex;
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
	pab = (U8 *)pabDescrip;
   16668:	e59f1074 	ldr	r1, [pc, #116]	; 166e4 <.text+0x66e4>
   1666c:	e1a00800 	mov	r0, r0, lsl #16
   16670:	e591c000 	ldr	ip, [r1]
   16674:	e1a01820 	mov	r1, r0, lsr #16
   16678:	e1a05002 	mov	r5, r2
   1667c:	e1a04003 	mov	r4, r3
   16680:	e1a0ec20 	mov	lr, r0, lsr #24
   16684:	e20110ff 	and	r1, r1, #255	; 0xff
   16688:	e3a02000 	mov	r2, #0	; 0x0
   1668c:	ea00000f 	b	166d0 <USBGetDescriptor+0x6c>
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
   16690:	e5dc3001 	ldrb	r3, [ip, #1]
   16694:	e153000e 	cmp	r3, lr
   16698:	1a00000b 	bne	166cc <USBGetDescriptor+0x68>
			if (iCurIndex == bIndex) {
   1669c:	e1520001 	cmp	r2, r1
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
   166a0:	e2822001 	add	r2, r2, #1	; 0x1
   166a4:	1a000008 	bne	166cc <USBGetDescriptor+0x68>
   166a8:	e584c000 	str	ip, [r4]
   166ac:	e35e0002 	cmp	lr, #2	; 0x2
   166b0:	05dc2003 	ldreqb	r2, [ip, #3]
   166b4:	05dc3002 	ldreqb	r3, [ip, #2]
   166b8:	15dc3000 	ldrneb	r3, [ip]
   166bc:	01833402 	orreq	r3, r3, r2, lsl #8
   166c0:	e3a00001 	mov	r0, #1	; 0x1
   166c4:	e5853000 	str	r3, [r5]
   166c8:	ea000003 	b	166dc <USBGetDescriptor+0x78>
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
   166cc:	e08cc000 	add	ip, ip, r0
   166d0:	e5dc0000 	ldrb	r0, [ip]
   166d4:	e3500000 	cmp	r0, #0	; 0x0
   166d8:	1affffec 	bne	16690 <USBGetDescriptor+0x2c>
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
   166dc:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   166e0:	e12fff1e 	bx	lr
   166e4:	40000da4 	andmi	r0, r0, r4, lsr #27

000166e8 <USBRegisterCustomReqHandler>:


/**
	Configures the device according to the specified configuration index and
	alternate setting by parsing the installed USB descriptor list.
	A configuration index of 0 unconfigures the device.
		
	@param [in]		bConfigIndex	Configuration index
	@param [in]		bAltSetting		Alternate setting number
	
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
	U8	*pab;
	U8	bCurConfig, bCurAltSetting;
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
	}

	return TRUE;
}


/**
	Local function to handle a standard device request
		
	@param [in]		pSetup		The setup packet
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
		pbData[1] = 0;
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
		*piLen = 1;
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
		break;

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_REMOTE_WAKEUP) {
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
}


/**
	Local function to handle a standard interface request
		
	@param [in]		pSetup		The setup packet
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
		pbData[1] = 0;
		*piLen = 2;
		break;

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
			return FALSE;
		}
		*piLen = 0;
		break;

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
	}

	return TRUE;
}


/**
	Local function to handle a standard endpoint request
		
	@param [in]		pSetup		The setup packet
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
		pbData[1] = 0;
		*piLen = 2;
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
			break;
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
			break;
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
}


/**
	Default handler for standard ('chapter 9') requests
	
	If a custom request handler was installed, this handler is called first.
		
	@param [in]		pSetup		The setup packet
	@param [in,out]	*piLen		Pointer to data length
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}


/**
	Registers a callback for custom device requests
	
	In USBHandleStandardRequest, the custom request handler gets a first
	chance at handling the request before it is handed over to the 'chapter 9'
	request handler.
	
	This can be used for example in HID devices, where a REQ_GET_DESCRIPTOR
	request is sent to an interface, which is not covered by the 'chapter 9'
	specification.
		
	@param [in]	pfnHandler	Callback function pointer
 */
void USBRegisterCustomReqHandler(TFnHandleRequest *pfnHandler)
{
	pfnHandleCustomReq = pfnHandler;
   166e8:	e59f3004 	ldr	r3, [pc, #4]	; 166f4 <.text+0x66f4>
   166ec:	e5830000 	str	r0, [r3]
}
   166f0:	e12fff1e 	bx	lr
   166f4:	40000d9c 	mulmi	r0, ip, sp

000166f8 <USBHandleStandardRequest>:
   166f8:	e59f3264 	ldr	r3, [pc, #612]	; 16964 <.text+0x6964>
   166fc:	e5933000 	ldr	r3, [r3]
   16700:	e3530000 	cmp	r3, #0	; 0x0
   16704:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16708:	e1a05000 	mov	r5, r0
   1670c:	e1a08001 	mov	r8, r1
   16710:	e1a07002 	mov	r7, r2
   16714:	0a000003 	beq	16728 <USBHandleStandardRequest+0x30>
   16718:	e1a0e00f 	mov	lr, pc
   1671c:	e12fff13 	bx	r3
   16720:	e3500000 	cmp	r0, #0	; 0x0
   16724:	1a00001e 	bne	167a4 <.text+0x67a4>
   16728:	e5d53000 	ldrb	r3, [r5]
   1672c:	e203401f 	and	r4, r3, #31	; 0x1f
   16730:	e3540001 	cmp	r4, #1	; 0x1
   16734:	0a00004e 	beq	16874 <.text+0x6874>
   16738:	e3540002 	cmp	r4, #2	; 0x2
   1673c:	0a000064 	beq	168d4 <.text+0x68d4>
   16740:	e3540000 	cmp	r4, #0	; 0x0
   16744:	1a000082 	bne	16954 <.text+0x6954>
   16748:	e5d53001 	ldrb	r3, [r5, #1]
   1674c:	e5971000 	ldr	r1, [r7]
   16750:	e3530009 	cmp	r3, #9	; 0x9
   16754:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   16758:	ea00007d 	b	16954 <.text+0x6954>
   1675c:	00016784 	andeq	r6, r1, r4, lsl #15
   16760:	00016954 	andeq	r6, r1, r4, asr r9
   16764:	00016954 	andeq	r6, r1, r4, asr r9
   16768:	00016954 	andeq	r6, r1, r4, asr r9
   1676c:	00016954 	andeq	r6, r1, r4, asr r9
   16770:	0001679c 	muleq	r1, ip, r7
   16774:	000167ac 	andeq	r6, r1, ip, lsr #15
   16778:	00016954 	andeq	r6, r1, r4, asr r9
   1677c:	000167c4 	andeq	r6, r1, r4, asr #15
   16780:	000167e0 	andeq	r6, r1, r0, ror #15
   16784:	e3a03000 	mov	r3, #0	; 0x0
   16788:	e5c13001 	strb	r3, [r1, #1]
   1678c:	e5c13000 	strb	r3, [r1]
   16790:	e3a0c001 	mov	ip, #1	; 0x1
   16794:	e2833002 	add	r3, r3, #2	; 0x2
   16798:	ea00000e 	b	167d8 <.text+0x67d8>
   1679c:	e5d50002 	ldrb	r0, [r5, #2]
   167a0:	ebfffe41 	bl	160ac <USBHwSetAddress>
   167a4:	e3a0c001 	mov	ip, #1	; 0x1
   167a8:	ea00006a 	b	16958 <.text+0x6958>
   167ac:	e1d510b4 	ldrh	r1, [r5, #4]
   167b0:	e1d500b2 	ldrh	r0, [r5, #2]
   167b4:	e1a02008 	mov	r2, r8
   167b8:	e1a03007 	mov	r3, r7
   167bc:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   167c0:	eaffffa7 	b	16664 <USBGetDescriptor>
   167c4:	e59f319c 	ldr	r3, [pc, #412]	; 16968 <.text+0x6968>
   167c8:	e5d32000 	ldrb	r2, [r3]
   167cc:	e3a03001 	mov	r3, #1	; 0x1
   167d0:	e5c12000 	strb	r2, [r1]
   167d4:	e1a0c003 	mov	ip, r3
   167d8:	e5883000 	str	r3, [r8]
   167dc:	ea00005d 	b	16958 <.text+0x6958>
   167e0:	e5d56002 	ldrb	r6, [r5, #2]
   167e4:	e3560000 	cmp	r6, #0	; 0x0
   167e8:	01a00006 	moveq	r0, r6
   167ec:	0a00001a 	beq	1685c <.text+0x685c>
   167f0:	e59f3174 	ldr	r3, [pc, #372]	; 1696c <.text+0x696c>
   167f4:	e3a070ff 	mov	r7, #255	; 0xff
   167f8:	e5934000 	ldr	r4, [r3]
   167fc:	e1a08007 	mov	r8, r7
   16800:	ea000011 	b	1684c <.text+0x684c>
   16804:	e5d43001 	ldrb	r3, [r4, #1]
   16808:	e3530004 	cmp	r3, #4	; 0x4
   1680c:	05d47003 	ldreqb	r7, [r4, #3]
   16810:	0a00000b 	beq	16844 <.text+0x6844>
   16814:	e3530005 	cmp	r3, #5	; 0x5
   16818:	0a000002 	beq	16828 <.text+0x6828>
   1681c:	e3530002 	cmp	r3, #2	; 0x2
   16820:	05d48005 	ldreqb	r8, [r4, #5]
   16824:	ea000006 	b	16844 <.text+0x6844>
   16828:	e1580006 	cmp	r8, r6
   1682c:	03570000 	cmpeq	r7, #0	; 0x0
   16830:	05d43004 	ldreqb	r3, [r4, #4]
   16834:	05d41005 	ldreqb	r1, [r4, #5]
   16838:	05d40002 	ldreqb	r0, [r4, #2]
   1683c:	01831401 	orreq	r1, r3, r1, lsl #8
   16840:	0bfffddd 	bleq	15fbc <USBHwEPConfig>
   16844:	e5d43000 	ldrb	r3, [r4]
   16848:	e0844003 	add	r4, r4, r3
   1684c:	e5d43000 	ldrb	r3, [r4]
   16850:	e3530000 	cmp	r3, #0	; 0x0
   16854:	1affffea 	bne	16804 <.text+0x6804>
   16858:	e3a00001 	mov	r0, #1	; 0x1
   1685c:	ebfffe79 	bl	16248 <USBHwConfigDevice>
   16860:	e1d520b2 	ldrh	r2, [r5, #2]
   16864:	e59f30fc 	ldr	r3, [pc, #252]	; 16968 <.text+0x6968>
   16868:	e3a0c001 	mov	ip, #1	; 0x1
   1686c:	e5c32000 	strb	r2, [r3]
   16870:	ea000038 	b	16958 <.text+0x6958>
   16874:	e5d53001 	ldrb	r3, [r5, #1]
   16878:	e3530000 	cmp	r3, #0	; 0x0
   1687c:	e5972000 	ldr	r2, [r7]
   16880:	0a000004 	beq	16898 <.text+0x6898>
   16884:	e353000a 	cmp	r3, #10	; 0xa
   16888:	0a000007 	beq	168ac <.text+0x68ac>
   1688c:	e353000b 	cmp	r3, #11	; 0xb
   16890:	1a00002f 	bne	16954 <.text+0x6954>
   16894:	ea000008 	b	168bc <.text+0x68bc>
   16898:	e5c23001 	strb	r3, [r2, #1]
   1689c:	e5c23000 	strb	r3, [r2]
   168a0:	e1a0c004 	mov	ip, r4
   168a4:	e3a03002 	mov	r3, #2	; 0x2
   168a8:	eaffffca 	b	167d8 <.text+0x67d8>
   168ac:	e3a03000 	mov	r3, #0	; 0x0
   168b0:	e1a0c004 	mov	ip, r4
   168b4:	e5c23000 	strb	r3, [r2]
   168b8:	ea000015 	b	16914 <.text+0x6914>
   168bc:	e1d500b2 	ldrh	r0, [r5, #2]
   168c0:	e3500000 	cmp	r0, #0	; 0x0
   168c4:	03a0c001 	moveq	ip, #1	; 0x1
   168c8:	05880000 	streq	r0, [r8]
   168cc:	0a000021 	beq	16958 <.text+0x6958>
   168d0:	ea00001f 	b	16954 <.text+0x6954>
   168d4:	e5d56001 	ldrb	r6, [r5, #1]
   168d8:	e3560001 	cmp	r6, #1	; 0x1
   168dc:	e5977000 	ldr	r7, [r7]
   168e0:	0a00000d 	beq	1691c <.text+0x691c>
   168e4:	3a000002 	bcc	168f4 <.text+0x68f4>
   168e8:	e3560003 	cmp	r6, #3	; 0x3
   168ec:	1a000018 	bne	16954 <.text+0x6954>
   168f0:	ea000010 	b	16938 <.text+0x6938>
   168f4:	e5d50004 	ldrb	r0, [r5, #4]
   168f8:	ebfffdf6 	bl	160d8 <USBHwEPGetStatus>
   168fc:	e1a000a0 	mov	r0, r0, lsr #1
   16900:	e2000001 	and	r0, r0, #1	; 0x1
   16904:	e3a03000 	mov	r3, #0	; 0x0
   16908:	e5c73001 	strb	r3, [r7, #1]
   1690c:	e5c70000 	strb	r0, [r7]
   16910:	e3a0c001 	mov	ip, #1	; 0x1
   16914:	e5884000 	str	r4, [r8]
   16918:	ea00000e 	b	16958 <.text+0x6958>
   1691c:	e1d510b2 	ldrh	r1, [r5, #2]
   16920:	e3510000 	cmp	r1, #0	; 0x0
   16924:	1a00000a 	bne	16954 <.text+0x6954>
   16928:	e5d50004 	ldrb	r0, [r5, #4]
   1692c:	ebfffdf2 	bl	160fc <USBHwEPStall>
   16930:	e1a0c006 	mov	ip, r6
   16934:	ea000007 	b	16958 <.text+0x6958>
   16938:	e1d530b2 	ldrh	r3, [r5, #2]
   1693c:	e3530000 	cmp	r3, #0	; 0x0
   16940:	1a000003 	bne	16954 <.text+0x6954>
   16944:	e5d50004 	ldrb	r0, [r5, #4]
   16948:	e3a01001 	mov	r1, #1	; 0x1
   1694c:	ebfffdea 	bl	160fc <USBHwEPStall>
   16950:	eaffff93 	b	167a4 <.text+0x67a4>
   16954:	e3a0c000 	mov	ip, #0	; 0x0
   16958:	e1a0000c 	mov	r0, ip
   1695c:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   16960:	e12fff1e 	bx	lr
   16964:	40000d9c 	mulmi	r0, ip, sp
   16968:	40000da0 	andmi	r0, r0, r0, lsr #27
   1696c:	40000da4 	andmi	r0, r0, r4, lsr #27

00016970 <free>:
   16970:	e59f3014 	ldr	r3, [pc, #20]	; 1698c <.text+0x698c>
   16974:	e1a01000 	mov	r1, r0
   16978:	e52de004 	str	lr, [sp, #-4]!
   1697c:	e5930000 	ldr	r0, [r3]
   16980:	eb00117c 	bl	1af78 <_free_r>
   16984:	e49de004 	ldr	lr, [sp], #4
   16988:	e12fff1e 	bx	lr
   1698c:	40000488 	andmi	r0, r0, r8, lsl #9

00016990 <malloc>:
   16990:	e59f3014 	ldr	r3, [pc, #20]	; 169ac <.text+0x69ac>
   16994:	e1a01000 	mov	r1, r0
   16998:	e52de004 	str	lr, [sp, #-4]!
   1699c:	e5930000 	ldr	r0, [r3]
   169a0:	eb000002 	bl	169b0 <_malloc_r>
   169a4:	e49de004 	ldr	lr, [sp], #4
   169a8:	e12fff1e 	bx	lr
   169ac:	40000488 	andmi	r0, r0, r8, lsl #9

000169b0 <_malloc_r>:
   169b0:	e281300b 	add	r3, r1, #11	; 0xb
   169b4:	e3530016 	cmp	r3, #22	; 0x16
   169b8:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169bc:	93a08010 	movls	r8, #16	; 0x10
   169c0:	83c38007 	bichi	r8, r3, #7	; 0x7
   169c4:	e1580001 	cmp	r8, r1
   169c8:	23a03000 	movcs	r3, #0	; 0x0
   169cc:	33a03001 	movcc	r3, #1	; 0x1
   169d0:	e1933fa8 	orrs	r3, r3, r8, lsr #31
   169d4:	e1a0a000 	mov	sl, r0
   169d8:	13a0300c 	movne	r3, #12	; 0xc
   169dc:	13a00000 	movne	r0, #0	; 0x0
   169e0:	158a3000 	strne	r3, [sl]
   169e4:	1a00018a 	bne	17014 <_malloc_r+0x664>
   169e8:	e1a0000a 	mov	r0, sl
   169ec:	eb0001a0 	bl	17074 <__malloc_lock>
   169f0:	e3580f7e 	cmp	r8, #504	; 0x1f8
   169f4:	2a000011 	bcs	16a40 <_malloc_r+0x90>
   169f8:	e59f361c 	ldr	r3, [pc, #1564]	; 1701c <.text+0x701c>
   169fc:	e1a021a8 	mov	r2, r8, lsr #3
   16a00:	e0833182 	add	r3, r3, r2, lsl #3
   16a04:	e593400c 	ldr	r4, [r3, #12]
   16a08:	e1540003 	cmp	r4, r3
   16a0c:	1a000003 	bne	16a20 <_malloc_r+0x70>
   16a10:	e2843008 	add	r3, r4, #8	; 0x8
   16a14:	e593400c 	ldr	r4, [r3, #12]
   16a18:	e1540003 	cmp	r4, r3
   16a1c:	0a000005 	beq	16a38 <_malloc_r+0x88>
   16a20:	e5943004 	ldr	r3, [r4, #4]
   16a24:	e3c33003 	bic	r3, r3, #3	; 0x3
   16a28:	e0843003 	add	r3, r4, r3
   16a2c:	e5932004 	ldr	r2, [r3, #4]
   16a30:	e594000c 	ldr	r0, [r4, #12]
   16a34:	ea00016e 	b	16ff4 <_malloc_r+0x644>
   16a38:	e2825002 	add	r5, r2, #2	; 0x2
   16a3c:	ea00002a 	b	16aec <_malloc_r+0x13c>
   16a40:	e1b024a8 	movs	r2, r8, lsr #9
   16a44:	01a021a8 	moveq	r2, r8, lsr #3
   16a48:	0a000017 	beq	16aac <_malloc_r+0xfc>
   16a4c:	e3520004 	cmp	r2, #4	; 0x4
   16a50:	91a03328 	movls	r3, r8, lsr #6
   16a54:	92832038 	addls	r2, r3, #56	; 0x38
   16a58:	9a000013 	bls	16aac <_malloc_r+0xfc>
   16a5c:	e3520014 	cmp	r2, #20	; 0x14
   16a60:	9282205b 	addls	r2, r2, #91	; 0x5b
   16a64:	9a000010 	bls	16aac <_malloc_r+0xfc>
   16a68:	e3520054 	cmp	r2, #84	; 0x54
   16a6c:	91a03628 	movls	r3, r8, lsr #12
   16a70:	9283206e 	addls	r2, r3, #110	; 0x6e
   16a74:	9a00000c 	bls	16aac <_malloc_r+0xfc>
   16a78:	e3520f55 	cmp	r2, #340	; 0x154
   16a7c:	91a037a8 	movls	r3, r8, lsr #15
   16a80:	92832077 	addls	r2, r3, #119	; 0x77
   16a84:	9a000008 	bls	16aac <_malloc_r+0xfc>
   16a88:	e59f3590 	ldr	r3, [pc, #1424]	; 17020 <.text+0x7020>
   16a8c:	e1520003 	cmp	r2, r3
   16a90:	83a0207e 	movhi	r2, #126	; 0x7e
   16a94:	8a000004 	bhi	16aac <_malloc_r+0xfc>
   16a98:	ea000001 	b	16aa4 <_malloc_r+0xf4>
   16a9c:	e2422001 	sub	r2, r2, #1	; 0x1
   16aa0:	ea000010 	b	16ae8 <_malloc_r+0x138>
   16aa4:	e1a03928 	mov	r3, r8, lsr #18
   16aa8:	e283207c 	add	r2, r3, #124	; 0x7c
   16aac:	e59f3568 	ldr	r3, [pc, #1384]	; 1701c <.text+0x701c>
   16ab0:	e083c182 	add	ip, r3, r2, lsl #3
   16ab4:	e59c400c 	ldr	r4, [ip, #12]
   16ab8:	ea000008 	b	16ae0 <_malloc_r+0x130>
   16abc:	e5943004 	ldr	r3, [r4, #4]
   16ac0:	e3c33003 	bic	r3, r3, #3	; 0x3
   16ac4:	e0681003 	rsb	r1, r8, r3
   16ac8:	e351000f 	cmp	r1, #15	; 0xf
   16acc:	cafffff2 	bgt	16a9c <_malloc_r+0xec>
   16ad0:	e3510000 	cmp	r1, #0	; 0x0
   16ad4:	e594000c 	ldr	r0, [r4, #12]
   16ad8:	aa000143 	bge	16fec <_malloc_r+0x63c>
   16adc:	e1a04000 	mov	r4, r0
   16ae0:	e154000c 	cmp	r4, ip
   16ae4:	1afffff4 	bne	16abc <_malloc_r+0x10c>
   16ae8:	e2825001 	add	r5, r2, #1	; 0x1
   16aec:	e59fb528 	ldr	fp, [pc, #1320]	; 1701c <.text+0x701c>
   16af0:	e28b7008 	add	r7, fp, #8	; 0x8
   16af4:	e5974008 	ldr	r4, [r7, #8]
   16af8:	e1540007 	cmp	r4, r7
   16afc:	0a000054 	beq	16c54 <_malloc_r+0x2a4>
   16b00:	e5943004 	ldr	r3, [r4, #4]
   16b04:	e3c32003 	bic	r2, r3, #3	; 0x3
   16b08:	e0680002 	rsb	r0, r8, r2
   16b0c:	e350000f 	cmp	r0, #15	; 0xf
   16b10:	da000009 	ble	16b3c <_malloc_r+0x18c>
   16b14:	e0842008 	add	r2, r4, r8
   16b18:	e3883001 	orr	r3, r8, #1	; 0x1
   16b1c:	e3801001 	orr	r1, r0, #1	; 0x1
   16b20:	e5843004 	str	r3, [r4, #4]
   16b24:	e587200c 	str	r2, [r7, #12]
   16b28:	e5872008 	str	r2, [r7, #8]
   16b2c:	e7820000 	str	r0, [r2, r0]
   16b30:	e9820082 	stmib	r2, {r1, r7}
   16b34:	e582700c 	str	r7, [r2, #12]
   16b38:	ea000132 	b	17008 <_malloc_r+0x658>
   16b3c:	e3500000 	cmp	r0, #0	; 0x0
   16b40:	e587700c 	str	r7, [r7, #12]
   16b44:	e5877008 	str	r7, [r7, #8]
   16b48:	a0842002 	addge	r2, r4, r2
   16b4c:	a5923004 	ldrge	r3, [r2, #4]
   16b50:	a3833001 	orrge	r3, r3, #1	; 0x1
   16b54:	a5823004 	strge	r3, [r2, #4]
   16b58:	aa00012a 	bge	17008 <_malloc_r+0x658>
   16b5c:	e3520c02 	cmp	r2, #512	; 0x200
   16b60:	2a00000c 	bcs	16b98 <_malloc_r+0x1e8>
   16b64:	e1a011a2 	mov	r1, r2, lsr #3
   16b68:	e59b2004 	ldr	r2, [fp, #4]
   16b6c:	e1a00121 	mov	r0, r1, lsr #2
   16b70:	e3a03001 	mov	r3, #1	; 0x1
   16b74:	e1822013 	orr	r2, r2, r3, lsl r0
   16b78:	e08b1181 	add	r1, fp, r1, lsl #3
   16b7c:	e5913008 	ldr	r3, [r1, #8]
   16b80:	e584100c 	str	r1, [r4, #12]
   16b84:	e5843008 	str	r3, [r4, #8]
   16b88:	e58b2004 	str	r2, [fp, #4]
   16b8c:	e583400c 	str	r4, [r3, #12]
   16b90:	e5814008 	str	r4, [r1, #8]
   16b94:	ea00002e 	b	16c54 <_malloc_r+0x2a4>
   16b98:	e1b014a2 	movs	r1, r2, lsr #9
   16b9c:	01a011a2 	moveq	r1, r2, lsr #3
   16ba0:	0a000013 	beq	16bf4 <_malloc_r+0x244>
   16ba4:	e3510004 	cmp	r1, #4	; 0x4
   16ba8:	91a03322 	movls	r3, r2, lsr #6
   16bac:	92831038 	addls	r1, r3, #56	; 0x38
   16bb0:	9a00000f 	bls	16bf4 <_malloc_r+0x244>
   16bb4:	e3510014 	cmp	r1, #20	; 0x14
   16bb8:	9281105b 	addls	r1, r1, #91	; 0x5b
   16bbc:	9a00000c 	bls	16bf4 <_malloc_r+0x244>
   16bc0:	e3510054 	cmp	r1, #84	; 0x54
   16bc4:	91a03622 	movls	r3, r2, lsr #12
   16bc8:	9283106e 	addls	r1, r3, #110	; 0x6e
   16bcc:	9a000008 	bls	16bf4 <_malloc_r+0x244>
   16bd0:	e3510f55 	cmp	r1, #340	; 0x154
   16bd4:	91a037a2 	movls	r3, r2, lsr #15
   16bd8:	92831077 	addls	r1, r3, #119	; 0x77
   16bdc:	9a000004 	bls	16bf4 <_malloc_r+0x244>
   16be0:	e59f3438 	ldr	r3, [pc, #1080]	; 17020 <.text+0x7020>
   16be4:	e1510003 	cmp	r1, r3
   16be8:	91a03922 	movls	r3, r2, lsr #18
   16bec:	83a0107e 	movhi	r1, #126	; 0x7e
   16bf0:	9283107c 	addls	r1, r3, #124	; 0x7c
   16bf4:	e08b0181 	add	r0, fp, r1, lsl #3
   16bf8:	e590c008 	ldr	ip, [r0, #8]
   16bfc:	e15c0000 	cmp	ip, r0
   16c00:	1a00000a 	bne	16c30 <_malloc_r+0x280>
   16c04:	e59f0410 	ldr	r0, [pc, #1040]	; 1701c <.text+0x701c>
   16c08:	e5902004 	ldr	r2, [r0, #4]
   16c0c:	e1a01121 	mov	r1, r1, lsr #2
   16c10:	e3a03001 	mov	r3, #1	; 0x1
   16c14:	e1822113 	orr	r2, r2, r3, lsl r1
   16c18:	e1a0e00c 	mov	lr, ip
   16c1c:	e5802004 	str	r2, [r0, #4]
   16c20:	ea000007 	b	16c44 <_malloc_r+0x294>
   16c24:	e59cc008 	ldr	ip, [ip, #8]
   16c28:	e15c0000 	cmp	ip, r0
   16c2c:	0a000003 	beq	16c40 <_malloc_r+0x290>
   16c30:	e59c3004 	ldr	r3, [ip, #4]
   16c34:	e3c33003 	bic	r3, r3, #3	; 0x3
   16c38:	e1520003 	cmp	r2, r3
   16c3c:	3afffff8 	bcc	16c24 <_malloc_r+0x274>
   16c40:	e59ce00c 	ldr	lr, [ip, #12]
   16c44:	e584e00c 	str	lr, [r4, #12]
   16c48:	e584c008 	str	ip, [r4, #8]
   16c4c:	e58c400c 	str	r4, [ip, #12]
   16c50:	e58e4008 	str	r4, [lr, #8]
   16c54:	e3550000 	cmp	r5, #0	; 0x0
   16c58:	e2853003 	add	r3, r5, #3	; 0x3
   16c5c:	a1a03005 	movge	r3, r5
   16c60:	e1a03143 	mov	r3, r3, asr #2
   16c64:	e3a02001 	mov	r2, #1	; 0x1
   16c68:	e1a02312 	mov	r2, r2, lsl r3
   16c6c:	e59f93a8 	ldr	r9, [pc, #936]	; 1701c <.text+0x701c>
   16c70:	e5991004 	ldr	r1, [r9, #4]
   16c74:	e1520001 	cmp	r2, r1
   16c78:	8a000037 	bhi	16d5c <_malloc_r+0x3ac>
   16c7c:	e1120001 	tst	r2, r1
   16c80:	01a02082 	moveq	r2, r2, lsl #1
   16c84:	03c53003 	biceq	r3, r5, #3	; 0x3
   16c88:	0a000001 	beq	16c94 <_malloc_r+0x2e4>
   16c8c:	ea000004 	b	16ca4 <_malloc_r+0x2f4>
   16c90:	e1a02082 	mov	r2, r2, lsl #1
   16c94:	e1120001 	tst	r2, r1
   16c98:	e2833004 	add	r3, r3, #4	; 0x4
   16c9c:	0afffffb 	beq	16c90 <_malloc_r+0x2e0>
   16ca0:	e1a05003 	mov	r5, r3
   16ca4:	e08b6185 	add	r6, fp, r5, lsl #3
   16ca8:	e1a0e005 	mov	lr, r5
   16cac:	e1a01006 	mov	r1, r6
   16cb0:	e591400c 	ldr	r4, [r1, #12]
   16cb4:	ea000008 	b	16cdc <_malloc_r+0x32c>
   16cb8:	e5943004 	ldr	r3, [r4, #4]
   16cbc:	e3c33003 	bic	r3, r3, #3	; 0x3
   16cc0:	e068c003 	rsb	ip, r8, r3
   16cc4:	e35c000f 	cmp	ip, #15	; 0xf
   16cc8:	ca0000ad 	bgt	16f84 <_malloc_r+0x5d4>
   16ccc:	e35c0000 	cmp	ip, #0	; 0x0
   16cd0:	e594000c 	ldr	r0, [r4, #12]
   16cd4:	aa0000b9 	bge	16fc0 <_malloc_r+0x610>
   16cd8:	e1a04000 	mov	r4, r0
   16cdc:	e1540001 	cmp	r4, r1
   16ce0:	1afffff4 	bne	16cb8 <_malloc_r+0x308>
   16ce4:	e28ee001 	add	lr, lr, #1	; 0x1
   16ce8:	e31e0003 	tst	lr, #3	; 0x3
   16cec:	12841008 	addne	r1, r4, #8	; 0x8
   16cf0:	1affffee 	bne	16cb0 <_malloc_r+0x300>
   16cf4:	e1a00005 	mov	r0, r5
   16cf8:	e1a01006 	mov	r1, r6
   16cfc:	e3100003 	tst	r0, #3	; 0x3
   16d00:	e2411008 	sub	r1, r1, #8	; 0x8
   16d04:	e2400001 	sub	r0, r0, #1	; 0x1
   16d08:	0a00000f 	beq	16d4c <_malloc_r+0x39c>
   16d0c:	e5913008 	ldr	r3, [r1, #8]
   16d10:	e1530001 	cmp	r3, r1
   16d14:	0afffff8 	beq	16cfc <_malloc_r+0x34c>
   16d18:	e5993004 	ldr	r3, [r9, #4]
   16d1c:	e1a02082 	mov	r2, r2, lsl #1
   16d20:	e1520003 	cmp	r2, r3
   16d24:	8a00000c 	bhi	16d5c <_malloc_r+0x3ac>
   16d28:	e3520000 	cmp	r2, #0	; 0x0
   16d2c:	0a00000a 	beq	16d5c <_malloc_r+0x3ac>
   16d30:	e1a0500e 	mov	r5, lr
   16d34:	ea000001 	b	16d40 <_malloc_r+0x390>
   16d38:	e2855004 	add	r5, r5, #4	; 0x4
   16d3c:	e1a02082 	mov	r2, r2, lsl #1
   16d40:	e1120003 	tst	r2, r3
   16d44:	0afffffb 	beq	16d38 <_malloc_r+0x388>
   16d48:	eaffffd5 	b	16ca4 <_malloc_r+0x2f4>
   16d4c:	e5993004 	ldr	r3, [r9, #4]
   16d50:	e1c33002 	bic	r3, r3, r2
   16d54:	e5893004 	str	r3, [r9, #4]
   16d58:	eaffffee 	b	16d18 <_malloc_r+0x368>
   16d5c:	e5996008 	ldr	r6, [r9, #8]
   16d60:	e5963004 	ldr	r3, [r6, #4]
   16d64:	e3c37003 	bic	r7, r3, #3	; 0x3
   16d68:	e0681007 	rsb	r1, r8, r7
   16d6c:	e351000f 	cmp	r1, #15	; 0xf
   16d70:	c3a03000 	movgt	r3, #0	; 0x0
   16d74:	d3a03001 	movle	r3, #1	; 0x1
   16d78:	e1570008 	cmp	r7, r8
   16d7c:	33833001 	orrcc	r3, r3, #1	; 0x1
   16d80:	e3530000 	cmp	r3, #0	; 0x0
   16d84:	0a000070 	beq	16f4c <_malloc_r+0x59c>
   16d88:	e59f3294 	ldr	r3, [pc, #660]	; 17024 <.text+0x7024>
   16d8c:	e5932000 	ldr	r2, [r3]
   16d90:	e59f3290 	ldr	r3, [pc, #656]	; 17028 <.text+0x7028>
   16d94:	e5933000 	ldr	r3, [r3]
   16d98:	e2822010 	add	r2, r2, #16	; 0x10
   16d9c:	e3730001 	cmn	r3, #1	; 0x1
   16da0:	e0884002 	add	r4, r8, r2
   16da4:	12843eff 	addne	r3, r4, #4080	; 0xff0
   16da8:	1283300f 	addne	r3, r3, #15	; 0xf
   16dac:	13c34eff 	bicne	r4, r3, #4080	; 0xff0
   16db0:	13c4400f 	bicne	r4, r4, #15	; 0xf
   16db4:	e1a0000a 	mov	r0, sl
   16db8:	e1a01004 	mov	r1, r4
   16dbc:	ebffea76 	bl	1179c <_sbrk_r>
   16dc0:	e3700001 	cmn	r0, #1	; 0x1
   16dc4:	0a000051 	beq	16f10 <_malloc_r+0x560>
   16dc8:	e086c007 	add	ip, r6, r7
   16dcc:	e150000c 	cmp	r0, ip
   16dd0:	e1a05000 	mov	r5, r0
   16dd4:	2a000002 	bcs	16de4 <_malloc_r+0x434>
   16dd8:	e1560009 	cmp	r6, r9
   16ddc:	1a00004b 	bne	16f10 <_malloc_r+0x560>
   16de0:	ea000062 	b	16f70 <_malloc_r+0x5c0>
   16de4:	e59f2240 	ldr	r2, [pc, #576]	; 1702c <.text+0x702c>
   16de8:	e5923000 	ldr	r3, [r2]
   16dec:	e0841003 	add	r1, r4, r3
   16df0:	e5821000 	str	r1, [r2]
   16df4:	1a000007 	bne	16e18 <_malloc_r+0x468>
   16df8:	e1a03a00 	mov	r3, r0, lsl #20
   16dfc:	e1a03a23 	mov	r3, r3, lsr #20
   16e00:	e3530000 	cmp	r3, #0	; 0x0
   16e04:	00843007 	addeq	r3, r4, r7
   16e08:	05992008 	ldreq	r2, [r9, #8]
   16e0c:	03833001 	orreq	r3, r3, #1	; 0x1
   16e10:	05823004 	streq	r3, [r2, #4]
   16e14:	0a000033 	beq	16ee8 <_malloc_r+0x538>
   16e18:	e59f2208 	ldr	r2, [pc, #520]	; 17028 <.text+0x7028>
   16e1c:	e5923000 	ldr	r3, [r2]
   16e20:	e3730001 	cmn	r3, #1	; 0x1
   16e24:	106c3000 	rsbne	r3, ip, r0
   16e28:	159f21fc 	ldrne	r2, [pc, #508]	; 1702c <.text+0x702c>
   16e2c:	10813003 	addne	r3, r1, r3
   16e30:	05820000 	streq	r0, [r2]
   16e34:	15823000 	strne	r3, [r2]
   16e38:	e2103007 	ands	r3, r0, #7	; 0x7
   16e3c:	12631008 	rsbne	r1, r3, #8	; 0x8
   16e40:	10805001 	addne	r5, r0, r1
   16e44:	01a01003 	moveq	r1, r3
   16e48:	e0853004 	add	r3, r5, r4
   16e4c:	e1a03a03 	mov	r3, r3, lsl #20
   16e50:	e1a03a23 	mov	r3, r3, lsr #20
   16e54:	e2633a01 	rsb	r3, r3, #4096	; 0x1000
   16e58:	e0814003 	add	r4, r1, r3
   16e5c:	e1a01004 	mov	r1, r4
   16e60:	e1a0000a 	mov	r0, sl
   16e64:	ebffea4c 	bl	1179c <_sbrk_r>
   16e68:	e59f31bc 	ldr	r3, [pc, #444]	; 1702c <.text+0x702c>
   16e6c:	e3700001 	cmn	r0, #1	; 0x1
   16e70:	01a00005 	moveq	r0, r5
   16e74:	03a04000 	moveq	r4, #0	; 0x0
   16e78:	e5931000 	ldr	r1, [r3]
   16e7c:	e0652000 	rsb	r2, r5, r0
   16e80:	e0822004 	add	r2, r2, r4
   16e84:	e0811004 	add	r1, r1, r4
   16e88:	e3822001 	orr	r2, r2, #1	; 0x1
   16e8c:	e1560009 	cmp	r6, r9
   16e90:	e5831000 	str	r1, [r3]
   16e94:	e5852004 	str	r2, [r5, #4]
   16e98:	e5895008 	str	r5, [r9, #8]
   16e9c:	0a000011 	beq	16ee8 <_malloc_r+0x538>
   16ea0:	e357000f 	cmp	r7, #15	; 0xf
   16ea4:	93a03001 	movls	r3, #1	; 0x1
   16ea8:	95853004 	strls	r3, [r5, #4]
   16eac:	9a000017 	bls	16f10 <_malloc_r+0x560>
   16eb0:	e5963004 	ldr	r3, [r6, #4]
   16eb4:	e247200c 	sub	r2, r7, #12	; 0xc
   16eb8:	e3c22007 	bic	r2, r2, #7	; 0x7
   16ebc:	e2033001 	and	r3, r3, #1	; 0x1
   16ec0:	e1833002 	orr	r3, r3, r2
   16ec4:	e3a01005 	mov	r1, #5	; 0x5
   16ec8:	e352000f 	cmp	r2, #15	; 0xf
   16ecc:	e0862002 	add	r2, r6, r2
   16ed0:	e5863004 	str	r3, [r6, #4]
   16ed4:	e5821008 	str	r1, [r2, #8]
   16ed8:	e5821004 	str	r1, [r2, #4]
   16edc:	82861008 	addhi	r1, r6, #8	; 0x8
   16ee0:	81a0000a 	movhi	r0, sl
   16ee4:	8b001023 	blhi	1af78 <_free_r>
   16ee8:	e59f1140 	ldr	r1, [pc, #320]	; 17030 <.text+0x7030>
   16eec:	e59f3138 	ldr	r3, [pc, #312]	; 1702c <.text+0x702c>
   16ef0:	e5932000 	ldr	r2, [r3]
   16ef4:	e5913000 	ldr	r3, [r1]
   16ef8:	e1520003 	cmp	r2, r3
   16efc:	85812000 	strhi	r2, [r1]
   16f00:	e59f112c 	ldr	r1, [pc, #300]	; 17034 <.text+0x7034>
   16f04:	e5913000 	ldr	r3, [r1]
   16f08:	e1520003 	cmp	r2, r3
   16f0c:	85812000 	strhi	r2, [r1]
   16f10:	e5993008 	ldr	r3, [r9, #8]
   16f14:	e5932004 	ldr	r2, [r3, #4]
   16f18:	e3c22003 	bic	r2, r2, #3	; 0x3
   16f1c:	e0681002 	rsb	r1, r8, r2
   16f20:	e351000f 	cmp	r1, #15	; 0xf
   16f24:	c3a03000 	movgt	r3, #0	; 0x0
   16f28:	d3a03001 	movle	r3, #1	; 0x1
   16f2c:	e1520008 	cmp	r2, r8
   16f30:	33833001 	orrcc	r3, r3, #1	; 0x1
   16f34:	e3530000 	cmp	r3, #0	; 0x0
   16f38:	0a000003 	beq	16f4c <_malloc_r+0x59c>
   16f3c:	e1a0000a 	mov	r0, sl
   16f40:	eb00004c 	bl	17078 <__malloc_unlock>
   16f44:	e3a00000 	mov	r0, #0	; 0x0
   16f48:	ea000031 	b	17014 <_malloc_r+0x664>
   16f4c:	e5994008 	ldr	r4, [r9, #8]
   16f50:	e3811001 	orr	r1, r1, #1	; 0x1
   16f54:	e0842008 	add	r2, r4, r8
   16f58:	e3883001 	orr	r3, r8, #1	; 0x1
   16f5c:	e1a0000a 	mov	r0, sl
   16f60:	e5843004 	str	r3, [r4, #4]
   16f64:	e5892008 	str	r2, [r9, #8]
   16f68:	e5821004 	str	r1, [r2, #4]
   16f6c:	ea000026 	b	1700c <_malloc_r+0x65c>
   16f70:	e59f20b4 	ldr	r2, [pc, #180]	; 1702c <.text+0x702c>
   16f74:	e5923000 	ldr	r3, [r2]
   16f78:	e0841003 	add	r1, r4, r3
   16f7c:	e5821000 	str	r1, [r2]
   16f80:	eaffffa4 	b	16e18 <_malloc_r+0x468>
   16f84:	e3883001 	orr	r3, r8, #1	; 0x1
   16f88:	e594000c 	ldr	r0, [r4, #12]
   16f8c:	e5843004 	str	r3, [r4, #4]
   16f90:	e0843008 	add	r3, r4, r8
   16f94:	e5b41008 	ldr	r1, [r4, #8]!
   16f98:	e38c2001 	orr	r2, ip, #1	; 0x1
   16f9c:	e5801008 	str	r1, [r0, #8]
   16fa0:	e581000c 	str	r0, [r1, #12]
   16fa4:	e1a0000a 	mov	r0, sl
   16fa8:	e5873008 	str	r3, [r7, #8]
   16fac:	e587300c 	str	r3, [r7, #12]
   16fb0:	e783c00c 	str	ip, [r3, ip]
   16fb4:	e9830084 	stmib	r3, {r2, r7}
   16fb8:	e583700c 	str	r7, [r3, #12]
   16fbc:	ea000007 	b	16fe0 <_malloc_r+0x630>
   16fc0:	e0843003 	add	r3, r4, r3
   16fc4:	e5932004 	ldr	r2, [r3, #4]
   16fc8:	e5b41008 	ldr	r1, [r4, #8]!
   16fcc:	e3822001 	orr	r2, r2, #1	; 0x1
   16fd0:	e5832004 	str	r2, [r3, #4]
   16fd4:	e5801008 	str	r1, [r0, #8]
   16fd8:	e581000c 	str	r0, [r1, #12]
   16fdc:	e1a0000a 	mov	r0, sl
   16fe0:	eb000024 	bl	17078 <__malloc_unlock>
   16fe4:	e1a00004 	mov	r0, r4
   16fe8:	ea000009 	b	17014 <_malloc_r+0x664>
   16fec:	e0843003 	add	r3, r4, r3
   16ff0:	e5932004 	ldr	r2, [r3, #4]
   16ff4:	e5941008 	ldr	r1, [r4, #8]
   16ff8:	e3822001 	orr	r2, r2, #1	; 0x1
   16ffc:	e5801008 	str	r1, [r0, #8]
   17000:	e5832004 	str	r2, [r3, #4]
   17004:	e581000c 	str	r0, [r1, #12]
   17008:	e1a0000a 	mov	r0, sl
   1700c:	eb000019 	bl	17078 <__malloc_unlock>
   17010:	e2840008 	add	r0, r4, #8	; 0x8
   17014:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17018:	e12fff1e 	bx	lr
   1701c:	40000078 	andmi	r0, r0, r8, ror r0
   17020:	00000554 	andeq	r0, r0, r4, asr r5
   17024:	40000da8 	andmi	r0, r0, r8, lsr #27
   17028:	40000484 	andmi	r0, r0, r4, lsl #9
   1702c:	40000db4 	strmih	r0, [r0], -r4
   17030:	40000dac 	andmi	r0, r0, ip, lsr #27
   17034:	40000db0 	strmih	r0, [r0], -r0

00017038 <memcpy>:
   17038:	e3a0c000 	mov	ip, #0	; 0x0
   1703c:	ea000002 	b	1704c <memcpy+0x14>
   17040:	e7dc3001 	ldrb	r3, [ip, r1]
   17044:	e7cc3000 	strb	r3, [ip, r0]
   17048:	e28cc001 	add	ip, ip, #1	; 0x1
   1704c:	e2522001 	subs	r2, r2, #1	; 0x1
   17050:	2afffffa 	bcs	17040 <memcpy+0x8>
   17054:	e12fff1e 	bx	lr

00017058 <memset>:
   17058:	e3a03000 	mov	r3, #0	; 0x0
   1705c:	ea000001 	b	17068 <memset+0x10>
   17060:	e7c31000 	strb	r1, [r3, r0]
   17064:	e2833001 	add	r3, r3, #1	; 0x1
   17068:	e2522001 	subs	r2, r2, #1	; 0x1
   1706c:	2afffffb 	bcs	17060 <memset+0x8>
   17070:	e12fff1e 	bx	lr

00017074 <__malloc_lock>:
   17074:	e12fff1e 	bx	lr

00017078 <__malloc_unlock>:
   17078:	e12fff1e 	bx	lr

0001707c <sprintf>:
   1707c:	e92d000e 	stmdb	sp!, {r1, r2, r3}
   17080:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   17084:	e59f2060 	ldr	r2, [pc, #96]	; 170ec <.text+0x70ec>
   17088:	e24dd060 	sub	sp, sp, #96	; 0x60
   1708c:	e28d4070 	add	r4, sp, #112	; 0x70
   17090:	e3e0c102 	mvn	ip, #-2147483648	; 0x80000000
   17094:	e1a0e000 	mov	lr, r0
   17098:	e1a03004 	mov	r3, r4
   1709c:	e58dc014 	str	ip, [sp, #20]
   170a0:	e58dc008 	str	ip, [sp, #8]
   170a4:	e5920000 	ldr	r0, [r2]
   170a8:	e3e0c000 	mvn	ip, #0	; 0x0
   170ac:	e59d206c 	ldr	r2, [sp, #108]
   170b0:	e1a0100d 	mov	r1, sp
   170b4:	e3a05f82 	mov	r5, #520	; 0x208
   170b8:	e58de010 	str	lr, [sp, #16]
   170bc:	e1cd50bc 	strh	r5, [sp, #12]
   170c0:	e58de000 	str	lr, [sp]
   170c4:	e1cdc0be 	strh	ip, [sp, #14]
   170c8:	e58d405c 	str	r4, [sp, #92]
   170cc:	eb000090 	bl	17314 <_vfprintf_r>
   170d0:	e59d3000 	ldr	r3, [sp]
   170d4:	e3a02000 	mov	r2, #0	; 0x0
   170d8:	e5c32000 	strb	r2, [r3]
   170dc:	e28dd060 	add	sp, sp, #96	; 0x60
   170e0:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   170e4:	e28dd00c 	add	sp, sp, #12	; 0xc
   170e8:	e12fff1e 	bx	lr
   170ec:	40000488 	andmi	r0, r0, r8, lsl #9

000170f0 <_sprintf_r>:
   170f0:	e92d000c 	stmdb	sp!, {r2, r3}
   170f4:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   170f8:	e24dd060 	sub	sp, sp, #96	; 0x60
   170fc:	e28d4070 	add	r4, sp, #112	; 0x70
   17100:	e3e0c102 	mvn	ip, #-2147483648	; 0x80000000
   17104:	e1a0e001 	mov	lr, r1
   17108:	e1a03004 	mov	r3, r4
   1710c:	e59d206c 	ldr	r2, [sp, #108]
   17110:	e58dc014 	str	ip, [sp, #20]
   17114:	e58dc008 	str	ip, [sp, #8]
   17118:	e1a0100d 	mov	r1, sp
   1711c:	e3e0c000 	mvn	ip, #0	; 0x0
   17120:	e3a05f82 	mov	r5, #520	; 0x208
   17124:	e58de010 	str	lr, [sp, #16]
   17128:	e1cd50bc 	strh	r5, [sp, #12]
   1712c:	e58de000 	str	lr, [sp]
   17130:	e1cdc0be 	strh	ip, [sp, #14]
   17134:	e58d405c 	str	r4, [sp, #92]
   17138:	eb000075 	bl	17314 <_vfprintf_r>
   1713c:	e59d3000 	ldr	r3, [sp]
   17140:	e3a02000 	mov	r2, #0	; 0x0
   17144:	e5c32000 	strb	r2, [r3]
   17148:	e28dd060 	add	sp, sp, #96	; 0x60
   1714c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   17150:	e28dd008 	add	sp, sp, #8	; 0x8
   17154:	e12fff1e 	bx	lr

00017158 <strchr>:
   17158:	e20110ff 	and	r1, r1, #255	; 0xff
   1715c:	ea000000 	b	17164 <strchr+0xc>
   17160:	e2800001 	add	r0, r0, #1	; 0x1
   17164:	e5d03000 	ldrb	r3, [r0]
   17168:	e3530000 	cmp	r3, #0	; 0x0
   1716c:	0a000002 	beq	1717c <strchr+0x24>
   17170:	e1530001 	cmp	r3, r1
   17174:	1afffff9 	bne	17160 <strchr+0x8>
   17178:	e12fff1e 	bx	lr
   1717c:	e3510000 	cmp	r1, #0	; 0x0
   17180:	13a00000 	movne	r0, #0	; 0x0
   17184:	e12fff1e 	bx	lr

00017188 <strcmp>:
   17188:	ea000000 	b	17190 <strcmp+0x8>
   1718c:	e2811001 	add	r1, r1, #1	; 0x1
   17190:	e5d02000 	ldrb	r2, [r0]
   17194:	e3520000 	cmp	r2, #0	; 0x0
   17198:	e2800001 	add	r0, r0, #1	; 0x1
   1719c:	0a000002 	beq	171ac <strcmp+0x24>
   171a0:	e5d13000 	ldrb	r3, [r1]
   171a4:	e1530002 	cmp	r3, r2
   171a8:	0afffff7 	beq	1718c <strcmp+0x4>
   171ac:	e5d10000 	ldrb	r0, [r1]
   171b0:	e0600002 	rsb	r0, r0, r2
   171b4:	e12fff1e 	bx	lr

000171b8 <strcpy>:
   171b8:	e1a02000 	mov	r2, r0
   171bc:	e4d13001 	ldrb	r3, [r1], #1
   171c0:	e3530000 	cmp	r3, #0	; 0x0
   171c4:	e4c23001 	strb	r3, [r2], #1
   171c8:	1afffffb 	bne	171bc <strcpy+0x4>
   171cc:	e12fff1e 	bx	lr

000171d0 <strlen>:
   171d0:	e1a02000 	mov	r2, r0
   171d4:	ea000000 	b	171dc <strlen+0xc>
   171d8:	e2800001 	add	r0, r0, #1	; 0x1
   171dc:	e5d03000 	ldrb	r3, [r0]
   171e0:	e3530000 	cmp	r3, #0	; 0x0
   171e4:	1afffffb 	bne	171d8 <strlen+0x8>
   171e8:	e0620000 	rsb	r0, r2, r0
   171ec:	e12fff1e 	bx	lr

000171f0 <strncmp>:
   171f0:	e3520000 	cmp	r2, #0	; 0x0
   171f4:	01a00002 	moveq	r0, r2
   171f8:	012fff1e 	bxeq	lr
   171fc:	ea000005 	b	17218 <strncmp+0x28>
   17200:	e3520000 	cmp	r2, #0	; 0x0
   17204:	0a000009 	beq	17230 <strncmp+0x40>
   17208:	e35c0000 	cmp	ip, #0	; 0x0
   1720c:	0a000007 	beq	17230 <strncmp+0x40>
   17210:	e2800001 	add	r0, r0, #1	; 0x1
   17214:	e2811001 	add	r1, r1, #1	; 0x1
   17218:	e2522001 	subs	r2, r2, #1	; 0x1
   1721c:	3a000003 	bcc	17230 <strncmp+0x40>
   17220:	e5d1c000 	ldrb	ip, [r1]
   17224:	e5d03000 	ldrb	r3, [r0]
   17228:	e15c0003 	cmp	ip, r3
   1722c:	0afffff3 	beq	17200 <strncmp+0x10>
   17230:	e5d02000 	ldrb	r2, [r0]
   17234:	e5d13000 	ldrb	r3, [r1]
   17238:	e0630002 	rsb	r0, r3, r2
   1723c:	e12fff1e 	bx	lr

00017240 <strncpy>:
   17240:	e1a0c000 	mov	ip, r0
   17244:	ea000005 	b	17260 <strncpy+0x20>
   17248:	e5d13000 	ldrb	r3, [r1]
   1724c:	e3530000 	cmp	r3, #0	; 0x0
   17250:	e2422001 	sub	r2, r2, #1	; 0x1
   17254:	e4cc3001 	strb	r3, [ip], #1
   17258:	0a000002 	beq	17268 <strncpy+0x28>
   1725c:	e2811001 	add	r1, r1, #1	; 0x1
   17260:	e3520000 	cmp	r2, #0	; 0x0
   17264:	1afffff7 	bne	17248 <strncpy+0x8>
   17268:	e1a0100c 	mov	r1, ip
   1726c:	ea000001 	b	17278 <strncpy+0x38>
   17270:	e3a03000 	mov	r3, #0	; 0x0
   17274:	e5413001 	strb	r3, [r1, #-1]
   17278:	e2422001 	sub	r2, r2, #1	; 0x1
   1727c:	e3720001 	cmn	r2, #1	; 0x1
   17280:	e2811001 	add	r1, r1, #1	; 0x1
   17284:	1afffff9 	bne	17270 <strncpy+0x30>
   17288:	e12fff1e 	bx	lr

0001728c <strrchr>:
   1728c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   17290:	e2515000 	subs	r5, r1, #0	; 0x0
   17294:	e1a03000 	mov	r3, r0
   17298:	13a04000 	movne	r4, #0	; 0x0
   1729c:	1a000002 	bne	172ac <strrchr+0x20>
   172a0:	ea000007 	b	172c4 <strrchr+0x38>
   172a4:	e1a04000 	mov	r4, r0
   172a8:	e2803001 	add	r3, r0, #1	; 0x1
   172ac:	e1a00003 	mov	r0, r3
   172b0:	e1a01005 	mov	r1, r5
   172b4:	ebffffa7 	bl	17158 <strchr>
   172b8:	e3500000 	cmp	r0, #0	; 0x0
   172bc:	1afffff8 	bne	172a4 <strrchr+0x18>
   172c0:	ea000001 	b	172cc <strrchr+0x40>
   172c4:	ebffffa3 	bl	17158 <strchr>
   172c8:	e1a04000 	mov	r4, r0
   172cc:	e1a00004 	mov	r0, r4
   172d0:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   172d4:	e12fff1e 	bx	lr

000172d8 <__sprint>:
   172d8:	e5913008 	ldr	r3, [r1, #8]
   172dc:	e3530000 	cmp	r3, #0	; 0x0
   172e0:	e92d4010 	stmdb	sp!, {r4, lr}
   172e4:	e1a02003 	mov	r2, r3
   172e8:	e1a04001 	mov	r4, r1
   172ec:	05813004 	streq	r3, [r1, #4]
   172f0:	0a000004 	beq	17308 <__sprint+0x30>
   172f4:	eb000fb7 	bl	1b1d8 <__sfvwrite>
   172f8:	e3a03000 	mov	r3, #0	; 0x0
   172fc:	e5843004 	str	r3, [r4, #4]
   17300:	e5843008 	str	r3, [r4, #8]
   17304:	e1a02000 	mov	r2, r0
   17308:	e1a00002 	mov	r0, r2
   1730c:	e8bd4010 	ldmia	sp!, {r4, lr}
   17310:	e12fff1e 	bx	lr

00017314 <_vfprintf_r>:
   17314:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17318:	e24dde6b 	sub	sp, sp, #1712	; 0x6b0
   1731c:	e1a0a001 	mov	sl, r1
   17320:	e58d0010 	str	r0, [sp, #16]
   17324:	e1a04002 	mov	r4, r2
   17328:	e1a07003 	mov	r7, r3
   1732c:	eb0010fc 	bl	1b724 <localeconv>
   17330:	e59d1010 	ldr	r1, [sp, #16]
   17334:	e5900000 	ldr	r0, [r0]
   17338:	e3510000 	cmp	r1, #0	; 0x0
   1733c:	e58d0020 	str	r0, [sp, #32]
   17340:	0a000003 	beq	17354 <_vfprintf_r+0x40>
   17344:	e5913038 	ldr	r3, [r1, #56]
   17348:	e3530000 	cmp	r3, #0	; 0x0
   1734c:	01a00001 	moveq	r0, r1
   17350:	0b000e3f 	bleq	1ac54 <__sinit>
   17354:	e1da30bc 	ldrh	r3, [sl, #12]
   17358:	e3130008 	tst	r3, #8	; 0x8
   1735c:	0a000002 	beq	1736c <_vfprintf_r+0x58>
   17360:	e59a3010 	ldr	r3, [sl, #16]
   17364:	e3530000 	cmp	r3, #0	; 0x0
   17368:	1a000003 	bne	1737c <_vfprintf_r+0x68>
   1736c:	e1a0000a 	mov	r0, sl
   17370:	eb000871 	bl	1953c <__swsetup>
   17374:	e3500000 	cmp	r0, #0	; 0x0
   17378:	1a0006d8 	bne	18ee0 <.text+0x8ee0>
   1737c:	e1dac0bc 	ldrh	ip, [sl, #12]
   17380:	e20c301a 	and	r3, ip, #26	; 0x1a
   17384:	e353000a 	cmp	r3, #10	; 0xa
   17388:	1a00002b 	bne	1743c <_vfprintf_r+0x128>
   1738c:	e1da30fe 	ldrsh	r3, [sl, #14]
   17390:	e3530000 	cmp	r3, #0	; 0x0
   17394:	ba000028 	blt	1743c <_vfprintf_r+0x128>
   17398:	e3ccc002 	bic	ip, ip, #2	; 0x2
   1739c:	e1a03007 	mov	r3, r7
   173a0:	e28d7c05 	add	r7, sp, #1280	; 0x500
   173a4:	e1c7ccb0 	strh	ip, [r7, #192]
   173a8:	e3a0c000 	mov	ip, #0	; 0x0
   173ac:	e58dc5cc 	str	ip, [sp, #1484]
   173b0:	e28d8e5b 	add	r8, sp, #1456	; 0x5b0
   173b4:	e1dac0be 	ldrh	ip, [sl, #14]
   173b8:	e59a501c 	ldr	r5, [sl, #28]
   173bc:	e59a6024 	ldr	r6, [sl, #36]
   173c0:	e28de060 	add	lr, sp, #96	; 0x60
   173c4:	e2888004 	add	r8, r8, #4	; 0x4
   173c8:	e24ee008 	sub	lr, lr, #8	; 0x8
   173cc:	e1a02004 	mov	r2, r4
   173d0:	e59d0010 	ldr	r0, [sp, #16]
   173d4:	e3a04b01 	mov	r4, #1024	; 0x400
   173d8:	e1a01008 	mov	r1, r8
   173dc:	e1c7ccb2 	strh	ip, [r7, #194]
   173e0:	e58d55d0 	str	r5, [sp, #1488]
   173e4:	e58d65d8 	str	r6, [sp, #1496]
   173e8:	e58de5c4 	str	lr, [sp, #1476]
   173ec:	e58d45c8 	str	r4, [sp, #1480]
   173f0:	e58de5b4 	str	lr, [sp, #1460]
   173f4:	e58d45bc 	str	r4, [sp, #1468]
   173f8:	ebffffc5 	bl	17314 <_vfprintf_r>
   173fc:	e3500000 	cmp	r0, #0	; 0x0
   17400:	e58d0018 	str	r0, [sp, #24]
   17404:	ba000005 	blt	17420 <_vfprintf_r+0x10c>
   17408:	e1a00008 	mov	r0, r8
   1740c:	eb000dc4 	bl	1ab24 <fflush>
   17410:	e3500000 	cmp	r0, #0	; 0x0
   17414:	e59d0018 	ldr	r0, [sp, #24]
   17418:	13e00000 	mvnne	r0, #0	; 0x0
   1741c:	e58d0018 	str	r0, [sp, #24]
   17420:	e28d1c05 	add	r1, sp, #1280	; 0x500
   17424:	e1d13cb0 	ldrh	r3, [r1, #192]
   17428:	e3130040 	tst	r3, #64	; 0x40
   1742c:	11da30bc 	ldrneh	r3, [sl, #12]
   17430:	13833040 	orrne	r3, r3, #64	; 0x40
   17434:	11ca30bc 	strneh	r3, [sl, #12]
   17438:	ea0006b6 	b	18f18 <.text+0x8f18>
   1743c:	e3a03000 	mov	r3, #0	; 0x0
   17440:	e28d2e61 	add	r2, sp, #1552	; 0x610
   17444:	e3a00000 	mov	r0, #0	; 0x0
   17448:	e3a01000 	mov	r1, #0	; 0x0
   1744c:	e58d303c 	str	r3, [sp, #60]
   17450:	e58d3018 	str	r3, [sp, #24]
   17454:	e58d4050 	str	r4, [sp, #80]
   17458:	e58d2014 	str	r2, [sp, #20]
   1745c:	e58d0040 	str	r0, [sp, #64]
   17460:	e58d1044 	str	r1, [sp, #68]
   17464:	e58d3038 	str	r3, [sp, #56]
   17468:	e58d3028 	str	r3, [sp, #40]
   1746c:	e58d2678 	str	r2, [sp, #1656]
   17470:	e58d3680 	str	r3, [sp, #1664]
   17474:	e58d367c 	str	r3, [sp, #1660]
   17478:	ea000001 	b	17484 <_vfprintf_r+0x170>
   1747c:	e58d5014 	str	r5, [sp, #20]
   17480:	e59d704c 	ldr	r7, [sp, #76]
   17484:	e59d4050 	ldr	r4, [sp, #80]
   17488:	ea000000 	b	17490 <_vfprintf_r+0x17c>
   1748c:	e2844001 	add	r4, r4, #1	; 0x1
   17490:	e5d43000 	ldrb	r3, [r4]
   17494:	e3530000 	cmp	r3, #0	; 0x0
   17498:	13530025 	cmpne	r3, #37	; 0x25
   1749c:	1afffffa 	bne	1748c <_vfprintf_r+0x178>
   174a0:	e59d2050 	ldr	r2, [sp, #80]
   174a4:	e0545002 	subs	r5, r4, r2
   174a8:	0a000017 	beq	1750c <_vfprintf_r+0x1f8>
   174ac:	e59d267c 	ldr	r2, [sp, #1660]
   174b0:	e59dc014 	ldr	ip, [sp, #20]
   174b4:	e2822001 	add	r2, r2, #1	; 0x1
   174b8:	e59d3680 	ldr	r3, [sp, #1664]
   174bc:	e59d0050 	ldr	r0, [sp, #80]
   174c0:	e3520007 	cmp	r2, #7	; 0x7
   174c4:	e0833005 	add	r3, r3, r5
   174c8:	e88c0021 	stmia	ip, {r0, r5}
   174cc:	d28cc008 	addle	ip, ip, #8	; 0x8
   174d0:	e58d3680 	str	r3, [sp, #1664]
   174d4:	e58d267c 	str	r2, [sp, #1660]
   174d8:	d58dc014 	strle	ip, [sp, #20]
   174dc:	da000007 	ble	17500 <_vfprintf_r+0x1ec>
   174e0:	e28d1e67 	add	r1, sp, #1648	; 0x670
   174e4:	e1a0000a 	mov	r0, sl
   174e8:	e2811008 	add	r1, r1, #8	; 0x8
   174ec:	ebffff79 	bl	172d8 <__sprint>
   174f0:	e3500000 	cmp	r0, #0	; 0x0
   174f4:	1a000676 	bne	18ed4 <.text+0x8ed4>
   174f8:	e28d1e61 	add	r1, sp, #1552	; 0x610
   174fc:	e58d1014 	str	r1, [sp, #20]
   17500:	e59d2018 	ldr	r2, [sp, #24]
   17504:	e0822005 	add	r2, r2, r5
   17508:	e58d2018 	str	r2, [sp, #24]
   1750c:	e5d43000 	ldrb	r3, [r4]
   17510:	e3530000 	cmp	r3, #0	; 0x0
   17514:	0a00065c 	beq	18e8c <.text+0x8e8c>
   17518:	e3a03000 	mov	r3, #0	; 0x0
   1751c:	e2844001 	add	r4, r4, #1	; 0x1
   17520:	e3e05000 	mvn	r5, #0	; 0x0
   17524:	e58d301c 	str	r3, [sp, #28]
   17528:	e58d4050 	str	r4, [sp, #80]
   1752c:	e58d3054 	str	r3, [sp, #84]
   17530:	e58d5048 	str	r5, [sp, #72]
   17534:	ea00006c 	b	176ec <.text+0x76ec>
   17538:	e3e0c000 	mvn	ip, #0	; 0x0
   1753c:	e58d1050 	str	r1, [sp, #80]
   17540:	e58dc048 	str	ip, [sp, #72]
   17544:	e1a07003 	mov	r7, r3
   17548:	e59d0050 	ldr	r0, [sp, #80]
   1754c:	e4d08001 	ldrb	r8, [r0], #1
   17550:	e58d0050 	str	r0, [sp, #80]
   17554:	ea000000 	b	1755c <_vfprintf_r+0x248>
   17558:	e58d201c 	str	r2, [sp, #28]
   1755c:	e2483020 	sub	r3, r8, #32	; 0x20
   17560:	e3530058 	cmp	r3, #88	; 0x58
   17564:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   17568:	ea00031e 	b	181e8 <.text+0x81e8>
   1756c:	000176dc 	ldreqd	r7, [r1], -ip
   17570:	000181e8 	andeq	r8, r1, r8, ror #3
   17574:	000181e8 	andeq	r8, r1, r8, ror #3
   17578:	000176f4 	streqd	r7, [r1], -r4
   1757c:	000181e8 	andeq	r8, r1, r8, ror #3
   17580:	000181e8 	andeq	r8, r1, r8, ror #3
   17584:	000181e8 	andeq	r8, r1, r8, ror #3
   17588:	000181e8 	andeq	r8, r1, r8, ror #3
   1758c:	000181e8 	andeq	r8, r1, r8, ror #3
   17590:	000181e8 	andeq	r8, r1, r8, ror #3
   17594:	00017700 	andeq	r7, r1, r0, lsl #14
   17598:	00017734 	andeq	r7, r1, r4, lsr r7
   1759c:	000181e8 	andeq	r8, r1, r8, ror #3
   175a0:	00017728 	andeq	r7, r1, r8, lsr #14
   175a4:	0001773c 	andeq	r7, r1, ip, lsr r7
   175a8:	000181e8 	andeq	r8, r1, r8, ror #3
   175ac:	000177b0 	streqh	r7, [r1], -r0
   175b0:	000177c0 	andeq	r7, r1, r0, asr #15
   175b4:	000177c0 	andeq	r7, r1, r0, asr #15
   175b8:	000177c0 	andeq	r7, r1, r0, asr #15
   175bc:	000177c0 	andeq	r7, r1, r0, asr #15
   175c0:	000177c0 	andeq	r7, r1, r0, asr #15
   175c4:	000177c0 	andeq	r7, r1, r0, asr #15
   175c8:	000177c0 	andeq	r7, r1, r0, asr #15
   175cc:	000177c0 	andeq	r7, r1, r0, asr #15
   175d0:	000177c0 	andeq	r7, r1, r0, asr #15
   175d4:	000181e8 	andeq	r8, r1, r8, ror #3
   175d8:	000181e8 	andeq	r8, r1, r8, ror #3
   175dc:	000181e8 	andeq	r8, r1, r8, ror #3
   175e0:	000181e8 	andeq	r8, r1, r8, ror #3
   175e4:	000181e8 	andeq	r8, r1, r8, ror #3
   175e8:	000181e8 	andeq	r8, r1, r8, ror #3
   175ec:	000181e8 	andeq	r8, r1, r8, ror #3
   175f0:	000181e8 	andeq	r8, r1, r8, ror #3
   175f4:	000181e8 	andeq	r8, r1, r8, ror #3
   175f8:	00017840 	andeq	r7, r1, r0, asr #16
   175fc:	000178c4 	andeq	r7, r1, r4, asr #17
   17600:	00017928 	andeq	r7, r1, r8, lsr #18
   17604:	00017928 	andeq	r7, r1, r8, lsr #18
   17608:	00017928 	andeq	r7, r1, r8, lsr #18
   1760c:	000181e8 	andeq	r8, r1, r8, ror #3
   17610:	000181e8 	andeq	r8, r1, r8, ror #3
   17614:	000181e8 	andeq	r8, r1, r8, ror #3
   17618:	000181e8 	andeq	r8, r1, r8, ror #3
   1761c:	000177ec 	andeq	r7, r1, ip, ror #15
   17620:	000181e8 	andeq	r8, r1, r8, ror #3
   17624:	000181e8 	andeq	r8, r1, r8, ror #3
   17628:	00017da4 	andeq	r7, r1, r4, lsr #27
   1762c:	000181e8 	andeq	r8, r1, r8, ror #3
   17630:	000181e8 	andeq	r8, r1, r8, ror #3
   17634:	000181e8 	andeq	r8, r1, r8, ror #3
   17638:	00017e24 	andeq	r7, r1, r4, lsr #28
   1763c:	000181e8 	andeq	r8, r1, r8, ror #3
   17640:	00017fd0 	ldreqd	r7, [r1], -r0
   17644:	000181e8 	andeq	r8, r1, r8, ror #3
   17648:	000181e8 	andeq	r8, r1, r8, ror #3
   1764c:	00018020 	andeq	r8, r1, r0, lsr #32
   17650:	000181e8 	andeq	r8, r1, r8, ror #3
   17654:	000181e8 	andeq	r8, r1, r8, ror #3
   17658:	000181e8 	andeq	r8, r1, r8, ror #3
   1765c:	000181e8 	andeq	r8, r1, r8, ror #3
   17660:	000181e8 	andeq	r8, r1, r8, ror #3
   17664:	000181e8 	andeq	r8, r1, r8, ror #3
   17668:	000181e8 	andeq	r8, r1, r8, ror #3
   1766c:	000181e8 	andeq	r8, r1, r8, ror #3
   17670:	000181e8 	andeq	r8, r1, r8, ror #3
   17674:	000181e8 	andeq	r8, r1, r8, ror #3
   17678:	00017840 	andeq	r7, r1, r0, asr #16
   1767c:	000178d0 	ldreqd	r7, [r1], -r0
   17680:	00017928 	andeq	r7, r1, r8, lsr #18
   17684:	00017928 	andeq	r7, r1, r8, lsr #18
   17688:	00017928 	andeq	r7, r1, r8, lsr #18
   1768c:	000177fc 	streqd	r7, [r1], -ip
   17690:	000178d0 	ldreqd	r7, [r1], -r0
   17694:	000181e8 	andeq	r8, r1, r8, ror #3
   17698:	000181e8 	andeq	r8, r1, r8, ror #3
   1769c:	0001780c 	andeq	r7, r1, ip, lsl #16
   176a0:	000181e8 	andeq	r8, r1, r8, ror #3
   176a4:	00017d50 	andeq	r7, r1, r0, asr sp
   176a8:	00017db0 	streqh	r7, [r1], -r0
   176ac:	00017dfc 	streqd	r7, [r1], -ip
   176b0:	00017830 	andeq	r7, r1, r0, lsr r8
   176b4:	000181e8 	andeq	r8, r1, r8, ror #3
   176b8:	00017e24 	andeq	r7, r1, r4, lsr #28
   176bc:	000181e8 	andeq	r8, r1, r8, ror #3
   176c0:	00017fdc 	ldreqd	r7, [r1], -ip
   176c4:	000181e8 	andeq	r8, r1, r8, ror #3
   176c8:	000181e8 	andeq	r8, r1, r8, ror #3
   176cc:	000176d0 	ldreqd	r7, [r1], -r0
   176d0:	e59f1f20 	ldr	r1, [pc, #3872]	; 185f8 <.text+0x85f8>
   176d4:	e58d1038 	str	r1, [sp, #56]
   176d8:	ea000252 	b	18028 <.text+0x8028>
   176dc:	e5dd36af 	ldrb	r3, [sp, #1711]
   176e0:	e3530000 	cmp	r3, #0	; 0x0
   176e4:	1affff97 	bne	17548 <_vfprintf_r+0x234>
   176e8:	e2833020 	add	r3, r3, #32	; 0x20
   176ec:	e5cd36af 	strb	r3, [sp, #1711]
   176f0:	eaffff94 	b	17548 <_vfprintf_r+0x234>
   176f4:	e59d2054 	ldr	r2, [sp, #84]
   176f8:	e3822001 	orr	r2, r2, #1	; 0x1
   176fc:	ea00004d 	b	17838 <.text+0x7838>
   17700:	e5973000 	ldr	r3, [r7]
   17704:	e3530000 	cmp	r3, #0	; 0x0
   17708:	e58d301c 	str	r3, [sp, #28]
   1770c:	e2873004 	add	r3, r7, #4	; 0x4
   17710:	a1a07003 	movge	r7, r3
   17714:	aaffff8b 	bge	17548 <_vfprintf_r+0x234>
   17718:	e59d501c 	ldr	r5, [sp, #28]
   1771c:	e2655000 	rsb	r5, r5, #0	; 0x0
   17720:	e58d501c 	str	r5, [sp, #28]
   17724:	e1a07003 	mov	r7, r3
   17728:	e59dc054 	ldr	ip, [sp, #84]
   1772c:	e38cc004 	orr	ip, ip, #4	; 0x4
   17730:	ea000033 	b	17804 <.text+0x7804>
   17734:	e3a0302b 	mov	r3, #43	; 0x2b
   17738:	eaffffeb 	b	176ec <.text+0x76ec>
   1773c:	e59d1050 	ldr	r1, [sp, #80]
   17740:	e4d13001 	ldrb	r3, [r1], #1
   17744:	e353002a 	cmp	r3, #42	; 0x2a
   17748:	159d2050 	ldrne	r2, [sp, #80]
   1774c:	11a08003 	movne	r8, r3
   17750:	13a01000 	movne	r1, #0	; 0x0
   17754:	1a00000b 	bne	17788 <.text+0x7788>
   17758:	e5970000 	ldr	r0, [r7]
   1775c:	e2873004 	add	r3, r7, #4	; 0x4
   17760:	e3500000 	cmp	r0, #0	; 0x0
   17764:	e58d0048 	str	r0, [sp, #72]
   17768:	a1a07003 	movge	r7, r3
   1776c:	a58d1050 	strge	r1, [sp, #80]
   17770:	aaffff74 	bge	17548 <_vfprintf_r+0x234>
   17774:	eaffff6f 	b	17538 <_vfprintf_r+0x224>
   17778:	e3a0300a 	mov	r3, #10	; 0xa
   1777c:	e0238391 	mla	r3, r1, r3, r8
   17780:	e5d28000 	ldrb	r8, [r2]
   17784:	e2431030 	sub	r1, r3, #48	; 0x30
   17788:	e2483030 	sub	r3, r8, #48	; 0x30
   1778c:	e3530009 	cmp	r3, #9	; 0x9
   17790:	e2822001 	add	r2, r2, #1	; 0x1
   17794:	9afffff7 	bls	17778 <.text+0x7778>
   17798:	e3e03000 	mvn	r3, #0	; 0x0
   1779c:	e1510003 	cmp	r1, r3
   177a0:	b1a01003 	movlt	r1, r3
   177a4:	e58d1048 	str	r1, [sp, #72]
   177a8:	e58d2050 	str	r2, [sp, #80]
   177ac:	eaffff6a 	b	1755c <_vfprintf_r+0x248>
   177b0:	e59d1054 	ldr	r1, [sp, #84]
   177b4:	e3811080 	orr	r1, r1, #128	; 0x80
   177b8:	e58d1054 	str	r1, [sp, #84]
   177bc:	eaffff61 	b	17548 <_vfprintf_r+0x234>
   177c0:	e3a02000 	mov	r2, #0	; 0x0
   177c4:	e3a0300a 	mov	r3, #10	; 0xa
   177c8:	e0228293 	mla	r2, r3, r2, r8
   177cc:	e59d3050 	ldr	r3, [sp, #80]
   177d0:	e4d38001 	ldrb	r8, [r3], #1
   177d4:	e58d3050 	str	r3, [sp, #80]
   177d8:	e2483030 	sub	r3, r8, #48	; 0x30
   177dc:	e3530009 	cmp	r3, #9	; 0x9
   177e0:	e2422030 	sub	r2, r2, #48	; 0x30
   177e4:	8affff5b 	bhi	17558 <_vfprintf_r+0x244>
   177e8:	eafffff5 	b	177c4 <.text+0x77c4>
   177ec:	e59d5054 	ldr	r5, [sp, #84]
   177f0:	e3855008 	orr	r5, r5, #8	; 0x8
   177f4:	e58d5054 	str	r5, [sp, #84]
   177f8:	eaffff52 	b	17548 <_vfprintf_r+0x234>
   177fc:	e59dc054 	ldr	ip, [sp, #84]
   17800:	e38cc040 	orr	ip, ip, #64	; 0x40
   17804:	e58dc054 	str	ip, [sp, #84]
   17808:	eaffff4e 	b	17548 <_vfprintf_r+0x234>
   1780c:	e59d0050 	ldr	r0, [sp, #80]
   17810:	e5d03000 	ldrb	r3, [r0]
   17814:	e59d1054 	ldr	r1, [sp, #84]
   17818:	e353006c 	cmp	r3, #108	; 0x6c
   1781c:	02800001 	addeq	r0, r0, #1	; 0x1
   17820:	e3813010 	orr	r3, r1, #16	; 0x10
   17824:	058d0050 	streq	r0, [sp, #80]
   17828:	e58d3054 	str	r3, [sp, #84]
   1782c:	eaffff45 	b	17548 <_vfprintf_r+0x234>
   17830:	e59d2054 	ldr	r2, [sp, #84]
   17834:	e3822010 	orr	r2, r2, #16	; 0x10
   17838:	e58d2054 	str	r2, [sp, #84]
   1783c:	eaffff41 	b	17548 <_vfprintf_r+0x234>
   17840:	e3580043 	cmp	r8, #67	; 0x43
   17844:	0a000002 	beq	17854 <.text+0x7854>
   17848:	e59d3054 	ldr	r3, [sp, #84]
   1784c:	e3130010 	tst	r3, #16	; 0x10
   17850:	0a000011 	beq	1789c <.text+0x789c>
   17854:	e28d4d1a 	add	r4, sp, #1664	; 0x680
   17858:	e284400c 	add	r4, r4, #12	; 0xc
   1785c:	e3a01000 	mov	r1, #0	; 0x0
   17860:	e3a02008 	mov	r2, #8	; 0x8
   17864:	e1a00004 	mov	r0, r4
   17868:	ebfffdfa 	bl	17058 <memset>
   1786c:	e28d1e45 	add	r1, sp, #1104	; 0x450
   17870:	e59d0010 	ldr	r0, [sp, #16]
   17874:	e1a03004 	mov	r3, r4
   17878:	e2811008 	add	r1, r1, #8	; 0x8
   1787c:	e5972000 	ldr	r2, [r7]
   17880:	eb0005b3 	bl	18f54 <_wcrtomb_r>
   17884:	e3700001 	cmn	r0, #1	; 0x1
   17888:	e1a05000 	mov	r5, r0
   1788c:	0a00057a 	beq	18e7c <.text+0x8e7c>
   17890:	e2877004 	add	r7, r7, #4	; 0x4
   17894:	e58d704c 	str	r7, [sp, #76]
   17898:	ea000004 	b	178b0 <.text+0x78b0>
   1789c:	e5973000 	ldr	r3, [r7]
   178a0:	e2877004 	add	r7, r7, #4	; 0x4
   178a4:	e5cd3458 	strb	r3, [sp, #1112]
   178a8:	e58d704c 	str	r7, [sp, #76]
   178ac:	e3a05001 	mov	r5, #1	; 0x1
   178b0:	e28dbe45 	add	fp, sp, #1104	; 0x450
   178b4:	e3a03000 	mov	r3, #0	; 0x0
   178b8:	e28bb008 	add	fp, fp, #8	; 0x8
   178bc:	e5cd36af 	strb	r3, [sp, #1711]
   178c0:	ea00058d 	b	18efc <.text+0x8efc>
   178c4:	e59d5054 	ldr	r5, [sp, #84]
   178c8:	e3855010 	orr	r5, r5, #16	; 0x10
   178cc:	e58d5054 	str	r5, [sp, #84]
   178d0:	e59dc054 	ldr	ip, [sp, #84]
   178d4:	e31c0010 	tst	ip, #16	; 0x10
   178d8:	15974000 	ldrne	r4, [r7]
   178dc:	12877004 	addne	r7, r7, #4	; 0x4
   178e0:	158d704c 	strne	r7, [sp, #76]
   178e4:	1a000008 	bne	1790c <.text+0x790c>
   178e8:	e59d0054 	ldr	r0, [sp, #84]
   178ec:	e3100040 	tst	r0, #64	; 0x40
   178f0:	e5970000 	ldr	r0, [r7]
   178f4:	e2872004 	add	r2, r7, #4	; 0x4
   178f8:	11a03800 	movne	r3, r0, lsl #16
   178fc:	158d204c 	strne	r2, [sp, #76]
   17900:	058d204c 	streq	r2, [sp, #76]
   17904:	11a04843 	movne	r4, r3, asr #16
   17908:	01a04000 	moveq	r4, r0
   1790c:	e3540000 	cmp	r4, #0	; 0x0
   17910:	a3a02001 	movge	r2, #1	; 0x1
   17914:	b2644000 	rsblt	r4, r4, #0	; 0x0
   17918:	b3a02001 	movlt	r2, #1	; 0x1
   1791c:	b3a0302d 	movlt	r3, #45	; 0x2d
   17920:	ba0001d9 	blt	1808c <.text+0x808c>
   17924:	ea0001d9 	b	18090 <.text+0x8090>
   17928:	e59d1048 	ldr	r1, [sp, #72]
   1792c:	e3710001 	cmn	r1, #1	; 0x1
   17930:	03a02006 	moveq	r2, #6	; 0x6
   17934:	e1a09008 	mov	r9, r8
   17938:	058d2048 	streq	r2, [sp, #72]
   1793c:	0a000006 	beq	1795c <.text+0x795c>
   17940:	e3580047 	cmp	r8, #71	; 0x47
   17944:	13580067 	cmpne	r8, #103	; 0x67
   17948:	1a000003 	bne	1795c <.text+0x795c>
   1794c:	e59d3048 	ldr	r3, [sp, #72]
   17950:	e3530000 	cmp	r3, #0	; 0x0
   17954:	03a03001 	moveq	r3, #1	; 0x1
   17958:	e58d3048 	str	r3, [sp, #72]
   1795c:	e59dc054 	ldr	ip, [sp, #84]
   17960:	e31c0008 	tst	ip, #8	; 0x8
   17964:	e2873008 	add	r3, r7, #8	; 0x8
   17968:	18970003 	ldmneia	r7, {r0, r1}
   1796c:	158d0040 	strne	r0, [sp, #64]
   17970:	158d1044 	strne	r1, [sp, #68]
   17974:	08970006 	ldmeqia	r7, {r1, r2}
   17978:	058d1040 	streq	r1, [sp, #64]
   1797c:	058d2044 	streq	r2, [sp, #68]
   17980:	e28d0040 	add	r0, sp, #64	; 0x40
   17984:	e8900003 	ldmia	r0, {r0, r1}
   17988:	e58d304c 	str	r3, [sp, #76]
   1798c:	eb0013de 	bl	1c90c <isinf>
   17990:	e2504000 	subs	r4, r0, #0	; 0x0
   17994:	0a000012 	beq	179e4 <.text+0x79e4>
   17998:	e3a03000 	mov	r3, #0	; 0x0
   1799c:	e28d0040 	add	r0, sp, #64	; 0x40
   179a0:	e8900003 	ldmia	r0, {r0, r1}
   179a4:	e3a02000 	mov	r2, #0	; 0x0
   179a8:	eb0017cd 	bl	1d8e4 <__ledf2>
   179ac:	e3500000 	cmp	r0, #0	; 0x0
   179b0:	b3a0302d 	movlt	r3, #45	; 0x2d
   179b4:	b5cd36af 	strltb	r3, [sp, #1711]
   179b8:	e2483045 	sub	r3, r8, #69	; 0x45
   179bc:	e3530002 	cmp	r3, #2	; 0x2
   179c0:	859fbc34 	ldrhi	fp, [pc, #3124]	; 185fc <.text+0x85fc>
   179c4:	83a05003 	movhi	r5, #3	; 0x3
   179c8:	83a02000 	movhi	r2, #0	; 0x0
   179cc:	8a0001f0 	bhi	18194 <.text+0x8194>
   179d0:	e59fbc28 	ldr	fp, [pc, #3112]	; 18600 <.text+0x8600>
   179d4:	e3a03000 	mov	r3, #0	; 0x0
   179d8:	e3a05003 	mov	r5, #3	; 0x3
   179dc:	e58d3030 	str	r3, [sp, #48]
   179e0:	ea000210 	b	18228 <.text+0x8228>
   179e4:	e28d0040 	add	r0, sp, #64	; 0x40
   179e8:	e8900003 	ldmia	r0, {r0, r1}
   179ec:	eb0013d1 	bl	1c938 <isnan>
   179f0:	e3500000 	cmp	r0, #0	; 0x0
   179f4:	0a000006 	beq	17a14 <.text+0x7a14>
   179f8:	e2483045 	sub	r3, r8, #69	; 0x45
   179fc:	e3530002 	cmp	r3, #2	; 0x2
   17a00:	959fbbfc 	ldrls	fp, [pc, #3068]	; 18604 <.text+0x8604>
   17a04:	859fbbfc 	ldrhi	fp, [pc, #3068]	; 18608 <.text+0x8608>
   17a08:	e3a05003 	mov	r5, #3	; 0x3
   17a0c:	e58d4030 	str	r4, [sp, #48]
   17a10:	ea000204 	b	18228 <.text+0x8228>
   17a14:	e59d5054 	ldr	r5, [sp, #84]
   17a18:	e3580066 	cmp	r8, #102	; 0x66
   17a1c:	e3855c01 	orr	r5, r5, #256	; 0x100
   17a20:	e58d5054 	str	r5, [sp, #84]
   17a24:	059d7048 	ldreq	r7, [sp, #72]
   17a28:	03a02003 	moveq	r2, #3	; 0x3
   17a2c:	0a000005 	beq	17a48 <.text+0x7a48>
   17a30:	e3580045 	cmp	r8, #69	; 0x45
   17a34:	13580065 	cmpne	r8, #101	; 0x65
   17a38:	059dc048 	ldreq	ip, [sp, #72]
   17a3c:	159d7048 	ldrne	r7, [sp, #72]
   17a40:	028c7001 	addeq	r7, ip, #1	; 0x1
   17a44:	e3a02002 	mov	r2, #2	; 0x2
   17a48:	e28d3040 	add	r3, sp, #64	; 0x40
   17a4c:	e8930018 	ldmia	r3, {r3, r4}
   17a50:	e3530000 	cmp	r3, #0	; 0x0
   17a54:	b3a0c02d 	movlt	ip, #45	; 0x2d
   17a58:	b58dc024 	strlt	ip, [sp, #36]
   17a5c:	e28dce69 	add	ip, sp, #1680	; 0x690
   17a60:	e28cc00c 	add	ip, ip, #12	; 0xc
   17a64:	b59d1040 	ldrlt	r1, [sp, #64]
   17a68:	b59d3044 	ldrlt	r3, [sp, #68]
   17a6c:	e58dc004 	str	ip, [sp, #4]
   17a70:	e28dce6a 	add	ip, sp, #1696	; 0x6a0
   17a74:	e28cc004 	add	ip, ip, #4	; 0x4
   17a78:	a1a05004 	movge	r5, r4
   17a7c:	a3a00000 	movge	r0, #0	; 0x0
   17a80:	a1a04003 	movge	r4, r3
   17a84:	b1a05003 	movlt	r5, r3
   17a88:	b2814102 	addlt	r4, r1, #-2147483648	; 0x80000000
   17a8c:	e58dc008 	str	ip, [sp, #8]
   17a90:	e28dce6a 	add	ip, sp, #1696	; 0x6a0
   17a94:	a58d0024 	strge	r0, [sp, #36]
   17a98:	e1a03002 	mov	r3, r2
   17a9c:	e28cc008 	add	ip, ip, #8	; 0x8
   17aa0:	e59d0010 	ldr	r0, [sp, #16]
   17aa4:	e1a01004 	mov	r1, r4
   17aa8:	e1a02005 	mov	r2, r5
   17aac:	e58dc00c 	str	ip, [sp, #12]
   17ab0:	e58d7000 	str	r7, [sp]
   17ab4:	eb000751 	bl	19800 <_dtoa_r>
   17ab8:	e3580067 	cmp	r8, #103	; 0x67
   17abc:	13580047 	cmpne	r8, #71	; 0x47
   17ac0:	e1a0b000 	mov	fp, r0
   17ac4:	1a000002 	bne	17ad4 <.text+0x7ad4>
   17ac8:	e59d0054 	ldr	r0, [sp, #84]
   17acc:	e3100001 	tst	r0, #1	; 0x1
   17ad0:	0a00001d 	beq	17b4c <.text+0x7b4c>
   17ad4:	e3580066 	cmp	r8, #102	; 0x66
   17ad8:	e08b6007 	add	r6, fp, r7
   17adc:	1a00000c 	bne	17b14 <.text+0x7b14>
   17ae0:	e5db3000 	ldrb	r3, [fp]
   17ae4:	e3530030 	cmp	r3, #48	; 0x30
   17ae8:	1a000007 	bne	17b0c <.text+0x7b0c>
   17aec:	e3a03000 	mov	r3, #0	; 0x0
   17af0:	e1a00004 	mov	r0, r4
   17af4:	e1a01005 	mov	r1, r5
   17af8:	e3a02000 	mov	r2, #0	; 0x0
   17afc:	eb00177a 	bl	1d8ec <__cmpdf2>
   17b00:	e3500000 	cmp	r0, #0	; 0x0
   17b04:	12673001 	rsbne	r3, r7, #1	; 0x1
   17b08:	158d369c 	strne	r3, [sp, #1692]
   17b0c:	e59d369c 	ldr	r3, [sp, #1692]
   17b10:	e0866003 	add	r6, r6, r3
   17b14:	e1a00004 	mov	r0, r4
   17b18:	e1a01005 	mov	r1, r5
   17b1c:	e3a02000 	mov	r2, #0	; 0x0
   17b20:	e3a03000 	mov	r3, #0	; 0x0
   17b24:	eb001770 	bl	1d8ec <__cmpdf2>
   17b28:	e3500000 	cmp	r0, #0	; 0x0
   17b2c:	058d66a8 	streq	r6, [sp, #1704]
   17b30:	ea000002 	b	17b40 <.text+0x7b40>
   17b34:	e3a03030 	mov	r3, #48	; 0x30
   17b38:	e4c23001 	strb	r3, [r2], #1
   17b3c:	e58d26a8 	str	r2, [sp, #1704]
   17b40:	e59d26a8 	ldr	r2, [sp, #1704]
   17b44:	e1520006 	cmp	r2, r6
   17b48:	3afffff9 	bcc	17b34 <.text+0x7b34>
   17b4c:	e59d36a8 	ldr	r3, [sp, #1704]
   17b50:	e3580067 	cmp	r8, #103	; 0x67
   17b54:	13a02000 	movne	r2, #0	; 0x0
   17b58:	03a02001 	moveq	r2, #1	; 0x1
   17b5c:	e3580067 	cmp	r8, #103	; 0x67
   17b60:	13580047 	cmpne	r8, #71	; 0x47
   17b64:	e06b6003 	rsb	r6, fp, r3
   17b68:	1a00000a 	bne	17b98 <.text+0x7b98>
   17b6c:	e59d369c 	ldr	r3, [sp, #1692]
   17b70:	e3730004 	cmn	r3, #4	; 0x4
   17b74:	da000003 	ble	17b88 <.text+0x7b88>
   17b78:	e59d1048 	ldr	r1, [sp, #72]
   17b7c:	e1530001 	cmp	r3, r1
   17b80:	d3a09067 	movle	r9, #103	; 0x67
   17b84:	da000055 	ble	17ce0 <.text+0x7ce0>
   17b88:	e3520000 	cmp	r2, #0	; 0x0
   17b8c:	13a09065 	movne	r9, #101	; 0x65
   17b90:	1a000003 	bne	17ba4 <.text+0x7ba4>
   17b94:	ea0004d4 	b	18eec <.text+0x8eec>
   17b98:	e3580065 	cmp	r8, #101	; 0x65
   17b9c:	ca000035 	bgt	17c78 <.text+0x7c78>
   17ba0:	e1a09008 	mov	r9, r8
   17ba4:	e59d369c 	ldr	r3, [sp, #1692]
   17ba8:	e2434001 	sub	r4, r3, #1	; 0x1
   17bac:	e3540000 	cmp	r4, #0	; 0x0
   17bb0:	e58d469c 	str	r4, [sp, #1692]
   17bb4:	b2644000 	rsblt	r4, r4, #0	; 0x0
   17bb8:	b3a0302d 	movlt	r3, #45	; 0x2d
   17bbc:	a3a0302b 	movge	r3, #43	; 0x2b
   17bc0:	e3540009 	cmp	r4, #9	; 0x9
   17bc4:	e5cd9695 	strb	r9, [sp, #1685]
   17bc8:	e5cd3696 	strb	r3, [sp, #1686]
   17bcc:	da000019 	ble	17c38 <.text+0x7c38>
   17bd0:	e28d5e67 	add	r5, sp, #1648	; 0x670
   17bd4:	e2855008 	add	r5, r5, #8	; 0x8
   17bd8:	e1a00004 	mov	r0, r4
   17bdc:	e3a0100a 	mov	r1, #10	; 0xa
   17be0:	eb0014cf 	bl	1cf24 <__modsi3>
   17be4:	e2803030 	add	r3, r0, #48	; 0x30
   17be8:	e3a0100a 	mov	r1, #10	; 0xa
   17bec:	e1a00004 	mov	r0, r4
   17bf0:	e5653001 	strb	r3, [r5, #-1]!
   17bf4:	eb001445 	bl	1cd10 <__aeabi_idiv>
   17bf8:	e3500009 	cmp	r0, #9	; 0x9
   17bfc:	e1a04000 	mov	r4, r0
   17c00:	cafffff4 	bgt	17bd8 <.text+0x7bd8>
   17c04:	e28d2e69 	add	r2, sp, #1680	; 0x690
   17c08:	e2803030 	add	r3, r0, #48	; 0x30
   17c0c:	e2451001 	sub	r1, r5, #1	; 0x1
   17c10:	e2822007 	add	r2, r2, #7	; 0x7
   17c14:	e5453001 	strb	r3, [r5, #-1]
   17c18:	ea000001 	b	17c24 <.text+0x7c24>
   17c1c:	e4d13001 	ldrb	r3, [r1], #1
   17c20:	e4c23001 	strb	r3, [r2], #1
   17c24:	e28d3e67 	add	r3, sp, #1648	; 0x670
   17c28:	e2833008 	add	r3, r3, #8	; 0x8
   17c2c:	e1510003 	cmp	r1, r3
   17c30:	3afffff9 	bcc	17c1c <.text+0x7c1c>
   17c34:	ea000005 	b	17c50 <.text+0x7c50>
   17c38:	e2842030 	add	r2, r4, #48	; 0x30
   17c3c:	e3a03030 	mov	r3, #48	; 0x30
   17c40:	e5cd2698 	strb	r2, [sp, #1688]
   17c44:	e5cd3697 	strb	r3, [sp, #1687]
   17c48:	e28d2e69 	add	r2, sp, #1680	; 0x690
   17c4c:	e2822009 	add	r2, r2, #9	; 0x9
   17c50:	e28d3e69 	add	r3, sp, #1680	; 0x690
   17c54:	e2833005 	add	r3, r3, #5	; 0x5
   17c58:	e0632002 	rsb	r2, r3, r2
   17c5c:	e3560001 	cmp	r6, #1	; 0x1
   17c60:	e58d2028 	str	r2, [sp, #40]
   17c64:	e0825006 	add	r5, r2, r6
   17c68:	ca000022 	bgt	17cf8 <.text+0x7cf8>
   17c6c:	e59d2054 	ldr	r2, [sp, #84]
   17c70:	e3120001 	tst	r2, #1	; 0x1
   17c74:	ea00001e 	b	17cf4 <.text+0x7cf4>
   17c78:	e3580066 	cmp	r8, #102	; 0x66
   17c7c:	11a09008 	movne	r9, r8
   17c80:	1a000016 	bne	17ce0 <.text+0x7ce0>
   17c84:	e59d569c 	ldr	r5, [sp, #1692]
   17c88:	e3550000 	cmp	r5, #0	; 0x0
   17c8c:	da000009 	ble	17cb8 <.text+0x7cb8>
   17c90:	e59d3048 	ldr	r3, [sp, #72]
   17c94:	e3530000 	cmp	r3, #0	; 0x0
   17c98:	1a000002 	bne	17ca8 <.text+0x7ca8>
   17c9c:	e59d7054 	ldr	r7, [sp, #84]
   17ca0:	e3170001 	tst	r7, #1	; 0x1
   17ca4:	0a000019 	beq	17d10 <.text+0x7d10>
   17ca8:	e59dc048 	ldr	ip, [sp, #72]
   17cac:	e2853001 	add	r3, r5, #1	; 0x1
   17cb0:	e08c5003 	add	r5, ip, r3
   17cb4:	ea000015 	b	17d10 <.text+0x7d10>
   17cb8:	e59d0048 	ldr	r0, [sp, #72]
   17cbc:	e3500000 	cmp	r0, #0	; 0x0
   17cc0:	1a000003 	bne	17cd4 <.text+0x7cd4>
   17cc4:	e59d1054 	ldr	r1, [sp, #84]
   17cc8:	e3110001 	tst	r1, #1	; 0x1
   17ccc:	03a05001 	moveq	r5, #1	; 0x1
   17cd0:	0a00000e 	beq	17d10 <.text+0x7d10>
   17cd4:	e59d2048 	ldr	r2, [sp, #72]
   17cd8:	e2825002 	add	r5, r2, #2	; 0x2
   17cdc:	ea00000b 	b	17d10 <.text+0x7d10>
   17ce0:	e59d569c 	ldr	r5, [sp, #1692]
   17ce4:	e1550006 	cmp	r5, r6
   17ce8:	ba000004 	blt	17d00 <.text+0x7d00>
   17cec:	e59d3054 	ldr	r3, [sp, #84]
   17cf0:	e3130001 	tst	r3, #1	; 0x1
   17cf4:	0a000005 	beq	17d10 <.text+0x7d10>
   17cf8:	e2855001 	add	r5, r5, #1	; 0x1
   17cfc:	ea000003 	b	17d10 <.text+0x7d10>
   17d00:	e3550000 	cmp	r5, #0	; 0x0
   17d04:	c3a00001 	movgt	r0, #1	; 0x1
   17d08:	d2650002 	rsble	r0, r5, #2	; 0x2
   17d0c:	e0865000 	add	r5, r6, r0
   17d10:	e59d7024 	ldr	r7, [sp, #36]
   17d14:	e3570000 	cmp	r7, #0	; 0x0
   17d18:	01a08009 	moveq	r8, r9
   17d1c:	058d602c 	streq	r6, [sp, #44]
   17d20:	0a00012e 	beq	181e0 <.text+0x81e0>
   17d24:	e3550000 	cmp	r5, #0	; 0x0
   17d28:	a1a0c005 	movge	ip, r5
   17d2c:	b3a0c000 	movlt	ip, #0	; 0x0
   17d30:	e3a00000 	mov	r0, #0	; 0x0
   17d34:	e3a0302d 	mov	r3, #45	; 0x2d
   17d38:	e1a08009 	mov	r8, r9
   17d3c:	e58dc034 	str	ip, [sp, #52]
   17d40:	e58d602c 	str	r6, [sp, #44]
   17d44:	e58d0030 	str	r0, [sp, #48]
   17d48:	e5cd36af 	strb	r3, [sp, #1711]
   17d4c:	ea00013c 	b	18244 <.text+0x8244>
   17d50:	e59d1054 	ldr	r1, [sp, #84]
   17d54:	e3110010 	tst	r1, #16	; 0x10
   17d58:	0a000005 	beq	17d74 <.text+0x7d74>
   17d5c:	e5973000 	ldr	r3, [r7]
   17d60:	e59d2018 	ldr	r2, [sp, #24]
   17d64:	e2877004 	add	r7, r7, #4	; 0x4
   17d68:	e58d704c 	str	r7, [sp, #76]
   17d6c:	e5832000 	str	r2, [r3]
   17d70:	eafffdc2 	b	17480 <_vfprintf_r+0x16c>
   17d74:	e59d3054 	ldr	r3, [sp, #84]
   17d78:	e3130040 	tst	r3, #64	; 0x40
   17d7c:	e2872004 	add	r2, r7, #4	; 0x4
   17d80:	05973000 	ldreq	r3, [r7]
   17d84:	15973000 	ldrne	r3, [r7]
   17d88:	159d5018 	ldrne	r5, [sp, #24]
   17d8c:	059d7018 	ldreq	r7, [sp, #24]
   17d90:	158d204c 	strne	r2, [sp, #76]
   17d94:	11c350b0 	strneh	r5, [r3]
   17d98:	058d204c 	streq	r2, [sp, #76]
   17d9c:	05837000 	streq	r7, [r3]
   17da0:	eafffdb6 	b	17480 <_vfprintf_r+0x16c>
   17da4:	e59dc054 	ldr	ip, [sp, #84]
   17da8:	e38cc010 	orr	ip, ip, #16	; 0x10
   17dac:	e58dc054 	str	ip, [sp, #84]
   17db0:	e59d0054 	ldr	r0, [sp, #84]
   17db4:	e2101010 	ands	r1, r0, #16	; 0x10
   17db8:	15974000 	ldrne	r4, [r7]
   17dbc:	13a02000 	movne	r2, #0	; 0x0
   17dc0:	12877004 	addne	r7, r7, #4	; 0x4
   17dc4:	158d704c 	strne	r7, [sp, #76]
   17dc8:	1a0000ae 	bne	18088 <.text+0x8088>
   17dcc:	e59d2054 	ldr	r2, [sp, #84]
   17dd0:	e5970000 	ldr	r0, [r7]
   17dd4:	e2123040 	ands	r3, r2, #64	; 0x40
   17dd8:	11a03800 	movne	r3, r0, lsl #16
   17ddc:	e2872004 	add	r2, r7, #4	; 0x4
   17de0:	158d204c 	strne	r2, [sp, #76]
   17de4:	058d204c 	streq	r2, [sp, #76]
   17de8:	11a04823 	movne	r4, r3, lsr #16
   17dec:	11a02001 	movne	r2, r1
   17df0:	01a04000 	moveq	r4, r0
   17df4:	01a02003 	moveq	r2, r3
   17df8:	ea0000a2 	b	18088 <.text+0x8088>
   17dfc:	e59d5054 	ldr	r5, [sp, #84]
   17e00:	e5974000 	ldr	r4, [r7]
   17e04:	e59f37ec 	ldr	r3, [pc, #2028]	; 185f8 <.text+0x85f8>
   17e08:	e3855002 	orr	r5, r5, #2	; 0x2
   17e0c:	e2877004 	add	r7, r7, #4	; 0x4
   17e10:	e3a08078 	mov	r8, #120	; 0x78
   17e14:	e58d3038 	str	r3, [sp, #56]
   17e18:	e58d5054 	str	r5, [sp, #84]
   17e1c:	e58d704c 	str	r7, [sp, #76]
   17e20:	ea000097 	b	18084 <.text+0x8084>
   17e24:	e3a05000 	mov	r5, #0	; 0x0
   17e28:	e5cd56af 	strb	r5, [sp, #1711]
   17e2c:	e597b000 	ldr	fp, [r7]
   17e30:	e2877004 	add	r7, r7, #4	; 0x4
   17e34:	e15b0005 	cmp	fp, r5
   17e38:	e58d704c 	str	r7, [sp, #76]
   17e3c:	0a00042c 	beq	18ef4 <.text+0x8ef4>
   17e40:	e3580053 	cmp	r8, #83	; 0x53
   17e44:	0a000002 	beq	17e54 <.text+0x7e54>
   17e48:	e59d7054 	ldr	r7, [sp, #84]
   17e4c:	e2174010 	ands	r4, r7, #16	; 0x10
   17e50:	0a00004b 	beq	17f84 <.text+0x7f84>
   17e54:	e28d0d1a 	add	r0, sp, #1664	; 0x680
   17e58:	e2800004 	add	r0, r0, #4	; 0x4
   17e5c:	e1a01005 	mov	r1, r5
   17e60:	e3a02008 	mov	r2, #8	; 0x8
   17e64:	e58db6a0 	str	fp, [sp, #1696]
   17e68:	ebfffc7a 	bl	17058 <memset>
   17e6c:	e59dc048 	ldr	ip, [sp, #72]
   17e70:	e35c0000 	cmp	ip, #0	; 0x0
   17e74:	ba000015 	blt	17ed0 <.text+0x7ed0>
   17e78:	e1a04005 	mov	r4, r5
   17e7c:	e59d36a0 	ldr	r3, [sp, #1696]
   17e80:	e793c004 	ldr	ip, [r3, r4]
   17e84:	e28d1e45 	add	r1, sp, #1104	; 0x450
   17e88:	e28d3d1a 	add	r3, sp, #1664	; 0x680
   17e8c:	e35c0000 	cmp	ip, #0	; 0x0
   17e90:	e1a0200c 	mov	r2, ip
   17e94:	e59d0010 	ldr	r0, [sp, #16]
   17e98:	e2811008 	add	r1, r1, #8	; 0x8
   17e9c:	e2833004 	add	r3, r3, #4	; 0x4
   17ea0:	0a000019 	beq	17f0c <.text+0x7f0c>
   17ea4:	eb00042a 	bl	18f54 <_wcrtomb_r>
   17ea8:	e3700001 	cmn	r0, #1	; 0x1
   17eac:	e0803005 	add	r3, r0, r5
   17eb0:	0a0003f1 	beq	18e7c <.text+0x8e7c>
   17eb4:	e59d0048 	ldr	r0, [sp, #72]
   17eb8:	e1530000 	cmp	r3, r0
   17ebc:	ca000012 	bgt	17f0c <.text+0x7f0c>
   17ec0:	e1a05003 	mov	r5, r3
   17ec4:	e2844004 	add	r4, r4, #4	; 0x4
   17ec8:	0a00000c 	beq	17f00 <.text+0x7f00>
   17ecc:	eaffffea 	b	17e7c <.text+0x7e7c>
   17ed0:	e3a01000 	mov	r1, #0	; 0x0
   17ed4:	e28dcd1a 	add	ip, sp, #1664	; 0x680
   17ed8:	e28cc004 	add	ip, ip, #4	; 0x4
   17edc:	e59d0010 	ldr	r0, [sp, #16]
   17ee0:	e28d2e6a 	add	r2, sp, #1696	; 0x6a0
   17ee4:	e1a03001 	mov	r3, r1
   17ee8:	e58dc000 	str	ip, [sp]
   17eec:	eb000436 	bl	18fcc <_wcsrtombs_r>
   17ef0:	e3700001 	cmn	r0, #1	; 0x1
   17ef4:	e1a05000 	mov	r5, r0
   17ef8:	1a000002 	bne	17f08 <.text+0x7f08>
   17efc:	ea0003de 	b	18e7c <.text+0x8e7c>
   17f00:	e59d5048 	ldr	r5, [sp, #72]
   17f04:	ea000000 	b	17f0c <.text+0x7f0c>
   17f08:	e58db6a0 	str	fp, [sp, #1696]
   17f0c:	e3550000 	cmp	r5, #0	; 0x0
   17f10:	0a0000be 	beq	18210 <.text+0x8210>
   17f14:	e59d0010 	ldr	r0, [sp, #16]
   17f18:	e2851001 	add	r1, r5, #1	; 0x1
   17f1c:	ebfffaa3 	bl	169b0 <_malloc_r>
   17f20:	e3500000 	cmp	r0, #0	; 0x0
   17f24:	0a0003d4 	beq	18e7c <.text+0x8e7c>
   17f28:	e28d4d1a 	add	r4, sp, #1664	; 0x680
   17f2c:	e2844004 	add	r4, r4, #4	; 0x4
   17f30:	e58d003c 	str	r0, [sp, #60]
   17f34:	e3a01000 	mov	r1, #0	; 0x0
   17f38:	e3a02008 	mov	r2, #8	; 0x8
   17f3c:	e1a00004 	mov	r0, r4
   17f40:	ebfffc44 	bl	17058 <memset>
   17f44:	e59d0010 	ldr	r0, [sp, #16]
   17f48:	e59d103c 	ldr	r1, [sp, #60]
   17f4c:	e28d2e6a 	add	r2, sp, #1696	; 0x6a0
   17f50:	e1a03005 	mov	r3, r5
   17f54:	e58d4000 	str	r4, [sp]
   17f58:	eb00041b 	bl	18fcc <_wcsrtombs_r>
   17f5c:	e1500005 	cmp	r0, r5
   17f60:	11da30bc 	ldrneh	r3, [sl, #12]
   17f64:	13833040 	orrne	r3, r3, #64	; 0x40
   17f68:	11ca30bc 	strneh	r3, [sl, #12]
   17f6c:	1a0003d5 	bne	18ec8 <.text+0x8ec8>
   17f70:	e59db03c 	ldr	fp, [sp, #60]
   17f74:	e3a03000 	mov	r3, #0	; 0x0
   17f78:	e58d3030 	str	r3, [sp, #48]
   17f7c:	e7cb3005 	strb	r3, [fp, r5]
   17f80:	ea0000a8 	b	18228 <.text+0x8228>
   17f84:	e59d1048 	ldr	r1, [sp, #72]
   17f88:	e3510000 	cmp	r1, #0	; 0x0
   17f8c:	ba00000a 	blt	17fbc <.text+0x7fbc>
   17f90:	e1a01004 	mov	r1, r4
   17f94:	e1a0000b 	mov	r0, fp
   17f98:	e59d2048 	ldr	r2, [sp, #72]
   17f9c:	eb000e32 	bl	1b86c <memchr>
   17fa0:	e3500000 	cmp	r0, #0	; 0x0
   17fa4:	0a00009c 	beq	1821c <.text+0x821c>
   17fa8:	e59d2048 	ldr	r2, [sp, #72]
   17fac:	e06b5000 	rsb	r5, fp, r0
   17fb0:	e1550002 	cmp	r5, r2
   17fb4:	ca000098 	bgt	1821c <.text+0x821c>
   17fb8:	ea000094 	b	18210 <.text+0x8210>
   17fbc:	e1a0000b 	mov	r0, fp
   17fc0:	ebfffc82 	bl	171d0 <strlen>
   17fc4:	e1a05000 	mov	r5, r0
   17fc8:	e58d4030 	str	r4, [sp, #48]
   17fcc:	ea000095 	b	18228 <.text+0x8228>
   17fd0:	e59d3054 	ldr	r3, [sp, #84]
   17fd4:	e3833010 	orr	r3, r3, #16	; 0x10
   17fd8:	e58d3054 	str	r3, [sp, #84]
   17fdc:	e59d5054 	ldr	r5, [sp, #84]
   17fe0:	e3150010 	tst	r5, #16	; 0x10
   17fe4:	15974000 	ldrne	r4, [r7]
   17fe8:	12877004 	addne	r7, r7, #4	; 0x4
   17fec:	158d704c 	strne	r7, [sp, #76]
   17ff0:	1a000008 	bne	18018 <.text+0x8018>
   17ff4:	e59dc054 	ldr	ip, [sp, #84]
   17ff8:	e5970000 	ldr	r0, [r7]
   17ffc:	e31c0040 	tst	ip, #64	; 0x40
   18000:	e2872004 	add	r2, r7, #4	; 0x4
   18004:	11a03800 	movne	r3, r0, lsl #16
   18008:	158d204c 	strne	r2, [sp, #76]
   1800c:	058d204c 	streq	r2, [sp, #76]
   18010:	11a04823 	movne	r4, r3, lsr #16
   18014:	01a04000 	moveq	r4, r0
   18018:	e3a02001 	mov	r2, #1	; 0x1
   1801c:	ea000019 	b	18088 <.text+0x8088>
   18020:	e59f05e4 	ldr	r0, [pc, #1508]	; 1860c <.text+0x860c>
   18024:	e58d0038 	str	r0, [sp, #56]
   18028:	e59d1054 	ldr	r1, [sp, #84]
   1802c:	e3110010 	tst	r1, #16	; 0x10
   18030:	15974000 	ldrne	r4, [r7]
   18034:	12877004 	addne	r7, r7, #4	; 0x4
   18038:	158d704c 	strne	r7, [sp, #76]
   1803c:	1a000008 	bne	18064 <.text+0x8064>
   18040:	e59d2054 	ldr	r2, [sp, #84]
   18044:	e5970000 	ldr	r0, [r7]
   18048:	e3120040 	tst	r2, #64	; 0x40
   1804c:	e2872004 	add	r2, r7, #4	; 0x4
   18050:	11a03800 	movne	r3, r0, lsl #16
   18054:	158d204c 	strne	r2, [sp, #76]
   18058:	058d204c 	streq	r2, [sp, #76]
   1805c:	11a04823 	movne	r4, r3, lsr #16
   18060:	01a04000 	moveq	r4, r0
   18064:	e59d3054 	ldr	r3, [sp, #84]
   18068:	e3540000 	cmp	r4, #0	; 0x0
   1806c:	03a03000 	moveq	r3, #0	; 0x0
   18070:	12033001 	andne	r3, r3, #1	; 0x1
   18074:	e3530000 	cmp	r3, #0	; 0x0
   18078:	159d3054 	ldrne	r3, [sp, #84]
   1807c:	13833002 	orrne	r3, r3, #2	; 0x2
   18080:	158d3054 	strne	r3, [sp, #84]
   18084:	e3a02002 	mov	r2, #2	; 0x2
   18088:	e3a03000 	mov	r3, #0	; 0x0
   1808c:	e5cd36af 	strb	r3, [sp, #1711]
   18090:	e59d5048 	ldr	r5, [sp, #72]
   18094:	e3550000 	cmp	r5, #0	; 0x0
   18098:	ba000005 	blt	180b4 <.text+0x80b4>
   1809c:	e59d7054 	ldr	r7, [sp, #84]
   180a0:	e3550000 	cmp	r5, #0	; 0x0
   180a4:	03540000 	cmpeq	r4, #0	; 0x0
   180a8:	e3c77080 	bic	r7, r7, #128	; 0x80
   180ac:	e58d7054 	str	r7, [sp, #84]
   180b0:	0a000039 	beq	1819c <.text+0x819c>
   180b4:	e3520001 	cmp	r2, #1	; 0x1
   180b8:	0a000005 	beq	180d4 <.text+0x80d4>
   180bc:	328d0e5b 	addcc	r0, sp, #1456	; 0x5b0
   180c0:	32800004 	addcc	r0, r0, #4	; 0x4
   180c4:	3a000005 	bcc	180e0 <.text+0x80e0>
   180c8:	e3520002 	cmp	r2, #2	; 0x2
   180cc:	1a00002b 	bne	18180 <.text+0x8180>
   180d0:	ea000020 	b	18158 <.text+0x8158>
   180d4:	e28d5e5b 	add	r5, sp, #1456	; 0x5b0
   180d8:	e2855004 	add	r5, r5, #4	; 0x4
   180dc:	ea000014 	b	18134 <.text+0x8134>
   180e0:	e2043007 	and	r3, r4, #7	; 0x7
   180e4:	e2833030 	add	r3, r3, #48	; 0x30
   180e8:	e1b041a4 	movs	r4, r4, lsr #3
   180ec:	e5603001 	strb	r3, [r0, #-1]!
   180f0:	1afffffa 	bne	180e0 <.text+0x80e0>
   180f4:	e59dc054 	ldr	ip, [sp, #84]
   180f8:	e31c0001 	tst	ip, #1	; 0x1
   180fc:	e1a0b000 	mov	fp, r0
   18100:	0a000032 	beq	181d0 <.text+0x81d0>
   18104:	e3530030 	cmp	r3, #48	; 0x30
   18108:	13a03030 	movne	r3, #48	; 0x30
   1810c:	156b3001 	strneb	r3, [fp, #-1]!
   18110:	ea00002e 	b	181d0 <.text+0x81d0>
   18114:	eb00134e 	bl	1ce54 <__umodsi3>
   18118:	e2800030 	add	r0, r0, #48	; 0x30
   1811c:	e5450001 	strb	r0, [r5, #-1]
   18120:	e3a0100a 	mov	r1, #10	; 0xa
   18124:	e1a00004 	mov	r0, r4
   18128:	eb0012b3 	bl	1cbfc <__aeabi_uidiv>
   1812c:	e1a05006 	mov	r5, r6
   18130:	e1a04000 	mov	r4, r0
   18134:	e3540009 	cmp	r4, #9	; 0x9
   18138:	e1a00004 	mov	r0, r4
   1813c:	e3a0100a 	mov	r1, #10	; 0xa
   18140:	e2456001 	sub	r6, r5, #1	; 0x1
   18144:	8afffff2 	bhi	18114 <.text+0x8114>
   18148:	e2843030 	add	r3, r4, #48	; 0x30
   1814c:	e1a0b006 	mov	fp, r6
   18150:	e5453001 	strb	r3, [r5, #-1]
   18154:	ea00001d 	b	181d0 <.text+0x81d0>
   18158:	e28d0e5b 	add	r0, sp, #1456	; 0x5b0
   1815c:	e2800004 	add	r0, r0, #4	; 0x4
   18160:	e59d1038 	ldr	r1, [sp, #56]
   18164:	e204300f 	and	r3, r4, #15	; 0xf
   18168:	e7d13003 	ldrb	r3, [r1, r3]
   1816c:	e1b04224 	movs	r4, r4, lsr #4
   18170:	e5603001 	strb	r3, [r0, #-1]!
   18174:	1afffff9 	bne	18160 <.text+0x8160>
   18178:	e1a0b000 	mov	fp, r0
   1817c:	ea000013 	b	181d0 <.text+0x81d0>
   18180:	e59f0488 	ldr	r0, [pc, #1160]	; 18610 <.text+0x8610>
   18184:	ebfffc11 	bl	171d0 <strlen>
   18188:	e59fb480 	ldr	fp, [pc, #1152]	; 18610 <.text+0x8610>
   1818c:	e59d2048 	ldr	r2, [sp, #72]
   18190:	e1a05000 	mov	r5, r0
   18194:	e58d2030 	str	r2, [sp, #48]
   18198:	ea000022 	b	18228 <.text+0x8228>
   1819c:	e3520000 	cmp	r2, #0	; 0x0
   181a0:	128dbe5b 	addne	fp, sp, #1456	; 0x5b0
   181a4:	128bb004 	addne	fp, fp, #4	; 0x4
   181a8:	1a000008 	bne	181d0 <.text+0x81d0>
   181ac:	e59d3054 	ldr	r3, [sp, #84]
   181b0:	e3130001 	tst	r3, #1	; 0x1
   181b4:	028d3e45 	addeq	r3, sp, #1104	; 0x450
   181b8:	13a03030 	movne	r3, #48	; 0x30
   181bc:	02833008 	addeq	r3, r3, #8	; 0x8
   181c0:	128dbe5b 	addne	fp, sp, #1456	; 0x5b0
   181c4:	15cd35b3 	strneb	r3, [sp, #1459]
   181c8:	0283bf57 	addeq	fp, r3, #348	; 0x15c
   181cc:	128bb003 	addne	fp, fp, #3	; 0x3
   181d0:	e28d5e6b 	add	r5, sp, #1712	; 0x6b0
   181d4:	e06b3005 	rsb	r3, fp, r5
   181d8:	e59d7048 	ldr	r7, [sp, #72]
   181dc:	e24350fc 	sub	r5, r3, #252	; 0xfc
   181e0:	e58d7030 	str	r7, [sp, #48]
   181e4:	ea00000f 	b	18228 <.text+0x8228>
   181e8:	e3580000 	cmp	r8, #0	; 0x0
   181ec:	0a000326 	beq	18e8c <.text+0x8e8c>
   181f0:	e28dbe45 	add	fp, sp, #1104	; 0x450
   181f4:	e3a03000 	mov	r3, #0	; 0x0
   181f8:	e3a05001 	mov	r5, #1	; 0x1
   181fc:	e28bb008 	add	fp, fp, #8	; 0x8
   18200:	e58d704c 	str	r7, [sp, #76]
   18204:	e5cd36af 	strb	r3, [sp, #1711]
   18208:	e5cd8458 	strb	r8, [sp, #1112]
   1820c:	ea00033a 	b	18efc <.text+0x8efc>
   18210:	e3a0c000 	mov	ip, #0	; 0x0
   18214:	e58dc030 	str	ip, [sp, #48]
   18218:	ea000002 	b	18228 <.text+0x8228>
   1821c:	e3a00000 	mov	r0, #0	; 0x0
   18220:	e59d5048 	ldr	r5, [sp, #72]
   18224:	e58d0030 	str	r0, [sp, #48]
   18228:	e5dd36af 	ldrb	r3, [sp, #1711]
   1822c:	e59d1030 	ldr	r1, [sp, #48]
   18230:	e1550001 	cmp	r5, r1
   18234:	a1a01005 	movge	r1, r5
   18238:	e3530000 	cmp	r3, #0	; 0x0
   1823c:	e58d1034 	str	r1, [sp, #52]
   18240:	0a000003 	beq	18254 <.text+0x8254>
   18244:	e59d2034 	ldr	r2, [sp, #52]
   18248:	e2822001 	add	r2, r2, #1	; 0x1
   1824c:	e58d2034 	str	r2, [sp, #52]
   18250:	ea000004 	b	18268 <.text+0x8268>
   18254:	e59d3054 	ldr	r3, [sp, #84]
   18258:	e3130002 	tst	r3, #2	; 0x2
   1825c:	159d7034 	ldrne	r7, [sp, #52]
   18260:	12877002 	addne	r7, r7, #2	; 0x2
   18264:	158d7034 	strne	r7, [sp, #52]
   18268:	e59dc054 	ldr	ip, [sp, #84]
   1826c:	e21c9084 	ands	r9, ip, #132	; 0x84
   18270:	1a000031 	bne	1833c <.text+0x833c>
   18274:	e59d001c 	ldr	r0, [sp, #28]
   18278:	e59d1034 	ldr	r1, [sp, #52]
   1827c:	e0614000 	rsb	r4, r1, r0
   18280:	e3540000 	cmp	r4, #0	; 0x0
   18284:	ca000010 	bgt	182cc <.text+0x82cc>
   18288:	ea00002b 	b	1833c <.text+0x833c>
   1828c:	e59d2014 	ldr	r2, [sp, #20]
   18290:	e3a03010 	mov	r3, #16	; 0x10
   18294:	e5827000 	str	r7, [r2]
   18298:	e5823004 	str	r3, [r2, #4]
   1829c:	e35e0007 	cmp	lr, #7	; 0x7
   182a0:	e2822008 	add	r2, r2, #8	; 0x8
   182a4:	e58d2014 	str	r2, [sp, #20]
   182a8:	e58d6680 	str	r6, [sp, #1664]
   182ac:	e58de67c 	str	lr, [sp, #1660]
   182b0:	da000004 	ble	182c8 <.text+0x82c8>
   182b4:	ebfffc07 	bl	172d8 <__sprint>
   182b8:	e3500000 	cmp	r0, #0	; 0x0
   182bc:	1a0002fe 	bne	18ebc <.text+0x8ebc>
   182c0:	e28d3e61 	add	r3, sp, #1552	; 0x610
   182c4:	e58d3014 	str	r3, [sp, #20]
   182c8:	e2444010 	sub	r4, r4, #16	; 0x10
   182cc:	e59dc680 	ldr	ip, [sp, #1664]
   182d0:	e59d267c 	ldr	r2, [sp, #1660]
   182d4:	e28d1e67 	add	r1, sp, #1648	; 0x670
   182d8:	e3540010 	cmp	r4, #16	; 0x10
   182dc:	e1a0000a 	mov	r0, sl
   182e0:	e2811008 	add	r1, r1, #8	; 0x8
   182e4:	e28c6010 	add	r6, ip, #16	; 0x10
   182e8:	e282e001 	add	lr, r2, #1	; 0x1
   182ec:	e59f732c 	ldr	r7, [pc, #812]	; 18620 <.text+0x8620>
   182f0:	caffffe5 	bgt	1828c <.text+0x828c>
   182f4:	e08c3004 	add	r3, ip, r4
   182f8:	e59dc014 	ldr	ip, [sp, #20]
   182fc:	e35e0007 	cmp	lr, #7	; 0x7
   18300:	e58c7000 	str	r7, [ip]
   18304:	e58c4004 	str	r4, [ip, #4]
   18308:	d28cc008 	addle	ip, ip, #8	; 0x8
   1830c:	e58d3680 	str	r3, [sp, #1664]
   18310:	e58de67c 	str	lr, [sp, #1660]
   18314:	d58dc014 	strle	ip, [sp, #20]
   18318:	da000007 	ble	1833c <.text+0x833c>
   1831c:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18320:	e1a0000a 	mov	r0, sl
   18324:	e2811008 	add	r1, r1, #8	; 0x8
   18328:	ebfffbea 	bl	172d8 <__sprint>
   1832c:	e3500000 	cmp	r0, #0	; 0x0
   18330:	1a0002e1 	bne	18ebc <.text+0x8ebc>
   18334:	e28d0e61 	add	r0, sp, #1552	; 0x610
   18338:	e58d0014 	str	r0, [sp, #20]
   1833c:	e5dd36af 	ldrb	r3, [sp, #1711]
   18340:	e3530000 	cmp	r3, #0	; 0x0
   18344:	0a000018 	beq	183ac <.text+0x83ac>
   18348:	e59d167c 	ldr	r1, [sp, #1660]
   1834c:	e59d7014 	ldr	r7, [sp, #20]
   18350:	e28d3e6a 	add	r3, sp, #1696	; 0x6a0
   18354:	e2811001 	add	r1, r1, #1	; 0x1
   18358:	e59d2680 	ldr	r2, [sp, #1664]
   1835c:	e283300f 	add	r3, r3, #15	; 0xf
   18360:	e3510007 	cmp	r1, #7	; 0x7
   18364:	e5873000 	str	r3, [r7]
   18368:	e3a03001 	mov	r3, #1	; 0x1
   1836c:	e2822001 	add	r2, r2, #1	; 0x1
   18370:	e5873004 	str	r3, [r7, #4]
   18374:	d2877008 	addle	r7, r7, #8	; 0x8
   18378:	e58d2680 	str	r2, [sp, #1664]
   1837c:	e58d167c 	str	r1, [sp, #1660]
   18380:	d58d7014 	strle	r7, [sp, #20]
   18384:	da000026 	ble	18424 <.text+0x8424>
   18388:	e28d1e67 	add	r1, sp, #1648	; 0x670
   1838c:	e1a0000a 	mov	r0, sl
   18390:	e2811008 	add	r1, r1, #8	; 0x8
   18394:	ebfffbcf 	bl	172d8 <__sprint>
   18398:	e3500000 	cmp	r0, #0	; 0x0
   1839c:	1a0002c6 	bne	18ebc <.text+0x8ebc>
   183a0:	e28dce61 	add	ip, sp, #1552	; 0x610
   183a4:	e58dc014 	str	ip, [sp, #20]
   183a8:	ea00001d 	b	18424 <.text+0x8424>
   183ac:	e59d0054 	ldr	r0, [sp, #84]
   183b0:	e3100002 	tst	r0, #2	; 0x2
   183b4:	0a00001a 	beq	18424 <.text+0x8424>
   183b8:	e59d3680 	ldr	r3, [sp, #1664]
   183bc:	e59d167c 	ldr	r1, [sp, #1660]
   183c0:	e2833002 	add	r3, r3, #2	; 0x2
   183c4:	e3a02030 	mov	r2, #48	; 0x30
   183c8:	e5cd26ad 	strb	r2, [sp, #1709]
   183cc:	e58d3680 	str	r3, [sp, #1664]
   183d0:	e59d2014 	ldr	r2, [sp, #20]
   183d4:	e28d3e6a 	add	r3, sp, #1696	; 0x6a0
   183d8:	e2811001 	add	r1, r1, #1	; 0x1
   183dc:	e283300d 	add	r3, r3, #13	; 0xd
   183e0:	e3510007 	cmp	r1, #7	; 0x7
   183e4:	e5cd86ae 	strb	r8, [sp, #1710]
   183e8:	e5823000 	str	r3, [r2]
   183ec:	e3a03002 	mov	r3, #2	; 0x2
   183f0:	e5823004 	str	r3, [r2, #4]
   183f4:	d2822008 	addle	r2, r2, #8	; 0x8
   183f8:	e58d167c 	str	r1, [sp, #1660]
   183fc:	d58d2014 	strle	r2, [sp, #20]
   18400:	da000007 	ble	18424 <.text+0x8424>
   18404:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18408:	e1a0000a 	mov	r0, sl
   1840c:	e2811008 	add	r1, r1, #8	; 0x8
   18410:	ebfffbb0 	bl	172d8 <__sprint>
   18414:	e3500000 	cmp	r0, #0	; 0x0
   18418:	1a0002a7 	bne	18ebc <.text+0x8ebc>
   1841c:	e28d3e61 	add	r3, sp, #1552	; 0x610
   18420:	e58d3014 	str	r3, [sp, #20]
   18424:	e3590080 	cmp	r9, #128	; 0x80
   18428:	1a000031 	bne	184f4 <.text+0x84f4>
   1842c:	e59d701c 	ldr	r7, [sp, #28]
   18430:	e59dc034 	ldr	ip, [sp, #52]
   18434:	e06c4007 	rsb	r4, ip, r7
   18438:	e3540000 	cmp	r4, #0	; 0x0
   1843c:	ca000010 	bgt	18484 <.text+0x8484>
   18440:	ea00002b 	b	184f4 <.text+0x84f4>
   18444:	e59d2014 	ldr	r2, [sp, #20]
   18448:	e3a03010 	mov	r3, #16	; 0x10
   1844c:	e5827000 	str	r7, [r2]
   18450:	e5823004 	str	r3, [r2, #4]
   18454:	e35e0007 	cmp	lr, #7	; 0x7
   18458:	e2822008 	add	r2, r2, #8	; 0x8
   1845c:	e58d2014 	str	r2, [sp, #20]
   18460:	e58d6680 	str	r6, [sp, #1664]
   18464:	e58de67c 	str	lr, [sp, #1660]
   18468:	da000004 	ble	18480 <.text+0x8480>
   1846c:	ebfffb99 	bl	172d8 <__sprint>
   18470:	e3500000 	cmp	r0, #0	; 0x0
   18474:	1a000290 	bne	18ebc <.text+0x8ebc>
   18478:	e28d3e61 	add	r3, sp, #1552	; 0x610
   1847c:	e58d3014 	str	r3, [sp, #20]
   18480:	e2444010 	sub	r4, r4, #16	; 0x10
   18484:	e59dc680 	ldr	ip, [sp, #1664]
   18488:	e59d267c 	ldr	r2, [sp, #1660]
   1848c:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18490:	e3540010 	cmp	r4, #16	; 0x10
   18494:	e1a0000a 	mov	r0, sl
   18498:	e2811008 	add	r1, r1, #8	; 0x8
   1849c:	e28c6010 	add	r6, ip, #16	; 0x10
   184a0:	e282e001 	add	lr, r2, #1	; 0x1
   184a4:	e59f7170 	ldr	r7, [pc, #368]	; 1861c <.text+0x861c>
   184a8:	caffffe5 	bgt	18444 <.text+0x8444>
   184ac:	e08c3004 	add	r3, ip, r4
   184b0:	e59dc014 	ldr	ip, [sp, #20]
   184b4:	e35e0007 	cmp	lr, #7	; 0x7
   184b8:	e58c7000 	str	r7, [ip]
   184bc:	e58c4004 	str	r4, [ip, #4]
   184c0:	d28cc008 	addle	ip, ip, #8	; 0x8
   184c4:	e58d3680 	str	r3, [sp, #1664]
   184c8:	e58de67c 	str	lr, [sp, #1660]
   184cc:	d58dc014 	strle	ip, [sp, #20]
   184d0:	da000007 	ble	184f4 <.text+0x84f4>
   184d4:	e28d1e67 	add	r1, sp, #1648	; 0x670
   184d8:	e1a0000a 	mov	r0, sl
   184dc:	e2811008 	add	r1, r1, #8	; 0x8
   184e0:	ebfffb7c 	bl	172d8 <__sprint>
   184e4:	e3500000 	cmp	r0, #0	; 0x0
   184e8:	1a000273 	bne	18ebc <.text+0x8ebc>
   184ec:	e28d0e61 	add	r0, sp, #1552	; 0x610
   184f0:	e58d0014 	str	r0, [sp, #20]
   184f4:	e59d1030 	ldr	r1, [sp, #48]
   184f8:	e0654001 	rsb	r4, r5, r1
   184fc:	e3540000 	cmp	r4, #0	; 0x0
   18500:	ca000010 	bgt	18548 <.text+0x8548>
   18504:	ea00002b 	b	185b8 <.text+0x85b8>
   18508:	e59d2014 	ldr	r2, [sp, #20]
   1850c:	e3a03010 	mov	r3, #16	; 0x10
   18510:	e5827000 	str	r7, [r2]
   18514:	e5823004 	str	r3, [r2, #4]
   18518:	e35e0007 	cmp	lr, #7	; 0x7
   1851c:	e2822008 	add	r2, r2, #8	; 0x8
   18520:	e58d2014 	str	r2, [sp, #20]
   18524:	e58d6680 	str	r6, [sp, #1664]
   18528:	e58de67c 	str	lr, [sp, #1660]
   1852c:	da000004 	ble	18544 <.text+0x8544>
   18530:	ebfffb68 	bl	172d8 <__sprint>
   18534:	e3500000 	cmp	r0, #0	; 0x0
   18538:	1a00025f 	bne	18ebc <.text+0x8ebc>
   1853c:	e28d3e61 	add	r3, sp, #1552	; 0x610
   18540:	e58d3014 	str	r3, [sp, #20]
   18544:	e2444010 	sub	r4, r4, #16	; 0x10
   18548:	e59dc680 	ldr	ip, [sp, #1664]
   1854c:	e59d267c 	ldr	r2, [sp, #1660]
   18550:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18554:	e3540010 	cmp	r4, #16	; 0x10
   18558:	e1a0000a 	mov	r0, sl
   1855c:	e2811008 	add	r1, r1, #8	; 0x8
   18560:	e28c6010 	add	r6, ip, #16	; 0x10
   18564:	e282e001 	add	lr, r2, #1	; 0x1
   18568:	e59f70ac 	ldr	r7, [pc, #172]	; 1861c <.text+0x861c>
   1856c:	caffffe5 	bgt	18508 <.text+0x8508>
   18570:	e08c3004 	add	r3, ip, r4
   18574:	e59dc014 	ldr	ip, [sp, #20]
   18578:	e35e0007 	cmp	lr, #7	; 0x7
   1857c:	e58c7000 	str	r7, [ip]
   18580:	e58c4004 	str	r4, [ip, #4]
   18584:	d28cc008 	addle	ip, ip, #8	; 0x8
   18588:	e58d3680 	str	r3, [sp, #1664]
   1858c:	e58de67c 	str	lr, [sp, #1660]
   18590:	d58dc014 	strle	ip, [sp, #20]
   18594:	da000007 	ble	185b8 <.text+0x85b8>
   18598:	e28d1e67 	add	r1, sp, #1648	; 0x670
   1859c:	e1a0000a 	mov	r0, sl
   185a0:	e2811008 	add	r1, r1, #8	; 0x8
   185a4:	ebfffb4b 	bl	172d8 <__sprint>
   185a8:	e3500000 	cmp	r0, #0	; 0x0
   185ac:	1a000242 	bne	18ebc <.text+0x8ebc>
   185b0:	e28d0e61 	add	r0, sp, #1552	; 0x610
   185b4:	e58d0014 	str	r0, [sp, #20]
   185b8:	e59d1054 	ldr	r1, [sp, #84]
   185bc:	e3110c01 	tst	r1, #256	; 0x100
   185c0:	1a000018 	bne	18628 <.text+0x8628>
   185c4:	e59d267c 	ldr	r2, [sp, #1660]
   185c8:	e59d3680 	ldr	r3, [sp, #1664]
   185cc:	e59d7014 	ldr	r7, [sp, #20]
   185d0:	e2822001 	add	r2, r2, #1	; 0x1
   185d4:	e0833005 	add	r3, r3, r5
   185d8:	e3520007 	cmp	r2, #7	; 0x7
   185dc:	e587b000 	str	fp, [r7]
   185e0:	e58d3680 	str	r3, [sp, #1664]
   185e4:	e5875004 	str	r5, [r7, #4]
   185e8:	e58d267c 	str	r2, [sp, #1660]
   185ec:	d287e008 	addle	lr, r7, #8	; 0x8
   185f0:	da0001dc 	ble	18d68 <.text+0x8d68>
   185f4:	ea0001d4 	b	18d4c <.text+0x8d4c>
   185f8:	0001e2ec 	andeq	lr, r1, ip, ror #5
   185fc:	0001e300 	andeq	lr, r1, r0, lsl #6
   18600:	0001e304 	andeq	lr, r1, r4, lsl #6
   18604:	0001e308 	andeq	lr, r1, r8, lsl #6
   18608:	0001e30c 	andeq	lr, r1, ip, lsl #6
   1860c:	0001e310 	andeq	lr, r1, r0, lsl r3
   18610:	0001e324 	andeq	lr, r1, r4, lsr #6
   18614:	0001e340 	andeq	lr, r1, r0, asr #6
   18618:	0001e0e0 	andeq	lr, r1, r0, ror #1
   1861c:	0001db92 	muleq	r1, r2, fp
   18620:	0001dba2 	andeq	sp, r1, r2, lsr #23
   18624:	0001e344 	andeq	lr, r1, r4, asr #6
   18628:	e3580065 	cmp	r8, #101	; 0x65
   1862c:	da00014b 	ble	18b60 <.text+0x8b60>
   18630:	e28d0040 	add	r0, sp, #64	; 0x40
   18634:	e8900003 	ldmia	r0, {r0, r1}
   18638:	e3a02000 	mov	r2, #0	; 0x0
   1863c:	e3a03000 	mov	r3, #0	; 0x0
   18640:	eb0014a9 	bl	1d8ec <__cmpdf2>
   18644:	e3500000 	cmp	r0, #0	; 0x0
   18648:	1a000052 	bne	18798 <.text+0x8798>
   1864c:	e59d167c 	ldr	r1, [sp, #1660]
   18650:	e59dc014 	ldr	ip, [sp, #20]
   18654:	e59d2680 	ldr	r2, [sp, #1664]
   18658:	e51f304c 	ldr	r3, [pc, #-76]	; 18614 <.text+0x8614>
   1865c:	e2811001 	add	r1, r1, #1	; 0x1
   18660:	e3510007 	cmp	r1, #7	; 0x7
   18664:	e2822001 	add	r2, r2, #1	; 0x1
   18668:	e58c3000 	str	r3, [ip]
   1866c:	e3a03001 	mov	r3, #1	; 0x1
   18670:	e58c3004 	str	r3, [ip, #4]
   18674:	e58d2680 	str	r2, [sp, #1664]
   18678:	e58d167c 	str	r1, [sp, #1660]
   1867c:	d28ce008 	addle	lr, ip, #8	; 0x8
   18680:	da000006 	ble	186a0 <.text+0x86a0>
   18684:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18688:	e1a0000a 	mov	r0, sl
   1868c:	e2811008 	add	r1, r1, #8	; 0x8
   18690:	ebfffb10 	bl	172d8 <__sprint>
   18694:	e3500000 	cmp	r0, #0	; 0x0
   18698:	1a000207 	bne	18ebc <.text+0x8ebc>
   1869c:	e28dee61 	add	lr, sp, #1552	; 0x610
   186a0:	e59d369c 	ldr	r3, [sp, #1692]
   186a4:	e59d002c 	ldr	r0, [sp, #44]
   186a8:	e1530000 	cmp	r3, r0
   186ac:	ba000002 	blt	186bc <.text+0x86bc>
   186b0:	e59d1054 	ldr	r1, [sp, #84]
   186b4:	e3110001 	tst	r1, #1	; 0x1
   186b8:	0a0001aa 	beq	18d68 <.text+0x8d68>
   186bc:	e59d2680 	ldr	r2, [sp, #1664]
   186c0:	e59d367c 	ldr	r3, [sp, #1660]
   186c4:	e2822001 	add	r2, r2, #1	; 0x1
   186c8:	e2833001 	add	r3, r3, #1	; 0x1
   186cc:	e58d2680 	str	r2, [sp, #1664]
   186d0:	e59d2020 	ldr	r2, [sp, #32]
   186d4:	e3530007 	cmp	r3, #7	; 0x7
   186d8:	e3a01001 	mov	r1, #1	; 0x1
   186dc:	e58e1004 	str	r1, [lr, #4]
   186e0:	e58e2000 	str	r2, [lr]
   186e4:	e58d367c 	str	r3, [sp, #1660]
   186e8:	d28ee008 	addle	lr, lr, #8	; 0x8
   186ec:	da000006 	ble	1870c <.text+0x870c>
   186f0:	e28d1e67 	add	r1, sp, #1648	; 0x670
   186f4:	e1a0000a 	mov	r0, sl
   186f8:	e2811008 	add	r1, r1, #8	; 0x8
   186fc:	ebfffaf5 	bl	172d8 <__sprint>
   18700:	e3500000 	cmp	r0, #0	; 0x0
   18704:	1a0001ec 	bne	18ebc <.text+0x8ebc>
   18708:	e28dee61 	add	lr, sp, #1552	; 0x610
   1870c:	e59d302c 	ldr	r3, [sp, #44]
   18710:	e2434001 	sub	r4, r3, #1	; 0x1
   18714:	e3540000 	cmp	r4, #0	; 0x0
   18718:	ca00000d 	bgt	18754 <.text+0x8754>
   1871c:	ea000191 	b	18d68 <.text+0x8d68>
   18720:	e3a03010 	mov	r3, #16	; 0x10
   18724:	e3550007 	cmp	r5, #7	; 0x7
   18728:	e58e7000 	str	r7, [lr]
   1872c:	e58e3004 	str	r3, [lr, #4]
   18730:	e58d6680 	str	r6, [sp, #1664]
   18734:	e28ee008 	add	lr, lr, #8	; 0x8
   18738:	e58d567c 	str	r5, [sp, #1660]
   1873c:	da000003 	ble	18750 <.text+0x8750>
   18740:	ebfffae4 	bl	172d8 <__sprint>
   18744:	e3500000 	cmp	r0, #0	; 0x0
   18748:	1a0001db 	bne	18ebc <.text+0x8ebc>
   1874c:	e28dee61 	add	lr, sp, #1552	; 0x610
   18750:	e2444010 	sub	r4, r4, #16	; 0x10
   18754:	e59dc680 	ldr	ip, [sp, #1664]
   18758:	e59d267c 	ldr	r2, [sp, #1660]
   1875c:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18760:	e3540010 	cmp	r4, #16	; 0x10
   18764:	e1a0000a 	mov	r0, sl
   18768:	e2811008 	add	r1, r1, #8	; 0x8
   1876c:	e28c6010 	add	r6, ip, #16	; 0x10
   18770:	e2825001 	add	r5, r2, #1	; 0x1
   18774:	e51f7160 	ldr	r7, [pc, #-352]	; 1861c <.text+0x861c>
   18778:	caffffe8 	bgt	18720 <.text+0x8720>
   1877c:	e08c3004 	add	r3, ip, r4
   18780:	e1a02005 	mov	r2, r5
   18784:	e3550007 	cmp	r5, #7	; 0x7
   18788:	e58e7000 	str	r7, [lr]
   1878c:	e58d3680 	str	r3, [sp, #1664]
   18790:	e58e4004 	str	r4, [lr, #4]
   18794:	ea000065 	b	18930 <.text+0x8930>
   18798:	e59d169c 	ldr	r1, [sp, #1692]
   1879c:	e3510000 	cmp	r1, #0	; 0x0
   187a0:	ca000064 	bgt	18938 <.text+0x8938>
   187a4:	e59d167c 	ldr	r1, [sp, #1660]
   187a8:	e59d5014 	ldr	r5, [sp, #20]
   187ac:	e59d2680 	ldr	r2, [sp, #1664]
   187b0:	e51f31a4 	ldr	r3, [pc, #-420]	; 18614 <.text+0x8614>
   187b4:	e2811001 	add	r1, r1, #1	; 0x1
   187b8:	e3510007 	cmp	r1, #7	; 0x7
   187bc:	e2822001 	add	r2, r2, #1	; 0x1
   187c0:	e5853000 	str	r3, [r5]
   187c4:	e3a03001 	mov	r3, #1	; 0x1
   187c8:	e5853004 	str	r3, [r5, #4]
   187cc:	e58d2680 	str	r2, [sp, #1664]
   187d0:	e58d167c 	str	r1, [sp, #1660]
   187d4:	d285e008 	addle	lr, r5, #8	; 0x8
   187d8:	da000006 	ble	187f8 <.text+0x87f8>
   187dc:	e28d1e67 	add	r1, sp, #1648	; 0x670
   187e0:	e1a0000a 	mov	r0, sl
   187e4:	e2811008 	add	r1, r1, #8	; 0x8
   187e8:	ebfffaba 	bl	172d8 <__sprint>
   187ec:	e3500000 	cmp	r0, #0	; 0x0
   187f0:	1a0001b1 	bne	18ebc <.text+0x8ebc>
   187f4:	e28dee61 	add	lr, sp, #1552	; 0x610
   187f8:	e59d369c 	ldr	r3, [sp, #1692]
   187fc:	e3530000 	cmp	r3, #0	; 0x0
   18800:	1a000002 	bne	18810 <.text+0x8810>
   18804:	e59d702c 	ldr	r7, [sp, #44]
   18808:	e3570000 	cmp	r7, #0	; 0x0
   1880c:	0a000155 	beq	18d68 <.text+0x8d68>
   18810:	e59d367c 	ldr	r3, [sp, #1660]
   18814:	e59d2680 	ldr	r2, [sp, #1664]
   18818:	e2833001 	add	r3, r3, #1	; 0x1
   1881c:	e59dc020 	ldr	ip, [sp, #32]
   18820:	e3530007 	cmp	r3, #7	; 0x7
   18824:	e2822001 	add	r2, r2, #1	; 0x1
   18828:	e3a01001 	mov	r1, #1	; 0x1
   1882c:	e58e1004 	str	r1, [lr, #4]
   18830:	e58ec000 	str	ip, [lr]
   18834:	e58d2680 	str	r2, [sp, #1664]
   18838:	e58d367c 	str	r3, [sp, #1660]
   1883c:	d28ee008 	addle	lr, lr, #8	; 0x8
   18840:	da000006 	ble	18860 <.text+0x8860>
   18844:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18848:	e1a0000a 	mov	r0, sl
   1884c:	e2811008 	add	r1, r1, #8	; 0x8
   18850:	ebfffaa0 	bl	172d8 <__sprint>
   18854:	e3500000 	cmp	r0, #0	; 0x0
   18858:	1a000197 	bne	18ebc <.text+0x8ebc>
   1885c:	e28dee61 	add	lr, sp, #1552	; 0x610
   18860:	e59d369c 	ldr	r3, [sp, #1692]
   18864:	e2634000 	rsb	r4, r3, #0	; 0x0
   18868:	e3540000 	cmp	r4, #0	; 0x0
   1886c:	ca00000d 	bgt	188a8 <.text+0x88a8>
   18870:	ea000025 	b	1890c <.text+0x890c>
   18874:	e3a03010 	mov	r3, #16	; 0x10
   18878:	e3550007 	cmp	r5, #7	; 0x7
   1887c:	e58e7000 	str	r7, [lr]
   18880:	e58e3004 	str	r3, [lr, #4]
   18884:	e58d6680 	str	r6, [sp, #1664]
   18888:	e28ee008 	add	lr, lr, #8	; 0x8
   1888c:	e58d567c 	str	r5, [sp, #1660]
   18890:	da000003 	ble	188a4 <.text+0x88a4>
   18894:	ebfffa8f 	bl	172d8 <__sprint>
   18898:	e3500000 	cmp	r0, #0	; 0x0
   1889c:	1a000186 	bne	18ebc <.text+0x8ebc>
   188a0:	e28dee61 	add	lr, sp, #1552	; 0x610
   188a4:	e2444010 	sub	r4, r4, #16	; 0x10
   188a8:	e59dc680 	ldr	ip, [sp, #1664]
   188ac:	e59d267c 	ldr	r2, [sp, #1660]
   188b0:	e28d1e67 	add	r1, sp, #1648	; 0x670
   188b4:	e3540010 	cmp	r4, #16	; 0x10
   188b8:	e1a0000a 	mov	r0, sl
   188bc:	e2811008 	add	r1, r1, #8	; 0x8
   188c0:	e28c6010 	add	r6, ip, #16	; 0x10
   188c4:	e2825001 	add	r5, r2, #1	; 0x1
   188c8:	e51f72b4 	ldr	r7, [pc, #-692]	; 1861c <.text+0x861c>
   188cc:	caffffe8 	bgt	18874 <.text+0x8874>
   188d0:	e08c3004 	add	r3, ip, r4
   188d4:	e3550007 	cmp	r5, #7	; 0x7
   188d8:	e58e7000 	str	r7, [lr]
   188dc:	e58e4004 	str	r4, [lr, #4]
   188e0:	e58d3680 	str	r3, [sp, #1664]
   188e4:	e58d567c 	str	r5, [sp, #1660]
   188e8:	d28ee008 	addle	lr, lr, #8	; 0x8
   188ec:	da000006 	ble	1890c <.text+0x890c>
   188f0:	e28d1e67 	add	r1, sp, #1648	; 0x670
   188f4:	e1a0000a 	mov	r0, sl
   188f8:	e2811008 	add	r1, r1, #8	; 0x8
   188fc:	ebfffa75 	bl	172d8 <__sprint>
   18900:	e3500000 	cmp	r0, #0	; 0x0
   18904:	1a00016c 	bne	18ebc <.text+0x8ebc>
   18908:	e28dee61 	add	lr, sp, #1552	; 0x610
   1890c:	e59d3680 	ldr	r3, [sp, #1664]
   18910:	e59d002c 	ldr	r0, [sp, #44]
   18914:	e59d267c 	ldr	r2, [sp, #1660]
   18918:	e0833000 	add	r3, r3, r0
   1891c:	e2822001 	add	r2, r2, #1	; 0x1
   18920:	e58eb000 	str	fp, [lr]
   18924:	e58d3680 	str	r3, [sp, #1664]
   18928:	e58e0004 	str	r0, [lr, #4]
   1892c:	e3520007 	cmp	r2, #7	; 0x7
   18930:	e58d267c 	str	r2, [sp, #1660]
   18934:	ea000050 	b	18a7c <.text+0x8a7c>
   18938:	e59d202c 	ldr	r2, [sp, #44]
   1893c:	e1510002 	cmp	r1, r2
   18940:	e59dc680 	ldr	ip, [sp, #1664]
   18944:	e59d267c 	ldr	r2, [sp, #1660]
   18948:	ba00004e 	blt	18a88 <.text+0x8a88>
   1894c:	e59d502c 	ldr	r5, [sp, #44]
   18950:	e59d7014 	ldr	r7, [sp, #20]
   18954:	e2822001 	add	r2, r2, #1	; 0x1
   18958:	e3520007 	cmp	r2, #7	; 0x7
   1895c:	e08c3005 	add	r3, ip, r5
   18960:	e587b000 	str	fp, [r7]
   18964:	e58d3680 	str	r3, [sp, #1664]
   18968:	e5875004 	str	r5, [r7, #4]
   1896c:	e58d267c 	str	r2, [sp, #1660]
   18970:	d287e008 	addle	lr, r7, #8	; 0x8
   18974:	da000006 	ble	18994 <.text+0x8994>
   18978:	e28d1e67 	add	r1, sp, #1648	; 0x670
   1897c:	e1a0000a 	mov	r0, sl
   18980:	e2811008 	add	r1, r1, #8	; 0x8
   18984:	ebfffa53 	bl	172d8 <__sprint>
   18988:	e3500000 	cmp	r0, #0	; 0x0
   1898c:	1a00014a 	bne	18ebc <.text+0x8ebc>
   18990:	e28dee61 	add	lr, sp, #1552	; 0x610
   18994:	e59d369c 	ldr	r3, [sp, #1692]
   18998:	e59dc02c 	ldr	ip, [sp, #44]
   1899c:	e06c4003 	rsb	r4, ip, r3
   189a0:	e3540000 	cmp	r4, #0	; 0x0
   189a4:	ca00000d 	bgt	189e0 <.text+0x89e0>
   189a8:	ea000025 	b	18a44 <.text+0x8a44>
   189ac:	e3a03010 	mov	r3, #16	; 0x10
   189b0:	e3550007 	cmp	r5, #7	; 0x7
   189b4:	e58e7000 	str	r7, [lr]
   189b8:	e58e3004 	str	r3, [lr, #4]
   189bc:	e58d6680 	str	r6, [sp, #1664]
   189c0:	e28ee008 	add	lr, lr, #8	; 0x8
   189c4:	e58d567c 	str	r5, [sp, #1660]
   189c8:	da000003 	ble	189dc <.text+0x89dc>
   189cc:	ebfffa41 	bl	172d8 <__sprint>
   189d0:	e3500000 	cmp	r0, #0	; 0x0
   189d4:	1a000138 	bne	18ebc <.text+0x8ebc>
   189d8:	e28dee61 	add	lr, sp, #1552	; 0x610
   189dc:	e2444010 	sub	r4, r4, #16	; 0x10
   189e0:	e59dc680 	ldr	ip, [sp, #1664]
   189e4:	e59d267c 	ldr	r2, [sp, #1660]
   189e8:	e28d1e67 	add	r1, sp, #1648	; 0x670
   189ec:	e3540010 	cmp	r4, #16	; 0x10
   189f0:	e1a0000a 	mov	r0, sl
   189f4:	e2811008 	add	r1, r1, #8	; 0x8
   189f8:	e28c6010 	add	r6, ip, #16	; 0x10
   189fc:	e2825001 	add	r5, r2, #1	; 0x1
   18a00:	e51f73ec 	ldr	r7, [pc, #-1004]	; 1861c <.text+0x861c>
   18a04:	caffffe8 	bgt	189ac <.text+0x89ac>
   18a08:	e08c3004 	add	r3, ip, r4
   18a0c:	e3550007 	cmp	r5, #7	; 0x7
   18a10:	e58e7000 	str	r7, [lr]
   18a14:	e58e4004 	str	r4, [lr, #4]
   18a18:	e58d3680 	str	r3, [sp, #1664]
   18a1c:	e58d567c 	str	r5, [sp, #1660]
   18a20:	d28ee008 	addle	lr, lr, #8	; 0x8
   18a24:	da000006 	ble	18a44 <.text+0x8a44>
   18a28:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18a2c:	e1a0000a 	mov	r0, sl
   18a30:	e2811008 	add	r1, r1, #8	; 0x8
   18a34:	ebfffa27 	bl	172d8 <__sprint>
   18a38:	e3500000 	cmp	r0, #0	; 0x0
   18a3c:	1a00011e 	bne	18ebc <.text+0x8ebc>
   18a40:	e28dee61 	add	lr, sp, #1552	; 0x610
   18a44:	e59d0054 	ldr	r0, [sp, #84]
   18a48:	e3100001 	tst	r0, #1	; 0x1
   18a4c:	0a0000c5 	beq	18d68 <.text+0x8d68>
   18a50:	e59d167c 	ldr	r1, [sp, #1660]
   18a54:	e59d2680 	ldr	r2, [sp, #1664]
   18a58:	e51f3448 	ldr	r3, [pc, #-1096]	; 18618 <.text+0x8618>
   18a5c:	e2811001 	add	r1, r1, #1	; 0x1
   18a60:	e2822001 	add	r2, r2, #1	; 0x1
   18a64:	e58e3000 	str	r3, [lr]
   18a68:	e3a03001 	mov	r3, #1	; 0x1
   18a6c:	e58e3004 	str	r3, [lr, #4]
   18a70:	e58d2680 	str	r2, [sp, #1664]
   18a74:	e58d167c 	str	r1, [sp, #1660]
   18a78:	e3510007 	cmp	r1, #7	; 0x7
   18a7c:	d28ee008 	addle	lr, lr, #8	; 0x8
   18a80:	da0000b8 	ble	18d68 <.text+0x8d68>
   18a84:	ea0000b0 	b	18d4c <.text+0x8d4c>
   18a88:	e08c3001 	add	r3, ip, r1
   18a8c:	e2822001 	add	r2, r2, #1	; 0x1
   18a90:	e58d3680 	str	r3, [sp, #1664]
   18a94:	e59d3014 	ldr	r3, [sp, #20]
   18a98:	e3520007 	cmp	r2, #7	; 0x7
   18a9c:	e583b000 	str	fp, [r3]
   18aa0:	e5831004 	str	r1, [r3, #4]
   18aa4:	e58d267c 	str	r2, [sp, #1660]
   18aa8:	d2830008 	addle	r0, r3, #8	; 0x8
   18aac:	da000006 	ble	18acc <.text+0x8acc>
   18ab0:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18ab4:	e1a0000a 	mov	r0, sl
   18ab8:	e2811008 	add	r1, r1, #8	; 0x8
   18abc:	ebfffa05 	bl	172d8 <__sprint>
   18ac0:	e3500000 	cmp	r0, #0	; 0x0
   18ac4:	1a0000fc 	bne	18ebc <.text+0x8ebc>
   18ac8:	e28d0e61 	add	r0, sp, #1552	; 0x610
   18acc:	e59d167c 	ldr	r1, [sp, #1660]
   18ad0:	e59d2680 	ldr	r2, [sp, #1664]
   18ad4:	e51f34c4 	ldr	r3, [pc, #-1220]	; 18618 <.text+0x8618>
   18ad8:	e2811001 	add	r1, r1, #1	; 0x1
   18adc:	e3510007 	cmp	r1, #7	; 0x7
   18ae0:	e2822001 	add	r2, r2, #1	; 0x1
   18ae4:	e5803000 	str	r3, [r0]
   18ae8:	e3a03001 	mov	r3, #1	; 0x1
   18aec:	e5803004 	str	r3, [r0, #4]
   18af0:	e58d2680 	str	r2, [sp, #1664]
   18af4:	e58d167c 	str	r1, [sp, #1660]
   18af8:	e59d469c 	ldr	r4, [sp, #1692]
   18afc:	d280c008 	addle	ip, r0, #8	; 0x8
   18b00:	da000006 	ble	18b20 <.text+0x8b20>
   18b04:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18b08:	e1a0000a 	mov	r0, sl
   18b0c:	e2811008 	add	r1, r1, #8	; 0x8
   18b10:	ebfff9f0 	bl	172d8 <__sprint>
   18b14:	e3500000 	cmp	r0, #0	; 0x0
   18b18:	1a0000e7 	bne	18ebc <.text+0x8ebc>
   18b1c:	e28dce61 	add	ip, sp, #1552	; 0x610
   18b20:	e59d267c 	ldr	r2, [sp, #1660]
   18b24:	e59d169c 	ldr	r1, [sp, #1692]
   18b28:	e59d502c 	ldr	r5, [sp, #44]
   18b2c:	e59d3680 	ldr	r3, [sp, #1664]
   18b30:	e0611005 	rsb	r1, r1, r5
   18b34:	e2822001 	add	r2, r2, #1	; 0x1
   18b38:	e08b0004 	add	r0, fp, r4
   18b3c:	e0833001 	add	r3, r3, r1
   18b40:	e3520007 	cmp	r2, #7	; 0x7
   18b44:	e58c0000 	str	r0, [ip]
   18b48:	e58d3680 	str	r3, [sp, #1664]
   18b4c:	e58c1004 	str	r1, [ip, #4]
   18b50:	e58d267c 	str	r2, [sp, #1660]
   18b54:	d28ce008 	addle	lr, ip, #8	; 0x8
   18b58:	da000082 	ble	18d68 <.text+0x8d68>
   18b5c:	ea00007a 	b	18d4c <.text+0x8d4c>
   18b60:	e59d702c 	ldr	r7, [sp, #44]
   18b64:	e3570001 	cmp	r7, #1	; 0x1
   18b68:	ca000002 	bgt	18b78 <.text+0x8b78>
   18b6c:	e59dc054 	ldr	ip, [sp, #84]
   18b70:	e31c0001 	tst	ip, #1	; 0x1
   18b74:	0a000051 	beq	18cc0 <.text+0x8cc0>
   18b78:	e5db3000 	ldrb	r3, [fp]
   18b7c:	e59d167c 	ldr	r1, [sp, #1660]
   18b80:	e5cd36ad 	strb	r3, [sp, #1709]
   18b84:	e3a0302e 	mov	r3, #46	; 0x2e
   18b88:	e5cd36ae 	strb	r3, [sp, #1710]
   18b8c:	e59d0014 	ldr	r0, [sp, #20]
   18b90:	e59d2680 	ldr	r2, [sp, #1664]
   18b94:	e28d3e6a 	add	r3, sp, #1696	; 0x6a0
   18b98:	e2811001 	add	r1, r1, #1	; 0x1
   18b9c:	e283300d 	add	r3, r3, #13	; 0xd
   18ba0:	e3510007 	cmp	r1, #7	; 0x7
   18ba4:	e2822002 	add	r2, r2, #2	; 0x2
   18ba8:	e5803000 	str	r3, [r0]
   18bac:	e3a03002 	mov	r3, #2	; 0x2
   18bb0:	e58d2680 	str	r2, [sp, #1664]
   18bb4:	e5803004 	str	r3, [r0, #4]
   18bb8:	e58d167c 	str	r1, [sp, #1660]
   18bbc:	d2804008 	addle	r4, r0, #8	; 0x8
   18bc0:	da000006 	ble	18be0 <.text+0x8be0>
   18bc4:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18bc8:	e1a0000a 	mov	r0, sl
   18bcc:	e2811008 	add	r1, r1, #8	; 0x8
   18bd0:	ebfff9c0 	bl	172d8 <__sprint>
   18bd4:	e3500000 	cmp	r0, #0	; 0x0
   18bd8:	1a0000b7 	bne	18ebc <.text+0x8ebc>
   18bdc:	e28d4e61 	add	r4, sp, #1552	; 0x610
   18be0:	e28d0040 	add	r0, sp, #64	; 0x40
   18be4:	e8900003 	ldmia	r0, {r0, r1}
   18be8:	e3a02000 	mov	r2, #0	; 0x0
   18bec:	e3a03000 	mov	r3, #0	; 0x0
   18bf0:	eb00133d 	bl	1d8ec <__cmpdf2>
   18bf4:	e59d102c 	ldr	r1, [sp, #44]
   18bf8:	e3500000 	cmp	r0, #0	; 0x0
   18bfc:	e2410001 	sub	r0, r1, #1	; 0x1
   18c00:	0a00000a 	beq	18c30 <.text+0x8c30>
   18c04:	e59d3680 	ldr	r3, [sp, #1664]
   18c08:	e59d267c 	ldr	r2, [sp, #1660]
   18c0c:	e0813003 	add	r3, r1, r3
   18c10:	e2822001 	add	r2, r2, #1	; 0x1
   18c14:	e28b1001 	add	r1, fp, #1	; 0x1
   18c18:	e2433001 	sub	r3, r3, #1	; 0x1
   18c1c:	e3520007 	cmp	r2, #7	; 0x7
   18c20:	e5841000 	str	r1, [r4]
   18c24:	e5840004 	str	r0, [r4, #4]
   18c28:	e58d3680 	str	r3, [sp, #1664]
   18c2c:	ea00001f 	b	18cb0 <.text+0x8cb0>
   18c30:	e2505000 	subs	r5, r0, #0	; 0x0
   18c34:	ca00000d 	bgt	18c70 <.text+0x8c70>
   18c38:	ea000035 	b	18d14 <.text+0x8d14>
   18c3c:	e3a03010 	mov	r3, #16	; 0x10
   18c40:	e35e0007 	cmp	lr, #7	; 0x7
   18c44:	e5847000 	str	r7, [r4]
   18c48:	e5843004 	str	r3, [r4, #4]
   18c4c:	e58d6680 	str	r6, [sp, #1664]
   18c50:	e2844008 	add	r4, r4, #8	; 0x8
   18c54:	e58de67c 	str	lr, [sp, #1660]
   18c58:	da000003 	ble	18c6c <.text+0x8c6c>
   18c5c:	ebfff99d 	bl	172d8 <__sprint>
   18c60:	e3500000 	cmp	r0, #0	; 0x0
   18c64:	1a000094 	bne	18ebc <.text+0x8ebc>
   18c68:	e28d4e61 	add	r4, sp, #1552	; 0x610
   18c6c:	e2455010 	sub	r5, r5, #16	; 0x10
   18c70:	e59dc680 	ldr	ip, [sp, #1664]
   18c74:	e59d267c 	ldr	r2, [sp, #1660]
   18c78:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18c7c:	e3550010 	cmp	r5, #16	; 0x10
   18c80:	e1a0000a 	mov	r0, sl
   18c84:	e2811008 	add	r1, r1, #8	; 0x8
   18c88:	e28c6010 	add	r6, ip, #16	; 0x10
   18c8c:	e282e001 	add	lr, r2, #1	; 0x1
   18c90:	e51f767c 	ldr	r7, [pc, #-1660]	; 1861c <.text+0x861c>
   18c94:	caffffe8 	bgt	18c3c <.text+0x8c3c>
   18c98:	e08c3005 	add	r3, ip, r5
   18c9c:	e5847000 	str	r7, [r4]
   18ca0:	e58d3680 	str	r3, [sp, #1664]
   18ca4:	e5845004 	str	r5, [r4, #4]
   18ca8:	e1a0200e 	mov	r2, lr
   18cac:	e35e0007 	cmp	lr, #7	; 0x7
   18cb0:	e58d267c 	str	r2, [sp, #1660]
   18cb4:	d2844008 	addle	r4, r4, #8	; 0x8
   18cb8:	da000015 	ble	18d14 <.text+0x8d14>
   18cbc:	ea00000d 	b	18cf8 <.text+0x8cf8>
   18cc0:	e59d167c 	ldr	r1, [sp, #1660]
   18cc4:	e59d2680 	ldr	r2, [sp, #1664]
   18cc8:	e59d3014 	ldr	r3, [sp, #20]
   18ccc:	e2811001 	add	r1, r1, #1	; 0x1
   18cd0:	e59d5014 	ldr	r5, [sp, #20]
   18cd4:	e3510007 	cmp	r1, #7	; 0x7
   18cd8:	e2822001 	add	r2, r2, #1	; 0x1
   18cdc:	e583b000 	str	fp, [r3]
   18ce0:	e3a03001 	mov	r3, #1	; 0x1
   18ce4:	e5853004 	str	r3, [r5, #4]
   18ce8:	e58d2680 	str	r2, [sp, #1664]
   18cec:	e58d167c 	str	r1, [sp, #1660]
   18cf0:	d2854008 	addle	r4, r5, #8	; 0x8
   18cf4:	da000006 	ble	18d14 <.text+0x8d14>
   18cf8:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18cfc:	e1a0000a 	mov	r0, sl
   18d00:	e2811008 	add	r1, r1, #8	; 0x8
   18d04:	ebfff973 	bl	172d8 <__sprint>
   18d08:	e3500000 	cmp	r0, #0	; 0x0
   18d0c:	1a00006a 	bne	18ebc <.text+0x8ebc>
   18d10:	e28d4e61 	add	r4, sp, #1552	; 0x610
   18d14:	e59d367c 	ldr	r3, [sp, #1660]
   18d18:	e59d2680 	ldr	r2, [sp, #1664]
   18d1c:	e59d7028 	ldr	r7, [sp, #40]
   18d20:	e2833001 	add	r3, r3, #1	; 0x1
   18d24:	e28d1e69 	add	r1, sp, #1680	; 0x690
   18d28:	e3530007 	cmp	r3, #7	; 0x7
   18d2c:	e0822007 	add	r2, r2, r7
   18d30:	e2811005 	add	r1, r1, #5	; 0x5
   18d34:	e5841000 	str	r1, [r4]
   18d38:	e58d2680 	str	r2, [sp, #1664]
   18d3c:	e5847004 	str	r7, [r4, #4]
   18d40:	e58d367c 	str	r3, [sp, #1660]
   18d44:	d284e008 	addle	lr, r4, #8	; 0x8
   18d48:	da000006 	ble	18d68 <.text+0x8d68>
   18d4c:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18d50:	e1a0000a 	mov	r0, sl
   18d54:	e2811008 	add	r1, r1, #8	; 0x8
   18d58:	ebfff95e 	bl	172d8 <__sprint>
   18d5c:	e3500000 	cmp	r0, #0	; 0x0
   18d60:	1a000055 	bne	18ebc <.text+0x8ebc>
   18d64:	e28dee61 	add	lr, sp, #1552	; 0x610
   18d68:	e59dc054 	ldr	ip, [sp, #84]
   18d6c:	e31c0004 	tst	ip, #4	; 0x4
   18d70:	0a000026 	beq	18e10 <.text+0x8e10>
   18d74:	e59d001c 	ldr	r0, [sp, #28]
   18d78:	e59d1034 	ldr	r1, [sp, #52]
   18d7c:	e0614000 	rsb	r4, r1, r0
   18d80:	e3540000 	cmp	r4, #0	; 0x0
   18d84:	ca00000d 	bgt	18dc0 <.text+0x8dc0>
   18d88:	ea000020 	b	18e10 <.text+0x8e10>
   18d8c:	e3a03010 	mov	r3, #16	; 0x10
   18d90:	e3550007 	cmp	r5, #7	; 0x7
   18d94:	e58e7000 	str	r7, [lr]
   18d98:	e58e3004 	str	r3, [lr, #4]
   18d9c:	e58d6680 	str	r6, [sp, #1664]
   18da0:	e28ee008 	add	lr, lr, #8	; 0x8
   18da4:	e58d567c 	str	r5, [sp, #1660]
   18da8:	da000003 	ble	18dbc <.text+0x8dbc>
   18dac:	ebfff949 	bl	172d8 <__sprint>
   18db0:	e3500000 	cmp	r0, #0	; 0x0
   18db4:	1a000040 	bne	18ebc <.text+0x8ebc>
   18db8:	e28dee61 	add	lr, sp, #1552	; 0x610
   18dbc:	e2444010 	sub	r4, r4, #16	; 0x10
   18dc0:	e59dc680 	ldr	ip, [sp, #1664]
   18dc4:	e59d267c 	ldr	r2, [sp, #1660]
   18dc8:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18dcc:	e3540010 	cmp	r4, #16	; 0x10
   18dd0:	e1a0000a 	mov	r0, sl
   18dd4:	e2811008 	add	r1, r1, #8	; 0x8
   18dd8:	e28c6010 	add	r6, ip, #16	; 0x10
   18ddc:	e2825001 	add	r5, r2, #1	; 0x1
   18de0:	e51f77c8 	ldr	r7, [pc, #-1992]	; 18620 <.text+0x8620>
   18de4:	caffffe8 	bgt	18d8c <.text+0x8d8c>
   18de8:	e08c2004 	add	r2, ip, r4
   18dec:	e3550007 	cmp	r5, #7	; 0x7
   18df0:	e58e7000 	str	r7, [lr]
   18df4:	e58e4004 	str	r4, [lr, #4]
   18df8:	e58d2680 	str	r2, [sp, #1664]
   18dfc:	e58d567c 	str	r5, [sp, #1660]
   18e00:	da000002 	ble	18e10 <.text+0x8e10>
   18e04:	ebfff933 	bl	172d8 <__sprint>
   18e08:	e3500000 	cmp	r0, #0	; 0x0
   18e0c:	1a00002a 	bne	18ebc <.text+0x8ebc>
   18e10:	e59d2018 	ldr	r2, [sp, #24]
   18e14:	e59d3034 	ldr	r3, [sp, #52]
   18e18:	e59d501c 	ldr	r5, [sp, #28]
   18e1c:	e1530005 	cmp	r3, r5
   18e20:	a0822003 	addge	r2, r2, r3
   18e24:	b0822005 	addlt	r2, r2, r5
   18e28:	e59d3680 	ldr	r3, [sp, #1664]
   18e2c:	e3530000 	cmp	r3, #0	; 0x0
   18e30:	e58d2018 	str	r2, [sp, #24]
   18e34:	0a000005 	beq	18e50 <.text+0x8e50>
   18e38:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18e3c:	e1a0000a 	mov	r0, sl
   18e40:	e2811008 	add	r1, r1, #8	; 0x8
   18e44:	ebfff923 	bl	172d8 <__sprint>
   18e48:	e3500000 	cmp	r0, #0	; 0x0
   18e4c:	1a00001a 	bne	18ebc <.text+0x8ebc>
   18e50:	e59d703c 	ldr	r7, [sp, #60]
   18e54:	e3a04000 	mov	r4, #0	; 0x0
   18e58:	e3570000 	cmp	r7, #0	; 0x0
   18e5c:	e58d467c 	str	r4, [sp, #1660]
   18e60:	e28d5e61 	add	r5, sp, #1552	; 0x610
   18e64:	0afff984 	beq	1747c <_vfprintf_r+0x168>
   18e68:	e1a01007 	mov	r1, r7
   18e6c:	e59d0010 	ldr	r0, [sp, #16]
   18e70:	eb000840 	bl	1af78 <_free_r>
   18e74:	e58d403c 	str	r4, [sp, #60]
   18e78:	eafff97f 	b	1747c <_vfprintf_r+0x168>
   18e7c:	e1da30bc 	ldrh	r3, [sl, #12]
   18e80:	e3833040 	orr	r3, r3, #64	; 0x40
   18e84:	e1ca30bc 	strh	r3, [sl, #12]
   18e88:	ea000011 	b	18ed4 <.text+0x8ed4>
   18e8c:	e59d3680 	ldr	r3, [sp, #1664]
   18e90:	e3530000 	cmp	r3, #0	; 0x0
   18e94:	0a000005 	beq	18eb0 <.text+0x8eb0>
   18e98:	e28d1e67 	add	r1, sp, #1648	; 0x670
   18e9c:	e1a0000a 	mov	r0, sl
   18ea0:	e2811008 	add	r1, r1, #8	; 0x8
   18ea4:	ebfff90b 	bl	172d8 <__sprint>
   18ea8:	e3500000 	cmp	r0, #0	; 0x0
   18eac:	1a000008 	bne	18ed4 <.text+0x8ed4>
   18eb0:	e3a03000 	mov	r3, #0	; 0x0
   18eb4:	e58d367c 	str	r3, [sp, #1660]
   18eb8:	ea000005 	b	18ed4 <.text+0x8ed4>
   18ebc:	e59dc03c 	ldr	ip, [sp, #60]
   18ec0:	e35c0000 	cmp	ip, #0	; 0x0
   18ec4:	0a000002 	beq	18ed4 <.text+0x8ed4>
   18ec8:	e59d0010 	ldr	r0, [sp, #16]
   18ecc:	e59d103c 	ldr	r1, [sp, #60]
   18ed0:	eb000828 	bl	1af78 <_free_r>
   18ed4:	e1da30bc 	ldrh	r3, [sl, #12]
   18ed8:	e3130040 	tst	r3, #64	; 0x40
   18edc:	0a00000d 	beq	18f18 <.text+0x8f18>
   18ee0:	e3e00000 	mvn	r0, #0	; 0x0
   18ee4:	e58d0018 	str	r0, [sp, #24]
   18ee8:	ea00000a 	b	18f18 <.text+0x8f18>
   18eec:	e3a09045 	mov	r9, #69	; 0x45
   18ef0:	eafffb2b 	b	17ba4 <.text+0x7ba4>
   18ef4:	e51fb8d8 	ldr	fp, [pc, #-2264]	; 18624 <.text+0x8624>
   18ef8:	e3a05006 	mov	r5, #6	; 0x6
   18efc:	e3550000 	cmp	r5, #0	; 0x0
   18f00:	a1a01005 	movge	r1, r5
   18f04:	b3a01000 	movlt	r1, #0	; 0x0
   18f08:	e3a02000 	mov	r2, #0	; 0x0
   18f0c:	e58d1034 	str	r1, [sp, #52]
   18f10:	e58d2030 	str	r2, [sp, #48]
   18f14:	eafffcce 	b	18254 <.text+0x8254>
   18f18:	e59d0018 	ldr	r0, [sp, #24]
   18f1c:	e28dde6b 	add	sp, sp, #1712	; 0x6b0
   18f20:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f24:	e12fff1e 	bx	lr

00018f28 <vfprintf>:
   18f28:	e52de004 	str	lr, [sp, #-4]!
   18f2c:	e1a03002 	mov	r3, r2
   18f30:	e59f2018 	ldr	r2, [pc, #24]	; 18f50 <.text+0x8f50>
   18f34:	e1a0c000 	mov	ip, r0
   18f38:	e1a0e001 	mov	lr, r1
   18f3c:	e5920000 	ldr	r0, [r2]
   18f40:	e1a0100c 	mov	r1, ip
   18f44:	e1a0200e 	mov	r2, lr
   18f48:	e49de004 	ldr	lr, [sp], #4
   18f4c:	eafff8f0 	b	17314 <_vfprintf_r>
   18f50:	40000488 	andmi	r0, r0, r8, lsl #9

00018f54 <_wcrtomb_r>:
   18f54:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   18f58:	e251c000 	subs	ip, r1, #0	; 0x0
   18f5c:	e24dd00c 	sub	sp, sp, #12	; 0xc
   18f60:	01a0200c 	moveq	r2, ip
   18f64:	028d1002 	addeq	r1, sp, #2	; 0x2
   18f68:	e1a04003 	mov	r4, r3
   18f6c:	e1a05000 	mov	r5, r0
   18f70:	eb000068 	bl	19118 <_wctomb_r>
   18f74:	e3700001 	cmn	r0, #1	; 0x1
   18f78:	03a03000 	moveq	r3, #0	; 0x0
   18f7c:	e1a02000 	mov	r2, r0
   18f80:	11a02000 	movne	r2, r0
   18f84:	05843000 	streq	r3, [r4]
   18f88:	e1a00002 	mov	r0, r2
   18f8c:	0283308a 	addeq	r3, r3, #138	; 0x8a
   18f90:	05853000 	streq	r3, [r5]
   18f94:	e28dd00c 	add	sp, sp, #12	; 0xc
   18f98:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   18f9c:	e12fff1e 	bx	lr

00018fa0 <wcrtomb>:
   18fa0:	e52de004 	str	lr, [sp, #-4]!
   18fa4:	e1a03002 	mov	r3, r2
   18fa8:	e59f2018 	ldr	r2, [pc, #24]	; 18fc8 <.text+0x8fc8>
   18fac:	e1a0c000 	mov	ip, r0
   18fb0:	e1a0e001 	mov	lr, r1
   18fb4:	e5920000 	ldr	r0, [r2]
   18fb8:	e1a0100c 	mov	r1, ip
   18fbc:	e1a0200e 	mov	r2, lr
   18fc0:	e49de004 	ldr	lr, [sp], #4
   18fc4:	eaffffe2 	b	18f54 <_wcrtomb_r>
   18fc8:	40000488 	andmi	r0, r0, r8, lsl #9

00018fcc <_wcsrtombs_r>:
   18fcc:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fd0:	e24dd014 	sub	sp, sp, #20	; 0x14
   18fd4:	e3510000 	cmp	r1, #0	; 0x0
   18fd8:	e59d7038 	ldr	r7, [sp, #56]
   18fdc:	e5925000 	ldr	r5, [r2]
   18fe0:	e1a08002 	mov	r8, r2
   18fe4:	11a09003 	movne	r9, r3
   18fe8:	03e09000 	mvneq	r9, #0	; 0x0
   18fec:	e1a0a001 	mov	sl, r1
   18ff0:	e3a04000 	mov	r4, #0	; 0x0
   18ff4:	e58d1000 	str	r1, [sp]
   18ff8:	e58d0004 	str	r0, [sp, #4]
   18ffc:	ea00002f 	b	190c0 <_wcsrtombs_r+0xf4>
   19000:	e59d0004 	ldr	r0, [sp, #4]
   19004:	e28d100a 	add	r1, sp, #10	; 0xa
   19008:	e5952000 	ldr	r2, [r5]
   1900c:	e1a03007 	mov	r3, r7
   19010:	e597b000 	ldr	fp, [r7]
   19014:	e5976004 	ldr	r6, [r7, #4]
   19018:	ebffffcd 	bl	18f54 <_wcrtomb_r>
   1901c:	e3700001 	cmn	r0, #1	; 0x1
   19020:	1a000005 	bne	1903c <_wcsrtombs_r+0x70>
   19024:	e59d2004 	ldr	r2, [sp, #4]
   19028:	e3a0308a 	mov	r3, #138	; 0x8a
   1902c:	e5823000 	str	r3, [r2]
   19030:	e1a04000 	mov	r4, r0
   19034:	e3a03000 	mov	r3, #0	; 0x0
   19038:	ea00001b 	b	190ac <_wcsrtombs_r+0xe0>
   1903c:	e0603009 	rsb	r3, r0, r9
   19040:	e1540003 	cmp	r4, r3
   19044:	91500009 	cmpls	r0, r9
   19048:	2a000019 	bcs	190b4 <_wcsrtombs_r+0xe8>
   1904c:	e59d3000 	ldr	r3, [sp]
   19050:	e3530000 	cmp	r3, #0	; 0x0
   19054:	e0844000 	add	r4, r4, r0
   19058:	13a02000 	movne	r2, #0	; 0x0
   1905c:	1a000004 	bne	19074 <_wcsrtombs_r+0xa8>
   19060:	ea000009 	b	1908c <_wcsrtombs_r+0xc0>
   19064:	e28d300a 	add	r3, sp, #10	; 0xa
   19068:	e7d23003 	ldrb	r3, [r2, r3]
   1906c:	e7c2300a 	strb	r3, [r2, sl]
   19070:	e2822001 	add	r2, r2, #1	; 0x1
   19074:	e1520000 	cmp	r2, r0
   19078:	bafffff9 	blt	19064 <_wcsrtombs_r+0x98>
   1907c:	e5983000 	ldr	r3, [r8]
   19080:	e2833004 	add	r3, r3, #4	; 0x4
   19084:	e5883000 	str	r3, [r8]
   19088:	e08aa002 	add	sl, sl, r2
   1908c:	e5953000 	ldr	r3, [r5]
   19090:	e3530000 	cmp	r3, #0	; 0x0
   19094:	12855004 	addne	r5, r5, #4	; 0x4
   19098:	1a000008 	bne	190c0 <_wcsrtombs_r+0xf4>
   1909c:	e59d2000 	ldr	r2, [sp]
   190a0:	e3520000 	cmp	r2, #0	; 0x0
   190a4:	15883000 	strne	r3, [r8]
   190a8:	e2444001 	sub	r4, r4, #1	; 0x1
   190ac:	e5873000 	str	r3, [r7]
   190b0:	ea000004 	b	190c8 <_wcsrtombs_r+0xfc>
   190b4:	e5876004 	str	r6, [r7, #4]
   190b8:	e587b000 	str	fp, [r7]
   190bc:	ea000001 	b	190c8 <_wcsrtombs_r+0xfc>
   190c0:	e1540009 	cmp	r4, r9
   190c4:	3affffcd 	bcc	19000 <_wcsrtombs_r+0x34>
   190c8:	e1a00004 	mov	r0, r4
   190cc:	e28dd014 	add	sp, sp, #20	; 0x14
   190d0:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190d4:	e12fff1e 	bx	lr

000190d8 <wcsrtombs>:
   190d8:	e92d4010 	stmdb	sp!, {r4, lr}
   190dc:	e24dd004 	sub	sp, sp, #4	; 0x4
   190e0:	e58d3000 	str	r3, [sp]
   190e4:	e59f3028 	ldr	r3, [pc, #40]	; 19114 <.text+0x9114>
   190e8:	e1a0c000 	mov	ip, r0
   190ec:	e1a0e001 	mov	lr, r1
   190f0:	e1a04002 	mov	r4, r2
   190f4:	e5930000 	ldr	r0, [r3]
   190f8:	e1a0100c 	mov	r1, ip
   190fc:	e1a0200e 	mov	r2, lr
   19100:	e1a03004 	mov	r3, r4
   19104:	ebffffb0 	bl	18fcc <_wcsrtombs_r>
   19108:	e28dd004 	add	sp, sp, #4	; 0x4
   1910c:	e8bd4010 	ldmia	sp!, {r4, lr}
   19110:	e12fff1e 	bx	lr
   19114:	40000488 	andmi	r0, r0, r8, lsl #9

00019118 <_wctomb_r>:
   19118:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   1911c:	e59f0404 	ldr	r0, [pc, #1028]	; 19528 <.text+0x9528>
   19120:	e1a06001 	mov	r6, r1
   19124:	e1a05002 	mov	r5, r2
   19128:	e1a04003 	mov	r4, r3
   1912c:	ebfff827 	bl	171d0 <strlen>
   19130:	e3500001 	cmp	r0, #1	; 0x1
   19134:	9a0000f0 	bls	194fc <_wctomb_r+0x3e4>
   19138:	e59f03e8 	ldr	r0, [pc, #1000]	; 19528 <.text+0x9528>
   1913c:	e59f13e8 	ldr	r1, [pc, #1000]	; 1952c <.text+0x952c>
   19140:	ebfff810 	bl	17188 <strcmp>
   19144:	e3500000 	cmp	r0, #0	; 0x0
   19148:	1a000084 	bne	19360 <_wctomb_r+0x248>
   1914c:	e3560000 	cmp	r6, #0	; 0x0
   19150:	0a0000ee 	beq	19510 <_wctomb_r+0x3f8>
   19154:	e355007f 	cmp	r5, #127	; 0x7f
   19158:	da0000e9 	ble	19504 <_wctomb_r+0x3ec>
   1915c:	e2453080 	sub	r3, r5, #128	; 0x80
   19160:	e3530d1e 	cmp	r3, #1920	; 0x780
   19164:	2a00000a 	bcs	19194 <_wctomb_r+0x7c>
   19168:	e2053d1f 	and	r3, r5, #1984	; 0x7c0
   1916c:	e1a03343 	mov	r3, r3, asr #6
   19170:	e205203f 	and	r2, r5, #63	; 0x3f
   19174:	e1e03d03 	mvn	r3, r3, lsl #26
   19178:	e1e02c82 	mvn	r2, r2, lsl #25
   1917c:	e1e03d23 	mvn	r3, r3, lsr #26
   19180:	e1e02ca2 	mvn	r2, r2, lsr #25
   19184:	e3a07002 	mov	r7, #2	; 0x2
   19188:	e5c62001 	strb	r2, [r6, #1]
   1918c:	e5c63000 	strb	r3, [r6]
   19190:	ea0000e1 	b	1951c <_wctomb_r+0x404>
   19194:	e2453b02 	sub	r3, r5, #2048	; 0x800
   19198:	e3530b3e 	cmp	r3, #63488	; 0xf800
   1919c:	2a000013 	bcs	191f0 <_wctomb_r+0xd8>
   191a0:	e2453b36 	sub	r3, r5, #55296	; 0xd800
   191a4:	e3530b02 	cmp	r3, #2048	; 0x800
   191a8:	3a0000da 	bcc	19518 <_wctomb_r+0x400>
   191ac:	e2053a0f 	and	r3, r5, #61440	; 0xf000
   191b0:	e1a03643 	mov	r3, r3, asr #12
   191b4:	e1e03d83 	mvn	r3, r3, lsl #27
   191b8:	e2052d3f 	and	r2, r5, #4032	; 0xfc0
   191bc:	e1a00006 	mov	r0, r6
   191c0:	e1e03da3 	mvn	r3, r3, lsr #27
   191c4:	e1a02342 	mov	r2, r2, asr #6
   191c8:	e205103f 	and	r1, r5, #63	; 0x3f
   191cc:	e4c03001 	strb	r3, [r0], #1
   191d0:	e1e02c82 	mvn	r2, r2, lsl #25
   191d4:	e1e01c81 	mvn	r1, r1, lsl #25
   191d8:	e1e02ca2 	mvn	r2, r2, lsr #25
   191dc:	e1e01ca1 	mvn	r1, r1, lsr #25
   191e0:	e3a07003 	mov	r7, #3	; 0x3
   191e4:	e5c62001 	strb	r2, [r6, #1]
   191e8:	e5c01001 	strb	r1, [r0, #1]
   191ec:	ea0000ca 	b	1951c <_wctomb_r+0x404>
   191f0:	e2453801 	sub	r3, r5, #65536	; 0x10000
   191f4:	e353081f 	cmp	r3, #2031616	; 0x1f0000
   191f8:	2a000015 	bcs	19254 <_wctomb_r+0x13c>
   191fc:	e2053707 	and	r3, r5, #1835008	; 0x1c0000
   19200:	e1a03943 	mov	r3, r3, asr #18
   19204:	e1e03e03 	mvn	r3, r3, lsl #28
   19208:	e2052a3f 	and	r2, r5, #258048	; 0x3f000
   1920c:	e2051d3f 	and	r1, r5, #4032	; 0xfc0
   19210:	e1a0c006 	mov	ip, r6
   19214:	e1e03e23 	mvn	r3, r3, lsr #28
   19218:	e1a02642 	mov	r2, r2, asr #12
   1921c:	e1a01341 	mov	r1, r1, asr #6
   19220:	e205003f 	and	r0, r5, #63	; 0x3f
   19224:	e4cc3001 	strb	r3, [ip], #1
   19228:	e1e02c82 	mvn	r2, r2, lsl #25
   1922c:	e1e01c81 	mvn	r1, r1, lsl #25
   19230:	e1e00c80 	mvn	r0, r0, lsl #25
   19234:	e1e02ca2 	mvn	r2, r2, lsr #25
   19238:	e1e01ca1 	mvn	r1, r1, lsr #25
   1923c:	e1e00ca0 	mvn	r0, r0, lsr #25
   19240:	e3a07004 	mov	r7, #4	; 0x4
   19244:	e5c62001 	strb	r2, [r6, #1]
   19248:	e5cc0002 	strb	r0, [ip, #2]
   1924c:	e5cc1001 	strb	r1, [ip, #1]
   19250:	ea0000b1 	b	1951c <_wctomb_r+0x404>
   19254:	e2453602 	sub	r3, r5, #2097152	; 0x200000
   19258:	e353063e 	cmp	r3, #65011712	; 0x3e00000
   1925c:	2a00001b 	bcs	192d0 <_wctomb_r+0x1b8>
   19260:	e2053403 	and	r3, r5, #50331648	; 0x3000000
   19264:	e1a03c43 	mov	r3, r3, asr #24
   19268:	e1e03e83 	mvn	r3, r3, lsl #29
   1926c:	e1a0e006 	mov	lr, r6
   19270:	e1e03ea3 	mvn	r3, r3, lsr #29
   19274:	e205273f 	and	r2, r5, #16515072	; 0xfc0000
   19278:	e2051a3f 	and	r1, r5, #258048	; 0x3f000
   1927c:	e2050d3f 	and	r0, r5, #4032	; 0xfc0
   19280:	e4ce3001 	strb	r3, [lr], #1
   19284:	e1a02942 	mov	r2, r2, asr #18
   19288:	e1a01641 	mov	r1, r1, asr #12
   1928c:	e1a00340 	mov	r0, r0, asr #6
   19290:	e205303f 	and	r3, r5, #63	; 0x3f
   19294:	e1e02c82 	mvn	r2, r2, lsl #25
   19298:	e1e01c81 	mvn	r1, r1, lsl #25
   1929c:	e1e00c80 	mvn	r0, r0, lsl #25
   192a0:	e1e03c83 	mvn	r3, r3, lsl #25
   192a4:	e28ec001 	add	ip, lr, #1	; 0x1
   192a8:	e1e02ca2 	mvn	r2, r2, lsr #25
   192ac:	e1e01ca1 	mvn	r1, r1, lsr #25
   192b0:	e1e00ca0 	mvn	r0, r0, lsr #25
   192b4:	e1e03ca3 	mvn	r3, r3, lsr #25
   192b8:	e3a07005 	mov	r7, #5	; 0x5
   192bc:	e5c62001 	strb	r2, [r6, #1]
   192c0:	e5ce1001 	strb	r1, [lr, #1]
   192c4:	e5cc3002 	strb	r3, [ip, #2]
   192c8:	e5cc0001 	strb	r0, [ip, #1]
   192cc:	ea000092 	b	1951c <_wctomb_r+0x404>
   192d0:	e375037f 	cmn	r5, #-67108863	; 0xfc000001
   192d4:	da00008f 	ble	19518 <_wctomb_r+0x400>
   192d8:	e2053101 	and	r3, r5, #1073741824	; 0x40000000
   192dc:	e1a03f43 	mov	r3, r3, asr #30
   192e0:	e1e03f03 	mvn	r3, r3, lsl #30
   192e4:	e1a04006 	mov	r4, r6
   192e8:	e1e03f23 	mvn	r3, r3, lsr #30
   192ec:	e4c43001 	strb	r3, [r4], #1
   192f0:	e205273f 	and	r2, r5, #16515072	; 0xfc0000
   192f4:	e205343f 	and	r3, r5, #1056964608	; 0x3f000000
   192f8:	e2051a3f 	and	r1, r5, #258048	; 0x3f000
   192fc:	e2050d3f 	and	r0, r5, #4032	; 0xfc0
   19300:	e205c03f 	and	ip, r5, #63	; 0x3f
   19304:	e1a03c43 	mov	r3, r3, asr #24
   19308:	e1a02942 	mov	r2, r2, asr #18
   1930c:	e1a01641 	mov	r1, r1, asr #12
   19310:	e1a00340 	mov	r0, r0, asr #6
   19314:	e2845001 	add	r5, r4, #1	; 0x1
   19318:	e1e03c83 	mvn	r3, r3, lsl #25
   1931c:	e1e02c82 	mvn	r2, r2, lsl #25
   19320:	e1e01c81 	mvn	r1, r1, lsl #25
   19324:	e1e00c80 	mvn	r0, r0, lsl #25
   19328:	e1e0cc8c 	mvn	ip, ip, lsl #25
   1932c:	e285e001 	add	lr, r5, #1	; 0x1
   19330:	e1e03ca3 	mvn	r3, r3, lsr #25
   19334:	e1e02ca2 	mvn	r2, r2, lsr #25
   19338:	e1e01ca1 	mvn	r1, r1, lsr #25
   1933c:	e1e00ca0 	mvn	r0, r0, lsr #25
   19340:	e1e0ccac 	mvn	ip, ip, lsr #25
   19344:	e3a07006 	mov	r7, #6	; 0x6
   19348:	e5c63001 	strb	r3, [r6, #1]
   1934c:	e5c42001 	strb	r2, [r4, #1]
   19350:	e5c51001 	strb	r1, [r5, #1]
   19354:	e5cec002 	strb	ip, [lr, #2]
   19358:	e5ce0001 	strb	r0, [lr, #1]
   1935c:	ea00006e 	b	1951c <_wctomb_r+0x404>
   19360:	e59f01c0 	ldr	r0, [pc, #448]	; 19528 <.text+0x9528>
   19364:	e59f11c4 	ldr	r1, [pc, #452]	; 19530 <.text+0x9530>
   19368:	ebfff786 	bl	17188 <strcmp>
   1936c:	e3500000 	cmp	r0, #0	; 0x0
   19370:	1a000015 	bne	193cc <_wctomb_r+0x2b4>
   19374:	e3560000 	cmp	r6, #0	; 0x0
   19378:	0a000064 	beq	19510 <_wctomb_r+0x3f8>
   1937c:	e1a03445 	mov	r3, r5, asr #8
   19380:	e21310ff 	ands	r1, r3, #255	; 0xff
   19384:	0a00005e 	beq	19504 <_wctomb_r+0x3ec>
   19388:	e281207f 	add	r2, r1, #127	; 0x7f
   1938c:	e2813020 	add	r3, r1, #32	; 0x20
   19390:	e20220ff 	and	r2, r2, #255	; 0xff
   19394:	e20330ff 	and	r3, r3, #255	; 0xff
   19398:	e353000f 	cmp	r3, #15	; 0xf
   1939c:	8352001e 	cmphi	r2, #30	; 0x1e
   193a0:	8a00005c 	bhi	19518 <_wctomb_r+0x400>
   193a4:	e20500ff 	and	r0, r5, #255	; 0xff
   193a8:	e2403080 	sub	r3, r0, #128	; 0x80
   193ac:	e20330ff 	and	r3, r3, #255	; 0xff
   193b0:	e2402040 	sub	r2, r0, #64	; 0x40
   193b4:	e353007c 	cmp	r3, #124	; 0x7c
   193b8:	8352003e 	cmphi	r2, #62	; 0x3e
   193bc:	93a07002 	movls	r7, #2	; 0x2
   193c0:	95c60001 	strlsb	r0, [r6, #1]
   193c4:	9a00004a 	bls	194f4 <_wctomb_r+0x3dc>
   193c8:	ea000052 	b	19518 <_wctomb_r+0x400>
   193cc:	e59f0154 	ldr	r0, [pc, #340]	; 19528 <.text+0x9528>
   193d0:	e59f115c 	ldr	r1, [pc, #348]	; 19534 <.text+0x9534>
   193d4:	ebfff76b 	bl	17188 <strcmp>
   193d8:	e3500000 	cmp	r0, #0	; 0x0
   193dc:	1a000011 	bne	19428 <_wctomb_r+0x310>
   193e0:	e3560000 	cmp	r6, #0	; 0x0
   193e4:	0a000049 	beq	19510 <_wctomb_r+0x3f8>
   193e8:	e1a03445 	mov	r3, r5, asr #8
   193ec:	e21320ff 	ands	r2, r3, #255	; 0xff
   193f0:	0a000043 	beq	19504 <_wctomb_r+0x3ec>
   193f4:	e282305f 	add	r3, r2, #95	; 0x5f
   193f8:	e20330ff 	and	r3, r3, #255	; 0xff
   193fc:	e353005d 	cmp	r3, #93	; 0x5d
   19400:	8a000044 	bhi	19518 <_wctomb_r+0x400>
   19404:	e20500ff 	and	r0, r5, #255	; 0xff
   19408:	e280305f 	add	r3, r0, #95	; 0x5f
   1940c:	e20330ff 	and	r3, r3, #255	; 0xff
   19410:	e353005d 	cmp	r3, #93	; 0x5d
   19414:	93a07002 	movls	r7, #2	; 0x2
   19418:	95c60001 	strlsb	r0, [r6, #1]
   1941c:	95c62000 	strlsb	r2, [r6]
   19420:	9a00003d 	bls	1951c <_wctomb_r+0x404>
   19424:	ea00003b 	b	19518 <_wctomb_r+0x400>
   19428:	e59f00f8 	ldr	r0, [pc, #248]	; 19528 <.text+0x9528>
   1942c:	e59f1104 	ldr	r1, [pc, #260]	; 19538 <.text+0x9538>
   19430:	ebfff754 	bl	17188 <strcmp>
   19434:	e3500000 	cmp	r0, #0	; 0x0
   19438:	1a00002f 	bne	194fc <_wctomb_r+0x3e4>
   1943c:	e3560000 	cmp	r6, #0	; 0x0
   19440:	03a07001 	moveq	r7, #1	; 0x1
   19444:	0a000034 	beq	1951c <_wctomb_r+0x404>
   19448:	e1a03445 	mov	r3, r5, asr #8
   1944c:	e213e0ff 	ands	lr, r3, #255	; 0xff
   19450:	e20510ff 	and	r1, r5, #255	; 0xff
   19454:	0a000017 	beq	194b8 <_wctomb_r+0x3a0>
   19458:	e24e3021 	sub	r3, lr, #33	; 0x21
   1945c:	e353005d 	cmp	r3, #93	; 0x5d
   19460:	8a00002c 	bhi	19518 <_wctomb_r+0x400>
   19464:	e2413021 	sub	r3, r1, #33	; 0x21
   19468:	e353005d 	cmp	r3, #93	; 0x5d
   1946c:	8a000029 	bhi	19518 <_wctomb_r+0x400>
   19470:	e5943000 	ldr	r3, [r4]
   19474:	e3530000 	cmp	r3, #0	; 0x0
   19478:	1a00000a 	bne	194a8 <_wctomb_r+0x390>
   1947c:	e3a03001 	mov	r3, #1	; 0x1
   19480:	e5843000 	str	r3, [r4]
   19484:	e1a02006 	mov	r2, r6
   19488:	e283301a 	add	r3, r3, #26	; 0x1a
   1948c:	e4c23001 	strb	r3, [r2], #1
   19490:	e2833009 	add	r3, r3, #9	; 0x9
   19494:	e5c63001 	strb	r3, [r6, #1]
   19498:	e283301e 	add	r3, r3, #30	; 0x1e
   1949c:	e5c23001 	strb	r3, [r2, #1]
   194a0:	e2826002 	add	r6, r2, #2	; 0x2
   194a4:	e3a00003 	mov	r0, #3	; 0x3
   194a8:	e2807002 	add	r7, r0, #2	; 0x2
   194ac:	e5c61001 	strb	r1, [r6, #1]
   194b0:	e5c6e000 	strb	lr, [r6]
   194b4:	ea000018 	b	1951c <_wctomb_r+0x404>
   194b8:	e5943000 	ldr	r3, [r4]
   194bc:	e3530000 	cmp	r3, #0	; 0x0
   194c0:	01a0000e 	moveq	r0, lr
   194c4:	0a000009 	beq	194f0 <_wctomb_r+0x3d8>
   194c8:	e1a02006 	mov	r2, r6
   194cc:	e3a0301b 	mov	r3, #27	; 0x1b
   194d0:	e584e000 	str	lr, [r4]
   194d4:	e4c23001 	strb	r3, [r2], #1
   194d8:	e283300d 	add	r3, r3, #13	; 0xd
   194dc:	e5c63001 	strb	r3, [r6, #1]
   194e0:	e283301a 	add	r3, r3, #26	; 0x1a
   194e4:	e5c23001 	strb	r3, [r2, #1]
   194e8:	e2826002 	add	r6, r2, #2	; 0x2
   194ec:	e3a00003 	mov	r0, #3	; 0x3
   194f0:	e2807001 	add	r7, r0, #1	; 0x1
   194f4:	e5c61000 	strb	r1, [r6]
   194f8:	ea000007 	b	1951c <_wctomb_r+0x404>
   194fc:	e3560000 	cmp	r6, #0	; 0x0
   19500:	0a000002 	beq	19510 <_wctomb_r+0x3f8>
   19504:	e3a07001 	mov	r7, #1	; 0x1
   19508:	e5c65000 	strb	r5, [r6]
   1950c:	ea000002 	b	1951c <_wctomb_r+0x404>
   19510:	e3a07000 	mov	r7, #0	; 0x0
   19514:	ea000000 	b	1951c <_wctomb_r+0x404>
   19518:	e3e07000 	mvn	r7, #0	; 0x0
   1951c:	e1a00007 	mov	r0, r7
   19520:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   19524:	e12fff1e 	bx	lr
   19528:	40000890 	mulmi	r0, r0, r8
   1952c:	0001e34c 	andeq	lr, r1, ip, asr #6
   19530:	0001e354 	andeq	lr, r1, r4, asr r3
   19534:	0001e35c 	andeq	lr, r1, ip, asr r3
   19538:	0001e364 	andeq	lr, r1, r4, ror #6

0001953c <__swsetup>:
   1953c:	e59f30dc 	ldr	r3, [pc, #220]	; 19620 <.text+0x9620>
   19540:	e5932000 	ldr	r2, [r3]
   19544:	e3520000 	cmp	r2, #0	; 0x0
   19548:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1954c:	e1a04000 	mov	r4, r0
   19550:	0a000003 	beq	19564 <__swsetup+0x28>
   19554:	e5923038 	ldr	r3, [r2, #56]
   19558:	e3530000 	cmp	r3, #0	; 0x0
   1955c:	01a00002 	moveq	r0, r2
   19560:	0b0005bb 	bleq	1ac54 <__sinit>
   19564:	e1d430bc 	ldrh	r3, [r4, #12]
   19568:	e2135008 	ands	r5, r3, #8	; 0x8
   1956c:	1a000016 	bne	195cc <__swsetup+0x90>
   19570:	e3130010 	tst	r3, #16	; 0x10
   19574:	03e00000 	mvneq	r0, #0	; 0x0
   19578:	0a000026 	beq	19618 <__swsetup+0xdc>
   1957c:	e3130004 	tst	r3, #4	; 0x4
   19580:	0a00000e 	beq	195c0 <__swsetup+0x84>
   19584:	e5941030 	ldr	r1, [r4, #48]
   19588:	e3510000 	cmp	r1, #0	; 0x0
   1958c:	0a000005 	beq	195a8 <__swsetup+0x6c>
   19590:	e2843040 	add	r3, r4, #64	; 0x40
   19594:	e1510003 	cmp	r1, r3
   19598:	159f3080 	ldrne	r3, [pc, #128]	; 19620 <.text+0x9620>
   1959c:	15930000 	ldrne	r0, [r3]
   195a0:	1b000674 	blne	1af78 <_free_r>
   195a4:	e5845030 	str	r5, [r4, #48]
   195a8:	e1d430bc 	ldrh	r3, [r4, #12]
   195ac:	e5942010 	ldr	r2, [r4, #16]
   195b0:	e3c33024 	bic	r3, r3, #36	; 0x24
   195b4:	e1c430bc 	strh	r3, [r4, #12]
   195b8:	e3a03000 	mov	r3, #0	; 0x0
   195bc:	e884000c 	stmia	r4, {r2, r3}
   195c0:	e1d430bc 	ldrh	r3, [r4, #12]
   195c4:	e3833008 	orr	r3, r3, #8	; 0x8
   195c8:	e1c430bc 	strh	r3, [r4, #12]
   195cc:	e5943010 	ldr	r3, [r4, #16]
   195d0:	e3530000 	cmp	r3, #0	; 0x0
   195d4:	01a00004 	moveq	r0, r4
   195d8:	0b000854 	bleq	1b730 <__smakebuf>
   195dc:	e1d430bc 	ldrh	r3, [r4, #12]
   195e0:	e2132001 	ands	r2, r3, #1	; 0x1
   195e4:	0a000006 	beq	19604 <__swsetup+0xc8>
   195e8:	e5943014 	ldr	r3, [r4, #20]
   195ec:	e3a02000 	mov	r2, #0	; 0x0
   195f0:	e2633000 	rsb	r3, r3, #0	; 0x0
   195f4:	e1a00002 	mov	r0, r2
   195f8:	e5843018 	str	r3, [r4, #24]
   195fc:	e5842008 	str	r2, [r4, #8]
   19600:	ea000004 	b	19618 <__swsetup+0xdc>
   19604:	e3130002 	tst	r3, #2	; 0x2
   19608:	05943014 	ldreq	r3, [r4, #20]
   1960c:	11a03002 	movne	r3, r2
   19610:	e5843008 	str	r3, [r4, #8]
   19614:	e3a00000 	mov	r0, #0	; 0x0
   19618:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1961c:	e12fff1e 	bx	lr
   19620:	40000488 	andmi	r0, r0, r8, lsl #9

00019624 <quorem>:
   19624:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19628:	e5903010 	ldr	r3, [r0, #16]
   1962c:	e5912010 	ldr	r2, [r1, #16]
   19630:	e24dd00c 	sub	sp, sp, #12	; 0xc
   19634:	e1530002 	cmp	r3, r2
   19638:	e58d0000 	str	r0, [sp]
   1963c:	e1a09001 	mov	r9, r1
   19640:	b3a00000 	movlt	r0, #0	; 0x0
   19644:	ba00006a 	blt	197f4 <quorem+0x1d0>
   19648:	e281a014 	add	sl, r1, #20	; 0x14
   1964c:	e59d1000 	ldr	r1, [sp]
   19650:	e2426001 	sub	r6, r2, #1	; 0x1
   19654:	e1a03106 	mov	r3, r6, lsl #2
   19658:	e2815014 	add	r5, r1, #20	; 0x14
   1965c:	e7952003 	ldr	r2, [r5, r3]
   19660:	e79a1003 	ldr	r1, [sl, r3]
   19664:	e58d2004 	str	r2, [sp, #4]
   19668:	e1a00002 	mov	r0, r2
   1966c:	e2811001 	add	r1, r1, #1	; 0x1
   19670:	e08a2003 	add	r2, sl, r3
   19674:	e58d2008 	str	r2, [sp, #8]
   19678:	e0857003 	add	r7, r5, r3
   1967c:	eb000d5e 	bl	1cbfc <__aeabi_uidiv>
   19680:	e250b000 	subs	fp, r0, #0	; 0x0
   19684:	0a000029 	beq	19730 <quorem+0x10c>
   19688:	e3a08000 	mov	r8, #0	; 0x0
   1968c:	e1a0e005 	mov	lr, r5
   19690:	e1a0400a 	mov	r4, sl
   19694:	e1a0c008 	mov	ip, r8
   19698:	e4942004 	ldr	r2, [r4], #4
   1969c:	e1a03802 	mov	r3, r2, lsl #16
   196a0:	e1a03823 	mov	r3, r3, lsr #16
   196a4:	e021c39b 	mla	r1, fp, r3, ip
   196a8:	e1a02822 	mov	r2, r2, lsr #16
   196ac:	e1a03821 	mov	r3, r1, lsr #16
   196b0:	e02c329b 	mla	ip, fp, r2, r3
   196b4:	e59e0000 	ldr	r0, [lr]
   196b8:	e1a01801 	mov	r1, r1, lsl #16
   196bc:	e1a02800 	mov	r2, r0, lsl #16
   196c0:	e1a01821 	mov	r1, r1, lsr #16
   196c4:	e1a0380c 	mov	r3, ip, lsl #16
   196c8:	e1a02822 	mov	r2, r2, lsr #16
   196cc:	e0612002 	rsb	r2, r1, r2
   196d0:	e1a03823 	mov	r3, r3, lsr #16
   196d4:	e59d1008 	ldr	r1, [sp, #8]
   196d8:	e0822008 	add	r2, r2, r8
   196dc:	e0633820 	rsb	r3, r3, r0, lsr #16
   196e0:	e0833842 	add	r3, r3, r2, asr #16
   196e4:	e1540001 	cmp	r4, r1
   196e8:	e1ce30b2 	strh	r3, [lr, #2]
   196ec:	e1a0c82c 	mov	ip, ip, lsr #16
   196f0:	e0ce20b4 	strh	r2, [lr], #4
   196f4:	e1a08843 	mov	r8, r3, asr #16
   196f8:	9affffe6 	bls	19698 <quorem+0x74>
   196fc:	e59d2004 	ldr	r2, [sp, #4]
   19700:	e3520000 	cmp	r2, #0	; 0x0
   19704:	0a000001 	beq	19710 <quorem+0xec>
   19708:	ea000008 	b	19730 <quorem+0x10c>
   1970c:	e2466001 	sub	r6, r6, #1	; 0x1
   19710:	e2477004 	sub	r7, r7, #4	; 0x4
   19714:	e1570005 	cmp	r7, r5
   19718:	9a000002 	bls	19728 <quorem+0x104>
   1971c:	e5973000 	ldr	r3, [r7]
   19720:	e3530000 	cmp	r3, #0	; 0x0
   19724:	0afffff8 	beq	1970c <quorem+0xe8>
   19728:	e59d3000 	ldr	r3, [sp]
   1972c:	e5836010 	str	r6, [r3, #16]
   19730:	e1a01009 	mov	r1, r9
   19734:	e59d0000 	ldr	r0, [sp]
   19738:	eb0008ab 	bl	1b9ec <__mcmp>
   1973c:	e3500000 	cmp	r0, #0	; 0x0
   19740:	ba00002a 	blt	197f0 <quorem+0x1cc>
   19744:	e3a04000 	mov	r4, #0	; 0x0
   19748:	e28bb001 	add	fp, fp, #1	; 0x1
   1974c:	e1a0e005 	mov	lr, r5
   19750:	e1a00004 	mov	r0, r4
   19754:	e49a2004 	ldr	r2, [sl], #4
   19758:	e1a03802 	mov	r3, r2, lsl #16
   1975c:	e1a03823 	mov	r3, r3, lsr #16
   19760:	e59ec000 	ldr	ip, [lr]
   19764:	e0833000 	add	r3, r3, r0
   19768:	e1a00823 	mov	r0, r3, lsr #16
   1976c:	e0800822 	add	r0, r0, r2, lsr #16
   19770:	e1a03803 	mov	r3, r3, lsl #16
   19774:	e1a0180c 	mov	r1, ip, lsl #16
   19778:	e1a03823 	mov	r3, r3, lsr #16
   1977c:	e1a02800 	mov	r2, r0, lsl #16
   19780:	e1a01821 	mov	r1, r1, lsr #16
   19784:	e0631001 	rsb	r1, r3, r1
   19788:	e1a02822 	mov	r2, r2, lsr #16
   1978c:	e59d3008 	ldr	r3, [sp, #8]
   19790:	e0811004 	add	r1, r1, r4
   19794:	e062282c 	rsb	r2, r2, ip, lsr #16
   19798:	e0822841 	add	r2, r2, r1, asr #16
   1979c:	e15a0003 	cmp	sl, r3
   197a0:	e1ce20b2 	strh	r2, [lr, #2]
   197a4:	e1a00820 	mov	r0, r0, lsr #16
   197a8:	e0ce10b4 	strh	r1, [lr], #4
   197ac:	e1a04842 	mov	r4, r2, asr #16
   197b0:	9affffe7 	bls	19754 <quorem+0x130>
   197b4:	e1a02106 	mov	r2, r6, lsl #2
   197b8:	e7953002 	ldr	r3, [r5, r2]
   197bc:	e3530000 	cmp	r3, #0	; 0x0
   197c0:	e0852002 	add	r2, r5, r2
   197c4:	0a000001 	beq	197d0 <quorem+0x1ac>
   197c8:	ea000008 	b	197f0 <quorem+0x1cc>
   197cc:	e2466001 	sub	r6, r6, #1	; 0x1
   197d0:	e2422004 	sub	r2, r2, #4	; 0x4
   197d4:	e1520005 	cmp	r2, r5
   197d8:	9a000002 	bls	197e8 <quorem+0x1c4>
   197dc:	e5923000 	ldr	r3, [r2]
   197e0:	e3530000 	cmp	r3, #0	; 0x0
   197e4:	0afffff8 	beq	197cc <quorem+0x1a8>
   197e8:	e59d1000 	ldr	r1, [sp]
   197ec:	e5816010 	str	r6, [r1, #16]
   197f0:	e1a0000b 	mov	r0, fp
   197f4:	e28dd00c 	add	sp, sp, #12	; 0xc
   197f8:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197fc:	e12fff1e 	bx	lr

00019800 <_dtoa_r>:
   19800:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19804:	e590c040 	ldr	ip, [r0, #64]
   19808:	e24dd060 	sub	sp, sp, #96	; 0x60
   1980c:	e35c0000 	cmp	ip, #0	; 0x0
   19810:	e58d0008 	str	r0, [sp, #8]
   19814:	e58d3004 	str	r3, [sp, #4]
   19818:	e1a0a001 	mov	sl, r1
   1981c:	e1a0b002 	mov	fp, r2
   19820:	e59d408c 	ldr	r4, [sp, #140]
   19824:	0a00000a 	beq	19854 <_dtoa_r+0x54>
   19828:	e5903044 	ldr	r3, [r0, #68]
   1982c:	e58c3004 	str	r3, [ip, #4]
   19830:	e5902044 	ldr	r2, [r0, #68]
   19834:	e3a03001 	mov	r3, #1	; 0x1
   19838:	e1a03213 	mov	r3, r3, lsl r2
   1983c:	e1a0100c 	mov	r1, ip
   19840:	e58c3008 	str	r3, [ip, #8]
   19844:	eb000827 	bl	1b8e8 <_Bfree>
   19848:	e59d2008 	ldr	r2, [sp, #8]
   1984c:	e3a03000 	mov	r3, #0	; 0x0
   19850:	e5823040 	str	r3, [r2, #64]
   19854:	e25a3000 	subs	r3, sl, #0	; 0x0
   19858:	b3c3a102 	biclt	sl, r3, #-2147483648	; 0x80000000
   1985c:	a3a03000 	movge	r3, #0	; 0x0
   19860:	b3a03001 	movlt	r3, #1	; 0x1
   19864:	e5843000 	str	r3, [r4]
   19868:	e59f3f00 	ldr	r3, [pc, #3840]	; 1a770 <.text+0xa770>
   1986c:	e59f2efc 	ldr	r2, [pc, #3836]	; 1a770 <.text+0xa770>
   19870:	e00a3003 	and	r3, sl, r3
   19874:	e1530002 	cmp	r3, r2
   19878:	e1a0400a 	mov	r4, sl
   1987c:	1a000014 	bne	198d4 <_dtoa_r+0xd4>
   19880:	e59f3eec 	ldr	r3, [pc, #3820]	; 1a774 <.text+0xa774>
   19884:	e59da088 	ldr	sl, [sp, #136]
   19888:	e35b0000 	cmp	fp, #0	; 0x0
   1988c:	e58a3000 	str	r3, [sl]
   19890:	1a000004 	bne	198a8 <_dtoa_r+0xa8>
   19894:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   19898:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1989c:	e3530000 	cmp	r3, #0	; 0x0
   198a0:	059f0ed0 	ldreq	r0, [pc, #3792]	; 1a778 <.text+0xa778>
   198a4:	0a000000 	beq	198ac <_dtoa_r+0xac>
   198a8:	e59f0ecc 	ldr	r0, [pc, #3788]	; 1a77c <.text+0xa77c>
   198ac:	e59dc090 	ldr	ip, [sp, #144]
   198b0:	e35c0000 	cmp	ip, #0	; 0x0
   198b4:	0a000497 	beq	1ab18 <.text+0xab18>
   198b8:	e5d03003 	ldrb	r3, [r0, #3]
   198bc:	e59de090 	ldr	lr, [sp, #144]
   198c0:	e3530000 	cmp	r3, #0	; 0x0
   198c4:	e2803003 	add	r3, r0, #3	; 0x3
   198c8:	12803008 	addne	r3, r0, #8	; 0x8
   198cc:	e58e3000 	str	r3, [lr]
   198d0:	ea000490 	b	1ab18 <.text+0xab18>
   198d4:	e1a0000a 	mov	r0, sl
   198d8:	e1a0100b 	mov	r1, fp
   198dc:	e3a02000 	mov	r2, #0	; 0x0
   198e0:	e3a03000 	mov	r3, #0	; 0x0
   198e4:	e58da00c 	str	sl, [sp, #12]
   198e8:	e58db010 	str	fp, [sp, #16]
   198ec:	eb000ffe 	bl	1d8ec <__cmpdf2>
   198f0:	e3500000 	cmp	r0, #0	; 0x0
   198f4:	1a00000a 	bne	19924 <_dtoa_r+0x124>
   198f8:	e59d1090 	ldr	r1, [sp, #144]
   198fc:	e59d2088 	ldr	r2, [sp, #136]
   19900:	e3510000 	cmp	r1, #0	; 0x0
   19904:	e3a03001 	mov	r3, #1	; 0x1
   19908:	e5823000 	str	r3, [r2]
   1990c:	159da090 	ldrne	sl, [sp, #144]
   19910:	159f3e68 	ldrne	r3, [pc, #3688]	; 1a780 <.text+0xa780>
   19914:	059f0e68 	ldreq	r0, [pc, #3688]	; 1a784 <.text+0xa784>
   19918:	159f0e64 	ldrne	r0, [pc, #3684]	; 1a784 <.text+0xa784>
   1991c:	158a3000 	strne	r3, [sl]
   19920:	ea00047c 	b	1ab18 <.text+0xab18>
   19924:	e28d100c 	add	r1, sp, #12	; 0xc
   19928:	e8910006 	ldmia	r1, {r1, r2}
   1992c:	e28d305c 	add	r3, sp, #92	; 0x5c
   19930:	e28dc058 	add	ip, sp, #88	; 0x58
   19934:	e59d0008 	ldr	r0, [sp, #8]
   19938:	e58dc000 	str	ip, [sp]
   1993c:	eb0008e6 	bl	1bcdc <_d2b>
   19940:	e1a03a2a 	mov	r3, sl, lsr #20
   19944:	e1a02a83 	mov	r2, r3, lsl #21
   19948:	e1a02aa2 	mov	r2, r2, lsr #21
   1994c:	e3520000 	cmp	r2, #0	; 0x0
   19950:	e58d003c 	str	r0, [sp, #60]
   19954:	0a00000a 	beq	19984 <_dtoa_r+0x184>
   19958:	e28d000c 	add	r0, sp, #12	; 0xc
   1995c:	e8900003 	ldmia	r0, {r0, r1}
   19960:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
   19964:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   19968:	e38305ff 	orr	r0, r3, #1069547520	; 0x3fc00000
   1996c:	e2428fff 	sub	r8, r2, #1020	; 0x3fc
   19970:	e3a0c000 	mov	ip, #0	; 0x0
   19974:	e2488003 	sub	r8, r8, #3	; 0x3
   19978:	e3800603 	orr	r0, r0, #3145728	; 0x300000
   1997c:	e58dc038 	str	ip, [sp, #56]
   19980:	ea000016 	b	199e0 <_dtoa_r+0x1e0>
   19984:	e59d3058 	ldr	r3, [sp, #88]
   19988:	e59d205c 	ldr	r2, [sp, #92]
   1998c:	e2833e43 	add	r3, r3, #1072	; 0x430
   19990:	e2833002 	add	r3, r3, #2	; 0x2
   19994:	e0835002 	add	r5, r3, r2
   19998:	e3550020 	cmp	r5, #32	; 0x20
   1999c:	c2453020 	subgt	r3, r5, #32	; 0x20
   199a0:	c1a0333b 	movgt	r3, fp, lsr r3
   199a4:	c2652040 	rsbgt	r2, r5, #64	; 0x40
   199a8:	d2653020 	rsble	r3, r5, #32	; 0x20
   199ac:	c183421a 	orrgt	r4, r3, sl, lsl r2
   199b0:	d1a0431b 	movle	r4, fp, lsl r3
   199b4:	e1a00004 	mov	r0, r4
   199b8:	eb000e65 	bl	1d354 <__aeabi_i2d>
   199bc:	e3540000 	cmp	r4, #0	; 0x0
   199c0:	b59f2dc0 	ldrlt	r2, [pc, #3520]	; 1a788 <.text+0xa788>
   199c4:	b3a03000 	movlt	r3, #0	; 0x0
   199c8:	bb000d93 	bllt	1d01c <__adddf3>
   199cc:	e3a0e001 	mov	lr, #1	; 0x1
   199d0:	e2458e43 	sub	r8, r5, #1072	; 0x430
   199d4:	e58de038 	str	lr, [sp, #56]
   199d8:	e2488003 	sub	r8, r8, #3	; 0x3
   199dc:	e240061f 	sub	r0, r0, #32505856	; 0x1f00000
   199e0:	e59f2da4 	ldr	r2, [pc, #3492]	; 1a78c <.text+0xa78c>
   199e4:	e3a03000 	mov	r3, #0	; 0x0
   199e8:	eb000d8a 	bl	1d018 <__aeabi_dsub>
   199ec:	e59f2d9c 	ldr	r2, [pc, #3484]	; 1a790 <.text+0xa790>
   199f0:	e59f3d9c 	ldr	r3, [pc, #3484]	; 1a794 <.text+0xa794>
   199f4:	eb000e91 	bl	1d440 <__aeabi_dmul>
   199f8:	e59f2d98 	ldr	r2, [pc, #3480]	; 1a798 <.text+0xa798>
   199fc:	e59f3d98 	ldr	r3, [pc, #3480]	; 1a79c <.text+0xa79c>
   19a00:	eb000d85 	bl	1d01c <__adddf3>
   19a04:	e1a04000 	mov	r4, r0
   19a08:	e1a00008 	mov	r0, r8
   19a0c:	e1a05001 	mov	r5, r1
   19a10:	eb000e4f 	bl	1d354 <__aeabi_i2d>
   19a14:	e59f2d84 	ldr	r2, [pc, #3460]	; 1a7a0 <.text+0xa7a0>
   19a18:	e59f3d84 	ldr	r3, [pc, #3460]	; 1a7a4 <.text+0xa7a4>
   19a1c:	eb000e87 	bl	1d440 <__aeabi_dmul>
   19a20:	e1a02000 	mov	r2, r0
   19a24:	e1a03001 	mov	r3, r1
   19a28:	e1a00004 	mov	r0, r4
   19a2c:	e1a01005 	mov	r1, r5
   19a30:	eb000d79 	bl	1d01c <__adddf3>
   19a34:	e1a06000 	mov	r6, r0
   19a38:	e1a07001 	mov	r7, r1
   19a3c:	eb000ff6 	bl	1da1c <__aeabi_d2iz>
   19a40:	e1a01007 	mov	r1, r7
   19a44:	e58d0024 	str	r0, [sp, #36]
   19a48:	e3a02000 	mov	r2, #0	; 0x0
   19a4c:	e1a00006 	mov	r0, r6
   19a50:	e3a03000 	mov	r3, #0	; 0x0
   19a54:	eb000fa2 	bl	1d8e4 <__ledf2>
   19a58:	e3500000 	cmp	r0, #0	; 0x0
   19a5c:	aa00000a 	bge	19a8c <_dtoa_r+0x28c>
   19a60:	e59d0024 	ldr	r0, [sp, #36]
   19a64:	eb000e3a 	bl	1d354 <__aeabi_i2d>
   19a68:	e1a02000 	mov	r2, r0
   19a6c:	e1a03001 	mov	r3, r1
   19a70:	e1a00006 	mov	r0, r6
   19a74:	e1a01007 	mov	r1, r7
   19a78:	eb000f9b 	bl	1d8ec <__cmpdf2>
   19a7c:	e3500000 	cmp	r0, #0	; 0x0
   19a80:	159d1024 	ldrne	r1, [sp, #36]
   19a84:	12411001 	subne	r1, r1, #1	; 0x1
   19a88:	158d1024 	strne	r1, [sp, #36]
   19a8c:	e59d2024 	ldr	r2, [sp, #36]
   19a90:	e3520016 	cmp	r2, #22	; 0x16
   19a94:	83a03001 	movhi	r3, #1	; 0x1
   19a98:	858d3028 	strhi	r3, [sp, #40]
   19a9c:	8a00000e 	bhi	19adc <_dtoa_r+0x2dc>
   19aa0:	e59dc024 	ldr	ip, [sp, #36]
   19aa4:	e59f3cfc 	ldr	r3, [pc, #3324]	; 1a7a8 <.text+0xa7a8>
   19aa8:	e083318c 	add	r3, r3, ip, lsl #3
   19aac:	e28d000c 	add	r0, sp, #12	; 0xc
   19ab0:	e8900003 	ldmia	r0, {r0, r1}
   19ab4:	e893000c 	ldmia	r3, {r2, r3}
   19ab8:	eb000f89 	bl	1d8e4 <__ledf2>
   19abc:	e3500000 	cmp	r0, #0	; 0x0
   19ac0:	b59d1024 	ldrlt	r1, [sp, #36]
   19ac4:	a3a0e000 	movge	lr, #0	; 0x0
   19ac8:	b2411001 	sublt	r1, r1, #1	; 0x1
   19acc:	b3a02000 	movlt	r2, #0	; 0x0
   19ad0:	a58de028 	strge	lr, [sp, #40]
   19ad4:	b58d1024 	strlt	r1, [sp, #36]
   19ad8:	b58d2028 	strlt	r2, [sp, #40]
   19adc:	e59d3058 	ldr	r3, [sp, #88]
   19ae0:	e0683003 	rsb	r3, r8, r3
   19ae4:	e2532001 	subs	r2, r3, #1	; 0x1
   19ae8:	e59de024 	ldr	lr, [sp, #36]
   19aec:	53a03000 	movpl	r3, #0	; 0x0
   19af0:	42622000 	rsbmi	r2, r2, #0	; 0x0
   19af4:	43a0c000 	movmi	ip, #0	; 0x0
   19af8:	558d2030 	strpl	r2, [sp, #48]
   19afc:	558d3014 	strpl	r3, [sp, #20]
   19b00:	458d2014 	strmi	r2, [sp, #20]
   19b04:	458dc030 	strmi	ip, [sp, #48]
   19b08:	e35e0000 	cmp	lr, #0	; 0x0
   19b0c:	ba000006 	blt	19b2c <_dtoa_r+0x32c>
   19b10:	e59d1030 	ldr	r1, [sp, #48]
   19b14:	e3a02000 	mov	r2, #0	; 0x0
   19b18:	e081100e 	add	r1, r1, lr
   19b1c:	e58d1030 	str	r1, [sp, #48]
   19b20:	e58de034 	str	lr, [sp, #52]
   19b24:	e58d2018 	str	r2, [sp, #24]
   19b28:	ea000007 	b	19b4c <_dtoa_r+0x34c>
   19b2c:	e59d3014 	ldr	r3, [sp, #20]
   19b30:	e59dc024 	ldr	ip, [sp, #36]
   19b34:	e3a01000 	mov	r1, #0	; 0x0
   19b38:	e06c3003 	rsb	r3, ip, r3
   19b3c:	e26ce000 	rsb	lr, ip, #0	; 0x0
   19b40:	e58d3014 	str	r3, [sp, #20]
   19b44:	e58de018 	str	lr, [sp, #24]
   19b48:	e58d1034 	str	r1, [sp, #52]
   19b4c:	e59d2004 	ldr	r2, [sp, #4]
   19b50:	e3520009 	cmp	r2, #9	; 0x9
   19b54:	83a0c000 	movhi	ip, #0	; 0x0
   19b58:	858dc004 	strhi	ip, [sp, #4]
   19b5c:	83a04001 	movhi	r4, #1	; 0x1
   19b60:	8a00001a 	bhi	19bd0 <.text+0x9bd0>
   19b64:	e3520005 	cmp	r2, #5	; 0x5
   19b68:	c59d3004 	ldrgt	r3, [sp, #4]
   19b6c:	c2433004 	subgt	r3, r3, #4	; 0x4
   19b70:	c58d3004 	strgt	r3, [sp, #4]
   19b74:	e59dc004 	ldr	ip, [sp, #4]
   19b78:	d3a04001 	movle	r4, #1	; 0x1
   19b7c:	c3a04000 	movgt	r4, #0	; 0x0
   19b80:	e35c0005 	cmp	ip, #5	; 0x5
   19b84:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   19b88:	ea000005 	b	19ba4 <.text+0x9ba4>
   19b8c:	00019bd0 	ldreqd	r9, [r1], -r0
   19b90:	00019bd0 	ldreqd	r9, [r1], -r0
   19b94:	00019bf4 	streqd	r9, [r1], -r4
   19b98:	00019c28 	andeq	r9, r1, r8, lsr #24
   19b9c:	00019bc8 	andeq	r9, r1, r8, asr #23
   19ba0:	00019bbc 	streqh	r9, [r1], -ip
   19ba4:	e3e0e000 	mvn	lr, #0	; 0x0
   19ba8:	e3a01001 	mov	r1, #1	; 0x1
   19bac:	e58de01c 	str	lr, [sp, #28]
   19bb0:	e58de020 	str	lr, [sp, #32]
   19bb4:	e58d102c 	str	r1, [sp, #44]
   19bb8:	ea000026 	b	19c58 <.text+0x9c58>
   19bbc:	e3a02001 	mov	r2, #1	; 0x1
   19bc0:	e58d202c 	str	r2, [sp, #44]
   19bc4:	ea000019 	b	19c30 <.text+0x9c30>
   19bc8:	e3a03001 	mov	r3, #1	; 0x1
   19bcc:	ea000009 	b	19bf8 <.text+0x9bf8>
   19bd0:	e3e0e000 	mvn	lr, #0	; 0x0
   19bd4:	e3a01000 	mov	r1, #0	; 0x0
   19bd8:	e3a02001 	mov	r2, #1	; 0x1
   19bdc:	e3a08012 	mov	r8, #18	; 0x12
   19be0:	e58de01c 	str	lr, [sp, #28]
   19be4:	e58d1084 	str	r1, [sp, #132]
   19be8:	e58de020 	str	lr, [sp, #32]
   19bec:	e58d202c 	str	r2, [sp, #44]
   19bf0:	ea000018 	b	19c58 <.text+0x9c58>
   19bf4:	e3a03000 	mov	r3, #0	; 0x0
   19bf8:	e59dc084 	ldr	ip, [sp, #132]
   19bfc:	e35c0000 	cmp	ip, #0	; 0x0
   19c00:	d3a0e001 	movle	lr, #1	; 0x1
   19c04:	c1a0800c 	movgt	r8, ip
   19c08:	d1a0800e 	movle	r8, lr
   19c0c:	e58d302c 	str	r3, [sp, #44]
   19c10:	c58dc01c 	strgt	ip, [sp, #28]
   19c14:	c58dc020 	strgt	ip, [sp, #32]
   19c18:	d58de084 	strle	lr, [sp, #132]
   19c1c:	d58de01c 	strle	lr, [sp, #28]
   19c20:	d58de020 	strle	lr, [sp, #32]
   19c24:	ea00000b 	b	19c58 <.text+0x9c58>
   19c28:	e3a01000 	mov	r1, #0	; 0x0
   19c2c:	e58d102c 	str	r1, [sp, #44]
   19c30:	e59d2084 	ldr	r2, [sp, #132]
   19c34:	e59dc024 	ldr	ip, [sp, #36]
   19c38:	e2823001 	add	r3, r2, #1	; 0x1
   19c3c:	e08c8003 	add	r8, ip, r3
   19c40:	e3580000 	cmp	r8, #0	; 0x0
   19c44:	e248e001 	sub	lr, r8, #1	; 0x1
   19c48:	e58de020 	str	lr, [sp, #32]
   19c4c:	c58d801c 	strgt	r8, [sp, #28]
   19c50:	d58d801c 	strle	r8, [sp, #28]
   19c54:	d3a08001 	movle	r8, #1	; 0x1
   19c58:	e59d1008 	ldr	r1, [sp, #8]
   19c5c:	e3a03000 	mov	r3, #0	; 0x0
   19c60:	e3a02004 	mov	r2, #4	; 0x4
   19c64:	e5813044 	str	r3, [r1, #68]
   19c68:	ea000003 	b	19c7c <.text+0x9c7c>
   19c6c:	e59dc008 	ldr	ip, [sp, #8]
   19c70:	e59c3044 	ldr	r3, [ip, #68]
   19c74:	e2833001 	add	r3, r3, #1	; 0x1
   19c78:	e58c3044 	str	r3, [ip, #68]
   19c7c:	e2823014 	add	r3, r2, #20	; 0x14
   19c80:	e1530008 	cmp	r3, r8
   19c84:	e1a02082 	mov	r2, r2, lsl #1
   19c88:	9afffff7 	bls	19c6c <.text+0x9c6c>
   19c8c:	e59d0008 	ldr	r0, [sp, #8]
   19c90:	e5901044 	ldr	r1, [r0, #68]
   19c94:	eb0007eb 	bl	1bc48 <_Balloc>
   19c98:	e59de01c 	ldr	lr, [sp, #28]
   19c9c:	e59d1008 	ldr	r1, [sp, #8]
   19ca0:	e35e000e 	cmp	lr, #14	; 0xe
   19ca4:	83a03000 	movhi	r3, #0	; 0x0
   19ca8:	92043001 	andls	r3, r4, #1	; 0x1
   19cac:	e3530000 	cmp	r3, #0	; 0x0
   19cb0:	e58d004c 	str	r0, [sp, #76]
   19cb4:	e5810040 	str	r0, [r1, #64]
   19cb8:	0a00012d 	beq	1a174 <.text+0xa174>
   19cbc:	e59d2024 	ldr	r2, [sp, #36]
   19cc0:	e3520000 	cmp	r2, #0	; 0x0
   19cc4:	da000029 	ble	19d70 <.text+0x9d70>
   19cc8:	e59d3024 	ldr	r3, [sp, #36]
   19ccc:	e1a04243 	mov	r4, r3, asr #4
   19cd0:	e59f3ad0 	ldr	r3, [pc, #2768]	; 1a7a8 <.text+0xa7a8>
   19cd4:	e202200f 	and	r2, r2, #15	; 0xf
   19cd8:	e0833182 	add	r3, r3, r2, lsl #3
   19cdc:	e3140010 	tst	r4, #16	; 0x10
   19ce0:	e89300c0 	ldmia	r3, {r6, r7}
   19ce4:	03a08002 	moveq	r8, #2	; 0x2
   19ce8:	0a000009 	beq	19d14 <.text+0x9d14>
   19cec:	e59f3ab8 	ldr	r3, [pc, #2744]	; 1a7ac <.text+0xa7ac>
   19cf0:	e28d000c 	add	r0, sp, #12	; 0xc
   19cf4:	e8900003 	ldmia	r0, {r0, r1}
   19cf8:	e2832020 	add	r2, r3, #32	; 0x20
   19cfc:	e892000c 	ldmia	r2, {r2, r3}
   19d00:	eb000e72 	bl	1d6d0 <__aeabi_ddiv>
   19d04:	e204400f 	and	r4, r4, #15	; 0xf
   19d08:	e1a0a000 	mov	sl, r0
   19d0c:	e1a0b001 	mov	fp, r1
   19d10:	e3a08003 	mov	r8, #3	; 0x3
   19d14:	e59f5a90 	ldr	r5, [pc, #2704]	; 1a7ac <.text+0xa7ac>
   19d18:	ea000008 	b	19d40 <.text+0x9d40>
   19d1c:	e3140001 	tst	r4, #1	; 0x1
   19d20:	e1a040c4 	mov	r4, r4, asr #1
   19d24:	0a000004 	beq	19d3c <.text+0x9d3c>
   19d28:	e895000c 	ldmia	r5, {r2, r3}
   19d2c:	eb000dc3 	bl	1d440 <__aeabi_dmul>
   19d30:	e2888001 	add	r8, r8, #1	; 0x1
   19d34:	e1a06000 	mov	r6, r0
   19d38:	e1a07001 	mov	r7, r1
   19d3c:	e2855008 	add	r5, r5, #8	; 0x8
   19d40:	e3540000 	cmp	r4, #0	; 0x0
   19d44:	e1a00006 	mov	r0, r6
   19d48:	e1a01007 	mov	r1, r7
   19d4c:	1afffff2 	bne	19d1c <.text+0x9d1c>
   19d50:	e1a0000a 	mov	r0, sl
   19d54:	e1a0100b 	mov	r1, fp
   19d58:	e1a02006 	mov	r2, r6
   19d5c:	e1a03007 	mov	r3, r7
   19d60:	eb000e5a 	bl	1d6d0 <__aeabi_ddiv>
   19d64:	e1a0a000 	mov	sl, r0
   19d68:	e1a0b001 	mov	fp, r1
   19d6c:	ea000020 	b	19df4 <.text+0x9df4>
   19d70:	e59dc024 	ldr	ip, [sp, #36]
   19d74:	e26c6000 	rsb	r6, ip, #0	; 0x0
   19d78:	e3560000 	cmp	r6, #0	; 0x0
   19d7c:	03a08002 	moveq	r8, #2	; 0x2
   19d80:	0a00001b 	beq	19df4 <.text+0x9df4>
   19d84:	e59f3a1c 	ldr	r3, [pc, #2588]	; 1a7a8 <.text+0xa7a8>
   19d88:	e206200f 	and	r2, r6, #15	; 0xf
   19d8c:	e0833182 	add	r3, r3, r2, lsl #3
   19d90:	e893000c 	ldmia	r3, {r2, r3}
   19d94:	e28d000c 	add	r0, sp, #12	; 0xc
   19d98:	e8900003 	ldmia	r0, {r0, r1}
   19d9c:	eb000da7 	bl	1d440 <__aeabi_dmul>
   19da0:	e59f5a04 	ldr	r5, [pc, #2564]	; 1a7ac <.text+0xa7ac>
   19da4:	e1a03000 	mov	r3, r0
   19da8:	e1a04001 	mov	r4, r1
   19dac:	e1a06246 	mov	r6, r6, asr #4
   19db0:	e3a08002 	mov	r8, #2	; 0x2
   19db4:	ea000008 	b	19ddc <.text+0x9ddc>
   19db8:	e3160001 	tst	r6, #1	; 0x1
   19dbc:	e1a060c6 	mov	r6, r6, asr #1
   19dc0:	0a000004 	beq	19dd8 <.text+0x9dd8>
   19dc4:	e895000c 	ldmia	r5, {r2, r3}
   19dc8:	eb000d9c 	bl	1d440 <__aeabi_dmul>
   19dcc:	e2888001 	add	r8, r8, #1	; 0x1
   19dd0:	e1a03000 	mov	r3, r0
   19dd4:	e1a04001 	mov	r4, r1
   19dd8:	e2855008 	add	r5, r5, #8	; 0x8
   19ddc:	e3560000 	cmp	r6, #0	; 0x0
   19de0:	e1a00003 	mov	r0, r3
   19de4:	e1a01004 	mov	r1, r4
   19de8:	1afffff2 	bne	19db8 <.text+0x9db8>
   19dec:	e1a0a003 	mov	sl, r3
   19df0:	e1a0b004 	mov	fp, r4
   19df4:	e59de028 	ldr	lr, [sp, #40]
   19df8:	e35e0000 	cmp	lr, #0	; 0x0
   19dfc:	0a00002a 	beq	19eac <.text+0x9eac>
   19e00:	e1a0100b 	mov	r1, fp
   19e04:	e3a03000 	mov	r3, #0	; 0x0
   19e08:	e1a0000a 	mov	r0, sl
   19e0c:	e59f299c 	ldr	r2, [pc, #2460]	; 1a7b0 <.text+0xa7b0>
   19e10:	eb000eb3 	bl	1d8e4 <__ledf2>
   19e14:	e59d101c 	ldr	r1, [sp, #28]
   19e18:	e3500000 	cmp	r0, #0	; 0x0
   19e1c:	e3a03000 	mov	r3, #0	; 0x0
   19e20:	b3a03001 	movlt	r3, #1	; 0x1
   19e24:	e3510000 	cmp	r1, #0	; 0x0
   19e28:	d3a03000 	movle	r3, #0	; 0x0
   19e2c:	c2033001 	andgt	r3, r3, #1	; 0x1
   19e30:	e3530000 	cmp	r3, #0	; 0x0
   19e34:	e1a0400a 	mov	r4, sl
   19e38:	0a00001b 	beq	19eac <.text+0x9eac>
   19e3c:	e59d2020 	ldr	r2, [sp, #32]
   19e40:	e3520000 	cmp	r2, #0	; 0x0
   19e44:	da0000c8 	ble	1a16c <.text+0xa16c>
   19e48:	e59f2964 	ldr	r2, [pc, #2404]	; 1a7b4 <.text+0xa7b4>
   19e4c:	e3a03000 	mov	r3, #0	; 0x0
   19e50:	e1a0000a 	mov	r0, sl
   19e54:	e1a0100b 	mov	r1, fp
   19e58:	eb000d78 	bl	1d440 <__aeabi_dmul>
   19e5c:	e1a04000 	mov	r4, r0
   19e60:	e1a05001 	mov	r5, r1
   19e64:	e2880001 	add	r0, r8, #1	; 0x1
   19e68:	eb000d39 	bl	1d354 <__aeabi_i2d>
   19e6c:	e1a02004 	mov	r2, r4
   19e70:	e1a03005 	mov	r3, r5
   19e74:	eb000d71 	bl	1d440 <__aeabi_dmul>
   19e78:	e3a03000 	mov	r3, #0	; 0x0
   19e7c:	e59f2934 	ldr	r2, [pc, #2356]	; 1a7b8 <.text+0xa7b8>
   19e80:	eb000c65 	bl	1d01c <__adddf3>
   19e84:	e59d3024 	ldr	r3, [sp, #36]
   19e88:	e59dc020 	ldr	ip, [sp, #32]
   19e8c:	e2433001 	sub	r3, r3, #1	; 0x1
   19e90:	e1a07001 	mov	r7, r1
   19e94:	e1a0a004 	mov	sl, r4
   19e98:	e1a0b005 	mov	fp, r5
   19e9c:	e240650d 	sub	r6, r0, #54525952	; 0x3400000
   19ea0:	e58d3054 	str	r3, [sp, #84]
   19ea4:	e58dc050 	str	ip, [sp, #80]
   19ea8:	ea000024 	b	19f40 <.text+0x9f40>
   19eac:	e1a00008 	mov	r0, r8
   19eb0:	eb000d27 	bl	1d354 <__aeabi_i2d>
   19eb4:	e1a0200a 	mov	r2, sl
   19eb8:	e1a0300b 	mov	r3, fp
   19ebc:	eb000d5f 	bl	1d440 <__aeabi_dmul>
   19ec0:	e59f28f0 	ldr	r2, [pc, #2288]	; 1a7b8 <.text+0xa7b8>
   19ec4:	e3a03000 	mov	r3, #0	; 0x0
   19ec8:	eb000c53 	bl	1d01c <__adddf3>
   19ecc:	e59de01c 	ldr	lr, [sp, #28]
   19ed0:	e35e0000 	cmp	lr, #0	; 0x0
   19ed4:	e1a07001 	mov	r7, r1
   19ed8:	e240650d 	sub	r6, r0, #54525952	; 0x3400000
   19edc:	1a000013 	bne	19f30 <.text+0x9f30>
   19ee0:	e59f28d4 	ldr	r2, [pc, #2260]	; 1a7bc <.text+0xa7bc>
   19ee4:	e3a03000 	mov	r3, #0	; 0x0
   19ee8:	e1a0000a 	mov	r0, sl
   19eec:	e1a0100b 	mov	r1, fp
   19ef0:	eb000c48 	bl	1d018 <__aeabi_dsub>
   19ef4:	e1a02006 	mov	r2, r6
   19ef8:	e1a03007 	mov	r3, r7
   19efc:	e1a04000 	mov	r4, r0
   19f00:	e1a05001 	mov	r5, r1
   19f04:	eb000e74 	bl	1d8dc <__gedf2>
   19f08:	e3500000 	cmp	r0, #0	; 0x0
   19f0c:	ca0001f7 	bgt	1a6f0 <.text+0xa6f0>
   19f10:	e2862102 	add	r2, r6, #-2147483648	; 0x80000000
   19f14:	e1a03007 	mov	r3, r7
   19f18:	e1a00004 	mov	r0, r4
   19f1c:	e1a01005 	mov	r1, r5
   19f20:	eb000e6f 	bl	1d8e4 <__ledf2>
   19f24:	e3500000 	cmp	r0, #0	; 0x0
   19f28:	ba0001e6 	blt	1a6c8 <.text+0xa6c8>
   19f2c:	ea00008e 	b	1a16c <.text+0xa16c>
   19f30:	e59d101c 	ldr	r1, [sp, #28]
   19f34:	e59d2024 	ldr	r2, [sp, #36]
   19f38:	e58d1050 	str	r1, [sp, #80]
   19f3c:	e58d2054 	str	r2, [sp, #84]
   19f40:	e59d302c 	ldr	r3, [sp, #44]
   19f44:	e59dc050 	ldr	ip, [sp, #80]
   19f48:	e3530000 	cmp	r3, #0	; 0x0
   19f4c:	e59f2854 	ldr	r2, [pc, #2132]	; 1a7a8 <.text+0xa7a8>
   19f50:	e1a0318c 	mov	r3, ip, lsl #3
   19f54:	0a00003f 	beq	1a058 <.text+0xa058>
   19f58:	e0833002 	add	r3, r3, r2
   19f5c:	e913000c 	ldmdb	r3, {r2, r3}
   19f60:	e59f0858 	ldr	r0, [pc, #2136]	; 1a7c0 <.text+0xa7c0>
   19f64:	e3a01000 	mov	r1, #0	; 0x0
   19f68:	eb000dd8 	bl	1d6d0 <__aeabi_ddiv>
   19f6c:	e1a02006 	mov	r2, r6
   19f70:	e1a03007 	mov	r3, r7
   19f74:	eb000c27 	bl	1d018 <__aeabi_dsub>
   19f78:	e59d504c 	ldr	r5, [sp, #76]
   19f7c:	e1a0600a 	mov	r6, sl
   19f80:	e1a08000 	mov	r8, r0
   19f84:	e1a09001 	mov	r9, r1
   19f88:	e1a0700b 	mov	r7, fp
   19f8c:	e3a0a000 	mov	sl, #0	; 0x0
   19f90:	e1a01007 	mov	r1, r7
   19f94:	e1a00006 	mov	r0, r6
   19f98:	eb000e9f 	bl	1da1c <__aeabi_d2iz>
   19f9c:	e1a04000 	mov	r4, r0
   19fa0:	eb000ceb 	bl	1d354 <__aeabi_i2d>
   19fa4:	e1a02000 	mov	r2, r0
   19fa8:	e1a03001 	mov	r3, r1
   19fac:	e1a00006 	mov	r0, r6
   19fb0:	e1a01007 	mov	r1, r7
   19fb4:	eb000c17 	bl	1d018 <__aeabi_dsub>
   19fb8:	e59de04c 	ldr	lr, [sp, #76]
   19fbc:	e2844030 	add	r4, r4, #48	; 0x30
   19fc0:	e7ca400e 	strb	r4, [sl, lr]
   19fc4:	e1a02008 	mov	r2, r8
   19fc8:	e1a03009 	mov	r3, r9
   19fcc:	e1a07001 	mov	r7, r1
   19fd0:	e1a06000 	mov	r6, r0
   19fd4:	eb000e42 	bl	1d8e4 <__ledf2>
   19fd8:	e3500000 	cmp	r0, #0	; 0x0
   19fdc:	e1a02006 	mov	r2, r6
   19fe0:	e1a03007 	mov	r3, r7
   19fe4:	e28aa001 	add	sl, sl, #1	; 0x1
   19fe8:	e59f07c0 	ldr	r0, [pc, #1984]	; 1a7b0 <.text+0xa7b0>
   19fec:	e3a01000 	mov	r1, #0	; 0x0
   19ff0:	e2855001 	add	r5, r5, #1	; 0x1
   19ff4:	ba0002a2 	blt	1aa84 <.text+0xaa84>
   19ff8:	eb000c06 	bl	1d018 <__aeabi_dsub>
   19ffc:	e1a02008 	mov	r2, r8
   1a000:	e1a03009 	mov	r3, r9
   1a004:	eb000e36 	bl	1d8e4 <__ledf2>
   1a008:	e3500000 	cmp	r0, #0	; 0x0
   1a00c:	e59f27a0 	ldr	r2, [pc, #1952]	; 1a7b4 <.text+0xa7b4>
   1a010:	e3a03000 	mov	r3, #0	; 0x0
   1a014:	e1a00008 	mov	r0, r8
   1a018:	e1a01009 	mov	r1, r9
   1a01c:	ba0000ae 	blt	1a2dc <.text+0xa2dc>
   1a020:	e59dc050 	ldr	ip, [sp, #80]
   1a024:	e15a000c 	cmp	sl, ip
   1a028:	aa00004f 	bge	1a16c <.text+0xa16c>
   1a02c:	eb000d03 	bl	1d440 <__aeabi_dmul>
   1a030:	e59f277c 	ldr	r2, [pc, #1916]	; 1a7b4 <.text+0xa7b4>
   1a034:	e1a08000 	mov	r8, r0
   1a038:	e1a09001 	mov	r9, r1
   1a03c:	e1a00006 	mov	r0, r6
   1a040:	e1a01007 	mov	r1, r7
   1a044:	e3a03000 	mov	r3, #0	; 0x0
   1a048:	eb000cfc 	bl	1d440 <__aeabi_dmul>
   1a04c:	e1a06000 	mov	r6, r0
   1a050:	e1a07001 	mov	r7, r1
   1a054:	eaffffcd 	b	19f90 <.text+0x9f90>
   1a058:	e0833002 	add	r3, r3, r2
   1a05c:	e1a00006 	mov	r0, r6
   1a060:	e1a01007 	mov	r1, r7
   1a064:	e913000c 	ldmdb	r3, {r2, r3}
   1a068:	eb000cf4 	bl	1d440 <__aeabi_dmul>
   1a06c:	e1a0600a 	mov	r6, sl
   1a070:	e1a08000 	mov	r8, r0
   1a074:	e1a09001 	mov	r9, r1
   1a078:	e1a0700b 	mov	r7, fp
   1a07c:	e3a05000 	mov	r5, #0	; 0x0
   1a080:	e1a01007 	mov	r1, r7
   1a084:	e1a00006 	mov	r0, r6
   1a088:	eb000e63 	bl	1da1c <__aeabi_d2iz>
   1a08c:	e1a04000 	mov	r4, r0
   1a090:	eb000caf 	bl	1d354 <__aeabi_i2d>
   1a094:	e1a02000 	mov	r2, r0
   1a098:	e1a03001 	mov	r3, r1
   1a09c:	e1a00006 	mov	r0, r6
   1a0a0:	e1a01007 	mov	r1, r7
   1a0a4:	eb000bdb 	bl	1d018 <__aeabi_dsub>
   1a0a8:	e59de04c 	ldr	lr, [sp, #76]
   1a0ac:	e2844030 	add	r4, r4, #48	; 0x30
   1a0b0:	e7c5400e 	strb	r4, [r5, lr]
   1a0b4:	e59da050 	ldr	sl, [sp, #80]
   1a0b8:	e2855001 	add	r5, r5, #1	; 0x1
   1a0bc:	e155000a 	cmp	r5, sl
   1a0c0:	e1a06000 	mov	r6, r0
   1a0c4:	e1a07001 	mov	r7, r1
   1a0c8:	e59f26e4 	ldr	r2, [pc, #1764]	; 1a7b4 <.text+0xa7b4>
   1a0cc:	e3a03000 	mov	r3, #0	; 0x0
   1a0d0:	1a000021 	bne	1a15c <.text+0xa15c>
   1a0d4:	e59f26e4 	ldr	r2, [pc, #1764]	; 1a7c0 <.text+0xa7c0>
   1a0d8:	e3a03000 	mov	r3, #0	; 0x0
   1a0dc:	e1a00008 	mov	r0, r8
   1a0e0:	e1a01009 	mov	r1, r9
   1a0e4:	eb000bcc 	bl	1d01c <__adddf3>
   1a0e8:	e1a02000 	mov	r2, r0
   1a0ec:	e1a03001 	mov	r3, r1
   1a0f0:	e1a00006 	mov	r0, r6
   1a0f4:	e1a01007 	mov	r1, r7
   1a0f8:	eb000df7 	bl	1d8dc <__gedf2>
   1a0fc:	e59dc04c 	ldr	ip, [sp, #76]
   1a100:	e3500000 	cmp	r0, #0	; 0x0
   1a104:	e08c5005 	add	r5, ip, r5
   1a108:	ca000073 	bgt	1a2dc <.text+0xa2dc>
   1a10c:	e1a02008 	mov	r2, r8
   1a110:	e1a03009 	mov	r3, r9
   1a114:	e59f06a4 	ldr	r0, [pc, #1700]	; 1a7c0 <.text+0xa7c0>
   1a118:	e3a01000 	mov	r1, #0	; 0x0
   1a11c:	eb000bbd 	bl	1d018 <__aeabi_dsub>
   1a120:	e1a02000 	mov	r2, r0
   1a124:	e1a03001 	mov	r3, r1
   1a128:	e1a00006 	mov	r0, r6
   1a12c:	e1a01007 	mov	r1, r7
   1a130:	eb000deb 	bl	1d8e4 <__ledf2>
   1a134:	e3500000 	cmp	r0, #0	; 0x0
   1a138:	aa00000b 	bge	1a16c <.text+0xa16c>
   1a13c:	e1a02005 	mov	r2, r5
   1a140:	e5723001 	ldrb	r3, [r2, #-1]!
   1a144:	e3530030 	cmp	r3, #48	; 0x30
   1a148:	0afffffc 	beq	1a140 <.text+0xa140>
   1a14c:	e59de054 	ldr	lr, [sp, #84]
   1a150:	e2825001 	add	r5, r2, #1	; 0x1
   1a154:	e58de024 	str	lr, [sp, #36]
   1a158:	ea000260 	b	1aae0 <.text+0xaae0>
   1a15c:	eb000cb7 	bl	1d440 <__aeabi_dmul>
   1a160:	e1a06000 	mov	r6, r0
   1a164:	e1a07001 	mov	r7, r1
   1a168:	eaffffc4 	b	1a080 <.text+0xa080>
   1a16c:	e28da00c 	add	sl, sp, #12	; 0xc
   1a170:	e89a0c00 	ldmia	sl, {sl, fp}
   1a174:	e59d205c 	ldr	r2, [sp, #92]
   1a178:	e59d1024 	ldr	r1, [sp, #36]
   1a17c:	e1e03002 	mvn	r3, r2
   1a180:	e1a03fa3 	mov	r3, r3, lsr #31
   1a184:	e351000e 	cmp	r1, #14	; 0xe
   1a188:	c3a03000 	movgt	r3, #0	; 0x0
   1a18c:	e3530000 	cmp	r3, #0	; 0x0
   1a190:	0a000065 	beq	1a32c <.text+0xa32c>
   1a194:	e59d201c 	ldr	r2, [sp, #28]
   1a198:	e59dc084 	ldr	ip, [sp, #132]
   1a19c:	e3520000 	cmp	r2, #0	; 0x0
   1a1a0:	c3a03000 	movgt	r3, #0	; 0x0
   1a1a4:	d3a03001 	movle	r3, #1	; 0x1
   1a1a8:	e013cfac 	ands	ip, r3, ip, lsr #31
   1a1ac:	e59f35f4 	ldr	r3, [pc, #1524]	; 1a7a8 <.text+0xa7a8>
   1a1b0:	e0833181 	add	r3, r3, r1, lsl #3
   1a1b4:	e8930300 	ldmia	r3, {r8, r9}
   1a1b8:	01a0600a 	moveq	r6, sl
   1a1bc:	01a0700b 	moveq	r7, fp
   1a1c0:	059d504c 	ldreq	r5, [sp, #76]
   1a1c4:	0a00000c 	beq	1a1fc <.text+0xa1fc>
   1a1c8:	e3520000 	cmp	r2, #0	; 0x0
   1a1cc:	ba00013d 	blt	1a6c8 <.text+0xa6c8>
   1a1d0:	e59f25e4 	ldr	r2, [pc, #1508]	; 1a7bc <.text+0xa7bc>
   1a1d4:	e3a03000 	mov	r3, #0	; 0x0
   1a1d8:	e1a00008 	mov	r0, r8
   1a1dc:	e1a01009 	mov	r1, r9
   1a1e0:	eb000c96 	bl	1d440 <__aeabi_dmul>
   1a1e4:	e1a0200a 	mov	r2, sl
   1a1e8:	e1a0300b 	mov	r3, fp
   1a1ec:	eb000dba 	bl	1d8dc <__gedf2>
   1a1f0:	e3500000 	cmp	r0, #0	; 0x0
   1a1f4:	aa000133 	bge	1a6c8 <.text+0xa6c8>
   1a1f8:	ea00013c 	b	1a6f0 <.text+0xa6f0>
   1a1fc:	e1a02008 	mov	r2, r8
   1a200:	e1a03009 	mov	r3, r9
   1a204:	e1a00006 	mov	r0, r6
   1a208:	e1a01007 	mov	r1, r7
   1a20c:	eb000d2f 	bl	1d6d0 <__aeabi_ddiv>
   1a210:	eb000e01 	bl	1da1c <__aeabi_d2iz>
   1a214:	e1a04000 	mov	r4, r0
   1a218:	eb000c4d 	bl	1d354 <__aeabi_i2d>
   1a21c:	e1a02008 	mov	r2, r8
   1a220:	e1a03009 	mov	r3, r9
   1a224:	eb000c85 	bl	1d440 <__aeabi_dmul>
   1a228:	e1a02000 	mov	r2, r0
   1a22c:	e1a03001 	mov	r3, r1
   1a230:	e1a00006 	mov	r0, r6
   1a234:	e1a01007 	mov	r1, r7
   1a238:	eb000b76 	bl	1d018 <__aeabi_dsub>
   1a23c:	e284c030 	add	ip, r4, #48	; 0x30
   1a240:	e4c5c001 	strb	ip, [r5], #1
   1a244:	e59de04c 	ldr	lr, [sp, #76]
   1a248:	e59da01c 	ldr	sl, [sp, #28]
   1a24c:	e08ec00a 	add	ip, lr, sl
   1a250:	e155000c 	cmp	r5, ip
   1a254:	e59f2558 	ldr	r2, [pc, #1368]	; 1a7b4 <.text+0xa7b4>
   1a258:	e3a03000 	mov	r3, #0	; 0x0
   1a25c:	1a000029 	bne	1a308 <.text+0xa308>
   1a260:	e1a02000 	mov	r2, r0
   1a264:	e1a03001 	mov	r3, r1
   1a268:	eb000b6b 	bl	1d01c <__adddf3>
   1a26c:	e1a02008 	mov	r2, r8
   1a270:	e1a03009 	mov	r3, r9
   1a274:	e1a06000 	mov	r6, r0
   1a278:	e1a07001 	mov	r7, r1
   1a27c:	eb000d96 	bl	1d8dc <__gedf2>
   1a280:	e3500000 	cmp	r0, #0	; 0x0
   1a284:	ca000012 	bgt	1a2d4 <.text+0xa2d4>
   1a288:	e1a00006 	mov	r0, r6
   1a28c:	e1a01007 	mov	r1, r7
   1a290:	e1a02008 	mov	r2, r8
   1a294:	e1a03009 	mov	r3, r9
   1a298:	eb000d93 	bl	1d8ec <__cmpdf2>
   1a29c:	e3500000 	cmp	r0, #0	; 0x0
   1a2a0:	1a00020e 	bne	1aae0 <.text+0xaae0>
   1a2a4:	e3140001 	tst	r4, #1	; 0x1
   1a2a8:	1a000009 	bne	1a2d4 <.text+0xa2d4>
   1a2ac:	ea00020b 	b	1aae0 <.text+0xaae0>
   1a2b0:	e59dc04c 	ldr	ip, [sp, #76]
   1a2b4:	e152000c 	cmp	r2, ip
   1a2b8:	1a000008 	bne	1a2e0 <.text+0xa2e0>
   1a2bc:	e59de054 	ldr	lr, [sp, #84]
   1a2c0:	e3a03030 	mov	r3, #48	; 0x30
   1a2c4:	e28ee001 	add	lr, lr, #1	; 0x1
   1a2c8:	e58de054 	str	lr, [sp, #84]
   1a2cc:	e5cc3000 	strb	r3, [ip]
   1a2d0:	ea000005 	b	1a2ec <.text+0xa2ec>
   1a2d4:	e59d1024 	ldr	r1, [sp, #36]
   1a2d8:	e58d1054 	str	r1, [sp, #84]
   1a2dc:	e1a02005 	mov	r2, r5
   1a2e0:	e5723001 	ldrb	r3, [r2, #-1]!
   1a2e4:	e3530039 	cmp	r3, #57	; 0x39
   1a2e8:	0afffff0 	beq	1a2b0 <.text+0xa2b0>
   1a2ec:	e5d23000 	ldrb	r3, [r2]
   1a2f0:	e2833001 	add	r3, r3, #1	; 0x1
   1a2f4:	e4c23001 	strb	r3, [r2], #1
   1a2f8:	e59d3054 	ldr	r3, [sp, #84]
   1a2fc:	e1a05002 	mov	r5, r2
   1a300:	e58d3024 	str	r3, [sp, #36]
   1a304:	ea0001f5 	b	1aae0 <.text+0xaae0>
   1a308:	eb000c4c 	bl	1d440 <__aeabi_dmul>
   1a30c:	e3a02000 	mov	r2, #0	; 0x0
   1a310:	e3a03000 	mov	r3, #0	; 0x0
   1a314:	e1a06000 	mov	r6, r0
   1a318:	e1a07001 	mov	r7, r1
   1a31c:	eb000d72 	bl	1d8ec <__cmpdf2>
   1a320:	e3500000 	cmp	r0, #0	; 0x0
   1a324:	0a0001ed 	beq	1aae0 <.text+0xaae0>
   1a328:	eaffffb3 	b	1a1fc <.text+0xa1fc>
   1a32c:	e59dc02c 	ldr	ip, [sp, #44]
   1a330:	e35c0000 	cmp	ip, #0	; 0x0
   1a334:	059d6014 	ldreq	r6, [sp, #20]
   1a338:	059d5018 	ldreq	r5, [sp, #24]
   1a33c:	058dc044 	streq	ip, [sp, #68]
   1a340:	0a00002a 	beq	1a3f0 <.text+0xa3f0>
   1a344:	e59de004 	ldr	lr, [sp, #4]
   1a348:	e35e0001 	cmp	lr, #1	; 0x1
   1a34c:	ca000008 	bgt	1a374 <.text+0xa374>
   1a350:	e59d1038 	ldr	r1, [sp, #56]
   1a354:	e3510000 	cmp	r1, #0	; 0x0
   1a358:	059d3058 	ldreq	r3, [sp, #88]
   1a35c:	12823e43 	addne	r3, r2, #1072	; 0x430
   1a360:	e59d6014 	ldr	r6, [sp, #20]
   1a364:	e59d5018 	ldr	r5, [sp, #24]
   1a368:	12833003 	addne	r3, r3, #3	; 0x3
   1a36c:	02633036 	rsbeq	r3, r3, #54	; 0x36
   1a370:	ea000014 	b	1a3c8 <.text+0xa3c8>
   1a374:	e59d301c 	ldr	r3, [sp, #28]
   1a378:	e59dc018 	ldr	ip, [sp, #24]
   1a37c:	e2432001 	sub	r2, r3, #1	; 0x1
   1a380:	e15c0002 	cmp	ip, r2
   1a384:	b59de018 	ldrlt	lr, [sp, #24]
   1a388:	b59d1034 	ldrlt	r1, [sp, #52]
   1a38c:	b06e3002 	rsblt	r3, lr, r2
   1a390:	a062500c 	rsbge	r5, r2, ip
   1a394:	e59d201c 	ldr	r2, [sp, #28]
   1a398:	b08ee003 	addlt	lr, lr, r3
   1a39c:	b0811003 	addlt	r1, r1, r3
   1a3a0:	b58de018 	strlt	lr, [sp, #24]
   1a3a4:	b58d1034 	strlt	r1, [sp, #52]
   1a3a8:	b3a05000 	movlt	r5, #0	; 0x0
   1a3ac:	e3520000 	cmp	r2, #0	; 0x0
   1a3b0:	b59d3014 	ldrlt	r3, [sp, #20]
   1a3b4:	b59dc01c 	ldrlt	ip, [sp, #28]
   1a3b8:	a59d6014 	ldrge	r6, [sp, #20]
   1a3bc:	b06c6003 	rsblt	r6, ip, r3
   1a3c0:	a1a03002 	movge	r3, r2
   1a3c4:	b3a03000 	movlt	r3, #0	; 0x0
   1a3c8:	e59de030 	ldr	lr, [sp, #48]
   1a3cc:	e59d2014 	ldr	r2, [sp, #20]
   1a3d0:	e08ee003 	add	lr, lr, r3
   1a3d4:	e0822003 	add	r2, r2, r3
   1a3d8:	e59d0008 	ldr	r0, [sp, #8]
   1a3dc:	e3a01001 	mov	r1, #1	; 0x1
   1a3e0:	e58de030 	str	lr, [sp, #48]
   1a3e4:	e58d2014 	str	r2, [sp, #20]
   1a3e8:	eb000767 	bl	1c18c <_i2b>
   1a3ec:	e58d0044 	str	r0, [sp, #68]
   1a3f0:	e59d3030 	ldr	r3, [sp, #48]
   1a3f4:	e3560000 	cmp	r6, #0	; 0x0
   1a3f8:	c3530000 	cmpgt	r3, #0	; 0x0
   1a3fc:	da000008 	ble	1a424 <.text+0xa424>
   1a400:	e59dc030 	ldr	ip, [sp, #48]
   1a404:	e59de014 	ldr	lr, [sp, #20]
   1a408:	e1530006 	cmp	r3, r6
   1a40c:	a1a03006 	movge	r3, r6
   1a410:	e063c00c 	rsb	ip, r3, ip
   1a414:	e063e00e 	rsb	lr, r3, lr
   1a418:	e58dc030 	str	ip, [sp, #48]
   1a41c:	e58de014 	str	lr, [sp, #20]
   1a420:	e0636006 	rsb	r6, r3, r6
   1a424:	e59d1018 	ldr	r1, [sp, #24]
   1a428:	e3510000 	cmp	r1, #0	; 0x0
   1a42c:	da00001c 	ble	1a4a4 <.text+0xa4a4>
   1a430:	e59d202c 	ldr	r2, [sp, #44]
   1a434:	e3520000 	cmp	r2, #0	; 0x0
   1a438:	0a000014 	beq	1a490 <.text+0xa490>
   1a43c:	e3550000 	cmp	r5, #0	; 0x0
   1a440:	da00000d 	ble	1a47c <.text+0xa47c>
   1a444:	e59d1044 	ldr	r1, [sp, #68]
   1a448:	e1a02005 	mov	r2, r5
   1a44c:	e59d0008 	ldr	r0, [sp, #8]
   1a450:	eb000788 	bl	1c278 <_pow5mult>
   1a454:	e58d0044 	str	r0, [sp, #68]
   1a458:	e59d1044 	ldr	r1, [sp, #68]
   1a45c:	e59d203c 	ldr	r2, [sp, #60]
   1a460:	e59d0008 	ldr	r0, [sp, #8]
   1a464:	eb0006e2 	bl	1bff4 <_multiply>
   1a468:	e59d103c 	ldr	r1, [sp, #60]
   1a46c:	e1a04000 	mov	r4, r0
   1a470:	e59d0008 	ldr	r0, [sp, #8]
   1a474:	eb00051b 	bl	1b8e8 <_Bfree>
   1a478:	e58d403c 	str	r4, [sp, #60]
   1a47c:	e59d3018 	ldr	r3, [sp, #24]
   1a480:	e0532005 	subs	r2, r3, r5
   1a484:	159d103c 	ldrne	r1, [sp, #60]
   1a488:	1a000002 	bne	1a498 <.text+0xa498>
   1a48c:	ea000004 	b	1a4a4 <.text+0xa4a4>
   1a490:	e59d103c 	ldr	r1, [sp, #60]
   1a494:	e59d2018 	ldr	r2, [sp, #24]
   1a498:	e59d0008 	ldr	r0, [sp, #8]
   1a49c:	eb000775 	bl	1c278 <_pow5mult>
   1a4a0:	e58d003c 	str	r0, [sp, #60]
   1a4a4:	e59d0008 	ldr	r0, [sp, #8]
   1a4a8:	e3a01001 	mov	r1, #1	; 0x1
   1a4ac:	eb000736 	bl	1c18c <_i2b>
   1a4b0:	e59dc034 	ldr	ip, [sp, #52]
   1a4b4:	e35c0000 	cmp	ip, #0	; 0x0
   1a4b8:	e58d0048 	str	r0, [sp, #72]
   1a4bc:	da000004 	ble	1a4d4 <.text+0xa4d4>
   1a4c0:	e1a01000 	mov	r1, r0
   1a4c4:	e1a0200c 	mov	r2, ip
   1a4c8:	e59d0008 	ldr	r0, [sp, #8]
   1a4cc:	eb000769 	bl	1c278 <_pow5mult>
   1a4d0:	e58d0048 	str	r0, [sp, #72]
   1a4d4:	e59de004 	ldr	lr, [sp, #4]
   1a4d8:	e35e0001 	cmp	lr, #1	; 0x1
   1a4dc:	ca000011 	bgt	1a528 <.text+0xa528>
   1a4e0:	e35b0000 	cmp	fp, #0	; 0x0
   1a4e4:	1a00000f 	bne	1a528 <.text+0xa528>
   1a4e8:	e3ca34ff 	bic	r3, sl, #-16777216	; 0xff000000
   1a4ec:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1a4f0:	e3530000 	cmp	r3, #0	; 0x0
   1a4f4:	1a00000b 	bne	1a528 <.text+0xa528>
   1a4f8:	e59f3270 	ldr	r3, [pc, #624]	; 1a770 <.text+0xa770>
   1a4fc:	e00a3003 	and	r3, sl, r3
   1a500:	e3530000 	cmp	r3, #0	; 0x0
   1a504:	0a000007 	beq	1a528 <.text+0xa528>
   1a508:	e59d1014 	ldr	r1, [sp, #20]
   1a50c:	e59d2030 	ldr	r2, [sp, #48]
   1a510:	e2811001 	add	r1, r1, #1	; 0x1
   1a514:	e2822001 	add	r2, r2, #1	; 0x1
   1a518:	e3a04001 	mov	r4, #1	; 0x1
   1a51c:	e58d1014 	str	r1, [sp, #20]
   1a520:	e58d2030 	str	r2, [sp, #48]
   1a524:	ea000000 	b	1a52c <.text+0xa52c>
   1a528:	e3a04000 	mov	r4, #0	; 0x0
   1a52c:	e59d3034 	ldr	r3, [sp, #52]
   1a530:	e3530000 	cmp	r3, #0	; 0x0
   1a534:	02833001 	addeq	r3, r3, #1	; 0x1
   1a538:	0a000005 	beq	1a554 <.text+0xa554>
   1a53c:	e59dc048 	ldr	ip, [sp, #72]
   1a540:	e59c3010 	ldr	r3, [ip, #16]
   1a544:	e08c3103 	add	r3, ip, r3, lsl #2
   1a548:	e5930010 	ldr	r0, [r3, #16]
   1a54c:	eb0004ec 	bl	1b904 <_hi0bits>
   1a550:	e2603020 	rsb	r3, r0, #32	; 0x20
   1a554:	e59de030 	ldr	lr, [sp, #48]
   1a558:	e083300e 	add	r3, r3, lr
   1a55c:	e213301f 	ands	r3, r3, #31	; 0x1f
   1a560:	0a00000b 	beq	1a594 <.text+0xa594>
   1a564:	e2633020 	rsb	r3, r3, #32	; 0x20
   1a568:	e3530004 	cmp	r3, #4	; 0x4
   1a56c:	da000006 	ble	1a58c <.text+0xa58c>
   1a570:	e59d1014 	ldr	r1, [sp, #20]
   1a574:	e2433004 	sub	r3, r3, #4	; 0x4
   1a578:	e08ee003 	add	lr, lr, r3
   1a57c:	e0811003 	add	r1, r1, r3
   1a580:	e58de030 	str	lr, [sp, #48]
   1a584:	e58d1014 	str	r1, [sp, #20]
   1a588:	ea000008 	b	1a5b0 <.text+0xa5b0>
   1a58c:	e3530003 	cmp	r3, #3	; 0x3
   1a590:	ca000007 	bgt	1a5b4 <.text+0xa5b4>
   1a594:	e59d2030 	ldr	r2, [sp, #48]
   1a598:	e59dc014 	ldr	ip, [sp, #20]
   1a59c:	e283301c 	add	r3, r3, #28	; 0x1c
   1a5a0:	e0822003 	add	r2, r2, r3
   1a5a4:	e08cc003 	add	ip, ip, r3
   1a5a8:	e58d2030 	str	r2, [sp, #48]
   1a5ac:	e58dc014 	str	ip, [sp, #20]
   1a5b0:	e0866003 	add	r6, r6, r3
   1a5b4:	e59de014 	ldr	lr, [sp, #20]
   1a5b8:	e35e0000 	cmp	lr, #0	; 0x0
   1a5bc:	da000004 	ble	1a5d4 <.text+0xa5d4>
   1a5c0:	e59d103c 	ldr	r1, [sp, #60]
   1a5c4:	e1a0200e 	mov	r2, lr
   1a5c8:	e59d0008 	ldr	r0, [sp, #8]
   1a5cc:	eb000650 	bl	1bf14 <_lshift>
   1a5d0:	e58d003c 	str	r0, [sp, #60]
   1a5d4:	e59d1030 	ldr	r1, [sp, #48]
   1a5d8:	e3510000 	cmp	r1, #0	; 0x0
   1a5dc:	da000004 	ble	1a5f4 <.text+0xa5f4>
   1a5e0:	e59d1048 	ldr	r1, [sp, #72]
   1a5e4:	e59d2030 	ldr	r2, [sp, #48]
   1a5e8:	e59d0008 	ldr	r0, [sp, #8]
   1a5ec:	eb000648 	bl	1bf14 <_lshift>
   1a5f0:	e58d0048 	str	r0, [sp, #72]
   1a5f4:	e59d2028 	ldr	r2, [sp, #40]
   1a5f8:	e3520000 	cmp	r2, #0	; 0x0
   1a5fc:	0a00001a 	beq	1a66c <.text+0xa66c>
   1a600:	e59d003c 	ldr	r0, [sp, #60]
   1a604:	e59d1048 	ldr	r1, [sp, #72]
   1a608:	eb0004f7 	bl	1b9ec <__mcmp>
   1a60c:	e3500000 	cmp	r0, #0	; 0x0
   1a610:	aa000015 	bge	1a66c <.text+0xa66c>
   1a614:	e3a03000 	mov	r3, #0	; 0x0
   1a618:	e59d103c 	ldr	r1, [sp, #60]
   1a61c:	e59d0008 	ldr	r0, [sp, #8]
   1a620:	e3a0200a 	mov	r2, #10	; 0xa
   1a624:	eb0006e1 	bl	1c1b0 <_multadd>
   1a628:	e59d302c 	ldr	r3, [sp, #44]
   1a62c:	e59dc024 	ldr	ip, [sp, #36]
   1a630:	e3530000 	cmp	r3, #0	; 0x0
   1a634:	059de020 	ldreq	lr, [sp, #32]
   1a638:	e24cc001 	sub	ip, ip, #1	; 0x1
   1a63c:	e58d003c 	str	r0, [sp, #60]
   1a640:	e58dc024 	str	ip, [sp, #36]
   1a644:	058de01c 	streq	lr, [sp, #28]
   1a648:	0a000007 	beq	1a66c <.text+0xa66c>
   1a64c:	e59d1044 	ldr	r1, [sp, #68]
   1a650:	e59d0008 	ldr	r0, [sp, #8]
   1a654:	e3a0200a 	mov	r2, #10	; 0xa
   1a658:	e3a03000 	mov	r3, #0	; 0x0
   1a65c:	eb0006d3 	bl	1c1b0 <_multadd>
   1a660:	e59d1020 	ldr	r1, [sp, #32]
   1a664:	e58d0044 	str	r0, [sp, #68]
   1a668:	e58d101c 	str	r1, [sp, #28]
   1a66c:	e59d201c 	ldr	r2, [sp, #28]
   1a670:	e59dc004 	ldr	ip, [sp, #4]
   1a674:	e3520000 	cmp	r2, #0	; 0x0
   1a678:	c3a03000 	movgt	r3, #0	; 0x0
   1a67c:	d3a03001 	movle	r3, #1	; 0x1
   1a680:	e35c0002 	cmp	ip, #2	; 0x2
   1a684:	d3a03000 	movle	r3, #0	; 0x0
   1a688:	e3530000 	cmp	r3, #0	; 0x0
   1a68c:	0a000023 	beq	1a720 <.text+0xa720>
   1a690:	e3520000 	cmp	r2, #0	; 0x0
   1a694:	ba00000e 	blt	1a6d4 <.text+0xa6d4>
   1a698:	e59d1048 	ldr	r1, [sp, #72]
   1a69c:	e3a02005 	mov	r2, #5	; 0x5
   1a6a0:	e3a03000 	mov	r3, #0	; 0x0
   1a6a4:	e59d0008 	ldr	r0, [sp, #8]
   1a6a8:	eb0006c0 	bl	1c1b0 <_multadd>
   1a6ac:	e58d0048 	str	r0, [sp, #72]
   1a6b0:	e59d1048 	ldr	r1, [sp, #72]
   1a6b4:	e59d003c 	ldr	r0, [sp, #60]
   1a6b8:	eb0004cb 	bl	1b9ec <__mcmp>
   1a6bc:	e3500000 	cmp	r0, #0	; 0x0
   1a6c0:	ca00000d 	bgt	1a6fc <.text+0xa6fc>
   1a6c4:	ea000002 	b	1a6d4 <.text+0xa6d4>
   1a6c8:	e3a0e000 	mov	lr, #0	; 0x0
   1a6cc:	e58de044 	str	lr, [sp, #68]
   1a6d0:	e58de048 	str	lr, [sp, #72]
   1a6d4:	e59d1084 	ldr	r1, [sp, #132]
   1a6d8:	e59d504c 	ldr	r5, [sp, #76]
   1a6dc:	e1e01001 	mvn	r1, r1
   1a6e0:	e3a02000 	mov	r2, #0	; 0x0
   1a6e4:	e58d1024 	str	r1, [sp, #36]
   1a6e8:	e58d2040 	str	r2, [sp, #64]
   1a6ec:	ea0000ec 	b	1aaa4 <.text+0xaaa4>
   1a6f0:	e3a03000 	mov	r3, #0	; 0x0
   1a6f4:	e58d3044 	str	r3, [sp, #68]
   1a6f8:	e58d3048 	str	r3, [sp, #72]
   1a6fc:	e59d504c 	ldr	r5, [sp, #76]
   1a700:	e3a03031 	mov	r3, #49	; 0x31
   1a704:	e4c53001 	strb	r3, [r5], #1
   1a708:	e59da024 	ldr	sl, [sp, #36]
   1a70c:	e3a0c000 	mov	ip, #0	; 0x0
   1a710:	e28aa001 	add	sl, sl, #1	; 0x1
   1a714:	e58da024 	str	sl, [sp, #36]
   1a718:	e58dc040 	str	ip, [sp, #64]
   1a71c:	ea0000e0 	b	1aaa4 <.text+0xaaa4>
   1a720:	e59de02c 	ldr	lr, [sp, #44]
   1a724:	e35e0000 	cmp	lr, #0	; 0x0
   1a728:	03a04000 	moveq	r4, #0	; 0x0
   1a72c:	0a0000a4 	beq	1a9c4 <.text+0xa9c4>
   1a730:	e3560000 	cmp	r6, #0	; 0x0
   1a734:	da000004 	ble	1a74c <.text+0xa74c>
   1a738:	e59d1044 	ldr	r1, [sp, #68]
   1a73c:	e1a02006 	mov	r2, r6
   1a740:	e59d0008 	ldr	r0, [sp, #8]
   1a744:	eb0005f2 	bl	1bf14 <_lshift>
   1a748:	e58d0044 	str	r0, [sp, #68]
   1a74c:	e3540000 	cmp	r4, #0	; 0x0
   1a750:	059d0044 	ldreq	r0, [sp, #68]
   1a754:	0a00002a 	beq	1a804 <.text+0xa804>
   1a758:	ea000019 	b	1a7c4 <.text+0xa7c4>
   1a75c:	e59d104c 	ldr	r1, [sp, #76]
   1a760:	e3a02000 	mov	r2, #0	; 0x0
   1a764:	e0818004 	add	r8, r1, r4
   1a768:	e58d2040 	str	r2, [sp, #64]
   1a76c:	ea0000a5 	b	1aa08 <.text+0xaa08>
   1a770:	7ff00000 	svcvc	0x00f00000	; IMB
   1a774:	0000270f 	andeq	r2, r0, pc, lsl #14
   1a778:	0001e36c 	andeq	lr, r1, ip, ror #6
   1a77c:	0001e378 	andeq	lr, r1, r8, ror r3
   1a780:	0001e341 	andeq	lr, r1, r1, asr #6
   1a784:	0001e340 	andeq	lr, r1, r0, asr #6
   1a788:	41f00000 	mvnmis	r0, r0
   1a78c:	3ff80000 	svccc	0x00f80000
   1a790:	3fd287a7 	svccc	0x00d287a7
   1a794:	636f4361 	cmnvs	pc, #-2080374783	; 0x84000001
   1a798:	3fc68a28 	svccc	0x00c68a28
   1a79c:	8b60c8b3 	blhi	184ca70 <__ctors_end__+0x182e6e4>
   1a7a0:	3fd34413 	svccc	0x00d34413
   1a7a4:	509f79fb 	ldrplsh	r7, [pc], fp
   1a7a8:	0001dbec 	andeq	sp, r1, ip, ror #23
   1a7ac:	0001dcb4 	streqh	sp, [r1], -r4
   1a7b0:	3ff00000 	svccc	0x00f00000	; IMB
   1a7b4:	40240000 	eormi	r0, r4, r0
   1a7b8:	401c0000 	andmis	r0, ip, r0
   1a7bc:	40140000 	andmis	r0, r4, r0
   1a7c0:	3fe00000 	svccc	0x00e00000
   1a7c4:	e59d3044 	ldr	r3, [sp, #68]
   1a7c8:	e59d0008 	ldr	r0, [sp, #8]
   1a7cc:	e5931004 	ldr	r1, [r3, #4]
   1a7d0:	eb00051c 	bl	1bc48 <_Balloc>
   1a7d4:	e59dc044 	ldr	ip, [sp, #68]
   1a7d8:	e59c2010 	ldr	r2, [ip, #16]
   1a7dc:	e1a02102 	mov	r2, r2, lsl #2
   1a7e0:	e1a04000 	mov	r4, r0
   1a7e4:	e2822008 	add	r2, r2, #8	; 0x8
   1a7e8:	e28c100c 	add	r1, ip, #12	; 0xc
   1a7ec:	e280000c 	add	r0, r0, #12	; 0xc
   1a7f0:	ebfff210 	bl	17038 <memcpy>
   1a7f4:	e59d0008 	ldr	r0, [sp, #8]
   1a7f8:	e1a01004 	mov	r1, r4
   1a7fc:	e3a02001 	mov	r2, #1	; 0x1
   1a800:	eb0005c3 	bl	1bf14 <_lshift>
   1a804:	e59de044 	ldr	lr, [sp, #68]
   1a808:	e59d804c 	ldr	r8, [sp, #76]
   1a80c:	e58de040 	str	lr, [sp, #64]
   1a810:	e58d0044 	str	r0, [sp, #68]
   1a814:	e20b4001 	and	r4, fp, #1	; 0x1
   1a818:	e59d1048 	ldr	r1, [sp, #72]
   1a81c:	e59d003c 	ldr	r0, [sp, #60]
   1a820:	ebfffb7f 	bl	19624 <quorem>
   1a824:	e59d1040 	ldr	r1, [sp, #64]
   1a828:	e2806030 	add	r6, r0, #48	; 0x30
   1a82c:	e59d003c 	ldr	r0, [sp, #60]
   1a830:	eb00046d 	bl	1b9ec <__mcmp>
   1a834:	e59d1048 	ldr	r1, [sp, #72]
   1a838:	e1a0a000 	mov	sl, r0
   1a83c:	e59d2044 	ldr	r2, [sp, #68]
   1a840:	e59d0008 	ldr	r0, [sp, #8]
   1a844:	eb000569 	bl	1bdf0 <__mdiff>
   1a848:	e590300c 	ldr	r3, [r0, #12]
   1a84c:	e3530000 	cmp	r3, #0	; 0x0
   1a850:	e1a07000 	mov	r7, r0
   1a854:	13a09001 	movne	r9, #1	; 0x1
   1a858:	1a000003 	bne	1a86c <.text+0xa86c>
   1a85c:	e59d003c 	ldr	r0, [sp, #60]
   1a860:	e1a01007 	mov	r1, r7
   1a864:	eb000460 	bl	1b9ec <__mcmp>
   1a868:	e1a09000 	mov	r9, r0
   1a86c:	e1a01007 	mov	r1, r7
   1a870:	e59d0008 	ldr	r0, [sp, #8]
   1a874:	eb00041b 	bl	1b8e8 <_Bfree>
   1a878:	e59d1004 	ldr	r1, [sp, #4]
   1a87c:	e1991001 	orrs	r1, r9, r1
   1a880:	1a000006 	bne	1a8a0 <.text+0xa8a0>
   1a884:	e3540000 	cmp	r4, #0	; 0x0
   1a888:	1a000004 	bne	1a8a0 <.text+0xa8a0>
   1a88c:	e3560039 	cmp	r6, #57	; 0x39
   1a890:	0a000022 	beq	1a920 <.text+0xa920>
   1a894:	e35a0000 	cmp	sl, #0	; 0x0
   1a898:	c2866001 	addgt	r6, r6, #1	; 0x1
   1a89c:	ea000017 	b	1a900 <.text+0xa900>
   1a8a0:	e35a0000 	cmp	sl, #0	; 0x0
   1a8a4:	ba000004 	blt	1a8bc <.text+0xa8bc>
   1a8a8:	e59d2004 	ldr	r2, [sp, #4]
   1a8ac:	e19a2002 	orrs	r2, sl, r2
   1a8b0:	1a000014 	bne	1a908 <.text+0xa908>
   1a8b4:	e3540000 	cmp	r4, #0	; 0x0
   1a8b8:	1a000012 	bne	1a908 <.text+0xa908>
   1a8bc:	e3590000 	cmp	r9, #0	; 0x0
   1a8c0:	da00000e 	ble	1a900 <.text+0xa900>
   1a8c4:	e59d103c 	ldr	r1, [sp, #60]
   1a8c8:	e3a02001 	mov	r2, #1	; 0x1
   1a8cc:	e59d0008 	ldr	r0, [sp, #8]
   1a8d0:	eb00058f 	bl	1bf14 <_lshift>
   1a8d4:	e59d1048 	ldr	r1, [sp, #72]
   1a8d8:	e58d003c 	str	r0, [sp, #60]
   1a8dc:	eb000442 	bl	1b9ec <__mcmp>
   1a8e0:	e3500000 	cmp	r0, #0	; 0x0
   1a8e4:	ca000002 	bgt	1a8f4 <.text+0xa8f4>
   1a8e8:	1a000004 	bne	1a900 <.text+0xa900>
   1a8ec:	e3160001 	tst	r6, #1	; 0x1
   1a8f0:	0a000002 	beq	1a900 <.text+0xa900>
   1a8f4:	e2866001 	add	r6, r6, #1	; 0x1
   1a8f8:	e356003a 	cmp	r6, #58	; 0x3a
   1a8fc:	0a000007 	beq	1a920 <.text+0xa920>
   1a900:	e4c86001 	strb	r6, [r8], #1
   1a904:	ea000008 	b	1a92c <.text+0xa92c>
   1a908:	e3590000 	cmp	r9, #0	; 0x0
   1a90c:	da000008 	ble	1a934 <.text+0xa934>
   1a910:	e3560039 	cmp	r6, #57	; 0x39
   1a914:	12863001 	addne	r3, r6, #1	; 0x1
   1a918:	14c83001 	strneb	r3, [r8], #1
   1a91c:	1a000002 	bne	1a92c <.text+0xa92c>
   1a920:	e3a03039 	mov	r3, #57	; 0x39
   1a924:	e4c83001 	strb	r3, [r8], #1
   1a928:	ea00004d 	b	1aa64 <.text+0xaa64>
   1a92c:	e1a05008 	mov	r5, r8
   1a930:	ea00005b 	b	1aaa4 <.text+0xaaa4>
   1a934:	e4c86001 	strb	r6, [r8], #1
   1a938:	e59da04c 	ldr	sl, [sp, #76]
   1a93c:	e59dc01c 	ldr	ip, [sp, #28]
   1a940:	e08a300c 	add	r3, sl, ip
   1a944:	e1580003 	cmp	r8, r3
   1a948:	0a00002e 	beq	1aa08 <.text+0xaa08>
   1a94c:	e59d103c 	ldr	r1, [sp, #60]
   1a950:	e59d0008 	ldr	r0, [sp, #8]
   1a954:	e3a0200a 	mov	r2, #10	; 0xa
   1a958:	e3a03000 	mov	r3, #0	; 0x0
   1a95c:	eb000613 	bl	1c1b0 <_multadd>
   1a960:	e59de040 	ldr	lr, [sp, #64]
   1a964:	e59d1044 	ldr	r1, [sp, #68]
   1a968:	e15e0001 	cmp	lr, r1
   1a96c:	e58d003c 	str	r0, [sp, #60]
   1a970:	1a000006 	bne	1a990 <.text+0xa990>
   1a974:	e59d0008 	ldr	r0, [sp, #8]
   1a978:	e3a0200a 	mov	r2, #10	; 0xa
   1a97c:	e3a03000 	mov	r3, #0	; 0x0
   1a980:	eb00060a 	bl	1c1b0 <_multadd>
   1a984:	e58d0044 	str	r0, [sp, #68]
   1a988:	e58d0040 	str	r0, [sp, #64]
   1a98c:	eaffffa1 	b	1a818 <.text+0xa818>
   1a990:	e59d1040 	ldr	r1, [sp, #64]
   1a994:	e3a0200a 	mov	r2, #10	; 0xa
   1a998:	e3a03000 	mov	r3, #0	; 0x0
   1a99c:	e59d0008 	ldr	r0, [sp, #8]
   1a9a0:	eb000602 	bl	1c1b0 <_multadd>
   1a9a4:	e59d1044 	ldr	r1, [sp, #68]
   1a9a8:	e58d0040 	str	r0, [sp, #64]
   1a9ac:	e3a0200a 	mov	r2, #10	; 0xa
   1a9b0:	e59d0008 	ldr	r0, [sp, #8]
   1a9b4:	e3a03000 	mov	r3, #0	; 0x0
   1a9b8:	eb0005fc 	bl	1c1b0 <_multadd>
   1a9bc:	e58d0044 	str	r0, [sp, #68]
   1a9c0:	eaffff94 	b	1a818 <.text+0xa818>
   1a9c4:	e59d1048 	ldr	r1, [sp, #72]
   1a9c8:	e59d003c 	ldr	r0, [sp, #60]
   1a9cc:	ebfffb14 	bl	19624 <quorem>
   1a9d0:	e59da04c 	ldr	sl, [sp, #76]
   1a9d4:	e2806030 	add	r6, r0, #48	; 0x30
   1a9d8:	e59d103c 	ldr	r1, [sp, #60]
   1a9dc:	e59d0008 	ldr	r0, [sp, #8]
   1a9e0:	e7c4600a 	strb	r6, [r4, sl]
   1a9e4:	e59dc01c 	ldr	ip, [sp, #28]
   1a9e8:	e2844001 	add	r4, r4, #1	; 0x1
   1a9ec:	e154000c 	cmp	r4, ip
   1a9f0:	e3a0200a 	mov	r2, #10	; 0xa
   1a9f4:	e3a03000 	mov	r3, #0	; 0x0
   1a9f8:	aaffff57 	bge	1a75c <.text+0xa75c>
   1a9fc:	eb0005eb 	bl	1c1b0 <_multadd>
   1aa00:	e58d003c 	str	r0, [sp, #60]
   1aa04:	eaffffee 	b	1a9c4 <.text+0xa9c4>
   1aa08:	e59d103c 	ldr	r1, [sp, #60]
   1aa0c:	e3a02001 	mov	r2, #1	; 0x1
   1aa10:	e59d0008 	ldr	r0, [sp, #8]
   1aa14:	eb00053e 	bl	1bf14 <_lshift>
   1aa18:	e59d1048 	ldr	r1, [sp, #72]
   1aa1c:	e58d003c 	str	r0, [sp, #60]
   1aa20:	eb0003f1 	bl	1b9ec <__mcmp>
   1aa24:	e3500000 	cmp	r0, #0	; 0x0
   1aa28:	ca00000d 	bgt	1aa64 <.text+0xaa64>
   1aa2c:	1a000017 	bne	1aa90 <.text+0xaa90>
   1aa30:	e3160001 	tst	r6, #1	; 0x1
   1aa34:	1a00000a 	bne	1aa64 <.text+0xaa64>
   1aa38:	ea000014 	b	1aa90 <.text+0xaa90>
   1aa3c:	e59de04c 	ldr	lr, [sp, #76]
   1aa40:	e152000e 	cmp	r2, lr
   1aa44:	1a000007 	bne	1aa68 <.text+0xaa68>
   1aa48:	e1a0500e 	mov	r5, lr
   1aa4c:	e3a03031 	mov	r3, #49	; 0x31
   1aa50:	e4c53001 	strb	r3, [r5], #1
   1aa54:	e59d1024 	ldr	r1, [sp, #36]
   1aa58:	e2811001 	add	r1, r1, #1	; 0x1
   1aa5c:	e58d1024 	str	r1, [sp, #36]
   1aa60:	ea00000f 	b	1aaa4 <.text+0xaaa4>
   1aa64:	e1a02008 	mov	r2, r8
   1aa68:	e5723001 	ldrb	r3, [r2, #-1]!
   1aa6c:	e3530039 	cmp	r3, #57	; 0x39
   1aa70:	0afffff1 	beq	1aa3c <.text+0xaa3c>
   1aa74:	e2833001 	add	r3, r3, #1	; 0x1
   1aa78:	e4c23001 	strb	r3, [r2], #1
   1aa7c:	e1a05002 	mov	r5, r2
   1aa80:	ea000007 	b	1aaa4 <.text+0xaaa4>
   1aa84:	e59d2054 	ldr	r2, [sp, #84]
   1aa88:	e58d2024 	str	r2, [sp, #36]
   1aa8c:	ea000013 	b	1aae0 <.text+0xaae0>
   1aa90:	e1a02008 	mov	r2, r8
   1aa94:	e5723001 	ldrb	r3, [r2, #-1]!
   1aa98:	e3530030 	cmp	r3, #48	; 0x30
   1aa9c:	0afffffc 	beq	1aa94 <.text+0xaa94>
   1aaa0:	e2825001 	add	r5, r2, #1	; 0x1
   1aaa4:	e59d1048 	ldr	r1, [sp, #72]
   1aaa8:	e59d0008 	ldr	r0, [sp, #8]
   1aaac:	eb00038d 	bl	1b8e8 <_Bfree>
   1aab0:	e59d3044 	ldr	r3, [sp, #68]
   1aab4:	e3530000 	cmp	r3, #0	; 0x0
   1aab8:	0a000008 	beq	1aae0 <.text+0xaae0>
   1aabc:	e59da040 	ldr	sl, [sp, #64]
   1aac0:	e35a0000 	cmp	sl, #0	; 0x0
   1aac4:	115a0003 	cmpne	sl, r3
   1aac8:	11a0100a 	movne	r1, sl
   1aacc:	159d0008 	ldrne	r0, [sp, #8]
   1aad0:	1b000384 	blne	1b8e8 <_Bfree>
   1aad4:	e59d1044 	ldr	r1, [sp, #68]
   1aad8:	e59d0008 	ldr	r0, [sp, #8]
   1aadc:	eb000381 	bl	1b8e8 <_Bfree>
   1aae0:	e59d0008 	ldr	r0, [sp, #8]
   1aae4:	e59d103c 	ldr	r1, [sp, #60]
   1aae8:	eb00037e 	bl	1b8e8 <_Bfree>
   1aaec:	e3a03000 	mov	r3, #0	; 0x0
   1aaf0:	e59dc024 	ldr	ip, [sp, #36]
   1aaf4:	e59de090 	ldr	lr, [sp, #144]
   1aaf8:	e5c53000 	strb	r3, [r5]
   1aafc:	e59d1088 	ldr	r1, [sp, #136]
   1ab00:	e28c2001 	add	r2, ip, #1	; 0x1
   1ab04:	e35e0000 	cmp	lr, #0	; 0x0
   1ab08:	e5812000 	str	r2, [r1]
   1ab0c:	159d2090 	ldrne	r2, [sp, #144]
   1ab10:	e59d004c 	ldr	r0, [sp, #76]
   1ab14:	15825000 	strne	r5, [r2]
   1ab18:	e28dd060 	add	sp, sp, #96	; 0x60
   1ab1c:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab20:	e12fff1e 	bx	lr

0001ab24 <fflush>:
   1ab24:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1ab28:	e2504000 	subs	r4, r0, #0	; 0x0
   1ab2c:	1a000004 	bne	1ab44 <fflush+0x20>
   1ab30:	e59f30b4 	ldr	r3, [pc, #180]	; 1abec <.text+0xabec>
   1ab34:	e59f10b4 	ldr	r1, [pc, #180]	; 1abf0 <.text+0xabf0>
   1ab38:	e5930000 	ldr	r0, [r3]
   1ab3c:	eb0002b3 	bl	1b610 <_fwalk>
   1ab40:	ea000027 	b	1abe4 <fflush+0xc0>
   1ab44:	e59f30a8 	ldr	r3, [pc, #168]	; 1abf4 <.text+0xabf4>
   1ab48:	e5930000 	ldr	r0, [r3]
   1ab4c:	e3500000 	cmp	r0, #0	; 0x0
   1ab50:	0a000002 	beq	1ab60 <fflush+0x3c>
   1ab54:	e5903038 	ldr	r3, [r0, #56]
   1ab58:	e3530000 	cmp	r3, #0	; 0x0
   1ab5c:	0b00003c 	bleq	1ac54 <__sinit>
   1ab60:	e1d430fc 	ldrsh	r3, [r4, #12]
   1ab64:	e3130008 	tst	r3, #8	; 0x8
   1ab68:	0a00001c 	beq	1abe0 <fflush+0xbc>
   1ab6c:	e5946010 	ldr	r6, [r4, #16]
   1ab70:	e3560000 	cmp	r6, #0	; 0x0
   1ab74:	0a000019 	beq	1abe0 <fflush+0xbc>
   1ab78:	e3130003 	tst	r3, #3	; 0x3
   1ab7c:	e5942000 	ldr	r2, [r4]
   1ab80:	13a03000 	movne	r3, #0	; 0x0
   1ab84:	e5846000 	str	r6, [r4]
   1ab88:	1a000006 	bne	1aba8 <fflush+0x84>
   1ab8c:	ea000004 	b	1aba4 <fflush+0x80>
   1ab90:	e1d430bc 	ldrh	r3, [r4, #12]
   1ab94:	e3e00000 	mvn	r0, #0	; 0x0
   1ab98:	e3833040 	orr	r3, r3, #64	; 0x40
   1ab9c:	e1c430bc 	strh	r3, [r4, #12]
   1aba0:	ea00000f 	b	1abe4 <fflush+0xc0>
   1aba4:	e5943014 	ldr	r3, [r4, #20]
   1aba8:	e0665002 	rsb	r5, r6, r2
   1abac:	e5843008 	str	r3, [r4, #8]
   1abb0:	ea000007 	b	1abd4 <fflush+0xb0>
   1abb4:	e594001c 	ldr	r0, [r4, #28]
   1abb8:	e594c024 	ldr	ip, [r4, #36]
   1abbc:	e1a0e00f 	mov	lr, pc
   1abc0:	e12fff1c 	bx	ip
   1abc4:	e3500000 	cmp	r0, #0	; 0x0
   1abc8:	dafffff0 	ble	1ab90 <fflush+0x6c>
   1abcc:	e0605005 	rsb	r5, r0, r5
   1abd0:	e0866000 	add	r6, r6, r0
   1abd4:	e2552000 	subs	r2, r5, #0	; 0x0
   1abd8:	e1a01006 	mov	r1, r6
   1abdc:	cafffff4 	bgt	1abb4 <fflush+0x90>
   1abe0:	e3a00000 	mov	r0, #0	; 0x0
   1abe4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1abe8:	e12fff1e 	bx	lr
   1abec:	0001dbb4 	streqh	sp, [r1], -r4
   1abf0:	0001ab24 	andeq	sl, r1, r4, lsr #22
   1abf4:	40000488 	andmi	r0, r0, r8, lsl #9

0001abf8 <std>:
   1abf8:	e59f3044 	ldr	r3, [pc, #68]	; 1ac44 <.text+0xac44>
   1abfc:	e580302c 	str	r3, [r0, #44]
   1ac00:	e59f3040 	ldr	r3, [pc, #64]	; 1ac48 <.text+0xac48>
   1ac04:	e5803020 	str	r3, [r0, #32]
   1ac08:	e59f303c 	ldr	r3, [pc, #60]	; 1ac4c <.text+0xac4c>
   1ac0c:	e5803024 	str	r3, [r0, #36]
   1ac10:	e59f3038 	ldr	r3, [pc, #56]	; 1ac50 <.text+0xac50>
   1ac14:	e3a0c000 	mov	ip, #0	; 0x0
   1ac18:	e1c010bc 	strh	r1, [r0, #12]
   1ac1c:	e1c020be 	strh	r2, [r0, #14]
   1ac20:	e580c018 	str	ip, [r0, #24]
   1ac24:	e5803028 	str	r3, [r0, #40]
   1ac28:	e580c000 	str	ip, [r0]
   1ac2c:	e580c004 	str	ip, [r0, #4]
   1ac30:	e580c008 	str	ip, [r0, #8]
   1ac34:	e580c010 	str	ip, [r0, #16]
   1ac38:	e580c014 	str	ip, [r0, #20]
   1ac3c:	e580001c 	str	r0, [r0, #28]
   1ac40:	e12fff1e 	bx	lr
   1ac44:	0001c958 	andeq	ip, r1, r8, asr r9
   1ac48:	0001ca20 	andeq	ip, r1, r0, lsr #20
   1ac4c:	0001c9c0 	andeq	ip, r1, r0, asr #19
   1ac50:	0001c978 	andeq	ip, r1, r8, ror r9

0001ac54 <__sinit>:
   1ac54:	e590c038 	ldr	ip, [r0, #56]
   1ac58:	e25c2000 	subs	r2, ip, #0	; 0x0
   1ac5c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1ac60:	e3a01004 	mov	r1, #4	; 0x4
   1ac64:	e3a05001 	mov	r5, #1	; 0x1
   1ac68:	e1a04000 	mov	r4, r0
   1ac6c:	e280efbb 	add	lr, r0, #748	; 0x2ec
   1ac70:	e1a03000 	mov	r3, r0
   1ac74:	1a000013 	bne	1acc8 <__sinit+0x74>
   1ac78:	e59f0050 	ldr	r0, [pc, #80]	; 1acd0 <.text+0xacd0>
   1ac7c:	e584003c 	str	r0, [r4, #60]
   1ac80:	e3a00003 	mov	r0, #3	; 0x3
   1ac84:	e58402e4 	str	r0, [r4, #740]
   1ac88:	e584e2e8 	str	lr, [r4, #744]
   1ac8c:	e584c2e0 	str	ip, [r4, #736]
   1ac90:	e5940004 	ldr	r0, [r4, #4]
   1ac94:	e5845038 	str	r5, [r4, #56]
   1ac98:	ebffffd6 	bl	1abf8 <std>
   1ac9c:	e1a02005 	mov	r2, r5
   1aca0:	e5940008 	ldr	r0, [r4, #8]
   1aca4:	e1a03004 	mov	r3, r4
   1aca8:	e3a01009 	mov	r1, #9	; 0x9
   1acac:	ebffffd1 	bl	1abf8 <std>
   1acb0:	e594000c 	ldr	r0, [r4, #12]
   1acb4:	e1a03004 	mov	r3, r4
   1acb8:	e3a0100a 	mov	r1, #10	; 0xa
   1acbc:	e3a02002 	mov	r2, #2	; 0x2
   1acc0:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1acc4:	eaffffcb 	b	1abf8 <std>
   1acc8:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1accc:	e12fff1e 	bx	lr
   1acd0:	0001acf4 	streqd	sl, [r1], -r4

0001acd4 <__sfp_lock_acquire>:
   1acd4:	e12fff1e 	bx	lr

0001acd8 <__sfp_lock_release>:
   1acd8:	e12fff1e 	bx	lr

0001acdc <__sinit_lock_acquire>:
   1acdc:	e12fff1e 	bx	lr

0001ace0 <__sinit_lock_release>:
   1ace0:	e12fff1e 	bx	lr

0001ace4 <__fp_lock>:
   1ace4:	e3a00000 	mov	r0, #0	; 0x0
   1ace8:	e12fff1e 	bx	lr

0001acec <__fp_unlock>:
   1acec:	e3a00000 	mov	r0, #0	; 0x0
   1acf0:	e12fff1e 	bx	lr

0001acf4 <_cleanup_r>:
   1acf4:	e52de004 	str	lr, [sp, #-4]!
   1acf8:	e59f1008 	ldr	r1, [pc, #8]	; 1ad08 <.text+0xad08>
   1acfc:	eb000243 	bl	1b610 <_fwalk>
   1ad00:	e49de004 	ldr	lr, [sp], #4
   1ad04:	e12fff1e 	bx	lr
   1ad08:	0001cbe8 	andeq	ip, r1, r8, ror #23

0001ad0c <_cleanup>:
   1ad0c:	e59f3004 	ldr	r3, [pc, #4]	; 1ad18 <.text+0xad18>
   1ad10:	e5930000 	ldr	r0, [r3]
   1ad14:	eafffff6 	b	1acf4 <_cleanup_r>
   1ad18:	0001dbb4 	streqh	sp, [r1], -r4

0001ad1c <__sfmoreglue>:
   1ad1c:	e3a0305c 	mov	r3, #92	; 0x5c
   1ad20:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1ad24:	e0040391 	mul	r4, r1, r3
   1ad28:	e1a06001 	mov	r6, r1
   1ad2c:	e284100c 	add	r1, r4, #12	; 0xc
   1ad30:	ebffef1e 	bl	169b0 <_malloc_r>
   1ad34:	e250c000 	subs	ip, r0, #0	; 0x0
   1ad38:	e3a0e000 	mov	lr, #0	; 0x0
   1ad3c:	e28c300c 	add	r3, ip, #12	; 0xc
   1ad40:	e1a0500c 	mov	r5, ip
   1ad44:	e1a00003 	mov	r0, r3
   1ad48:	e1a0100e 	mov	r1, lr
   1ad4c:	e1a02004 	mov	r2, r4
   1ad50:	158c6004 	strne	r6, [ip, #4]
   1ad54:	158ce000 	strne	lr, [ip]
   1ad58:	158c3008 	strne	r3, [ip, #8]
   1ad5c:	1bfff0bd 	blne	17058 <memset>
   1ad60:	e1a00005 	mov	r0, r5
   1ad64:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1ad68:	e12fff1e 	bx	lr

0001ad6c <__fp_unlock_all>:
   1ad6c:	e59f3014 	ldr	r3, [pc, #20]	; 1ad88 <.text+0xad88>
   1ad70:	e52de004 	str	lr, [sp, #-4]!
   1ad74:	e5930000 	ldr	r0, [r3]
   1ad78:	e59f100c 	ldr	r1, [pc, #12]	; 1ad8c <.text+0xad8c>
   1ad7c:	eb000223 	bl	1b610 <_fwalk>
   1ad80:	e49de004 	ldr	lr, [sp], #4
   1ad84:	e12fff1e 	bx	lr
   1ad88:	40000488 	andmi	r0, r0, r8, lsl #9
   1ad8c:	0001acec 	andeq	sl, r1, ip, ror #25

0001ad90 <__fp_lock_all>:
   1ad90:	e59f3014 	ldr	r3, [pc, #20]	; 1adac <.text+0xadac>
   1ad94:	e52de004 	str	lr, [sp, #-4]!
   1ad98:	e5930000 	ldr	r0, [r3]
   1ad9c:	e59f100c 	ldr	r1, [pc, #12]	; 1adb0 <.text+0xadb0>
   1ada0:	eb00021a 	bl	1b610 <_fwalk>
   1ada4:	e49de004 	ldr	lr, [sp], #4
   1ada8:	e12fff1e 	bx	lr
   1adac:	40000488 	andmi	r0, r0, r8, lsl #9
   1adb0:	0001ace4 	andeq	sl, r1, r4, ror #25

0001adb4 <__sfp>:
   1adb4:	e59f30bc 	ldr	r3, [pc, #188]	; 1ae78 <.text+0xae78>
   1adb8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1adbc:	e5934000 	ldr	r4, [r3]
   1adc0:	e5943038 	ldr	r3, [r4, #56]
   1adc4:	e3530000 	cmp	r3, #0	; 0x0
   1adc8:	e1a05000 	mov	r5, r0
   1adcc:	01a00004 	moveq	r0, r4
   1add0:	0bffff9f 	bleq	1ac54 <__sinit>
   1add4:	e2844e2e 	add	r4, r4, #736	; 0x2e0
   1add8:	e5940008 	ldr	r0, [r4, #8]
   1addc:	e5942004 	ldr	r2, [r4, #4]
   1ade0:	ea000003 	b	1adf4 <__sfp+0x40>
   1ade4:	e1d030fc 	ldrsh	r3, [r0, #12]
   1ade8:	e3530000 	cmp	r3, #0	; 0x0
   1adec:	0a000011 	beq	1ae38 <__sfp+0x84>
   1adf0:	e280005c 	add	r0, r0, #92	; 0x5c
   1adf4:	e2522001 	subs	r2, r2, #1	; 0x1
   1adf8:	5afffff9 	bpl	1ade4 <__sfp+0x30>
   1adfc:	e5943000 	ldr	r3, [r4]
   1ae00:	e3530000 	cmp	r3, #0	; 0x0
   1ae04:	1a000005 	bne	1ae20 <__sfp+0x6c>
   1ae08:	e1a00005 	mov	r0, r5
   1ae0c:	e3a01004 	mov	r1, #4	; 0x4
   1ae10:	ebffffc1 	bl	1ad1c <__sfmoreglue>
   1ae14:	e3500000 	cmp	r0, #0	; 0x0
   1ae18:	e5840000 	str	r0, [r4]
   1ae1c:	0a000001 	beq	1ae28 <__sfp+0x74>
   1ae20:	e5944000 	ldr	r4, [r4]
   1ae24:	eaffffeb 	b	1add8 <__sfp+0x24>
   1ae28:	e3a0300c 	mov	r3, #12	; 0xc
   1ae2c:	e3a00000 	mov	r0, #0	; 0x0
   1ae30:	e5853000 	str	r3, [r5]
   1ae34:	ea00000d 	b	1ae70 <__sfp+0xbc>
   1ae38:	e5803048 	str	r3, [r0, #72]
   1ae3c:	e5803000 	str	r3, [r0]
   1ae40:	e5803008 	str	r3, [r0, #8]
   1ae44:	e5803004 	str	r3, [r0, #4]
   1ae48:	e5803010 	str	r3, [r0, #16]
   1ae4c:	e5803014 	str	r3, [r0, #20]
   1ae50:	e5803018 	str	r3, [r0, #24]
   1ae54:	e5803030 	str	r3, [r0, #48]
   1ae58:	e5803034 	str	r3, [r0, #52]
   1ae5c:	e5803044 	str	r3, [r0, #68]
   1ae60:	e3e03000 	mvn	r3, #0	; 0x0
   1ae64:	e1c030be 	strh	r3, [r0, #14]
   1ae68:	e3a03001 	mov	r3, #1	; 0x1
   1ae6c:	e1c030bc 	strh	r3, [r0, #12]
   1ae70:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1ae74:	e12fff1e 	bx	lr
   1ae78:	0001dbb4 	streqh	sp, [r1], -r4

0001ae7c <_malloc_trim_r>:
   1ae7c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   1ae80:	e59f70e4 	ldr	r7, [pc, #228]	; 1af6c <.text+0xaf6c>
   1ae84:	e1a04001 	mov	r4, r1
   1ae88:	e1a05000 	mov	r5, r0
   1ae8c:	ebfff078 	bl	17074 <__malloc_lock>
   1ae90:	e5973008 	ldr	r3, [r7, #8]
   1ae94:	e5933004 	ldr	r3, [r3, #4]
   1ae98:	e3c36003 	bic	r6, r3, #3	; 0x3
   1ae9c:	e0644006 	rsb	r4, r4, r6
   1aea0:	e2844efe 	add	r4, r4, #4064	; 0xfe0
   1aea4:	e284400f 	add	r4, r4, #15	; 0xf
   1aea8:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
   1aeac:	e3c4400f 	bic	r4, r4, #15	; 0xf
   1aeb0:	e2444a01 	sub	r4, r4, #4096	; 0x1000
   1aeb4:	e3540a01 	cmp	r4, #4096	; 0x1000
   1aeb8:	e3a01000 	mov	r1, #0	; 0x0
   1aebc:	e1a00005 	mov	r0, r5
   1aec0:	ba00001c 	blt	1af38 <_malloc_trim_r+0xbc>
   1aec4:	ebffda34 	bl	1179c <_sbrk_r>
   1aec8:	e5973008 	ldr	r3, [r7, #8]
   1aecc:	e0863003 	add	r3, r6, r3
   1aed0:	e1500003 	cmp	r0, r3
   1aed4:	e2641000 	rsb	r1, r4, #0	; 0x0
   1aed8:	e1a00005 	mov	r0, r5
   1aedc:	1a000015 	bne	1af38 <_malloc_trim_r+0xbc>
   1aee0:	ebffda2d 	bl	1179c <_sbrk_r>
   1aee4:	e0643006 	rsb	r3, r4, r6
   1aee8:	e3700001 	cmn	r0, #1	; 0x1
   1aeec:	e3a01000 	mov	r1, #0	; 0x0
   1aef0:	e59fe078 	ldr	lr, [pc, #120]	; 1af70 <.text+0xaf70>
   1aef4:	e383c001 	orr	ip, r3, #1	; 0x1
   1aef8:	e1a00005 	mov	r0, r5
   1aefc:	1a000010 	bne	1af44 <_malloc_trim_r+0xc8>
   1af00:	ebffda25 	bl	1179c <_sbrk_r>
   1af04:	e597c008 	ldr	ip, [r7, #8]
   1af08:	e1a02000 	mov	r2, r0
   1af0c:	e06c3002 	rsb	r3, ip, r2
   1af10:	e353000f 	cmp	r3, #15	; 0xf
   1af14:	e1a00005 	mov	r0, r5
   1af18:	e3831001 	orr	r1, r3, #1	; 0x1
   1af1c:	da000005 	ble	1af38 <_malloc_trim_r+0xbc>
   1af20:	e59f304c 	ldr	r3, [pc, #76]	; 1af74 <.text+0xaf74>
   1af24:	e5933000 	ldr	r3, [r3]
   1af28:	e0633002 	rsb	r3, r3, r2
   1af2c:	e59f203c 	ldr	r2, [pc, #60]	; 1af70 <.text+0xaf70>
   1af30:	e58c1004 	str	r1, [ip, #4]
   1af34:	e5823000 	str	r3, [r2]
   1af38:	ebfff04e 	bl	17078 <__malloc_unlock>
   1af3c:	e3a00000 	mov	r0, #0	; 0x0
   1af40:	ea000007 	b	1af64 <_malloc_trim_r+0xe8>
   1af44:	e59e3000 	ldr	r3, [lr]
   1af48:	e5972008 	ldr	r2, [r7, #8]
   1af4c:	e0643003 	rsb	r3, r4, r3
   1af50:	e1a00005 	mov	r0, r5
   1af54:	e582c004 	str	ip, [r2, #4]
   1af58:	e58e3000 	str	r3, [lr]
   1af5c:	ebfff045 	bl	17078 <__malloc_unlock>
   1af60:	e3a00001 	mov	r0, #1	; 0x1
   1af64:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   1af68:	e12fff1e 	bx	lr
   1af6c:	40000078 	andmi	r0, r0, r8, ror r0
   1af70:	40000db4 	strmih	r0, [r0], -r4
   1af74:	40000484 	andmi	r0, r0, r4, lsl #9

0001af78 <_free_r>:
   1af78:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af7c:	e2515000 	subs	r5, r1, #0	; 0x0
   1af80:	e1a08000 	mov	r8, r0
   1af84:	0a00008c 	beq	1b1bc <_free_r+0x244>
   1af88:	ebfff039 	bl	17074 <__malloc_lock>
   1af8c:	e5153004 	ldr	r3, [r5, #-4]
   1af90:	e59f722c 	ldr	r7, [pc, #556]	; 1b1c4 <.text+0xb1c4>
   1af94:	e245e008 	sub	lr, r5, #8	; 0x8
   1af98:	e3c30001 	bic	r0, r3, #1	; 0x1
   1af9c:	e08e4000 	add	r4, lr, r0
   1afa0:	e5972008 	ldr	r2, [r7, #8]
   1afa4:	e5941004 	ldr	r1, [r4, #4]
   1afa8:	e1540002 	cmp	r4, r2
   1afac:	e3c16003 	bic	r6, r1, #3	; 0x3
   1afb0:	e2031001 	and	r1, r3, #1	; 0x1
   1afb4:	1a000015 	bne	1b010 <_free_r+0x98>
   1afb8:	e3510000 	cmp	r1, #0	; 0x0
   1afbc:	e0800006 	add	r0, r0, r6
   1afc0:	1a000006 	bne	1afe0 <_free_r+0x68>
   1afc4:	e5151008 	ldr	r1, [r5, #-8]
   1afc8:	e061e00e 	rsb	lr, r1, lr
   1afcc:	e59e200c 	ldr	r2, [lr, #12]
   1afd0:	e59e3008 	ldr	r3, [lr, #8]
   1afd4:	e5823008 	str	r3, [r2, #8]
   1afd8:	e583200c 	str	r2, [r3, #12]
   1afdc:	e0800001 	add	r0, r0, r1
   1afe0:	e59f31e0 	ldr	r3, [pc, #480]	; 1b1c8 <.text+0xb1c8>
   1afe4:	e5933000 	ldr	r3, [r3]
   1afe8:	e1500003 	cmp	r0, r3
   1afec:	e3803001 	orr	r3, r0, #1	; 0x1
   1aff0:	e587e008 	str	lr, [r7, #8]
   1aff4:	e58e3004 	str	r3, [lr, #4]
   1aff8:	3a00006d 	bcc	1b1b4 <_free_r+0x23c>
   1affc:	e59f31c8 	ldr	r3, [pc, #456]	; 1b1cc <.text+0xb1cc>
   1b000:	e1a00008 	mov	r0, r8
   1b004:	e5931000 	ldr	r1, [r3]
   1b008:	ebffff9b 	bl	1ae7c <_malloc_trim_r>
   1b00c:	ea000068 	b	1b1b4 <_free_r+0x23c>
   1b010:	e3510000 	cmp	r1, #0	; 0x0
   1b014:	e5846004 	str	r6, [r4, #4]
   1b018:	13a01000 	movne	r1, #0	; 0x0
   1b01c:	1a000009 	bne	1b048 <_free_r+0xd0>
   1b020:	e5152008 	ldr	r2, [r5, #-8]
   1b024:	e062e00e 	rsb	lr, r2, lr
   1b028:	e59ec008 	ldr	ip, [lr, #8]
   1b02c:	e2873008 	add	r3, r7, #8	; 0x8
   1b030:	e15c0003 	cmp	ip, r3
   1b034:	159e300c 	ldrne	r3, [lr, #12]
   1b038:	1583c008 	strne	ip, [r3, #8]
   1b03c:	158c300c 	strne	r3, [ip, #12]
   1b040:	e0800002 	add	r0, r0, r2
   1b044:	03a01001 	moveq	r1, #1	; 0x1
   1b048:	e0843006 	add	r3, r4, r6
   1b04c:	e5933004 	ldr	r3, [r3, #4]
   1b050:	e3130001 	tst	r3, #1	; 0x1
   1b054:	1a000012 	bne	1b0a4 <_free_r+0x12c>
   1b058:	e3510000 	cmp	r1, #0	; 0x0
   1b05c:	e0800006 	add	r0, r0, r6
   1b060:	1a00000b 	bne	1b094 <_free_r+0x11c>
   1b064:	e5942008 	ldr	r2, [r4, #8]
   1b068:	e59f3160 	ldr	r3, [pc, #352]	; 1b1d0 <.text+0xb1d0>
   1b06c:	e1520003 	cmp	r2, r3
   1b070:	1a000007 	bne	1b094 <_free_r+0x11c>
   1b074:	e3803001 	orr	r3, r0, #1	; 0x1
   1b078:	e582e00c 	str	lr, [r2, #12]
   1b07c:	e582e008 	str	lr, [r2, #8]
   1b080:	e78e0000 	str	r0, [lr, r0]
   1b084:	e58e3004 	str	r3, [lr, #4]
   1b088:	e58e2008 	str	r2, [lr, #8]
   1b08c:	e58e200c 	str	r2, [lr, #12]
   1b090:	ea000047 	b	1b1b4 <_free_r+0x23c>
   1b094:	e2842008 	add	r2, r4, #8	; 0x8
   1b098:	e892000c 	ldmia	r2, {r2, r3}
   1b09c:	e5832008 	str	r2, [r3, #8]
   1b0a0:	e582300c 	str	r3, [r2, #12]
   1b0a4:	e3803001 	orr	r3, r0, #1	; 0x1
   1b0a8:	e3510000 	cmp	r1, #0	; 0x0
   1b0ac:	e58e3004 	str	r3, [lr, #4]
   1b0b0:	e78e0000 	str	r0, [lr, r0]
   1b0b4:	1a00003e 	bne	1b1b4 <_free_r+0x23c>
   1b0b8:	e3500c02 	cmp	r0, #512	; 0x200
   1b0bc:	2a00000d 	bcs	1b0f8 <_free_r+0x180>
   1b0c0:	e1a001a0 	mov	r0, r0, lsr #3
   1b0c4:	e5972004 	ldr	r2, [r7, #4]
   1b0c8:	e1a01120 	mov	r1, r0, lsr #2
   1b0cc:	e3a03001 	mov	r3, #1	; 0x1
   1b0d0:	e1822113 	orr	r2, r2, r3, lsl r1
   1b0d4:	e59f30e8 	ldr	r3, [pc, #232]	; 1b1c4 <.text+0xb1c4>
   1b0d8:	e0833180 	add	r3, r3, r0, lsl #3
   1b0dc:	e5931008 	ldr	r1, [r3, #8]
   1b0e0:	e58e300c 	str	r3, [lr, #12]
   1b0e4:	e58e1008 	str	r1, [lr, #8]
   1b0e8:	e5872004 	str	r2, [r7, #4]
   1b0ec:	e581e00c 	str	lr, [r1, #12]
   1b0f0:	e583e008 	str	lr, [r3, #8]
   1b0f4:	ea00002e 	b	1b1b4 <_free_r+0x23c>
   1b0f8:	e1b014a0 	movs	r1, r0, lsr #9
   1b0fc:	01a011a0 	moveq	r1, r0, lsr #3
   1b100:	0a000013 	beq	1b154 <_free_r+0x1dc>
   1b104:	e3510004 	cmp	r1, #4	; 0x4
   1b108:	91a03320 	movls	r3, r0, lsr #6
   1b10c:	92831038 	addls	r1, r3, #56	; 0x38
   1b110:	9a00000f 	bls	1b154 <_free_r+0x1dc>
   1b114:	e3510014 	cmp	r1, #20	; 0x14
   1b118:	9281105b 	addls	r1, r1, #91	; 0x5b
   1b11c:	9a00000c 	bls	1b154 <_free_r+0x1dc>
   1b120:	e3510054 	cmp	r1, #84	; 0x54
   1b124:	91a03620 	movls	r3, r0, lsr #12
   1b128:	9283106e 	addls	r1, r3, #110	; 0x6e
   1b12c:	9a000008 	bls	1b154 <_free_r+0x1dc>
   1b130:	e3510f55 	cmp	r1, #340	; 0x154
   1b134:	91a037a0 	movls	r3, r0, lsr #15
   1b138:	92831077 	addls	r1, r3, #119	; 0x77
   1b13c:	9a000004 	bls	1b154 <_free_r+0x1dc>
   1b140:	e59f308c 	ldr	r3, [pc, #140]	; 1b1d4 <.text+0xb1d4>
   1b144:	e1510003 	cmp	r1, r3
   1b148:	91a03920 	movls	r3, r0, lsr #18
   1b14c:	83a0107e 	movhi	r1, #126	; 0x7e
   1b150:	9283107c 	addls	r1, r3, #124	; 0x7c
   1b154:	e59f3068 	ldr	r3, [pc, #104]	; 1b1c4 <.text+0xb1c4>
   1b158:	e0832181 	add	r2, r3, r1, lsl #3
   1b15c:	e592c008 	ldr	ip, [r2, #8]
   1b160:	e15c0002 	cmp	ip, r2
   1b164:	1a000009 	bne	1b190 <_free_r+0x218>
   1b168:	e5973004 	ldr	r3, [r7, #4]
   1b16c:	e3a02001 	mov	r2, #1	; 0x1
   1b170:	e1a01121 	mov	r1, r1, lsr #2
   1b174:	e1833112 	orr	r3, r3, r2, lsl r1
   1b178:	e1a0200c 	mov	r2, ip
   1b17c:	e5873004 	str	r3, [r7, #4]
   1b180:	ea000007 	b	1b1a4 <_free_r+0x22c>
   1b184:	e59cc008 	ldr	ip, [ip, #8]
   1b188:	e15c0002 	cmp	ip, r2
   1b18c:	0a000003 	beq	1b1a0 <_free_r+0x228>
   1b190:	e59c3004 	ldr	r3, [ip, #4]
   1b194:	e3c33003 	bic	r3, r3, #3	; 0x3
   1b198:	e1500003 	cmp	r0, r3
   1b19c:	3afffff8 	bcc	1b184 <_free_r+0x20c>
   1b1a0:	e59c200c 	ldr	r2, [ip, #12]
   1b1a4:	e58e200c 	str	r2, [lr, #12]
   1b1a8:	e58ec008 	str	ip, [lr, #8]
   1b1ac:	e58ce00c 	str	lr, [ip, #12]
   1b1b0:	e582e008 	str	lr, [r2, #8]
   1b1b4:	e1a00008 	mov	r0, r8
   1b1b8:	ebffefae 	bl	17078 <__malloc_unlock>
   1b1bc:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   1b1c0:	e12fff1e 	bx	lr
   1b1c4:	40000078 	andmi	r0, r0, r8, ror r0
   1b1c8:	40000480 	andmi	r0, r0, r0, lsl #9
   1b1cc:	40000da8 	andmi	r0, r0, r8, lsr #27
   1b1d0:	40000080 	andmi	r0, r0, r0, lsl #1
   1b1d4:	00000554 	andeq	r0, r0, r4, asr r5

0001b1d8 <__sfvwrite>:
   1b1d8:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1dc:	e5913008 	ldr	r3, [r1, #8]
   1b1e0:	e3530000 	cmp	r3, #0	; 0x0
   1b1e4:	e24dd004 	sub	sp, sp, #4	; 0x4
   1b1e8:	e1a0b001 	mov	fp, r1
   1b1ec:	e1a05000 	mov	r5, r0
   1b1f0:	0a0000e2 	beq	1b580 <__sfvwrite+0x3a8>
   1b1f4:	e1d030bc 	ldrh	r3, [r0, #12]
   1b1f8:	e3130008 	tst	r3, #8	; 0x8
   1b1fc:	0a000002 	beq	1b20c <__sfvwrite+0x34>
   1b200:	e5903010 	ldr	r3, [r0, #16]
   1b204:	e3530000 	cmp	r3, #0	; 0x0
   1b208:	1a000003 	bne	1b21c <__sfvwrite+0x44>
   1b20c:	ebfff8ca 	bl	1953c <__swsetup>
   1b210:	e3500000 	cmp	r0, #0	; 0x0
   1b214:	13e00000 	mvnne	r0, #0	; 0x0
   1b218:	1a0000d9 	bne	1b584 <__sfvwrite+0x3ac>
   1b21c:	e1d530bc 	ldrh	r3, [r5, #12]
   1b220:	e3130002 	tst	r3, #2	; 0x2
   1b224:	13a04000 	movne	r4, #0	; 0x0
   1b228:	e59b8000 	ldr	r8, [fp]
   1b22c:	11a06004 	movne	r6, r4
   1b230:	0a000016 	beq	1b290 <__sfvwrite+0xb8>
   1b234:	e3540000 	cmp	r4, #0	; 0x0
   1b238:	e1a01006 	mov	r1, r6
   1b23c:	05984004 	ldreq	r4, [r8, #4]
   1b240:	05986000 	ldreq	r6, [r8]
   1b244:	02888008 	addeq	r8, r8, #8	; 0x8
   1b248:	0afffff9 	beq	1b234 <__sfvwrite+0x5c>
   1b24c:	e3540b01 	cmp	r4, #1024	; 0x400
   1b250:	31a02004 	movcc	r2, r4
   1b254:	23a02b01 	movcs	r2, #1024	; 0x400
   1b258:	e595001c 	ldr	r0, [r5, #28]
   1b25c:	e595c024 	ldr	ip, [r5, #36]
   1b260:	e1a0e00f 	mov	lr, pc
   1b264:	e12fff1c 	bx	ip
   1b268:	e3500000 	cmp	r0, #0	; 0x0
   1b26c:	e0604004 	rsb	r4, r0, r4
   1b270:	e0866000 	add	r6, r6, r0
   1b274:	da0000bc 	ble	1b56c <__sfvwrite+0x394>
   1b278:	e59b3008 	ldr	r3, [fp, #8]
   1b27c:	e0603003 	rsb	r3, r0, r3
   1b280:	e3530000 	cmp	r3, #0	; 0x0
   1b284:	e58b3008 	str	r3, [fp, #8]
   1b288:	0a0000bc 	beq	1b580 <__sfvwrite+0x3a8>
   1b28c:	eaffffe8 	b	1b234 <__sfvwrite+0x5c>
   1b290:	e2132001 	ands	r2, r3, #1	; 0x1
   1b294:	01a06002 	moveq	r6, r2
   1b298:	01a09006 	moveq	r9, r6
   1b29c:	0a000008 	beq	1b2c4 <__sfvwrite+0xec>
   1b2a0:	e3a07000 	mov	r7, #0	; 0x0
   1b2a4:	e1a0a007 	mov	sl, r7
   1b2a8:	e1a09007 	mov	r9, r7
   1b2ac:	e58d7000 	str	r7, [sp]
   1b2b0:	ea000060 	b	1b438 <__sfvwrite+0x260>
   1b2b4:	e59a0000 	ldr	r0, [sl]
   1b2b8:	e5951010 	ldr	r1, [r5, #16]
   1b2bc:	ebffff2d 	bl	1af78 <_free_r>
   1b2c0:	ea0000a9 	b	1b56c <__sfvwrite+0x394>
   1b2c4:	e3560000 	cmp	r6, #0	; 0x0
   1b2c8:	05989000 	ldreq	r9, [r8]
   1b2cc:	05986004 	ldreq	r6, [r8, #4]
   1b2d0:	02888008 	addeq	r8, r8, #8	; 0x8
   1b2d4:	0afffffa 	beq	1b2c4 <__sfvwrite+0xec>
   1b2d8:	e1d530bc 	ldrh	r3, [r5, #12]
   1b2dc:	e3130c02 	tst	r3, #512	; 0x200
   1b2e0:	e5954008 	ldr	r4, [r5, #8]
   1b2e4:	0a000021 	beq	1b370 <__sfvwrite+0x198>
   1b2e8:	e1560004 	cmp	r6, r4
   1b2ec:	9a000011 	bls	1b338 <__sfvwrite+0x160>
   1b2f0:	e3130080 	tst	r3, #128	; 0x80
   1b2f4:	0a00000f 	beq	1b338 <__sfvwrite+0x160>
   1b2f8:	e5951010 	ldr	r1, [r5, #16]
   1b2fc:	e5953000 	ldr	r3, [r5]
   1b300:	e59fa288 	ldr	sl, [pc, #648]	; 1b590 <.text+0xb590>
   1b304:	e0614003 	rsb	r4, r1, r3
   1b308:	e0847006 	add	r7, r4, r6
   1b30c:	e59a0000 	ldr	r0, [sl]
   1b310:	e1a02007 	mov	r2, r7
   1b314:	eb000447 	bl	1c438 <_realloc_r>
   1b318:	e3500000 	cmp	r0, #0	; 0x0
   1b31c:	0affffe4 	beq	1b2b4 <__sfvwrite+0xdc>
   1b320:	e0803004 	add	r3, r0, r4
   1b324:	e5853000 	str	r3, [r5]
   1b328:	e5857014 	str	r7, [r5, #20]
   1b32c:	e5850010 	str	r0, [r5, #16]
   1b330:	e5856008 	str	r6, [r5, #8]
   1b334:	e1a04006 	mov	r4, r6
   1b338:	e1540006 	cmp	r4, r6
   1b33c:	21a04006 	movcs	r4, r6
   1b340:	e1a02004 	mov	r2, r4
   1b344:	e5950000 	ldr	r0, [r5]
   1b348:	e1a01009 	mov	r1, r9
   1b34c:	eb000150 	bl	1b894 <memmove>
   1b350:	e5953008 	ldr	r3, [r5, #8]
   1b354:	e5952000 	ldr	r2, [r5]
   1b358:	e0643003 	rsb	r3, r4, r3
   1b35c:	e0822004 	add	r2, r2, r4
   1b360:	e1a04006 	mov	r4, r6
   1b364:	e5853008 	str	r3, [r5, #8]
   1b368:	e5852000 	str	r2, [r5]
   1b36c:	ea000024 	b	1b404 <__sfvwrite+0x22c>
   1b370:	e5950000 	ldr	r0, [r5]
   1b374:	e5953010 	ldr	r3, [r5, #16]
   1b378:	e1500003 	cmp	r0, r3
   1b37c:	81560004 	cmphi	r6, r4
   1b380:	9a00000a 	bls	1b3b0 <__sfvwrite+0x1d8>
   1b384:	e1a01009 	mov	r1, r9
   1b388:	e1a02004 	mov	r2, r4
   1b38c:	eb000140 	bl	1b894 <memmove>
   1b390:	e5953000 	ldr	r3, [r5]
   1b394:	e0833004 	add	r3, r3, r4
   1b398:	e5853000 	str	r3, [r5]
   1b39c:	e1a00005 	mov	r0, r5
   1b3a0:	ebfffddf 	bl	1ab24 <fflush>
   1b3a4:	e3500000 	cmp	r0, #0	; 0x0
   1b3a8:	0a000015 	beq	1b404 <__sfvwrite+0x22c>
   1b3ac:	ea00006e 	b	1b56c <__sfvwrite+0x394>
   1b3b0:	e5952014 	ldr	r2, [r5, #20]
   1b3b4:	e1560002 	cmp	r6, r2
   1b3b8:	3a000007 	bcc	1b3dc <__sfvwrite+0x204>
   1b3bc:	e595001c 	ldr	r0, [r5, #28]
   1b3c0:	e1a01009 	mov	r1, r9
   1b3c4:	e595c024 	ldr	ip, [r5, #36]
   1b3c8:	e1a0e00f 	mov	lr, pc
   1b3cc:	e12fff1c 	bx	ip
   1b3d0:	e2504000 	subs	r4, r0, #0	; 0x0
   1b3d4:	ca00000a 	bgt	1b404 <__sfvwrite+0x22c>
   1b3d8:	ea000063 	b	1b56c <__sfvwrite+0x394>
   1b3dc:	e1a02006 	mov	r2, r6
   1b3e0:	e1a01009 	mov	r1, r9
   1b3e4:	eb00012a 	bl	1b894 <memmove>
   1b3e8:	e5953008 	ldr	r3, [r5, #8]
   1b3ec:	e5952000 	ldr	r2, [r5]
   1b3f0:	e0663003 	rsb	r3, r6, r3
   1b3f4:	e0822006 	add	r2, r2, r6
   1b3f8:	e5853008 	str	r3, [r5, #8]
   1b3fc:	e5852000 	str	r2, [r5]
   1b400:	e1a04006 	mov	r4, r6
   1b404:	e59b3008 	ldr	r3, [fp, #8]
   1b408:	e0643003 	rsb	r3, r4, r3
   1b40c:	e3530000 	cmp	r3, #0	; 0x0
   1b410:	e58b3008 	str	r3, [fp, #8]
   1b414:	0a000059 	beq	1b580 <__sfvwrite+0x3a8>
   1b418:	e0646006 	rsb	r6, r4, r6
   1b41c:	e0899004 	add	r9, r9, r4
   1b420:	eaffffa7 	b	1b2c4 <__sfvwrite+0xec>
   1b424:	e3a03000 	mov	r3, #0	; 0x0
   1b428:	e58d3000 	str	r3, [sp]
   1b42c:	e598a000 	ldr	sl, [r8]
   1b430:	e5987004 	ldr	r7, [r8, #4]
   1b434:	e2888008 	add	r8, r8, #8	; 0x8
   1b438:	e3570000 	cmp	r7, #0	; 0x0
   1b43c:	0afffff8 	beq	1b424 <__sfvwrite+0x24c>
   1b440:	e59d3000 	ldr	r3, [sp]
   1b444:	e3530000 	cmp	r3, #0	; 0x0
   1b448:	1a000009 	bne	1b474 <__sfvwrite+0x29c>
   1b44c:	e1a0000a 	mov	r0, sl
   1b450:	e3a0100a 	mov	r1, #10	; 0xa
   1b454:	e1a02007 	mov	r2, r7
   1b458:	eb000103 	bl	1b86c <memchr>
   1b45c:	e3500000 	cmp	r0, #0	; 0x0
   1b460:	106a3000 	rsbne	r3, sl, r0
   1b464:	12839001 	addne	r9, r3, #1	; 0x1
   1b468:	e3a03001 	mov	r3, #1	; 0x1
   1b46c:	e58d3000 	str	r3, [sp]
   1b470:	02879001 	addeq	r9, r7, #1	; 0x1
   1b474:	e5951014 	ldr	r1, [r5, #20]
   1b478:	e5952008 	ldr	r2, [r5, #8]
   1b47c:	e5950000 	ldr	r0, [r5]
   1b480:	e5953010 	ldr	r3, [r5, #16]
   1b484:	e1590007 	cmp	r9, r7
   1b488:	31a06009 	movcc	r6, r9
   1b48c:	21a06007 	movcs	r6, r7
   1b490:	e0814002 	add	r4, r1, r2
   1b494:	e1500003 	cmp	r0, r3
   1b498:	93a03000 	movls	r3, #0	; 0x0
   1b49c:	83a03001 	movhi	r3, #1	; 0x1
   1b4a0:	e1560004 	cmp	r6, r4
   1b4a4:	d3a03000 	movle	r3, #0	; 0x0
   1b4a8:	e3530000 	cmp	r3, #0	; 0x0
   1b4ac:	0a00000a 	beq	1b4dc <__sfvwrite+0x304>
   1b4b0:	e1a0100a 	mov	r1, sl
   1b4b4:	e1a02004 	mov	r2, r4
   1b4b8:	eb0000f5 	bl	1b894 <memmove>
   1b4bc:	e5953000 	ldr	r3, [r5]
   1b4c0:	e0833004 	add	r3, r3, r4
   1b4c4:	e5853000 	str	r3, [r5]
   1b4c8:	e1a00005 	mov	r0, r5
   1b4cc:	ebfffd94 	bl	1ab24 <fflush>
   1b4d0:	e3500000 	cmp	r0, #0	; 0x0
   1b4d4:	0a000015 	beq	1b530 <__sfvwrite+0x358>
   1b4d8:	ea000023 	b	1b56c <__sfvwrite+0x394>
   1b4dc:	e1560001 	cmp	r6, r1
   1b4e0:	ba000008 	blt	1b508 <__sfvwrite+0x330>
   1b4e4:	e1a02001 	mov	r2, r1
   1b4e8:	e595001c 	ldr	r0, [r5, #28]
   1b4ec:	e1a0100a 	mov	r1, sl
   1b4f0:	e595c024 	ldr	ip, [r5, #36]
   1b4f4:	e1a0e00f 	mov	lr, pc
   1b4f8:	e12fff1c 	bx	ip
   1b4fc:	e2504000 	subs	r4, r0, #0	; 0x0
   1b500:	ca00000a 	bgt	1b530 <__sfvwrite+0x358>
   1b504:	ea000018 	b	1b56c <__sfvwrite+0x394>
   1b508:	e1a02006 	mov	r2, r6
   1b50c:	e1a0100a 	mov	r1, sl
   1b510:	eb0000df 	bl	1b894 <memmove>
   1b514:	e5953008 	ldr	r3, [r5, #8]
   1b518:	e5952000 	ldr	r2, [r5]
   1b51c:	e0663003 	rsb	r3, r6, r3
   1b520:	e0822006 	add	r2, r2, r6
   1b524:	e5853008 	str	r3, [r5, #8]
   1b528:	e5852000 	str	r2, [r5]
   1b52c:	e1a04006 	mov	r4, r6
   1b530:	e0599004 	subs	r9, r9, r4
   1b534:	1a000004 	bne	1b54c <__sfvwrite+0x374>
   1b538:	e1a00005 	mov	r0, r5
   1b53c:	ebfffd78 	bl	1ab24 <fflush>
   1b540:	e3500000 	cmp	r0, #0	; 0x0
   1b544:	1a000008 	bne	1b56c <__sfvwrite+0x394>
   1b548:	e58d0000 	str	r0, [sp]
   1b54c:	e59b3008 	ldr	r3, [fp, #8]
   1b550:	e0643003 	rsb	r3, r4, r3
   1b554:	e3530000 	cmp	r3, #0	; 0x0
   1b558:	e58b3008 	str	r3, [fp, #8]
   1b55c:	0a000007 	beq	1b580 <__sfvwrite+0x3a8>
   1b560:	e0647007 	rsb	r7, r4, r7
   1b564:	e08aa004 	add	sl, sl, r4
   1b568:	eaffffb2 	b	1b438 <__sfvwrite+0x260>
   1b56c:	e1d530bc 	ldrh	r3, [r5, #12]
   1b570:	e3e00000 	mvn	r0, #0	; 0x0
   1b574:	e3833040 	orr	r3, r3, #64	; 0x40
   1b578:	e1c530bc 	strh	r3, [r5, #12]
   1b57c:	ea000000 	b	1b584 <__sfvwrite+0x3ac>
   1b580:	e3a00000 	mov	r0, #0	; 0x0
   1b584:	e28dd004 	add	sp, sp, #4	; 0x4
   1b588:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b58c:	e12fff1e 	bx	lr
   1b590:	40000488 	andmi	r0, r0, r8, lsl #9

0001b594 <_fwalk_reent>:
   1b594:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1b598:	e1a08000 	mov	r8, r0
   1b59c:	e1a0a001 	mov	sl, r1
   1b5a0:	ebfffdcb 	bl	1acd4 <__sfp_lock_acquire>
   1b5a4:	e2885e2e 	add	r5, r8, #736	; 0x2e0
   1b5a8:	e3a07000 	mov	r7, #0	; 0x0
   1b5ac:	ea000011 	b	1b5f8 <_fwalk_reent+0x64>
   1b5b0:	e5954008 	ldr	r4, [r5, #8]
   1b5b4:	e5956004 	ldr	r6, [r5, #4]
   1b5b8:	ea00000b 	b	1b5ec <_fwalk_reent+0x58>
   1b5bc:	e1d430fc 	ldrsh	r3, [r4, #12]
   1b5c0:	e3530000 	cmp	r3, #0	; 0x0
   1b5c4:	0a000007 	beq	1b5e8 <_fwalk_reent+0x54>
   1b5c8:	e1d430fe 	ldrsh	r3, [r4, #14]
   1b5cc:	e3730001 	cmn	r3, #1	; 0x1
   1b5d0:	e1a01004 	mov	r1, r4
   1b5d4:	e1a00008 	mov	r0, r8
   1b5d8:	0a000002 	beq	1b5e8 <_fwalk_reent+0x54>
   1b5dc:	e1a0e00f 	mov	lr, pc
   1b5e0:	e12fff1a 	bx	sl
   1b5e4:	e1877000 	orr	r7, r7, r0
   1b5e8:	e284405c 	add	r4, r4, #92	; 0x5c
   1b5ec:	e2566001 	subs	r6, r6, #1	; 0x1
   1b5f0:	5afffff1 	bpl	1b5bc <_fwalk_reent+0x28>
   1b5f4:	e5955000 	ldr	r5, [r5]
   1b5f8:	e3550000 	cmp	r5, #0	; 0x0
   1b5fc:	1affffeb 	bne	1b5b0 <_fwalk_reent+0x1c>
   1b600:	ebfffdb4 	bl	1acd8 <__sfp_lock_release>
   1b604:	e1a00007 	mov	r0, r7
   1b608:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1b60c:	e12fff1e 	bx	lr

0001b610 <_fwalk>:
   1b610:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b614:	e1a04000 	mov	r4, r0
   1b618:	e1a08001 	mov	r8, r1
   1b61c:	ebfffdac 	bl	1acd4 <__sfp_lock_acquire>
   1b620:	e2845e2e 	add	r5, r4, #736	; 0x2e0
   1b624:	e3a07000 	mov	r7, #0	; 0x0
   1b628:	ea000010 	b	1b670 <_fwalk+0x60>
   1b62c:	e5954008 	ldr	r4, [r5, #8]
   1b630:	e5956004 	ldr	r6, [r5, #4]
   1b634:	ea00000a 	b	1b664 <_fwalk+0x54>
   1b638:	e1d430fc 	ldrsh	r3, [r4, #12]
   1b63c:	e3530000 	cmp	r3, #0	; 0x0
   1b640:	0a000006 	beq	1b660 <_fwalk+0x50>
   1b644:	e1d430fe 	ldrsh	r3, [r4, #14]
   1b648:	e3730001 	cmn	r3, #1	; 0x1
   1b64c:	e1a00004 	mov	r0, r4
   1b650:	0a000002 	beq	1b660 <_fwalk+0x50>
   1b654:	e1a0e00f 	mov	lr, pc
   1b658:	e12fff18 	bx	r8
   1b65c:	e1877000 	orr	r7, r7, r0
   1b660:	e284405c 	add	r4, r4, #92	; 0x5c
   1b664:	e2566001 	subs	r6, r6, #1	; 0x1
   1b668:	5afffff2 	bpl	1b638 <_fwalk+0x28>
   1b66c:	e5955000 	ldr	r5, [r5]
   1b670:	e3550000 	cmp	r5, #0	; 0x0
   1b674:	1affffec 	bne	1b62c <_fwalk+0x1c>
   1b678:	ebfffd96 	bl	1acd8 <__sfp_lock_release>
   1b67c:	e1a00007 	mov	r0, r7
   1b680:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   1b684:	e12fff1e 	bx	lr

0001b688 <__locale_charset>:
   1b688:	e59f3004 	ldr	r3, [pc, #4]	; 1b694 <.text+0xb694>
   1b68c:	e5930000 	ldr	r0, [r3]
   1b690:	e12fff1e 	bx	lr
   1b694:	0001dbe8 	andeq	sp, r1, r8, ror #23

0001b698 <_localeconv_r>:
   1b698:	e59f0000 	ldr	r0, [pc, #0]	; 1b6a0 <.text+0xb6a0>
   1b69c:	e12fff1e 	bx	lr
   1b6a0:	0001dbb8 	streqh	sp, [r1], -r8

0001b6a4 <_setlocale_r>:
   1b6a4:	e59f3054 	ldr	r3, [pc, #84]	; 1b700 <.text+0xb700>
   1b6a8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1b6ac:	e2524000 	subs	r4, r2, #0	; 0x0
   1b6b0:	e1a05000 	mov	r5, r0
   1b6b4:	e1a06001 	mov	r6, r1
   1b6b8:	e1a00004 	mov	r0, r4
   1b6bc:	e1a01003 	mov	r1, r3
   1b6c0:	0a00000b 	beq	1b6f4 <_setlocale_r+0x50>
   1b6c4:	ebffeeaf 	bl	17188 <strcmp>
   1b6c8:	e3500000 	cmp	r0, #0	; 0x0
   1b6cc:	e59f1030 	ldr	r1, [pc, #48]	; 1b704 <.text+0xb704>
   1b6d0:	e1a00004 	mov	r0, r4
   1b6d4:	0a000003 	beq	1b6e8 <_setlocale_r+0x44>
   1b6d8:	ebffeeaa 	bl	17188 <strcmp>
   1b6dc:	e3500000 	cmp	r0, #0	; 0x0
   1b6e0:	e3a03000 	mov	r3, #0	; 0x0
   1b6e4:	1a000002 	bne	1b6f4 <_setlocale_r+0x50>
   1b6e8:	e5854034 	str	r4, [r5, #52]
   1b6ec:	e5856030 	str	r6, [r5, #48]
   1b6f0:	e59f3008 	ldr	r3, [pc, #8]	; 1b700 <.text+0xb700>
   1b6f4:	e1a00003 	mov	r0, r3
   1b6f8:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1b6fc:	e12fff1e 	bx	lr
   1b700:	0001e37c 	andeq	lr, r1, ip, ror r3
   1b704:	0001e2a0 	andeq	lr, r1, r0, lsr #5

0001b708 <setlocale>:
   1b708:	e1a02001 	mov	r2, r1
   1b70c:	e59f100c 	ldr	r1, [pc, #12]	; 1b720 <.text+0xb720>
   1b710:	e1a03000 	mov	r3, r0
   1b714:	e5910000 	ldr	r0, [r1]
   1b718:	e1a01003 	mov	r1, r3
   1b71c:	eaffffe0 	b	1b6a4 <_setlocale_r>
   1b720:	40000488 	andmi	r0, r0, r8, lsl #9

0001b724 <localeconv>:
   1b724:	e59f0000 	ldr	r0, [pc, #0]	; 1b72c <.text+0xb72c>
   1b728:	e12fff1e 	bx	lr
   1b72c:	0001dbb8 	streqh	sp, [r1], -r8

0001b730 <__smakebuf>:
   1b730:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1b734:	e1d030bc 	ldrh	r3, [r0, #12]
   1b738:	e2135002 	ands	r5, r3, #2	; 0x2
   1b73c:	13a03001 	movne	r3, #1	; 0x1
   1b740:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   1b744:	e1a04000 	mov	r4, r0
   1b748:	12802043 	addne	r2, r0, #67	; 0x43
   1b74c:	15803014 	strne	r3, [r0, #20]
   1b750:	1a00002b 	bne	1b804 <__smakebuf+0xd4>
   1b754:	e1d010fe 	ldrsh	r1, [r0, #14]
   1b758:	e3510000 	cmp	r1, #0	; 0x0
   1b75c:	ba000005 	blt	1b778 <__smakebuf+0x48>
   1b760:	e59f30f8 	ldr	r3, [pc, #248]	; 1b860 <.text+0xb860>
   1b764:	e1a0200d 	mov	r2, sp
   1b768:	e5930000 	ldr	r0, [r3]
   1b76c:	ebffd804 	bl	11784 <_fstat_r>
   1b770:	e3500000 	cmp	r0, #0	; 0x0
   1b774:	aa000002 	bge	1b784 <__smakebuf+0x54>
   1b778:	e1d430bc 	ldrh	r3, [r4, #12]
   1b77c:	e1a06005 	mov	r6, r5
   1b780:	ea000011 	b	1b7cc <__smakebuf+0x9c>
   1b784:	e59d3004 	ldr	r3, [sp, #4]
   1b788:	e2033a0f 	and	r3, r3, #61440	; 0xf000
   1b78c:	e3530a02 	cmp	r3, #8192	; 0x2000
   1b790:	13a06000 	movne	r6, #0	; 0x0
   1b794:	03a06001 	moveq	r6, #1	; 0x1
   1b798:	e3530902 	cmp	r3, #32768	; 0x8000
   1b79c:	1a000009 	bne	1b7c8 <__smakebuf+0x98>
   1b7a0:	e5942028 	ldr	r2, [r4, #40]
   1b7a4:	e59f30b8 	ldr	r3, [pc, #184]	; 1b864 <.text+0xb864>
   1b7a8:	e1520003 	cmp	r2, r3
   1b7ac:	1a000005 	bne	1b7c8 <__smakebuf+0x98>
   1b7b0:	e1d430bc 	ldrh	r3, [r4, #12]
   1b7b4:	e3833b01 	orr	r3, r3, #1024	; 0x400
   1b7b8:	e1c430bc 	strh	r3, [r4, #12]
   1b7bc:	e3a03b01 	mov	r3, #1024	; 0x400
   1b7c0:	e584304c 	str	r3, [r4, #76]
   1b7c4:	ea000002 	b	1b7d4 <__smakebuf+0xa4>
   1b7c8:	e1d430bc 	ldrh	r3, [r4, #12]
   1b7cc:	e3833b02 	orr	r3, r3, #2048	; 0x800
   1b7d0:	e1c430bc 	strh	r3, [r4, #12]
   1b7d4:	e59f5084 	ldr	r5, [pc, #132]	; 1b860 <.text+0xb860>
   1b7d8:	e3a01b01 	mov	r1, #1024	; 0x400
   1b7dc:	e5950000 	ldr	r0, [r5]
   1b7e0:	ebffec72 	bl	169b0 <_malloc_r>
   1b7e4:	e3500000 	cmp	r0, #0	; 0x0
   1b7e8:	e1d420bc 	ldrh	r2, [r4, #12]
   1b7ec:	1a000007 	bne	1b810 <__smakebuf+0xe0>
   1b7f0:	e3821002 	orr	r1, r2, #2	; 0x2
   1b7f4:	e3a03001 	mov	r3, #1	; 0x1
   1b7f8:	e5843014 	str	r3, [r4, #20]
   1b7fc:	e1c410bc 	strh	r1, [r4, #12]
   1b800:	e2842043 	add	r2, r4, #67	; 0x43
   1b804:	e5842010 	str	r2, [r4, #16]
   1b808:	e5842000 	str	r2, [r4]
   1b80c:	ea000010 	b	1b854 <__smakebuf+0x124>
   1b810:	e59f3050 	ldr	r3, [pc, #80]	; 1b868 <.text+0xb868>
   1b814:	e5951000 	ldr	r1, [r5]
   1b818:	e3822080 	orr	r2, r2, #128	; 0x80
   1b81c:	e581303c 	str	r3, [r1, #60]
   1b820:	e3560000 	cmp	r6, #0	; 0x0
   1b824:	e3a03b01 	mov	r3, #1024	; 0x400
   1b828:	e1c420bc 	strh	r2, [r4, #12]
   1b82c:	e5840010 	str	r0, [r4, #16]
   1b830:	e5843014 	str	r3, [r4, #20]
   1b834:	e5840000 	str	r0, [r4]
   1b838:	0a000005 	beq	1b854 <__smakebuf+0x124>
   1b83c:	e1d400fe 	ldrsh	r0, [r4, #14]
   1b840:	ebffd7d3 	bl	11794 <isatty>
   1b844:	e3500000 	cmp	r0, #0	; 0x0
   1b848:	11d430bc 	ldrneh	r3, [r4, #12]
   1b84c:	13833001 	orrne	r3, r3, #1	; 0x1
   1b850:	11c430bc 	strneh	r3, [r4, #12]
   1b854:	e28dd03c 	add	sp, sp, #60	; 0x3c
   1b858:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1b85c:	e12fff1e 	bx	lr
   1b860:	40000488 	andmi	r0, r0, r8, lsl #9
   1b864:	0001c978 	andeq	ip, r1, r8, ror r9
   1b868:	0001acf4 	streqd	sl, [r1], -r4

0001b86c <memchr>:
   1b86c:	e20110ff 	and	r1, r1, #255	; 0xff
   1b870:	ea000003 	b	1b884 <memchr+0x18>
   1b874:	e5d03000 	ldrb	r3, [r0]
   1b878:	e1530001 	cmp	r3, r1
   1b87c:	012fff1e 	bxeq	lr
   1b880:	e2800001 	add	r0, r0, #1	; 0x1
   1b884:	e2522001 	subs	r2, r2, #1	; 0x1
   1b888:	2afffff9 	bcs	1b874 <memchr+0x8>
   1b88c:	e3a00000 	mov	r0, #0	; 0x0
   1b890:	e12fff1e 	bx	lr

0001b894 <memmove>:
   1b894:	e1510000 	cmp	r1, r0
   1b898:	2a00000e 	bcs	1b8d8 <memmove+0x44>
   1b89c:	e0813002 	add	r3, r1, r2
   1b8a0:	e1500003 	cmp	r0, r3
   1b8a4:	31a0c003 	movcc	ip, r3
   1b8a8:	30801002 	addcc	r1, r0, r2
   1b8ac:	3a000002 	bcc	1b8bc <memmove+0x28>
   1b8b0:	ea000008 	b	1b8d8 <memmove+0x44>
   1b8b4:	e57c3001 	ldrb	r3, [ip, #-1]!
   1b8b8:	e5613001 	strb	r3, [r1, #-1]!
   1b8bc:	e2522001 	subs	r2, r2, #1	; 0x1
   1b8c0:	2afffffb 	bcs	1b8b4 <memmove+0x20>
   1b8c4:	e12fff1e 	bx	lr
   1b8c8:	e7dc3001 	ldrb	r3, [ip, r1]
   1b8cc:	e7cc3000 	strb	r3, [ip, r0]
   1b8d0:	e28cc001 	add	ip, ip, #1	; 0x1
   1b8d4:	ea000000 	b	1b8dc <memmove+0x48>
   1b8d8:	e3a0c000 	mov	ip, #0	; 0x0
   1b8dc:	e2522001 	subs	r2, r2, #1	; 0x1
   1b8e0:	2afffff8 	bcs	1b8c8 <memmove+0x34>
   1b8e4:	e12fff1e 	bx	lr

0001b8e8 <_Bfree>:
   1b8e8:	e251c000 	subs	ip, r1, #0	; 0x0
   1b8ec:	1590104c 	ldrne	r1, [r0, #76]
   1b8f0:	159c2004 	ldrne	r2, [ip, #4]
   1b8f4:	17913102 	ldrne	r3, [r1, r2, lsl #2]
   1b8f8:	158c3000 	strne	r3, [ip]
   1b8fc:	1781c102 	strne	ip, [r1, r2, lsl #2]
   1b900:	e12fff1e 	bx	lr

0001b904 <_hi0bits>:
   1b904:	e1a03820 	mov	r3, r0, lsr #16
   1b908:	e1a03803 	mov	r3, r3, lsl #16
   1b90c:	e3530000 	cmp	r3, #0	; 0x0
   1b910:	01a00800 	moveq	r0, r0, lsl #16
   1b914:	13a03000 	movne	r3, #0	; 0x0
   1b918:	03a03010 	moveq	r3, #16	; 0x10
   1b91c:	e31004ff 	tst	r0, #-16777216	; 0xff000000
   1b920:	01a00400 	moveq	r0, r0, lsl #8
   1b924:	02833008 	addeq	r3, r3, #8	; 0x8
   1b928:	e310020f 	tst	r0, #-268435456	; 0xf0000000
   1b92c:	01a00200 	moveq	r0, r0, lsl #4
   1b930:	02833004 	addeq	r3, r3, #4	; 0x4
   1b934:	e3100103 	tst	r0, #-1073741824	; 0xc0000000
   1b938:	01a00100 	moveq	r0, r0, lsl #2
   1b93c:	02833002 	addeq	r3, r3, #2	; 0x2
   1b940:	e3500000 	cmp	r0, #0	; 0x0
   1b944:	ba000002 	blt	1b954 <_hi0bits+0x50>
   1b948:	e3100101 	tst	r0, #1073741824	; 0x40000000
   1b94c:	03a03020 	moveq	r3, #32	; 0x20
   1b950:	12833001 	addne	r3, r3, #1	; 0x1
   1b954:	e1a00003 	mov	r0, r3
   1b958:	e12fff1e 	bx	lr

0001b95c <_lo0bits>:
   1b95c:	e5902000 	ldr	r2, [r0]
   1b960:	e1a01000 	mov	r1, r0
   1b964:	e2120007 	ands	r0, r2, #7	; 0x7
   1b968:	0a000009 	beq	1b994 <_lo0bits+0x38>
   1b96c:	e3120001 	tst	r2, #1	; 0x1
   1b970:	13a00000 	movne	r0, #0	; 0x0
   1b974:	112fff1e 	bxne	lr
   1b978:	e3120002 	tst	r2, #2	; 0x2
   1b97c:	11a030a2 	movne	r3, r2, lsr #1
   1b980:	01a03122 	moveq	r3, r2, lsr #2
   1b984:	13a00001 	movne	r0, #1	; 0x1
   1b988:	03a00002 	moveq	r0, #2	; 0x2
   1b98c:	e5813000 	str	r3, [r1]
   1b990:	e12fff1e 	bx	lr
   1b994:	e1a03802 	mov	r3, r2, lsl #16
   1b998:	e1a03823 	mov	r3, r3, lsr #16
   1b99c:	e3530000 	cmp	r3, #0	; 0x0
   1b9a0:	01a02822 	moveq	r2, r2, lsr #16
   1b9a4:	03a00010 	moveq	r0, #16	; 0x10
   1b9a8:	e31200ff 	tst	r2, #255	; 0xff
   1b9ac:	01a02422 	moveq	r2, r2, lsr #8
   1b9b0:	02800008 	addeq	r0, r0, #8	; 0x8
   1b9b4:	e312000f 	tst	r2, #15	; 0xf
   1b9b8:	01a02222 	moveq	r2, r2, lsr #4
   1b9bc:	02800004 	addeq	r0, r0, #4	; 0x4
   1b9c0:	e3120003 	tst	r2, #3	; 0x3
   1b9c4:	01a02122 	moveq	r2, r2, lsr #2
   1b9c8:	02800002 	addeq	r0, r0, #2	; 0x2
   1b9cc:	e3120001 	tst	r2, #1	; 0x1
   1b9d0:	1a000003 	bne	1b9e4 <_lo0bits+0x88>
   1b9d4:	e1b020a2 	movs	r2, r2, lsr #1
   1b9d8:	03a00020 	moveq	r0, #32	; 0x20
   1b9dc:	012fff1e 	bxeq	lr
   1b9e0:	e2800001 	add	r0, r0, #1	; 0x1
   1b9e4:	e5812000 	str	r2, [r1]
   1b9e8:	e12fff1e 	bx	lr

0001b9ec <__mcmp>:
   1b9ec:	e5903010 	ldr	r3, [r0, #16]
   1b9f0:	e5912010 	ldr	r2, [r1, #16]
   1b9f4:	e1a0c000 	mov	ip, r0
   1b9f8:	e0530002 	subs	r0, r3, r2
   1b9fc:	e52de004 	str	lr, [sp, #-4]!
   1ba00:	1a00000f 	bne	1ba44 <__mcmp+0x58>
   1ba04:	e1a02102 	mov	r2, r2, lsl #2
   1ba08:	e28ce014 	add	lr, ip, #20	; 0x14
   1ba0c:	e2823014 	add	r3, r2, #20	; 0x14
   1ba10:	e0811003 	add	r1, r1, r3
   1ba14:	e08ec002 	add	ip, lr, r2
   1ba18:	e51c2004 	ldr	r2, [ip, #-4]
   1ba1c:	e5113004 	ldr	r3, [r1, #-4]
   1ba20:	e1520003 	cmp	r2, r3
   1ba24:	e24cc004 	sub	ip, ip, #4	; 0x4
   1ba28:	e2411004 	sub	r1, r1, #4	; 0x4
   1ba2c:	0a000002 	beq	1ba3c <__mcmp+0x50>
   1ba30:	33e00000 	mvncc	r0, #0	; 0x0
   1ba34:	23a00001 	movcs	r0, #1	; 0x1
   1ba38:	ea000001 	b	1ba44 <__mcmp+0x58>
   1ba3c:	e15c000e 	cmp	ip, lr
   1ba40:	8afffff4 	bhi	1ba18 <__mcmp+0x2c>
   1ba44:	e49de004 	ldr	lr, [sp], #4
   1ba48:	e12fff1e 	bx	lr

0001ba4c <_ulp>:
   1ba4c:	e59f3054 	ldr	r3, [pc, #84]	; 1baa8 <.text+0xbaa8>
   1ba50:	e0003003 	and	r3, r0, r3
   1ba54:	e243250d 	sub	r2, r3, #54525952	; 0x3400000
   1ba58:	e2623000 	rsb	r3, r2, #0	; 0x0
   1ba5c:	e3520000 	cmp	r2, #0	; 0x0
   1ba60:	e1a0ca43 	mov	ip, r3, asr #20
   1ba64:	c1a00002 	movgt	r0, r2
   1ba68:	ca000004 	bgt	1ba80 <_ulp+0x34>
   1ba6c:	e35c0013 	cmp	ip, #19	; 0x13
   1ba70:	e24c3014 	sub	r3, ip, #20	; 0x14
   1ba74:	ca000003 	bgt	1ba88 <_ulp+0x3c>
   1ba78:	e3a03702 	mov	r3, #524288	; 0x80000
   1ba7c:	e1a00c53 	mov	r0, r3, asr ip
   1ba80:	e3a01000 	mov	r1, #0	; 0x0
   1ba84:	e12fff1e 	bx	lr
   1ba88:	e353001e 	cmp	r3, #30	; 0x1e
   1ba8c:	e263201f 	rsb	r2, r3, #31	; 0x1f
   1ba90:	e3a03001 	mov	r3, #1	; 0x1
   1ba94:	d3a03001 	movle	r3, #1	; 0x1
   1ba98:	d1a03213 	movle	r3, r3, lsl r2
   1ba9c:	e3a00000 	mov	r0, #0	; 0x0
   1baa0:	e1a01003 	mov	r1, r3
   1baa4:	e12fff1e 	bx	lr
   1baa8:	7ff00000 	svcvc	0x00f00000	; IMB

0001baac <_b2d>:
   1baac:	e5903010 	ldr	r3, [r0, #16]
   1bab0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   1bab4:	e2806014 	add	r6, r0, #20	; 0x14
   1bab8:	e0863103 	add	r3, r6, r3, lsl #2
   1babc:	e5137004 	ldr	r7, [r3, #-4]
   1bac0:	e1a00007 	mov	r0, r7
   1bac4:	e1a04001 	mov	r4, r1
   1bac8:	e2435004 	sub	r5, r3, #4	; 0x4
   1bacc:	ebffff8c 	bl	1b904 <_hi0bits>
   1bad0:	e2603020 	rsb	r3, r0, #32	; 0x20
   1bad4:	e350000a 	cmp	r0, #10	; 0xa
   1bad8:	e1a0c000 	mov	ip, r0
   1badc:	e5843000 	str	r3, [r4]
   1bae0:	ca00000a 	bgt	1bb10 <_b2d+0x64>
   1bae4:	e1550006 	cmp	r5, r6
   1bae8:	e260200b 	rsb	r2, r0, #11	; 0xb
   1baec:	8515e004 	ldrhi	lr, [r5, #-4]
   1baf0:	e1a03237 	mov	r3, r7, lsr r2
   1baf4:	93a0e000 	movls	lr, #0	; 0x0
   1baf8:	e1a0223e 	mov	r2, lr, lsr r2
   1bafc:	e38305ff 	orr	r0, r3, #1069547520	; 0x3fc00000
   1bb00:	e28c3015 	add	r3, ip, #21	; 0x15
   1bb04:	e1821317 	orr	r1, r2, r7, lsl r3
   1bb08:	e3800603 	orr	r0, r0, #3145728	; 0x300000
   1bb0c:	ea000011 	b	1bb58 <_b2d+0xac>
   1bb10:	e1550006 	cmp	r5, r6
   1bb14:	93a04000 	movls	r4, #0	; 0x0
   1bb18:	85354004 	ldrhi	r4, [r5, #-4]!
   1bb1c:	e250c00b 	subs	ip, r0, #11	; 0xb
   1bb20:	038705ff 	orreq	r0, r7, #1069547520	; 0x3fc00000
   1bb24:	03800603 	orreq	r0, r0, #3145728	; 0x300000
   1bb28:	01a01004 	moveq	r1, r4
   1bb2c:	0a000009 	beq	1bb58 <_b2d+0xac>
   1bb30:	e1550006 	cmp	r5, r6
   1bb34:	85152004 	ldrhi	r2, [r5, #-4]
   1bb38:	e1a03c17 	mov	r3, r7, lsl ip
   1bb3c:	e26ce020 	rsb	lr, ip, #32	; 0x20
   1bb40:	93a02000 	movls	r2, #0	; 0x0
   1bb44:	e1a02e32 	mov	r2, r2, lsr lr
   1bb48:	e38335ff 	orr	r3, r3, #1069547520	; 0x3fc00000
   1bb4c:	e3833603 	orr	r3, r3, #3145728	; 0x300000
   1bb50:	e1830e34 	orr	r0, r3, r4, lsr lr
   1bb54:	e1821c14 	orr	r1, r2, r4, lsl ip
   1bb58:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   1bb5c:	e12fff1e 	bx	lr

0001bb60 <_ratio>:
   1bb60:	e92d43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb64:	e24dd008 	sub	sp, sp, #8	; 0x8
   1bb68:	e1a04001 	mov	r4, r1
   1bb6c:	e1a0100d 	mov	r1, sp
   1bb70:	e1a05000 	mov	r5, r0
   1bb74:	ebffffcc 	bl	1baac <_b2d>
   1bb78:	e1a08000 	mov	r8, r0
   1bb7c:	e1a09001 	mov	r9, r1
   1bb80:	e1a00004 	mov	r0, r4
   1bb84:	e28d1004 	add	r1, sp, #4	; 0x4
   1bb88:	ebffffc7 	bl	1baac <_b2d>
   1bb8c:	e5943010 	ldr	r3, [r4, #16]
   1bb90:	e1a07001 	mov	r7, r1
   1bb94:	e5951010 	ldr	r1, [r5, #16]
   1bb98:	e59d2004 	ldr	r2, [sp, #4]
   1bb9c:	e0631001 	rsb	r1, r3, r1
   1bba0:	e59d3000 	ldr	r3, [sp]
   1bba4:	e0623003 	rsb	r3, r2, r3
   1bba8:	e0833281 	add	r3, r3, r1, lsl #5
   1bbac:	e1a06000 	mov	r6, r0
   1bbb0:	e3530000 	cmp	r3, #0	; 0x0
   1bbb4:	c0888a03 	addgt	r8, r8, r3, lsl #20
   1bbb8:	d0466a03 	suble	r6, r6, r3, lsl #20
   1bbbc:	e1a00008 	mov	r0, r8
   1bbc0:	e1a01009 	mov	r1, r9
   1bbc4:	e1a02006 	mov	r2, r6
   1bbc8:	e1a03007 	mov	r3, r7
   1bbcc:	eb0006bf 	bl	1d6d0 <__aeabi_ddiv>
   1bbd0:	e28dd008 	add	sp, sp, #8	; 0x8
   1bbd4:	e8bd43f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bbd8:	e12fff1e 	bx	lr

0001bbdc <_mprec_log10>:
   1bbdc:	e3500017 	cmp	r0, #23	; 0x17
   1bbe0:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1bbe4:	e1a06000 	mov	r6, r0
   1bbe8:	c59f404c 	ldrgt	r4, [pc, #76]	; 1bc3c <.text+0xbc3c>
   1bbec:	c3a05000 	movgt	r5, #0	; 0x0
   1bbf0:	ca000006 	bgt	1bc10 <_mprec_log10+0x34>
   1bbf4:	e59f3044 	ldr	r3, [pc, #68]	; 1bc40 <.text+0xbc40>
   1bbf8:	e0833180 	add	r3, r3, r0, lsl #3
   1bbfc:	e8930030 	ldmia	r3, {r4, r5}
   1bc00:	ea000009 	b	1bc2c <_mprec_log10+0x50>
   1bc04:	eb00060d 	bl	1d440 <__aeabi_dmul>
   1bc08:	e1a04000 	mov	r4, r0
   1bc0c:	e1a05001 	mov	r5, r1
   1bc10:	e3560000 	cmp	r6, #0	; 0x0
   1bc14:	e1a00004 	mov	r0, r4
   1bc18:	e1a01005 	mov	r1, r5
   1bc1c:	e59f2020 	ldr	r2, [pc, #32]	; 1bc44 <.text+0xbc44>
   1bc20:	e3a03000 	mov	r3, #0	; 0x0
   1bc24:	e2466001 	sub	r6, r6, #1	; 0x1
   1bc28:	1afffff5 	bne	1bc04 <_mprec_log10+0x28>
   1bc2c:	e1a00004 	mov	r0, r4
   1bc30:	e1a01005 	mov	r1, r5
   1bc34:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1bc38:	e12fff1e 	bx	lr
   1bc3c:	3ff00000 	svccc	0x00f00000	; IMB
   1bc40:	0001dbec 	andeq	sp, r1, ip, ror #23
   1bc44:	40240000 	eormi	r0, r4, r0

0001bc48 <_Balloc>:
   1bc48:	e590304c 	ldr	r3, [r0, #76]
   1bc4c:	e3530000 	cmp	r3, #0	; 0x0
   1bc50:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1bc54:	e3a02010 	mov	r2, #16	; 0x10
   1bc58:	e1a06001 	mov	r6, r1
   1bc5c:	e1a05000 	mov	r5, r0
   1bc60:	e3a01004 	mov	r1, #4	; 0x4
   1bc64:	1a000004 	bne	1bc7c <_Balloc+0x34>
   1bc68:	eb00037e 	bl	1ca68 <_calloc_r>
   1bc6c:	e3500000 	cmp	r0, #0	; 0x0
   1bc70:	e1a04000 	mov	r4, r0
   1bc74:	e585004c 	str	r0, [r5, #76]
   1bc78:	0a000014 	beq	1bcd0 <_Balloc+0x88>
   1bc7c:	e595c04c 	ldr	ip, [r5, #76]
   1bc80:	e79c4106 	ldr	r4, [ip, r6, lsl #2]
   1bc84:	e3540000 	cmp	r4, #0	; 0x0
   1bc88:	15943000 	ldrne	r3, [r4]
   1bc8c:	e3a02001 	mov	r2, #1	; 0x1
   1bc90:	e1a00005 	mov	r0, r5
   1bc94:	e1a01002 	mov	r1, r2
   1bc98:	178c3106 	strne	r3, [ip, r6, lsl #2]
   1bc9c:	1a000008 	bne	1bcc4 <_Balloc+0x7c>
   1bca0:	e1a05612 	mov	r5, r2, lsl r6
   1bca4:	e1a02105 	mov	r2, r5, lsl #2
   1bca8:	e2822014 	add	r2, r2, #20	; 0x14
   1bcac:	eb00036d 	bl	1ca68 <_calloc_r>
   1bcb0:	e3500000 	cmp	r0, #0	; 0x0
   1bcb4:	0a000005 	beq	1bcd0 <_Balloc+0x88>
   1bcb8:	e5806004 	str	r6, [r0, #4]
   1bcbc:	e5805008 	str	r5, [r0, #8]
   1bcc0:	e1a04000 	mov	r4, r0
   1bcc4:	e3a03000 	mov	r3, #0	; 0x0
   1bcc8:	e584300c 	str	r3, [r4, #12]
   1bccc:	e5843010 	str	r3, [r4, #16]
   1bcd0:	e1a00004 	mov	r0, r4
   1bcd4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1bcd8:	e12fff1e 	bx	lr

0001bcdc <_d2b>:
   1bcdc:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bce0:	e1a04001 	mov	r4, r1
   1bce4:	e24dd008 	sub	sp, sp, #8	; 0x8
   1bce8:	e3a01001 	mov	r1, #1	; 0x1
   1bcec:	e1a05002 	mov	r5, r2
   1bcf0:	e1a0a003 	mov	sl, r3
   1bcf4:	e59d9028 	ldr	r9, [sp, #40]
   1bcf8:	ebffffd2 	bl	1bc48 <_Balloc>
   1bcfc:	e3c42102 	bic	r2, r4, #-2147483648	; 0x80000000
   1bd00:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   1bd04:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1bd08:	e1b08a22 	movs	r8, r2, lsr #20
   1bd0c:	e58d3004 	str	r3, [sp, #4]
   1bd10:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   1bd14:	158d3004 	strne	r3, [sp, #4]
   1bd18:	e3550000 	cmp	r5, #0	; 0x0
   1bd1c:	e1a06000 	mov	r6, r0
   1bd20:	e2807014 	add	r7, r0, #20	; 0x14
   1bd24:	0a000013 	beq	1bd78 <_d2b+0x9c>
   1bd28:	e1a0000d 	mov	r0, sp
   1bd2c:	e58d5000 	str	r5, [sp]
   1bd30:	ebffff09 	bl	1b95c <_lo0bits>
   1bd34:	e3500000 	cmp	r0, #0	; 0x0
   1bd38:	159d2004 	ldrne	r2, [sp, #4]
   1bd3c:	e59d1000 	ldr	r1, [sp]
   1bd40:	12603020 	rsbne	r3, r0, #32	; 0x20
   1bd44:	11812312 	orrne	r2, r1, r2, lsl r3
   1bd48:	15862014 	strne	r2, [r6, #20]
   1bd4c:	159d3004 	ldrne	r3, [sp, #4]
   1bd50:	11a03033 	movne	r3, r3, lsr r0
   1bd54:	05861014 	streq	r1, [r6, #20]
   1bd58:	158d3004 	strne	r3, [sp, #4]
   1bd5c:	e59d3004 	ldr	r3, [sp, #4]
   1bd60:	e3530000 	cmp	r3, #0	; 0x0
   1bd64:	03a04001 	moveq	r4, #1	; 0x1
   1bd68:	13a04002 	movne	r4, #2	; 0x2
   1bd6c:	e5873004 	str	r3, [r7, #4]
   1bd70:	e5864010 	str	r4, [r6, #16]
   1bd74:	ea000007 	b	1bd98 <_d2b+0xbc>
   1bd78:	e28d0004 	add	r0, sp, #4	; 0x4
   1bd7c:	ebfffef6 	bl	1b95c <_lo0bits>
   1bd80:	e59d3004 	ldr	r3, [sp, #4]
   1bd84:	e3a02001 	mov	r2, #1	; 0x1
   1bd88:	e5863014 	str	r3, [r6, #20]
   1bd8c:	e5862010 	str	r2, [r6, #16]
   1bd90:	e2800020 	add	r0, r0, #32	; 0x20
   1bd94:	e1a04002 	mov	r4, r2
   1bd98:	e3580000 	cmp	r8, #0	; 0x0
   1bd9c:	0a000006 	beq	1bdbc <_d2b+0xe0>
   1bda0:	e0883000 	add	r3, r8, r0
   1bda4:	e2433e43 	sub	r3, r3, #1072	; 0x430
   1bda8:	e2433003 	sub	r3, r3, #3	; 0x3
   1bdac:	e2602035 	rsb	r2, r0, #53	; 0x35
   1bdb0:	e58a3000 	str	r3, [sl]
   1bdb4:	e5892000 	str	r2, [r9]
   1bdb8:	ea000008 	b	1bde0 <_d2b+0x104>
   1bdbc:	e2403e43 	sub	r3, r0, #1072	; 0x430
   1bdc0:	e0872104 	add	r2, r7, r4, lsl #2
   1bdc4:	e2433002 	sub	r3, r3, #2	; 0x2
   1bdc8:	e58a3000 	str	r3, [sl]
   1bdcc:	e5120004 	ldr	r0, [r2, #-4]
   1bdd0:	ebfffecb 	bl	1b904 <_hi0bits>
   1bdd4:	e1a04284 	mov	r4, r4, lsl #5
   1bdd8:	e0604004 	rsb	r4, r0, r4
   1bddc:	e5894000 	str	r4, [r9]
   1bde0:	e1a00006 	mov	r0, r6
   1bde4:	e28dd008 	add	sp, sp, #8	; 0x8
   1bde8:	e8bd47f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bdec:	e12fff1e 	bx	lr

0001bdf0 <__mdiff>:
   1bdf0:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1bdf4:	e1a04001 	mov	r4, r1
   1bdf8:	e1a07000 	mov	r7, r0
   1bdfc:	e1a01002 	mov	r1, r2
   1be00:	e1a00004 	mov	r0, r4
   1be04:	e1a05002 	mov	r5, r2
   1be08:	ebfffef7 	bl	1b9ec <__mcmp>
   1be0c:	e2506000 	subs	r6, r0, #0	; 0x0
   1be10:	1a000007 	bne	1be34 <__mdiff+0x44>
   1be14:	e1a00007 	mov	r0, r7
   1be18:	e1a01006 	mov	r1, r6
   1be1c:	ebffff89 	bl	1bc48 <_Balloc>
   1be20:	e3a03001 	mov	r3, #1	; 0x1
   1be24:	e1a0e000 	mov	lr, r0
   1be28:	e5803010 	str	r3, [r0, #16]
   1be2c:	e5806014 	str	r6, [r0, #20]
   1be30:	ea000034 	b	1bf08 <__mdiff+0x118>
   1be34:	b1a03005 	movlt	r3, r5
   1be38:	b1a05004 	movlt	r5, r4
   1be3c:	b1a04003 	movlt	r4, r3
   1be40:	e1a00007 	mov	r0, r7
   1be44:	e5941004 	ldr	r1, [r4, #4]
   1be48:	b3a06001 	movlt	r6, #1	; 0x1
   1be4c:	a3a06000 	movge	r6, #0	; 0x0
   1be50:	ebffff7c 	bl	1bc48 <_Balloc>
   1be54:	e5953010 	ldr	r3, [r5, #16]
   1be58:	e5947010 	ldr	r7, [r4, #16]
   1be5c:	e580600c 	str	r6, [r0, #12]
   1be60:	e2846014 	add	r6, r4, #20	; 0x14
   1be64:	e2854014 	add	r4, r5, #20	; 0x14
   1be68:	e1a0e000 	mov	lr, r0
   1be6c:	e0848103 	add	r8, r4, r3, lsl #2
   1be70:	e086a107 	add	sl, r6, r7, lsl #2
   1be74:	e280c014 	add	ip, r0, #20	; 0x14
   1be78:	e3a05000 	mov	r5, #0	; 0x0
   1be7c:	e4942004 	ldr	r2, [r4], #4
   1be80:	e4960004 	ldr	r0, [r6], #4
   1be84:	e1a01802 	mov	r1, r2, lsl #16
   1be88:	e1a03800 	mov	r3, r0, lsl #16
   1be8c:	e1a03823 	mov	r3, r3, lsr #16
   1be90:	e1a01821 	mov	r1, r1, lsr #16
   1be94:	e0613003 	rsb	r3, r1, r3
   1be98:	e1a02822 	mov	r2, r2, lsr #16
   1be9c:	e0833005 	add	r3, r3, r5
   1bea0:	e0622820 	rsb	r2, r2, r0, lsr #16
   1bea4:	e0822843 	add	r2, r2, r3, asr #16
   1bea8:	e1540008 	cmp	r4, r8
   1beac:	e1cc20b2 	strh	r2, [ip, #2]
   1beb0:	e1a05842 	mov	r5, r2, asr #16
   1beb4:	e0cc30b4 	strh	r3, [ip], #4
   1beb8:	2a000009 	bcs	1bee4 <__mdiff+0xf4>
   1bebc:	eaffffee 	b	1be7c <__mdiff+0x8c>
   1bec0:	e4961004 	ldr	r1, [r6], #4
   1bec4:	e1a02801 	mov	r2, r1, lsl #16
   1bec8:	e1a02822 	mov	r2, r2, lsr #16
   1becc:	e0822005 	add	r2, r2, r5
   1bed0:	e1a03842 	mov	r3, r2, asr #16
   1bed4:	e0833821 	add	r3, r3, r1, lsr #16
   1bed8:	e1cc30b2 	strh	r3, [ip, #2]
   1bedc:	e0cc20b4 	strh	r2, [ip], #4
   1bee0:	e1a05843 	mov	r5, r3, asr #16
   1bee4:	e156000a 	cmp	r6, sl
   1bee8:	3afffff4 	bcc	1bec0 <__mdiff+0xd0>
   1beec:	e1a0200c 	mov	r2, ip
   1bef0:	ea000000 	b	1bef8 <__mdiff+0x108>
   1bef4:	e2477001 	sub	r7, r7, #1	; 0x1
   1bef8:	e5323004 	ldr	r3, [r2, #-4]!
   1befc:	e3530000 	cmp	r3, #0	; 0x0
   1bf00:	0afffffb 	beq	1bef4 <__mdiff+0x104>
   1bf04:	e58e7010 	str	r7, [lr, #16]
   1bf08:	e1a0000e 	mov	r0, lr
   1bf0c:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1bf10:	e12fff1e 	bx	lr

0001bf14 <_lshift>:
   1bf14:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1bf18:	e5913010 	ldr	r3, [r1, #16]
   1bf1c:	e1a05001 	mov	r5, r1
   1bf20:	e1a082c2 	mov	r8, r2, asr #5
   1bf24:	e1a04002 	mov	r4, r2
   1bf28:	e2833001 	add	r3, r3, #1	; 0x1
   1bf2c:	e5911004 	ldr	r1, [r1, #4]
   1bf30:	e5952008 	ldr	r2, [r5, #8]
   1bf34:	e1a0a000 	mov	sl, r0
   1bf38:	e0886003 	add	r6, r8, r3
   1bf3c:	ea000001 	b	1bf48 <_lshift+0x34>
   1bf40:	e2811001 	add	r1, r1, #1	; 0x1
   1bf44:	e1a02082 	mov	r2, r2, lsl #1
   1bf48:	e1560002 	cmp	r6, r2
   1bf4c:	cafffffb 	bgt	1bf40 <_lshift+0x2c>
   1bf50:	e1a0000a 	mov	r0, sl
   1bf54:	ebffff3b 	bl	1bc48 <_Balloc>
   1bf58:	e3a02000 	mov	r2, #0	; 0x0
   1bf5c:	e1a07000 	mov	r7, r0
   1bf60:	e2801014 	add	r1, r0, #20	; 0x14
   1bf64:	ea000001 	b	1bf70 <_lshift+0x5c>
   1bf68:	e3a03000 	mov	r3, #0	; 0x0
   1bf6c:	e4813004 	str	r3, [r1], #4
   1bf70:	e1520008 	cmp	r2, r8
   1bf74:	e2822001 	add	r2, r2, #1	; 0x1
   1bf78:	bafffffa 	blt	1bf68 <_lshift+0x54>
   1bf7c:	e5953010 	ldr	r3, [r5, #16]
   1bf80:	e214c01f 	ands	ip, r4, #31	; 0x1f
   1bf84:	e2852014 	add	r2, r5, #20	; 0x14
   1bf88:	e0824103 	add	r4, r2, r3, lsl #2
   1bf8c:	0a00000c 	beq	1bfc4 <_lshift+0xb0>
   1bf90:	e26ce020 	rsb	lr, ip, #32	; 0x20
   1bf94:	e3a00000 	mov	r0, #0	; 0x0
   1bf98:	e5923000 	ldr	r3, [r2]
   1bf9c:	e1803c13 	orr	r3, r0, r3, lsl ip
   1bfa0:	e4813004 	str	r3, [r1], #4
   1bfa4:	e4923004 	ldr	r3, [r2], #4
   1bfa8:	e1520004 	cmp	r2, r4
   1bfac:	e1a00e33 	mov	r0, r3, lsr lr
   1bfb0:	3afffff8 	bcc	1bf98 <_lshift+0x84>
   1bfb4:	e3500000 	cmp	r0, #0	; 0x0
   1bfb8:	12866001 	addne	r6, r6, #1	; 0x1
   1bfbc:	e5810000 	str	r0, [r1]
   1bfc0:	ea000003 	b	1bfd4 <_lshift+0xc0>
   1bfc4:	e4923004 	ldr	r3, [r2], #4
   1bfc8:	e1520004 	cmp	r2, r4
   1bfcc:	e4813004 	str	r3, [r1], #4
   1bfd0:	3afffffb 	bcc	1bfc4 <_lshift+0xb0>
   1bfd4:	e2463001 	sub	r3, r6, #1	; 0x1
   1bfd8:	e1a0000a 	mov	r0, sl
   1bfdc:	e5873010 	str	r3, [r7, #16]
   1bfe0:	e1a01005 	mov	r1, r5
   1bfe4:	ebfffe3f 	bl	1b8e8 <_Bfree>
   1bfe8:	e1a00007 	mov	r0, r7
   1bfec:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1bff0:	e12fff1e 	bx	lr

0001bff4 <_multiply>:
   1bff4:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bff8:	e1a05002 	mov	r5, r2
   1bffc:	e5953010 	ldr	r3, [r5, #16]
   1c000:	e5912010 	ldr	r2, [r1, #16]
   1c004:	e1520003 	cmp	r2, r3
   1c008:	b1a03005 	movlt	r3, r5
   1c00c:	e1a04001 	mov	r4, r1
   1c010:	b1a05001 	movlt	r5, r1
   1c014:	b1a04003 	movlt	r4, r3
   1c018:	e594a010 	ldr	sl, [r4, #16]
   1c01c:	e5957010 	ldr	r7, [r5, #16]
   1c020:	e994000a 	ldmib	r4, {r1, r3}
   1c024:	e08a8007 	add	r8, sl, r7
   1c028:	e1580003 	cmp	r8, r3
   1c02c:	e24dd008 	sub	sp, sp, #8	; 0x8
   1c030:	c2811001 	addgt	r1, r1, #1	; 0x1
   1c034:	ebffff03 	bl	1bc48 <_Balloc>
   1c038:	e2801014 	add	r1, r0, #20	; 0x14
   1c03c:	e0813108 	add	r3, r1, r8, lsl #2
   1c040:	e1a0b000 	mov	fp, r0
   1c044:	e1a02001 	mov	r2, r1
   1c048:	e58d3000 	str	r3, [sp]
   1c04c:	ea000001 	b	1c058 <_multiply+0x64>
   1c050:	e3a03000 	mov	r3, #0	; 0x0
   1c054:	e4823004 	str	r3, [r2], #4
   1c058:	e59d3000 	ldr	r3, [sp]
   1c05c:	e1520003 	cmp	r2, r3
   1c060:	3afffffa 	bcc	1c050 <_multiply+0x5c>
   1c064:	e2856014 	add	r6, r5, #20	; 0x14
   1c068:	e0867107 	add	r7, r6, r7, lsl #2
   1c06c:	e2849014 	add	r9, r4, #20	; 0x14
   1c070:	e58d7004 	str	r7, [sp, #4]
   1c074:	e089a10a 	add	sl, r9, sl, lsl #2
   1c078:	e1a07001 	mov	r7, r1
   1c07c:	ea000032 	b	1c14c <_multiply+0x158>
   1c080:	e1d650b0 	ldrh	r5, [r6]
   1c084:	e3550000 	cmp	r5, #0	; 0x0
   1c088:	0a000014 	beq	1c0e0 <_multiply+0xec>
   1c08c:	e1a04009 	mov	r4, r9
   1c090:	e1a0c007 	mov	ip, r7
   1c094:	e3a0e000 	mov	lr, #0	; 0x0
   1c098:	e59c0000 	ldr	r0, [ip]
   1c09c:	e4941004 	ldr	r1, [r4], #4
   1c0a0:	e1a03800 	mov	r3, r0, lsl #16
   1c0a4:	e1a02801 	mov	r2, r1, lsl #16
   1c0a8:	e1a03823 	mov	r3, r3, lsr #16
   1c0ac:	e08e3003 	add	r3, lr, r3
   1c0b0:	e1a02822 	mov	r2, r2, lsr #16
   1c0b4:	e1a01821 	mov	r1, r1, lsr #16
   1c0b8:	e1a00820 	mov	r0, r0, lsr #16
   1c0bc:	e0223295 	mla	r2, r5, r2, r3
   1c0c0:	e0230195 	mla	r3, r5, r1, r0
   1c0c4:	e154000a 	cmp	r4, sl
   1c0c8:	e0833822 	add	r3, r3, r2, lsr #16
   1c0cc:	e1cc30b2 	strh	r3, [ip, #2]
   1c0d0:	e1a0e823 	mov	lr, r3, lsr #16
   1c0d4:	e0cc20b4 	strh	r2, [ip], #4
   1c0d8:	3affffee 	bcc	1c098 <_multiply+0xa4>
   1c0dc:	e58ce000 	str	lr, [ip]
   1c0e0:	e1d640b2 	ldrh	r4, [r6, #2]
   1c0e4:	e3540000 	cmp	r4, #0	; 0x0
   1c0e8:	0a000015 	beq	1c144 <_multiply+0x150>
   1c0ec:	e597c000 	ldr	ip, [r7]
   1c0f0:	e1a00007 	mov	r0, r7
   1c0f4:	e1a0e009 	mov	lr, r9
   1c0f8:	e3a05000 	mov	r5, #0	; 0x0
   1c0fc:	e49e1004 	ldr	r1, [lr], #4
   1c100:	e1d020b2 	ldrh	r2, [r0, #2]
   1c104:	e1a03801 	mov	r3, r1, lsl #16
   1c108:	e0852002 	add	r2, r5, r2
   1c10c:	e1a03823 	mov	r3, r3, lsr #16
   1c110:	e0222394 	mla	r2, r4, r3, r2
   1c114:	e1c0c0b0 	strh	ip, [r0]
   1c118:	e1c020b2 	strh	r2, [r0, #2]
   1c11c:	e5b03004 	ldr	r3, [r0, #4]!
   1c120:	e1a03803 	mov	r3, r3, lsl #16
   1c124:	e1a01821 	mov	r1, r1, lsr #16
   1c128:	e1a03823 	mov	r3, r3, lsr #16
   1c12c:	e0233194 	mla	r3, r4, r1, r3
   1c130:	e15e000a 	cmp	lr, sl
   1c134:	e083c822 	add	ip, r3, r2, lsr #16
   1c138:	e1a0582c 	mov	r5, ip, lsr #16
   1c13c:	3affffee 	bcc	1c0fc <_multiply+0x108>
   1c140:	e580c000 	str	ip, [r0]
   1c144:	e2866004 	add	r6, r6, #4	; 0x4
   1c148:	e2877004 	add	r7, r7, #4	; 0x4
   1c14c:	e59d3004 	ldr	r3, [sp, #4]
   1c150:	e1560003 	cmp	r6, r3
   1c154:	3affffc9 	bcc	1c080 <_multiply+0x8c>
   1c158:	e59d2000 	ldr	r2, [sp]
   1c15c:	ea000000 	b	1c164 <_multiply+0x170>
   1c160:	e2488001 	sub	r8, r8, #1	; 0x1
   1c164:	e3580000 	cmp	r8, #0	; 0x0
   1c168:	da000002 	ble	1c178 <_multiply+0x184>
   1c16c:	e5323004 	ldr	r3, [r2, #-4]!
   1c170:	e3530000 	cmp	r3, #0	; 0x0
   1c174:	0afffff9 	beq	1c160 <_multiply+0x16c>
   1c178:	e1a0000b 	mov	r0, fp
   1c17c:	e58b8010 	str	r8, [fp, #16]
   1c180:	e28dd008 	add	sp, sp, #8	; 0x8
   1c184:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c188:	e12fff1e 	bx	lr

0001c18c <_i2b>:
   1c18c:	e92d4010 	stmdb	sp!, {r4, lr}
   1c190:	e1a04001 	mov	r4, r1
   1c194:	e3a01001 	mov	r1, #1	; 0x1
   1c198:	ebfffeaa 	bl	1bc48 <_Balloc>
   1c19c:	e3a03001 	mov	r3, #1	; 0x1
   1c1a0:	e5803010 	str	r3, [r0, #16]
   1c1a4:	e5804014 	str	r4, [r0, #20]
   1c1a8:	e8bd4010 	ldmia	sp!, {r4, lr}
   1c1ac:	e12fff1e 	bx	lr

0001c1b0 <_multadd>:
   1c1b0:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1b4:	e5917010 	ldr	r7, [r1, #16]
   1c1b8:	e1a08000 	mov	r8, r0
   1c1bc:	e1a05001 	mov	r5, r1
   1c1c0:	e1a0e002 	mov	lr, r2
   1c1c4:	e1a06003 	mov	r6, r3
   1c1c8:	e2810014 	add	r0, r1, #20	; 0x14
   1c1cc:	e3a0c000 	mov	ip, #0	; 0x0
   1c1d0:	e5901000 	ldr	r1, [r0]
   1c1d4:	e1a03801 	mov	r3, r1, lsl #16
   1c1d8:	e1a03823 	mov	r3, r3, lsr #16
   1c1dc:	e023639e 	mla	r3, lr, r3, r6
   1c1e0:	e1a01821 	mov	r1, r1, lsr #16
   1c1e4:	e1a02823 	mov	r2, r3, lsr #16
   1c1e8:	e022219e 	mla	r2, lr, r1, r2
   1c1ec:	e1a03803 	mov	r3, r3, lsl #16
   1c1f0:	e1a03823 	mov	r3, r3, lsr #16
   1c1f4:	e28cc001 	add	ip, ip, #1	; 0x1
   1c1f8:	e0833802 	add	r3, r3, r2, lsl #16
   1c1fc:	e15c0007 	cmp	ip, r7
   1c200:	e4803004 	str	r3, [r0], #4
   1c204:	e1a06822 	mov	r6, r2, lsr #16
   1c208:	bafffff0 	blt	1c1d0 <_multadd+0x20>
   1c20c:	e3560000 	cmp	r6, #0	; 0x0
   1c210:	0a000015 	beq	1c26c <_multadd+0xbc>
   1c214:	e5953008 	ldr	r3, [r5, #8]
   1c218:	e1570003 	cmp	r7, r3
   1c21c:	ba00000e 	blt	1c25c <_multadd+0xac>
   1c220:	e5951004 	ldr	r1, [r5, #4]
   1c224:	e1a00008 	mov	r0, r8
   1c228:	e2811001 	add	r1, r1, #1	; 0x1
   1c22c:	ebfffe85 	bl	1bc48 <_Balloc>
   1c230:	e5952010 	ldr	r2, [r5, #16]
   1c234:	e1a02102 	mov	r2, r2, lsl #2
   1c238:	e285100c 	add	r1, r5, #12	; 0xc
   1c23c:	e1a04000 	mov	r4, r0
   1c240:	e2822008 	add	r2, r2, #8	; 0x8
   1c244:	e280000c 	add	r0, r0, #12	; 0xc
   1c248:	ebffeb7a 	bl	17038 <memcpy>
   1c24c:	e1a01005 	mov	r1, r5
   1c250:	e1a00008 	mov	r0, r8
   1c254:	ebfffda3 	bl	1b8e8 <_Bfree>
   1c258:	e1a05004 	mov	r5, r4
   1c25c:	e2872001 	add	r2, r7, #1	; 0x1
   1c260:	e0853107 	add	r3, r5, r7, lsl #2
   1c264:	e5836014 	str	r6, [r3, #20]
   1c268:	e5852010 	str	r2, [r5, #16]
   1c26c:	e1a00005 	mov	r0, r5
   1c270:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   1c274:	e12fff1e 	bx	lr

0001c278 <_pow5mult>:
   1c278:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c27c:	e1a04002 	mov	r4, r2
   1c280:	e2122003 	ands	r2, r2, #3	; 0x3
   1c284:	e1a06000 	mov	r6, r0
   1c288:	e1a07001 	mov	r7, r1
   1c28c:	0a000005 	beq	1c2a8 <_pow5mult+0x30>
   1c290:	e59f30b4 	ldr	r3, [pc, #180]	; 1c34c <.text+0xc34c>
   1c294:	e0833102 	add	r3, r3, r2, lsl #2
   1c298:	e5132004 	ldr	r2, [r3, #-4]
   1c29c:	e3a03000 	mov	r3, #0	; 0x0
   1c2a0:	ebffffc2 	bl	1c1b0 <_multadd>
   1c2a4:	e1a07000 	mov	r7, r0
   1c2a8:	e1b08144 	movs	r8, r4, asr #2
   1c2ac:	0a000023 	beq	1c340 <_pow5mult+0xc8>
   1c2b0:	e5965048 	ldr	r5, [r6, #72]
   1c2b4:	e3550000 	cmp	r5, #0	; 0x0
   1c2b8:	1a000008 	bne	1c2e0 <_pow5mult+0x68>
   1c2bc:	e1a00006 	mov	r0, r6
   1c2c0:	e59f1088 	ldr	r1, [pc, #136]	; 1c350 <.text+0xc350>
   1c2c4:	ebffffb0 	bl	1c18c <_i2b>
   1c2c8:	e3a03000 	mov	r3, #0	; 0x0
   1c2cc:	e1a05000 	mov	r5, r0
   1c2d0:	e5860048 	str	r0, [r6, #72]
   1c2d4:	e5803000 	str	r3, [r0]
   1c2d8:	ea000000 	b	1c2e0 <_pow5mult+0x68>
   1c2dc:	e1a05004 	mov	r5, r4
   1c2e0:	e3180001 	tst	r8, #1	; 0x1
   1c2e4:	e1a02005 	mov	r2, r5
   1c2e8:	e1a00006 	mov	r0, r6
   1c2ec:	e1a01007 	mov	r1, r7
   1c2f0:	0a000005 	beq	1c30c <_pow5mult+0x94>
   1c2f4:	ebffff3e 	bl	1bff4 <_multiply>
   1c2f8:	e1a01007 	mov	r1, r7
   1c2fc:	e1a04000 	mov	r4, r0
   1c300:	e1a00006 	mov	r0, r6
   1c304:	ebfffd77 	bl	1b8e8 <_Bfree>
   1c308:	e1a07004 	mov	r7, r4
   1c30c:	e1b080c8 	movs	r8, r8, asr #1
   1c310:	e1a01005 	mov	r1, r5
   1c314:	e1a02005 	mov	r2, r5
   1c318:	e1a00006 	mov	r0, r6
   1c31c:	0a000007 	beq	1c340 <_pow5mult+0xc8>
   1c320:	e5954000 	ldr	r4, [r5]
   1c324:	e3540000 	cmp	r4, #0	; 0x0
   1c328:	1affffeb 	bne	1c2dc <_pow5mult+0x64>
   1c32c:	ebffff30 	bl	1bff4 <_multiply>
   1c330:	e5850000 	str	r0, [r5]
   1c334:	e1a05000 	mov	r5, r0
   1c338:	e5804000 	str	r4, [r0]
   1c33c:	eaffffe7 	b	1c2e0 <_pow5mult+0x68>
   1c340:	e1a00007 	mov	r0, r7
   1c344:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
   1c348:	e12fff1e 	bx	lr
   1c34c:	0001dd04 	andeq	sp, r1, r4, lsl #26
   1c350:	00000271 	andeq	r0, r0, r1, ror r2

0001c354 <_s2b>:
   1c354:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1c358:	e1a08000 	mov	r8, r0
   1c35c:	e1a06001 	mov	r6, r1
   1c360:	e2830008 	add	r0, r3, #8	; 0x8
   1c364:	e3a01009 	mov	r1, #9	; 0x9
   1c368:	e1a0a003 	mov	sl, r3
   1c36c:	e1a05002 	mov	r5, r2
   1c370:	eb000266 	bl	1cd10 <__aeabi_idiv>
   1c374:	e3a03001 	mov	r3, #1	; 0x1
   1c378:	e3a01000 	mov	r1, #0	; 0x0
   1c37c:	ea000001 	b	1c388 <_s2b+0x34>
   1c380:	e1a03083 	mov	r3, r3, lsl #1
   1c384:	e2811001 	add	r1, r1, #1	; 0x1
   1c388:	e1500003 	cmp	r0, r3
   1c38c:	cafffffb 	bgt	1c380 <_s2b+0x2c>
   1c390:	e1a00008 	mov	r0, r8
   1c394:	ebfffe2b 	bl	1bc48 <_Balloc>
   1c398:	e59d301c 	ldr	r3, [sp, #28]
   1c39c:	e3550009 	cmp	r5, #9	; 0x9
   1c3a0:	e5803014 	str	r3, [r0, #20]
   1c3a4:	e3a03001 	mov	r3, #1	; 0x1
   1c3a8:	e1a0c000 	mov	ip, r0
   1c3ac:	e5803010 	str	r3, [r0, #16]
   1c3b0:	d286100a 	addle	r1, r6, #10	; 0xa
   1c3b4:	d3a04009 	movle	r4, #9	; 0x9
   1c3b8:	da00000e 	ble	1c3f8 <_s2b+0xa4>
   1c3bc:	e2867009 	add	r7, r6, #9	; 0x9
   1c3c0:	e3a04009 	mov	r4, #9	; 0x9
   1c3c4:	e7d43006 	ldrb	r3, [r4, r6]
   1c3c8:	e1a0100c 	mov	r1, ip
   1c3cc:	e2433030 	sub	r3, r3, #48	; 0x30
   1c3d0:	e1a00008 	mov	r0, r8
   1c3d4:	e3a0200a 	mov	r2, #10	; 0xa
   1c3d8:	ebffff74 	bl	1c1b0 <_multadd>
   1c3dc:	e2844001 	add	r4, r4, #1	; 0x1
   1c3e0:	e1540005 	cmp	r4, r5
   1c3e4:	e1a0c000 	mov	ip, r0
   1c3e8:	1afffff5 	bne	1c3c4 <_s2b+0x70>
   1c3ec:	e0873005 	add	r3, r7, r5
   1c3f0:	e2431008 	sub	r1, r3, #8	; 0x8
   1c3f4:	e1a04005 	mov	r4, r5
   1c3f8:	e1a05001 	mov	r5, r1
   1c3fc:	ea000003 	b	1c410 <_s2b+0xbc>
   1c400:	e5553001 	ldrb	r3, [r5, #-1]
   1c404:	e2433030 	sub	r3, r3, #48	; 0x30
   1c408:	ebffff68 	bl	1c1b0 <_multadd>
   1c40c:	e1a0c000 	mov	ip, r0
   1c410:	e154000a 	cmp	r4, sl
   1c414:	e1a0100c 	mov	r1, ip
   1c418:	e1a00008 	mov	r0, r8
   1c41c:	e3a0200a 	mov	r2, #10	; 0xa
   1c420:	e2844001 	add	r4, r4, #1	; 0x1
   1c424:	e2855001 	add	r5, r5, #1	; 0x1
   1c428:	bafffff4 	blt	1c400 <_s2b+0xac>
   1c42c:	e1a0000c 	mov	r0, ip
   1c430:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   1c434:	e12fff1e 	bx	lr

0001c438 <_realloc_r>:
   1c438:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c43c:	e2516000 	subs	r6, r1, #0	; 0x0
   1c440:	e24dd004 	sub	sp, sp, #4	; 0x4
   1c444:	e1a0a002 	mov	sl, r2
   1c448:	e1a0b000 	mov	fp, r0
   1c44c:	1a000003 	bne	1c460 <_realloc_r+0x28>
   1c450:	e1a01002 	mov	r1, r2
   1c454:	ebffe955 	bl	169b0 <_malloc_r>
   1c458:	e1a08000 	mov	r8, r0
   1c45c:	ea000125 	b	1c8f8 <_realloc_r+0x4c0>
   1c460:	ebffeb03 	bl	17074 <__malloc_lock>
   1c464:	e28a300b 	add	r3, sl, #11	; 0xb
   1c468:	e3530016 	cmp	r3, #22	; 0x16
   1c46c:	93a09010 	movls	r9, #16	; 0x10
   1c470:	83c39007 	bichi	r9, r3, #7	; 0x7
   1c474:	e159000a 	cmp	r9, sl
   1c478:	23a03000 	movcs	r3, #0	; 0x0
   1c47c:	33a03001 	movcc	r3, #1	; 0x1
   1c480:	e1933fa9 	orrs	r3, r3, r9, lsr #31
   1c484:	13a0300c 	movne	r3, #12	; 0xc
   1c488:	e2467008 	sub	r7, r6, #8	; 0x8
   1c48c:	e516e004 	ldr	lr, [r6, #-4]
   1c490:	13a08000 	movne	r8, #0	; 0x0
   1c494:	158b3000 	strne	r3, [fp]
   1c498:	1a000116 	bne	1c8f8 <_realloc_r+0x4c0>
   1c49c:	e3ce5003 	bic	r5, lr, #3	; 0x3
   1c4a0:	e1550009 	cmp	r5, r9
   1c4a4:	a1a04007 	movge	r4, r7
   1c4a8:	a1a08005 	movge	r8, r5
   1c4ac:	aa0000ef 	bge	1c870 <_realloc_r+0x438>
   1c4b0:	e59f1450 	ldr	r1, [pc, #1104]	; 1c908 <.text+0xc908>
   1c4b4:	e591c008 	ldr	ip, [r1, #8]
   1c4b8:	e0870005 	add	r0, r7, r5
   1c4bc:	e150000c 	cmp	r0, ip
   1c4c0:	e5902004 	ldr	r2, [r0, #4]
   1c4c4:	0a000005 	beq	1c4e0 <_realloc_r+0xa8>
   1c4c8:	e3c23001 	bic	r3, r2, #1	; 0x1
   1c4cc:	e0803003 	add	r3, r0, r3
   1c4d0:	e5933004 	ldr	r3, [r3, #4]
   1c4d4:	e3130001 	tst	r3, #1	; 0x1
   1c4d8:	0a000101 	beq	1c8e4 <_realloc_r+0x4ac>
   1c4dc:	ea000018 	b	1c544 <_realloc_r+0x10c>
   1c4e0:	e3c21003 	bic	r1, r2, #3	; 0x3
   1c4e4:	e0812005 	add	r2, r1, r5
   1c4e8:	e2893010 	add	r3, r9, #16	; 0x10
   1c4ec:	e1520003 	cmp	r2, r3
   1c4f0:	ba000015 	blt	1c54c <_realloc_r+0x114>
   1c4f4:	e0693002 	rsb	r3, r9, r2
   1c4f8:	e3833001 	orr	r3, r3, #1	; 0x1
   1c4fc:	e0872009 	add	r2, r7, r9
   1c500:	e5823004 	str	r3, [r2, #4]
   1c504:	e5973004 	ldr	r3, [r7, #4]
   1c508:	e2033001 	and	r3, r3, #1	; 0x1
   1c50c:	e1833009 	orr	r3, r3, r9
   1c510:	e5873004 	str	r3, [r7, #4]
   1c514:	e59f33ec 	ldr	r3, [pc, #1004]	; 1c908 <.text+0xc908>
   1c518:	e1a0000b 	mov	r0, fp
   1c51c:	e5832008 	str	r2, [r3, #8]
   1c520:	ebffead4 	bl	17078 <__malloc_unlock>
   1c524:	e2878008 	add	r8, r7, #8	; 0x8
   1c528:	ea0000f2 	b	1c8f8 <_realloc_r+0x4c0>
   1c52c:	e2802008 	add	r2, r0, #8	; 0x8
   1c530:	e892000c 	ldmia	r2, {r2, r3}
   1c534:	e1a04007 	mov	r4, r7
   1c538:	e5832008 	str	r2, [r3, #8]
   1c53c:	e582300c 	str	r3, [r2, #12]
   1c540:	ea0000ca 	b	1c870 <_realloc_r+0x438>
   1c544:	e3a01000 	mov	r1, #0	; 0x0
   1c548:	e1a00001 	mov	r0, r1
   1c54c:	e31e0001 	tst	lr, #1	; 0x1
   1c550:	1a000085 	bne	1c76c <_realloc_r+0x334>
   1c554:	e5973000 	ldr	r3, [r7]
   1c558:	e0634007 	rsb	r4, r3, r7
   1c55c:	e5943004 	ldr	r3, [r4, #4]
   1c560:	e3500000 	cmp	r0, #0	; 0x0
   1c564:	e3c32003 	bic	r2, r3, #3	; 0x3
   1c568:	0a00004c 	beq	1c6a0 <_realloc_r+0x268>
   1c56c:	e150000c 	cmp	r0, ip
   1c570:	e0853002 	add	r3, r5, r2
   1c574:	1a000042 	bne	1c684 <_realloc_r+0x24c>
   1c578:	e0811003 	add	r1, r1, r3
   1c57c:	e2893010 	add	r3, r9, #16	; 0x10
   1c580:	e1510003 	cmp	r1, r3
   1c584:	e58d1000 	str	r1, [sp]
   1c588:	ba000044 	blt	1c6a0 <_realloc_r+0x268>
   1c58c:	e594200c 	ldr	r2, [r4, #12]
   1c590:	e5943008 	ldr	r3, [r4, #8]
   1c594:	e245e004 	sub	lr, r5, #4	; 0x4
   1c598:	e35e0024 	cmp	lr, #36	; 0x24
   1c59c:	e5823008 	str	r3, [r2, #8]
   1c5a0:	e583200c 	str	r2, [r3, #12]
   1c5a4:	e2848008 	add	r8, r4, #8	; 0x8
   1c5a8:	8a000024 	bhi	1c640 <_realloc_r+0x208>
   1c5ac:	e35e0013 	cmp	lr, #19	; 0x13
   1c5b0:	e1a00006 	mov	r0, r6
   1c5b4:	e1a0c008 	mov	ip, r8
   1c5b8:	9a000017 	bls	1c61c <_realloc_r+0x1e4>
   1c5bc:	e1a02006 	mov	r2, r6
   1c5c0:	e4923004 	ldr	r3, [r2], #4
   1c5c4:	e5843008 	str	r3, [r4, #8]
   1c5c8:	e5963004 	ldr	r3, [r6, #4]
   1c5cc:	e35e001b 	cmp	lr, #27	; 0x1b
   1c5d0:	e584300c 	str	r3, [r4, #12]
   1c5d4:	e284c010 	add	ip, r4, #16	; 0x10
   1c5d8:	e2820004 	add	r0, r2, #4	; 0x4
   1c5dc:	9a00000e 	bls	1c61c <_realloc_r+0x1e4>
   1c5e0:	e5923004 	ldr	r3, [r2, #4]
   1c5e4:	e5843010 	str	r3, [r4, #16]
   1c5e8:	e5903004 	ldr	r3, [r0, #4]
   1c5ec:	e2802004 	add	r2, r0, #4	; 0x4
   1c5f0:	e35e0024 	cmp	lr, #36	; 0x24
   1c5f4:	e5843014 	str	r3, [r4, #20]
   1c5f8:	e284c018 	add	ip, r4, #24	; 0x18
   1c5fc:	e2820004 	add	r0, r2, #4	; 0x4
   1c600:	1a000005 	bne	1c61c <_realloc_r+0x1e4>
   1c604:	e5923004 	ldr	r3, [r2, #4]
   1c608:	e5843018 	str	r3, [r4, #24]
   1c60c:	e5903004 	ldr	r3, [r0, #4]
   1c610:	e584301c 	str	r3, [r4, #28]
   1c614:	e2800008 	add	r0, r0, #8	; 0x8
   1c618:	e284c020 	add	ip, r4, #32	; 0x20
   1c61c:	e1a01000 	mov	r1, r0
   1c620:	e4913004 	ldr	r3, [r1], #4
   1c624:	e1a0200c 	mov	r2, ip
   1c628:	e4823004 	str	r3, [r2], #4
   1c62c:	e5903004 	ldr	r3, [r0, #4]
   1c630:	e58c3004 	str	r3, [ip, #4]
   1c634:	e5913004 	ldr	r3, [r1, #4]
   1c638:	e5823004 	str	r3, [r2, #4]
   1c63c:	ea000003 	b	1c650 <_realloc_r+0x218>
   1c640:	e1a01006 	mov	r1, r6
   1c644:	e1a0200e 	mov	r2, lr
   1c648:	e1a00008 	mov	r0, r8
   1c64c:	ebfffc90 	bl	1b894 <memmove>
   1c650:	e59d1000 	ldr	r1, [sp]
   1c654:	e0693001 	rsb	r3, r9, r1
   1c658:	e3833001 	orr	r3, r3, #1	; 0x1
   1c65c:	e0842009 	add	r2, r4, r9
   1c660:	e5823004 	str	r3, [r2, #4]
   1c664:	e5943004 	ldr	r3, [r4, #4]
   1c668:	e2033001 	and	r3, r3, #1	; 0x1
   1c66c:	e1833009 	orr	r3, r3, r9
   1c670:	e5843004 	str	r3, [r4, #4]
   1c674:	e59f328c 	ldr	r3, [pc, #652]	; 1c908 <.text+0xc908>
   1c678:	e1a0000b 	mov	r0, fp
   1c67c:	e5832008 	str	r2, [r3, #8]
   1c680:	ea000078 	b	1c868 <_realloc_r+0x430>
   1c684:	e0818003 	add	r8, r1, r3
   1c688:	e1580009 	cmp	r8, r9
   1c68c:	a2802008 	addge	r2, r0, #8	; 0x8
   1c690:	a892000c 	ldmgeia	r2, {r2, r3}
   1c694:	a5832008 	strge	r2, [r3, #8]
   1c698:	a582300c 	strge	r3, [r2, #12]
   1c69c:	aa000002 	bge	1c6ac <_realloc_r+0x274>
   1c6a0:	e0828005 	add	r8, r2, r5
   1c6a4:	e1580009 	cmp	r8, r9
   1c6a8:	ba00002f 	blt	1c76c <_realloc_r+0x334>
   1c6ac:	e594200c 	ldr	r2, [r4, #12]
   1c6b0:	e5943008 	ldr	r3, [r4, #8]
   1c6b4:	e245e004 	sub	lr, r5, #4	; 0x4
   1c6b8:	e35e0024 	cmp	lr, #36	; 0x24
   1c6bc:	e5823008 	str	r3, [r2, #8]
   1c6c0:	e583200c 	str	r2, [r3, #12]
   1c6c4:	e2840008 	add	r0, r4, #8	; 0x8
   1c6c8:	8a000023 	bhi	1c75c <_realloc_r+0x324>
   1c6cc:	e35e0013 	cmp	lr, #19	; 0x13
   1c6d0:	e1a0c006 	mov	ip, r6
   1c6d4:	9a000017 	bls	1c738 <_realloc_r+0x300>
   1c6d8:	e1a02006 	mov	r2, r6
   1c6dc:	e4923004 	ldr	r3, [r2], #4
   1c6e0:	e5843008 	str	r3, [r4, #8]
   1c6e4:	e5963004 	ldr	r3, [r6, #4]
   1c6e8:	e35e001b 	cmp	lr, #27	; 0x1b
   1c6ec:	e584300c 	str	r3, [r4, #12]
   1c6f0:	e2840010 	add	r0, r4, #16	; 0x10
   1c6f4:	e282c004 	add	ip, r2, #4	; 0x4
   1c6f8:	9a00000e 	bls	1c738 <_realloc_r+0x300>
   1c6fc:	e5923004 	ldr	r3, [r2, #4]
   1c700:	e5843010 	str	r3, [r4, #16]
   1c704:	e59c3004 	ldr	r3, [ip, #4]
   1c708:	e28c2004 	add	r2, ip, #4	; 0x4
   1c70c:	e35e0024 	cmp	lr, #36	; 0x24
   1c710:	e5843014 	str	r3, [r4, #20]
   1c714:	e2840018 	add	r0, r4, #24	; 0x18
   1c718:	e282c004 	add	ip, r2, #4	; 0x4
   1c71c:	1a000005 	bne	1c738 <_realloc_r+0x300>
   1c720:	e5923004 	ldr	r3, [r2, #4]
   1c724:	e5843018 	str	r3, [r4, #24]
   1c728:	e59c3004 	ldr	r3, [ip, #4]
   1c72c:	e584301c 	str	r3, [r4, #28]
   1c730:	e28cc008 	add	ip, ip, #8	; 0x8
   1c734:	e2840020 	add	r0, r4, #32	; 0x20
   1c738:	e1a0200c 	mov	r2, ip
   1c73c:	e4923004 	ldr	r3, [r2], #4
   1c740:	e1a01000 	mov	r1, r0
   1c744:	e4813004 	str	r3, [r1], #4
   1c748:	e59c3004 	ldr	r3, [ip, #4]
   1c74c:	e5803004 	str	r3, [r0, #4]
   1c750:	e5923004 	ldr	r3, [r2, #4]
   1c754:	e5813004 	str	r3, [r1, #4]
   1c758:	ea000044 	b	1c870 <_realloc_r+0x438>
   1c75c:	e1a01006 	mov	r1, r6
   1c760:	e1a0200e 	mov	r2, lr
   1c764:	ebfffc4a 	bl	1b894 <memmove>
   1c768:	ea000040 	b	1c870 <_realloc_r+0x438>
   1c76c:	e1a0100a 	mov	r1, sl
   1c770:	e1a0000b 	mov	r0, fp
   1c774:	ebffe88d 	bl	169b0 <_malloc_r>
   1c778:	e2508000 	subs	r8, r0, #0	; 0x0
   1c77c:	0a000038 	beq	1c864 <_realloc_r+0x42c>
   1c780:	e5973004 	ldr	r3, [r7, #4]
   1c784:	e3c33001 	bic	r3, r3, #1	; 0x1
   1c788:	e0873003 	add	r3, r7, r3
   1c78c:	e2482008 	sub	r2, r8, #8	; 0x8
   1c790:	e1520003 	cmp	r2, r3
   1c794:	05183004 	ldreq	r3, [r8, #-4]
   1c798:	03c33003 	biceq	r3, r3, #3	; 0x3
   1c79c:	00858003 	addeq	r8, r5, r3
   1c7a0:	01a04007 	moveq	r4, r7
   1c7a4:	0a000031 	beq	1c870 <_realloc_r+0x438>
   1c7a8:	e2452004 	sub	r2, r5, #4	; 0x4
   1c7ac:	e3520024 	cmp	r2, #36	; 0x24
   1c7b0:	8a000026 	bhi	1c850 <_realloc_r+0x418>
   1c7b4:	e3520013 	cmp	r2, #19	; 0x13
   1c7b8:	e1a00006 	mov	r0, r6
   1c7bc:	e1a0c008 	mov	ip, r8
   1c7c0:	9a000019 	bls	1c82c <_realloc_r+0x3f4>
   1c7c4:	e1a0e006 	mov	lr, r6
   1c7c8:	e49e3004 	ldr	r3, [lr], #4
   1c7cc:	e1a01008 	mov	r1, r8
   1c7d0:	e4813004 	str	r3, [r1], #4
   1c7d4:	e5963004 	ldr	r3, [r6, #4]
   1c7d8:	e352001b 	cmp	r2, #27	; 0x1b
   1c7dc:	e5883004 	str	r3, [r8, #4]
   1c7e0:	e281c004 	add	ip, r1, #4	; 0x4
   1c7e4:	e28e0004 	add	r0, lr, #4	; 0x4
   1c7e8:	9a00000f 	bls	1c82c <_realloc_r+0x3f4>
   1c7ec:	e59e3004 	ldr	r3, [lr, #4]
   1c7f0:	e5813004 	str	r3, [r1, #4]
   1c7f4:	e5903004 	ldr	r3, [r0, #4]
   1c7f8:	e3520024 	cmp	r2, #36	; 0x24
   1c7fc:	e28c1004 	add	r1, ip, #4	; 0x4
   1c800:	e2802004 	add	r2, r0, #4	; 0x4
   1c804:	e58c3004 	str	r3, [ip, #4]
   1c808:	e2820004 	add	r0, r2, #4	; 0x4
   1c80c:	e281c004 	add	ip, r1, #4	; 0x4
   1c810:	1a000005 	bne	1c82c <_realloc_r+0x3f4>
   1c814:	e5923004 	ldr	r3, [r2, #4]
   1c818:	e5813004 	str	r3, [r1, #4]
   1c81c:	e5903004 	ldr	r3, [r0, #4]
   1c820:	e2800008 	add	r0, r0, #8	; 0x8
   1c824:	e58c3004 	str	r3, [ip, #4]
   1c828:	e28cc008 	add	ip, ip, #8	; 0x8
   1c82c:	e1a01000 	mov	r1, r0
   1c830:	e4913004 	ldr	r3, [r1], #4
   1c834:	e1a0200c 	mov	r2, ip
   1c838:	e4823004 	str	r3, [r2], #4
   1c83c:	e5903004 	ldr	r3, [r0, #4]
   1c840:	e58c3004 	str	r3, [ip, #4]
   1c844:	e5913004 	ldr	r3, [r1, #4]
   1c848:	e5823004 	str	r3, [r2, #4]
   1c84c:	ea000001 	b	1c858 <_realloc_r+0x420>
   1c850:	e1a01006 	mov	r1, r6
   1c854:	ebfffc0e 	bl	1b894 <memmove>
   1c858:	e1a01006 	mov	r1, r6
   1c85c:	e1a0000b 	mov	r0, fp
   1c860:	ebfff9c4 	bl	1af78 <_free_r>
   1c864:	e1a0000b 	mov	r0, fp
   1c868:	ebffea02 	bl	17078 <__malloc_unlock>
   1c86c:	ea000021 	b	1c8f8 <_realloc_r+0x4c0>
   1c870:	e0690008 	rsb	r0, r9, r8
   1c874:	e350000f 	cmp	r0, #15	; 0xf
   1c878:	e5943004 	ldr	r3, [r4, #4]
   1c87c:	9a00000d 	bls	1c8b8 <_realloc_r+0x480>
   1c880:	e2033001 	and	r3, r3, #1	; 0x1
   1c884:	e0841009 	add	r1, r4, r9
   1c888:	e1833009 	orr	r3, r3, r9
   1c88c:	e3802001 	orr	r2, r0, #1	; 0x1
   1c890:	e5843004 	str	r3, [r4, #4]
   1c894:	e5812004 	str	r2, [r1, #4]
   1c898:	e0812000 	add	r2, r1, r0
   1c89c:	e5923004 	ldr	r3, [r2, #4]
   1c8a0:	e3833001 	orr	r3, r3, #1	; 0x1
   1c8a4:	e5823004 	str	r3, [r2, #4]
   1c8a8:	e2811008 	add	r1, r1, #8	; 0x8
   1c8ac:	e1a0000b 	mov	r0, fp
   1c8b0:	ebfff9b0 	bl	1af78 <_free_r>
   1c8b4:	ea000006 	b	1c8d4 <_realloc_r+0x49c>
   1c8b8:	e2033001 	and	r3, r3, #1	; 0x1
   1c8bc:	e1833008 	orr	r3, r3, r8
   1c8c0:	e5843004 	str	r3, [r4, #4]
   1c8c4:	e0842008 	add	r2, r4, r8
   1c8c8:	e5923004 	ldr	r3, [r2, #4]
   1c8cc:	e3833001 	orr	r3, r3, #1	; 0x1
   1c8d0:	e5823004 	str	r3, [r2, #4]
   1c8d4:	e1a0000b 	mov	r0, fp
   1c8d8:	ebffe9e6 	bl	17078 <__malloc_unlock>
   1c8dc:	e2848008 	add	r8, r4, #8	; 0x8
   1c8e0:	ea000004 	b	1c8f8 <_realloc_r+0x4c0>
   1c8e4:	e3c21003 	bic	r1, r2, #3	; 0x3
   1c8e8:	e0818005 	add	r8, r1, r5
   1c8ec:	e1580009 	cmp	r8, r9
   1c8f0:	aaffff0d 	bge	1c52c <_realloc_r+0xf4>
   1c8f4:	eaffff14 	b	1c54c <_realloc_r+0x114>
   1c8f8:	e1a00008 	mov	r0, r8
   1c8fc:	e28dd004 	add	sp, sp, #4	; 0x4
   1c900:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c904:	e12fff1e 	bx	lr
   1c908:	40000078 	andmi	r0, r0, r8, ror r0

0001c90c <isinf>:
   1c90c:	e2613000 	rsb	r3, r1, #0	; 0x0
   1c910:	e1833001 	orr	r3, r3, r1
   1c914:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1c918:	e1800fa3 	orr	r0, r0, r3, lsr #31
   1c91c:	e260047f 	rsb	r0, r0, #2130706432	; 0x7f000000
   1c920:	e280060f 	add	r0, r0, #15728640	; 0xf00000
   1c924:	e2603000 	rsb	r3, r0, #0	; 0x0
   1c928:	e1800003 	orr	r0, r0, r3
   1c92c:	e1a00fa0 	mov	r0, r0, lsr #31
   1c930:	e2600001 	rsb	r0, r0, #1	; 0x1
   1c934:	e12fff1e 	bx	lr

0001c938 <isnan>:
   1c938:	e2613000 	rsb	r3, r1, #0	; 0x0
   1c93c:	e1833001 	orr	r3, r3, r1
   1c940:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1c944:	e1800fa3 	orr	r0, r0, r3, lsr #31
   1c948:	e260047f 	rsb	r0, r0, #2130706432	; 0x7f000000
   1c94c:	e280060f 	add	r0, r0, #15728640	; 0xf00000
   1c950:	e1a00fa0 	mov	r0, r0, lsr #31
   1c954:	e12fff1e 	bx	lr

0001c958 <__sclose>:
   1c958:	e59f3014 	ldr	r3, [pc, #20]	; 1c974 <.text+0xc974>
   1c95c:	e1d010fe 	ldrsh	r1, [r0, #14]
   1c960:	e52de004 	str	lr, [sp, #-4]!
   1c964:	e5930000 	ldr	r0, [r3]
   1c968:	ebffd381 	bl	11774 <_close_r>
   1c96c:	e49de004 	ldr	lr, [sp], #4
   1c970:	e12fff1e 	bx	lr
   1c974:	40000488 	andmi	r0, r0, r8, lsl #9

0001c978 <__sseek>:
   1c978:	e1a03002 	mov	r3, r2
   1c97c:	e59f2038 	ldr	r2, [pc, #56]	; 1c9bc <.text+0xc9bc>
   1c980:	e92d4010 	stmdb	sp!, {r4, lr}
   1c984:	e1a04000 	mov	r4, r0
   1c988:	e5920000 	ldr	r0, [r2]
   1c98c:	e1a02001 	mov	r2, r1
   1c990:	e1d410fe 	ldrsh	r1, [r4, #14]
   1c994:	ebffd378 	bl	1177c <_lseek_r>
   1c998:	e1d430bc 	ldrh	r3, [r4, #12]
   1c99c:	e3700001 	cmn	r0, #1	; 0x1
   1c9a0:	e3832a01 	orr	r2, r3, #4096	; 0x1000
   1c9a4:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
   1c9a8:	01c430bc 	streqh	r3, [r4, #12]
   1c9ac:	11c420bc 	strneh	r2, [r4, #12]
   1c9b0:	15840050 	strne	r0, [r4, #80]
   1c9b4:	e8bd4010 	ldmia	sp!, {r4, lr}
   1c9b8:	e12fff1e 	bx	lr
   1c9bc:	40000488 	andmi	r0, r0, r8, lsl #9

0001c9c0 <__swrite>:
   1c9c0:	e1d030bc 	ldrh	r3, [r0, #12]
   1c9c4:	e3130c01 	tst	r3, #256	; 0x100
   1c9c8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1c9cc:	e3a03002 	mov	r3, #2	; 0x2
   1c9d0:	e1a06002 	mov	r6, r2
   1c9d4:	e1a04000 	mov	r4, r0
   1c9d8:	e1a05001 	mov	r5, r1
   1c9dc:	e3a02000 	mov	r2, #0	; 0x0
   1c9e0:	159f1034 	ldrne	r1, [pc, #52]	; 1ca1c <.text+0xca1c>
   1c9e4:	15910000 	ldrne	r0, [r1]
   1c9e8:	11d410fe 	ldrnesh	r1, [r4, #14]
   1c9ec:	1bffd362 	blne	1177c <_lseek_r>
   1c9f0:	e1d430bc 	ldrh	r3, [r4, #12]
   1c9f4:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
   1c9f8:	e1c430bc 	strh	r3, [r4, #12]
   1c9fc:	e59f3018 	ldr	r3, [pc, #24]	; 1ca1c <.text+0xca1c>
   1ca00:	e1d410fe 	ldrsh	r1, [r4, #14]
   1ca04:	e5930000 	ldr	r0, [r3]
   1ca08:	e1a02005 	mov	r2, r5
   1ca0c:	e1a03006 	mov	r3, r6
   1ca10:	ebffd355 	bl	1176c <_write_r>
   1ca14:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1ca18:	e12fff1e 	bx	lr
   1ca1c:	40000488 	andmi	r0, r0, r8, lsl #9

0001ca20 <__sread>:
   1ca20:	e1a03002 	mov	r3, r2
   1ca24:	e59f2038 	ldr	r2, [pc, #56]	; 1ca64 <.text+0xca64>
   1ca28:	e92d4010 	stmdb	sp!, {r4, lr}
   1ca2c:	e1a04000 	mov	r4, r0
   1ca30:	e5920000 	ldr	r0, [r2]
   1ca34:	e1a02001 	mov	r2, r1
   1ca38:	e1d410fe 	ldrsh	r1, [r4, #14]
   1ca3c:	ebffd348 	bl	11764 <_read_r>
   1ca40:	e3500000 	cmp	r0, #0	; 0x0
   1ca44:	a5943050 	ldrge	r3, [r4, #80]
   1ca48:	b1d430bc 	ldrlth	r3, [r4, #12]
   1ca4c:	a0833000 	addge	r3, r3, r0
   1ca50:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
   1ca54:	a5843050 	strge	r3, [r4, #80]
   1ca58:	b1c430bc 	strlth	r3, [r4, #12]
   1ca5c:	e8bd4010 	ldmia	sp!, {r4, lr}
   1ca60:	e12fff1e 	bx	lr
   1ca64:	40000488 	andmi	r0, r0, r8, lsl #9

0001ca68 <_calloc_r>:
   1ca68:	e92d4010 	stmdb	sp!, {r4, lr}
   1ca6c:	e0010192 	mul	r1, r2, r1
   1ca70:	ebffe7ce 	bl	169b0 <_malloc_r>
   1ca74:	e2504000 	subs	r4, r0, #0	; 0x0
   1ca78:	0a00001e 	beq	1caf8 <_calloc_r+0x90>
   1ca7c:	e5143004 	ldr	r3, [r4, #-4]
   1ca80:	e3c33003 	bic	r3, r3, #3	; 0x3
   1ca84:	e2433004 	sub	r3, r3, #4	; 0x4
   1ca88:	e3a0e000 	mov	lr, #0	; 0x0
   1ca8c:	e3530024 	cmp	r3, #36	; 0x24
   1ca90:	e1a02003 	mov	r2, r3
   1ca94:	e1a0100e 	mov	r1, lr
   1ca98:	8a000015 	bhi	1caf4 <_calloc_r+0x8c>
   1ca9c:	e3530013 	cmp	r3, #19	; 0x13
   1caa0:	e1a01004 	mov	r1, r4
   1caa4:	e1a02004 	mov	r2, r4
   1caa8:	9a00000c 	bls	1cae0 <_calloc_r+0x78>
   1caac:	e481e004 	str	lr, [r1], #4
   1cab0:	e353001b 	cmp	r3, #27	; 0x1b
   1cab4:	e2812004 	add	r2, r1, #4	; 0x4
   1cab8:	e584e004 	str	lr, [r4, #4]
   1cabc:	e282c004 	add	ip, r2, #4	; 0x4
   1cac0:	9a000006 	bls	1cae0 <_calloc_r+0x78>
   1cac4:	e3530024 	cmp	r3, #36	; 0x24
   1cac8:	e581e004 	str	lr, [r1, #4]
   1cacc:	e582e004 	str	lr, [r2, #4]
   1cad0:	e28c2004 	add	r2, ip, #4	; 0x4
   1cad4:	058ce004 	streq	lr, [ip, #4]
   1cad8:	0582e004 	streq	lr, [r2, #4]
   1cadc:	02822008 	addeq	r2, r2, #8	; 0x8
   1cae0:	e1a03002 	mov	r3, r2
   1cae4:	e483e004 	str	lr, [r3], #4
   1cae8:	e582e004 	str	lr, [r2, #4]
   1caec:	e583e004 	str	lr, [r3, #4]
   1caf0:	ea000000 	b	1caf8 <_calloc_r+0x90>
   1caf4:	ebffe957 	bl	17058 <memset>
   1caf8:	e1a00004 	mov	r0, r4
   1cafc:	e8bd4010 	ldmia	sp!, {r4, lr}
   1cb00:	e12fff1e 	bx	lr

0001cb04 <_fclose_r>:
   1cb04:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1cb08:	e2515000 	subs	r5, r1, #0	; 0x0
   1cb0c:	e1a06000 	mov	r6, r0
   1cb10:	01a04005 	moveq	r4, r5
   1cb14:	0a00002f 	beq	1cbd8 <_fclose_r+0xd4>
   1cb18:	ebfff86d 	bl	1acd4 <__sfp_lock_acquire>
   1cb1c:	e3560000 	cmp	r6, #0	; 0x0
   1cb20:	0a000003 	beq	1cb34 <_fclose_r+0x30>
   1cb24:	e5963038 	ldr	r3, [r6, #56]
   1cb28:	e3530000 	cmp	r3, #0	; 0x0
   1cb2c:	01a00006 	moveq	r0, r6
   1cb30:	0bfff847 	bleq	1ac54 <__sinit>
   1cb34:	e1d540bc 	ldrh	r4, [r5, #12]
   1cb38:	e3540000 	cmp	r4, #0	; 0x0
   1cb3c:	0a000024 	beq	1cbd4 <_fclose_r+0xd0>
   1cb40:	e2140008 	ands	r0, r4, #8	; 0x8
   1cb44:	11a00005 	movne	r0, r5
   1cb48:	1bfff7f5 	blne	1ab24 <fflush>
   1cb4c:	e595302c 	ldr	r3, [r5, #44]
   1cb50:	e3530000 	cmp	r3, #0	; 0x0
   1cb54:	e1a04000 	mov	r4, r0
   1cb58:	0a000004 	beq	1cb70 <_fclose_r+0x6c>
   1cb5c:	e595001c 	ldr	r0, [r5, #28]
   1cb60:	e1a0e00f 	mov	lr, pc
   1cb64:	e12fff13 	bx	r3
   1cb68:	e3500000 	cmp	r0, #0	; 0x0
   1cb6c:	b3e04000 	mvnlt	r4, #0	; 0x0
   1cb70:	e1d530bc 	ldrh	r3, [r5, #12]
   1cb74:	e3130080 	tst	r3, #128	; 0x80
   1cb78:	11a00006 	movne	r0, r6
   1cb7c:	15951010 	ldrne	r1, [r5, #16]
   1cb80:	1bfff8fc 	blne	1af78 <_free_r>
   1cb84:	e5951030 	ldr	r1, [r5, #48]
   1cb88:	e3510000 	cmp	r1, #0	; 0x0
   1cb8c:	0a000006 	beq	1cbac <_fclose_r+0xa8>
   1cb90:	e2853040 	add	r3, r5, #64	; 0x40
   1cb94:	e1510003 	cmp	r1, r3
   1cb98:	159f3044 	ldrne	r3, [pc, #68]	; 1cbe4 <.text+0xcbe4>
   1cb9c:	15930000 	ldrne	r0, [r3]
   1cba0:	1bfff8f4 	blne	1af78 <_free_r>
   1cba4:	e3a03000 	mov	r3, #0	; 0x0
   1cba8:	e5853030 	str	r3, [r5, #48]
   1cbac:	e5951044 	ldr	r1, [r5, #68]
   1cbb0:	e3510000 	cmp	r1, #0	; 0x0
   1cbb4:	0a000004 	beq	1cbcc <_fclose_r+0xc8>
   1cbb8:	e59f3024 	ldr	r3, [pc, #36]	; 1cbe4 <.text+0xcbe4>
   1cbbc:	e5930000 	ldr	r0, [r3]
   1cbc0:	ebfff8ec 	bl	1af78 <_free_r>
   1cbc4:	e3a03000 	mov	r3, #0	; 0x0
   1cbc8:	e5853044 	str	r3, [r5, #68]
   1cbcc:	e3a03000 	mov	r3, #0	; 0x0
   1cbd0:	e1c530bc 	strh	r3, [r5, #12]
   1cbd4:	ebfff83f 	bl	1acd8 <__sfp_lock_release>
   1cbd8:	e1a00004 	mov	r0, r4
   1cbdc:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1cbe0:	e12fff1e 	bx	lr
   1cbe4:	40000488 	andmi	r0, r0, r8, lsl #9

0001cbe8 <fclose>:
   1cbe8:	e59f3008 	ldr	r3, [pc, #8]	; 1cbf8 <.text+0xcbf8>
   1cbec:	e1a01000 	mov	r1, r0
   1cbf0:	e5930000 	ldr	r0, [r3]
   1cbf4:	eaffffc2 	b	1cb04 <_fclose_r>
   1cbf8:	40000488 	andmi	r0, r0, r8, lsl #9

0001cbfc <__aeabi_uidiv>:
   1cbfc:	e2512001 	subs	r2, r1, #1	; 0x1
   1cc00:	012fff1e 	bxeq	lr
   1cc04:	3a000036 	bcc	1cce4 <__aeabi_uidiv+0xe8>
   1cc08:	e1500001 	cmp	r0, r1
   1cc0c:	9a000022 	bls	1cc9c <__aeabi_uidiv+0xa0>
   1cc10:	e1110002 	tst	r1, r2
   1cc14:	0a000023 	beq	1cca8 <__aeabi_uidiv+0xac>
   1cc18:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1cc1c:	01a01181 	moveq	r1, r1, lsl #3
   1cc20:	03a03008 	moveq	r3, #8	; 0x8
   1cc24:	13a03001 	movne	r3, #1	; 0x1
   1cc28:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1cc2c:	31510000 	cmpcc	r1, r0
   1cc30:	31a01201 	movcc	r1, r1, lsl #4
   1cc34:	31a03203 	movcc	r3, r3, lsl #4
   1cc38:	3afffffa 	bcc	1cc28 <__aeabi_uidiv+0x2c>
   1cc3c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1cc40:	31510000 	cmpcc	r1, r0
   1cc44:	31a01081 	movcc	r1, r1, lsl #1
   1cc48:	31a03083 	movcc	r3, r3, lsl #1
   1cc4c:	3afffffa 	bcc	1cc3c <__aeabi_uidiv+0x40>
   1cc50:	e3a02000 	mov	r2, #0	; 0x0
   1cc54:	e1500001 	cmp	r0, r1
   1cc58:	20400001 	subcs	r0, r0, r1
   1cc5c:	21822003 	orrcs	r2, r2, r3
   1cc60:	e15000a1 	cmp	r0, r1, lsr #1
   1cc64:	204000a1 	subcs	r0, r0, r1, lsr #1
   1cc68:	218220a3 	orrcs	r2, r2, r3, lsr #1
   1cc6c:	e1500121 	cmp	r0, r1, lsr #2
   1cc70:	20400121 	subcs	r0, r0, r1, lsr #2
   1cc74:	21822123 	orrcs	r2, r2, r3, lsr #2
   1cc78:	e15001a1 	cmp	r0, r1, lsr #3
   1cc7c:	204001a1 	subcs	r0, r0, r1, lsr #3
   1cc80:	218221a3 	orrcs	r2, r2, r3, lsr #3
   1cc84:	e3500000 	cmp	r0, #0	; 0x0
   1cc88:	11b03223 	movnes	r3, r3, lsr #4
   1cc8c:	11a01221 	movne	r1, r1, lsr #4
   1cc90:	1affffef 	bne	1cc54 <__aeabi_uidiv+0x58>
   1cc94:	e1a00002 	mov	r0, r2
   1cc98:	e12fff1e 	bx	lr
   1cc9c:	03a00001 	moveq	r0, #1	; 0x1
   1cca0:	13a00000 	movne	r0, #0	; 0x0
   1cca4:	e12fff1e 	bx	lr
   1cca8:	e3510801 	cmp	r1, #65536	; 0x10000
   1ccac:	21a01821 	movcs	r1, r1, lsr #16
   1ccb0:	23a02010 	movcs	r2, #16	; 0x10
   1ccb4:	33a02000 	movcc	r2, #0	; 0x0
   1ccb8:	e3510c01 	cmp	r1, #256	; 0x100
   1ccbc:	21a01421 	movcs	r1, r1, lsr #8
   1ccc0:	22822008 	addcs	r2, r2, #8	; 0x8
   1ccc4:	e3510010 	cmp	r1, #16	; 0x10
   1ccc8:	21a01221 	movcs	r1, r1, lsr #4
   1cccc:	22822004 	addcs	r2, r2, #4	; 0x4
   1ccd0:	e3510004 	cmp	r1, #4	; 0x4
   1ccd4:	82822003 	addhi	r2, r2, #3	; 0x3
   1ccd8:	908220a1 	addls	r2, r2, r1, lsr #1
   1ccdc:	e1a00230 	mov	r0, r0, lsr r2
   1cce0:	e12fff1e 	bx	lr
   1cce4:	e52de008 	str	lr, [sp, #-8]!
   1cce8:	eb0000c7 	bl	1d00c <__aeabi_idiv0>
   1ccec:	e3a00000 	mov	r0, #0	; 0x0
   1ccf0:	e49de008 	ldr	lr, [sp], #8
   1ccf4:	e12fff1e 	bx	lr

0001ccf8 <__aeabi_uidivmod>:
   1ccf8:	e92d4003 	stmdb	sp!, {r0, r1, lr}
   1ccfc:	ebffffbe 	bl	1cbfc <__aeabi_uidiv>
   1cd00:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
   1cd04:	e0030092 	mul	r3, r2, r0
   1cd08:	e0411003 	sub	r1, r1, r3
   1cd0c:	e12fff1e 	bx	lr

0001cd10 <__aeabi_idiv>:
   1cd10:	e3510000 	cmp	r1, #0	; 0x0
   1cd14:	e020c001 	eor	ip, r0, r1
   1cd18:	0a000042 	beq	1ce28 <__aeabi_idiv+0x118>
   1cd1c:	42611000 	rsbmi	r1, r1, #0	; 0x0
   1cd20:	e2512001 	subs	r2, r1, #1	; 0x1
   1cd24:	0a000027 	beq	1cdc8 <__aeabi_idiv+0xb8>
   1cd28:	e1b03000 	movs	r3, r0
   1cd2c:	42603000 	rsbmi	r3, r0, #0	; 0x0
   1cd30:	e1530001 	cmp	r3, r1
   1cd34:	9a000026 	bls	1cdd4 <__aeabi_idiv+0xc4>
   1cd38:	e1110002 	tst	r1, r2
   1cd3c:	0a000028 	beq	1cde4 <__aeabi_idiv+0xd4>
   1cd40:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1cd44:	01a01181 	moveq	r1, r1, lsl #3
   1cd48:	03a02008 	moveq	r2, #8	; 0x8
   1cd4c:	13a02001 	movne	r2, #1	; 0x1
   1cd50:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1cd54:	31510003 	cmpcc	r1, r3
   1cd58:	31a01201 	movcc	r1, r1, lsl #4
   1cd5c:	31a02202 	movcc	r2, r2, lsl #4
   1cd60:	3afffffa 	bcc	1cd50 <__aeabi_idiv+0x40>
   1cd64:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1cd68:	31510003 	cmpcc	r1, r3
   1cd6c:	31a01081 	movcc	r1, r1, lsl #1
   1cd70:	31a02082 	movcc	r2, r2, lsl #1
   1cd74:	3afffffa 	bcc	1cd64 <__aeabi_idiv+0x54>
   1cd78:	e3a00000 	mov	r0, #0	; 0x0
   1cd7c:	e1530001 	cmp	r3, r1
   1cd80:	20433001 	subcs	r3, r3, r1
   1cd84:	21800002 	orrcs	r0, r0, r2
   1cd88:	e15300a1 	cmp	r3, r1, lsr #1
   1cd8c:	204330a1 	subcs	r3, r3, r1, lsr #1
   1cd90:	218000a2 	orrcs	r0, r0, r2, lsr #1
   1cd94:	e1530121 	cmp	r3, r1, lsr #2
   1cd98:	20433121 	subcs	r3, r3, r1, lsr #2
   1cd9c:	21800122 	orrcs	r0, r0, r2, lsr #2
   1cda0:	e15301a1 	cmp	r3, r1, lsr #3
   1cda4:	204331a1 	subcs	r3, r3, r1, lsr #3
   1cda8:	218001a2 	orrcs	r0, r0, r2, lsr #3
   1cdac:	e3530000 	cmp	r3, #0	; 0x0
   1cdb0:	11b02222 	movnes	r2, r2, lsr #4
   1cdb4:	11a01221 	movne	r1, r1, lsr #4
   1cdb8:	1affffef 	bne	1cd7c <__aeabi_idiv+0x6c>
   1cdbc:	e35c0000 	cmp	ip, #0	; 0x0
   1cdc0:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1cdc4:	e12fff1e 	bx	lr
   1cdc8:	e13c0000 	teq	ip, r0
   1cdcc:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1cdd0:	e12fff1e 	bx	lr
   1cdd4:	33a00000 	movcc	r0, #0	; 0x0
   1cdd8:	01a00fcc 	moveq	r0, ip, asr #31
   1cddc:	03800001 	orreq	r0, r0, #1	; 0x1
   1cde0:	e12fff1e 	bx	lr
   1cde4:	e3510801 	cmp	r1, #65536	; 0x10000
   1cde8:	21a01821 	movcs	r1, r1, lsr #16
   1cdec:	23a02010 	movcs	r2, #16	; 0x10
   1cdf0:	33a02000 	movcc	r2, #0	; 0x0
   1cdf4:	e3510c01 	cmp	r1, #256	; 0x100
   1cdf8:	21a01421 	movcs	r1, r1, lsr #8
   1cdfc:	22822008 	addcs	r2, r2, #8	; 0x8
   1ce00:	e3510010 	cmp	r1, #16	; 0x10
   1ce04:	21a01221 	movcs	r1, r1, lsr #4
   1ce08:	22822004 	addcs	r2, r2, #4	; 0x4
   1ce0c:	e3510004 	cmp	r1, #4	; 0x4
   1ce10:	82822003 	addhi	r2, r2, #3	; 0x3
   1ce14:	908220a1 	addls	r2, r2, r1, lsr #1
   1ce18:	e35c0000 	cmp	ip, #0	; 0x0
   1ce1c:	e1a00233 	mov	r0, r3, lsr r2
   1ce20:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1ce24:	e12fff1e 	bx	lr
   1ce28:	e52de008 	str	lr, [sp, #-8]!
   1ce2c:	eb000076 	bl	1d00c <__aeabi_idiv0>
   1ce30:	e3a00000 	mov	r0, #0	; 0x0
   1ce34:	e49de008 	ldr	lr, [sp], #8
   1ce38:	e12fff1e 	bx	lr

0001ce3c <__aeabi_idivmod>:
   1ce3c:	e92d4003 	stmdb	sp!, {r0, r1, lr}
   1ce40:	ebffffb2 	bl	1cd10 <__aeabi_idiv>
   1ce44:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
   1ce48:	e0030092 	mul	r3, r2, r0
   1ce4c:	e0411003 	sub	r1, r1, r3
   1ce50:	e12fff1e 	bx	lr

0001ce54 <__umodsi3>:
   1ce54:	e2512001 	subs	r2, r1, #1	; 0x1
   1ce58:	3a00002c 	bcc	1cf10 <__umodsi3+0xbc>
   1ce5c:	11500001 	cmpne	r0, r1
   1ce60:	03a00000 	moveq	r0, #0	; 0x0
   1ce64:	81110002 	tsthi	r1, r2
   1ce68:	00000002 	andeq	r0, r0, r2
   1ce6c:	912fff1e 	bxls	lr
   1ce70:	e3a02000 	mov	r2, #0	; 0x0
   1ce74:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1ce78:	31510000 	cmpcc	r1, r0
   1ce7c:	31a01201 	movcc	r1, r1, lsl #4
   1ce80:	32822004 	addcc	r2, r2, #4	; 0x4
   1ce84:	3afffffa 	bcc	1ce74 <__umodsi3+0x20>
   1ce88:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1ce8c:	31510000 	cmpcc	r1, r0
   1ce90:	31a01081 	movcc	r1, r1, lsl #1
   1ce94:	32822001 	addcc	r2, r2, #1	; 0x1
   1ce98:	3afffffa 	bcc	1ce88 <__umodsi3+0x34>
   1ce9c:	e2522003 	subs	r2, r2, #3	; 0x3
   1cea0:	ba00000e 	blt	1cee0 <__umodsi3+0x8c>
   1cea4:	e1500001 	cmp	r0, r1
   1cea8:	20400001 	subcs	r0, r0, r1
   1ceac:	e15000a1 	cmp	r0, r1, lsr #1
   1ceb0:	204000a1 	subcs	r0, r0, r1, lsr #1
   1ceb4:	e1500121 	cmp	r0, r1, lsr #2
   1ceb8:	20400121 	subcs	r0, r0, r1, lsr #2
   1cebc:	e15001a1 	cmp	r0, r1, lsr #3
   1cec0:	204001a1 	subcs	r0, r0, r1, lsr #3
   1cec4:	e3500001 	cmp	r0, #1	; 0x1
   1cec8:	e1a01221 	mov	r1, r1, lsr #4
   1cecc:	a2522004 	subges	r2, r2, #4	; 0x4
   1ced0:	aafffff3 	bge	1cea4 <__umodsi3+0x50>
   1ced4:	e3120003 	tst	r2, #3	; 0x3
   1ced8:	13300000 	teqne	r0, #0	; 0x0
   1cedc:	0a00000a 	beq	1cf0c <__umodsi3+0xb8>
   1cee0:	e3720002 	cmn	r2, #2	; 0x2
   1cee4:	ba000006 	blt	1cf04 <__umodsi3+0xb0>
   1cee8:	0a000002 	beq	1cef8 <__umodsi3+0xa4>
   1ceec:	e1500001 	cmp	r0, r1
   1cef0:	20400001 	subcs	r0, r0, r1
   1cef4:	e1a010a1 	mov	r1, r1, lsr #1
   1cef8:	e1500001 	cmp	r0, r1
   1cefc:	20400001 	subcs	r0, r0, r1
   1cf00:	e1a010a1 	mov	r1, r1, lsr #1
   1cf04:	e1500001 	cmp	r0, r1
   1cf08:	20400001 	subcs	r0, r0, r1
   1cf0c:	e12fff1e 	bx	lr
   1cf10:	e52de008 	str	lr, [sp, #-8]!
   1cf14:	eb00003c 	bl	1d00c <__aeabi_idiv0>
   1cf18:	e3a00000 	mov	r0, #0	; 0x0
   1cf1c:	e49de008 	ldr	lr, [sp], #8
   1cf20:	e12fff1e 	bx	lr

0001cf24 <__modsi3>:
   1cf24:	e3510000 	cmp	r1, #0	; 0x0
   1cf28:	0a000032 	beq	1cff8 <__modsi3+0xd4>
   1cf2c:	42611000 	rsbmi	r1, r1, #0	; 0x0
   1cf30:	e1b0c000 	movs	ip, r0
   1cf34:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1cf38:	e2512001 	subs	r2, r1, #1	; 0x1
   1cf3c:	11500001 	cmpne	r0, r1
   1cf40:	03a00000 	moveq	r0, #0	; 0x0
   1cf44:	81110002 	tsthi	r1, r2
   1cf48:	00000002 	andeq	r0, r0, r2
   1cf4c:	9a000026 	bls	1cfec <__modsi3+0xc8>
   1cf50:	e3a02000 	mov	r2, #0	; 0x0
   1cf54:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1cf58:	31510000 	cmpcc	r1, r0
   1cf5c:	31a01201 	movcc	r1, r1, lsl #4
   1cf60:	32822004 	addcc	r2, r2, #4	; 0x4
   1cf64:	3afffffa 	bcc	1cf54 <__modsi3+0x30>
   1cf68:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1cf6c:	31510000 	cmpcc	r1, r0
   1cf70:	31a01081 	movcc	r1, r1, lsl #1
   1cf74:	32822001 	addcc	r2, r2, #1	; 0x1
   1cf78:	3afffffa 	bcc	1cf68 <__modsi3+0x44>
   1cf7c:	e2522003 	subs	r2, r2, #3	; 0x3
   1cf80:	ba00000e 	blt	1cfc0 <__modsi3+0x9c>
   1cf84:	e1500001 	cmp	r0, r1
   1cf88:	20400001 	subcs	r0, r0, r1
   1cf8c:	e15000a1 	cmp	r0, r1, lsr #1
   1cf90:	204000a1 	subcs	r0, r0, r1, lsr #1
   1cf94:	e1500121 	cmp	r0, r1, lsr #2
   1cf98:	20400121 	subcs	r0, r0, r1, lsr #2
   1cf9c:	e15001a1 	cmp	r0, r1, lsr #3
   1cfa0:	204001a1 	subcs	r0, r0, r1, lsr #3
   1cfa4:	e3500001 	cmp	r0, #1	; 0x1
   1cfa8:	e1a01221 	mov	r1, r1, lsr #4
   1cfac:	a2522004 	subges	r2, r2, #4	; 0x4
   1cfb0:	aafffff3 	bge	1cf84 <__modsi3+0x60>
   1cfb4:	e3120003 	tst	r2, #3	; 0x3
   1cfb8:	13300000 	teqne	r0, #0	; 0x0
   1cfbc:	0a00000a 	beq	1cfec <__modsi3+0xc8>
   1cfc0:	e3720002 	cmn	r2, #2	; 0x2
   1cfc4:	ba000006 	blt	1cfe4 <__modsi3+0xc0>
   1cfc8:	0a000002 	beq	1cfd8 <__modsi3+0xb4>
   1cfcc:	e1500001 	cmp	r0, r1
   1cfd0:	20400001 	subcs	r0, r0, r1
   1cfd4:	e1a010a1 	mov	r1, r1, lsr #1
   1cfd8:	e1500001 	cmp	r0, r1
   1cfdc:	20400001 	subcs	r0, r0, r1
   1cfe0:	e1a010a1 	mov	r1, r1, lsr #1
   1cfe4:	e1500001 	cmp	r0, r1
   1cfe8:	20400001 	subcs	r0, r0, r1
   1cfec:	e35c0000 	cmp	ip, #0	; 0x0
   1cff0:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1cff4:	e12fff1e 	bx	lr
   1cff8:	e52de008 	str	lr, [sp, #-8]!
   1cffc:	eb000002 	bl	1d00c <__aeabi_idiv0>
   1d000:	e3a00000 	mov	r0, #0	; 0x0
   1d004:	e49de008 	ldr	lr, [sp], #8
   1d008:	e12fff1e 	bx	lr

0001d00c <__aeabi_idiv0>:
   1d00c:	e12fff1e 	bx	lr

0001d010 <__aeabi_drsub>:
   1d010:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
   1d014:	ea000000 	b	1d01c <__adddf3>

0001d018 <__aeabi_dsub>:
   1d018:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

0001d01c <__adddf3>:
   1d01c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1d020:	e1a04080 	mov	r4, r0, lsl #1
   1d024:	e1a05082 	mov	r5, r2, lsl #1
   1d028:	e1340005 	teq	r4, r5
   1d02c:	01310003 	teqeq	r1, r3
   1d030:	1194c001 	orrnes	ip, r4, r1
   1d034:	1195c003 	orrnes	ip, r5, r3
   1d038:	11f0cac4 	mvnnes	ip, r4, asr #21
   1d03c:	11f0cac5 	mvnnes	ip, r5, asr #21
   1d040:	0a00008c 	beq	1d278 <__adddf3+0x25c>
   1d044:	e1a04aa4 	mov	r4, r4, lsr #21
   1d048:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
   1d04c:	b2655000 	rsblt	r5, r5, #0	; 0x0
   1d050:	da000006 	ble	1d070 <__adddf3+0x54>
   1d054:	e0844005 	add	r4, r4, r5
   1d058:	e0213003 	eor	r3, r1, r3
   1d05c:	e0202002 	eor	r2, r0, r2
   1d060:	e0231001 	eor	r1, r3, r1
   1d064:	e0220000 	eor	r0, r2, r0
   1d068:	e0213003 	eor	r3, r1, r3
   1d06c:	e0202002 	eor	r2, r0, r2
   1d070:	e3550036 	cmp	r5, #54	; 0x36
   1d074:	88bd4030 	ldmhiia	sp!, {r4, r5, lr}
   1d078:	812fff1e 	bxhi	lr
   1d07c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   1d080:	e1a00600 	mov	r0, r0, lsl #12
   1d084:	e3a0c601 	mov	ip, #1048576	; 0x100000
   1d088:	e18c0620 	orr	r0, ip, r0, lsr #12
   1d08c:	0a000001 	beq	1d098 <__adddf3+0x7c>
   1d090:	e2711000 	rsbs	r1, r1, #0	; 0x0
   1d094:	e2e00000 	rsc	r0, r0, #0	; 0x0
   1d098:	e3120102 	tst	r2, #-2147483648	; 0x80000000
   1d09c:	e1a02602 	mov	r2, r2, lsl #12
   1d0a0:	e18c2622 	orr	r2, ip, r2, lsr #12
   1d0a4:	0a000001 	beq	1d0b0 <__adddf3+0x94>
   1d0a8:	e2733000 	rsbs	r3, r3, #0	; 0x0
   1d0ac:	e2e22000 	rsc	r2, r2, #0	; 0x0
   1d0b0:	e1340005 	teq	r4, r5
   1d0b4:	0a000069 	beq	1d260 <__adddf3+0x244>
   1d0b8:	e2444001 	sub	r4, r4, #1	; 0x1
   1d0bc:	e275e020 	rsbs	lr, r5, #32	; 0x20
   1d0c0:	ba000005 	blt	1d0dc <__adddf3+0xc0>
   1d0c4:	e1a0ce13 	mov	ip, r3, lsl lr
   1d0c8:	e0911533 	adds	r1, r1, r3, lsr r5
   1d0cc:	e2a00000 	adc	r0, r0, #0	; 0x0
   1d0d0:	e0911e12 	adds	r1, r1, r2, lsl lr
   1d0d4:	e0b00552 	adcs	r0, r0, r2, asr r5
   1d0d8:	ea000006 	b	1d0f8 <__adddf3+0xdc>
   1d0dc:	e2455020 	sub	r5, r5, #32	; 0x20
   1d0e0:	e28ee020 	add	lr, lr, #32	; 0x20
   1d0e4:	e3530001 	cmp	r3, #1	; 0x1
   1d0e8:	e1a0ce12 	mov	ip, r2, lsl lr
   1d0ec:	238cc002 	orrcs	ip, ip, #2	; 0x2
   1d0f0:	e0911552 	adds	r1, r1, r2, asr r5
   1d0f4:	e0b00fc2 	adcs	r0, r0, r2, asr #31
   1d0f8:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   1d0fc:	5a000002 	bpl	1d10c <__adddf3+0xf0>
   1d100:	e27cc000 	rsbs	ip, ip, #0	; 0x0
   1d104:	e2f11000 	rscs	r1, r1, #0	; 0x0
   1d108:	e2e00000 	rsc	r0, r0, #0	; 0x0
   1d10c:	e3500601 	cmp	r0, #1048576	; 0x100000
   1d110:	3a00000f 	bcc	1d154 <__adddf3+0x138>
   1d114:	e3500602 	cmp	r0, #2097152	; 0x200000
   1d118:	3a000006 	bcc	1d138 <__adddf3+0x11c>
   1d11c:	e1b000a0 	movs	r0, r0, lsr #1
   1d120:	e1b01061 	movs	r1, r1, rrx
   1d124:	e1a0c06c 	mov	ip, ip, rrx
   1d128:	e2844001 	add	r4, r4, #1	; 0x1
   1d12c:	e1a02a84 	mov	r2, r4, lsl #21
   1d130:	e3720501 	cmn	r2, #4194304	; 0x400000
   1d134:	2a00006b 	bcs	1d2e8 <__adddf3+0x2cc>
   1d138:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
   1d13c:	01b0c0a1 	moveqs	ip, r1, lsr #1
   1d140:	e2b11000 	adcs	r1, r1, #0	; 0x0
   1d144:	e0a00a04 	adc	r0, r0, r4, lsl #20
   1d148:	e1800005 	orr	r0, r0, r5
   1d14c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d150:	e12fff1e 	bx	lr
   1d154:	e1b0c08c 	movs	ip, ip, lsl #1
   1d158:	e0b11001 	adcs	r1, r1, r1
   1d15c:	e0a00000 	adc	r0, r0, r0
   1d160:	e3100601 	tst	r0, #1048576	; 0x100000
   1d164:	e2444001 	sub	r4, r4, #1	; 0x1
   1d168:	1afffff2 	bne	1d138 <__adddf3+0x11c>
   1d16c:	e3300000 	teq	r0, #0	; 0x0
   1d170:	13a03014 	movne	r3, #20	; 0x14
   1d174:	03a03034 	moveq	r3, #52	; 0x34
   1d178:	01a00001 	moveq	r0, r1
   1d17c:	03a01000 	moveq	r1, #0	; 0x0
   1d180:	e1a02000 	mov	r2, r0
   1d184:	e3520801 	cmp	r2, #65536	; 0x10000
   1d188:	21a02822 	movcs	r2, r2, lsr #16
   1d18c:	22433010 	subcs	r3, r3, #16	; 0x10
   1d190:	e3520c01 	cmp	r2, #256	; 0x100
   1d194:	21a02422 	movcs	r2, r2, lsr #8
   1d198:	22433008 	subcs	r3, r3, #8	; 0x8
   1d19c:	e3520010 	cmp	r2, #16	; 0x10
   1d1a0:	21a02222 	movcs	r2, r2, lsr #4
   1d1a4:	22433004 	subcs	r3, r3, #4	; 0x4
   1d1a8:	e3520004 	cmp	r2, #4	; 0x4
   1d1ac:	22433002 	subcs	r3, r3, #2	; 0x2
   1d1b0:	304330a2 	subcc	r3, r3, r2, lsr #1
   1d1b4:	e04331a2 	sub	r3, r3, r2, lsr #3
   1d1b8:	e2532020 	subs	r2, r3, #32	; 0x20
   1d1bc:	aa000007 	bge	1d1e0 <__adddf3+0x1c4>
   1d1c0:	e292200c 	adds	r2, r2, #12	; 0xc
   1d1c4:	da000004 	ble	1d1dc <__adddf3+0x1c0>
   1d1c8:	e282c014 	add	ip, r2, #20	; 0x14
   1d1cc:	e262200c 	rsb	r2, r2, #12	; 0xc
   1d1d0:	e1a01c10 	mov	r1, r0, lsl ip
   1d1d4:	e1a00230 	mov	r0, r0, lsr r2
   1d1d8:	ea000004 	b	1d1f0 <__adddf3+0x1d4>
   1d1dc:	e2822014 	add	r2, r2, #20	; 0x14
   1d1e0:	d262c020 	rsble	ip, r2, #32	; 0x20
   1d1e4:	e1a00210 	mov	r0, r0, lsl r2
   1d1e8:	d1800c31 	orrle	r0, r0, r1, lsr ip
   1d1ec:	d1a01211 	movle	r1, r1, lsl r2
   1d1f0:	e0544003 	subs	r4, r4, r3
   1d1f4:	a0800a04 	addge	r0, r0, r4, lsl #20
   1d1f8:	a1800005 	orrge	r0, r0, r5
   1d1fc:	a8bd4030 	ldmgeia	sp!, {r4, r5, lr}
   1d200:	a12fff1e 	bxge	lr
   1d204:	e1e04004 	mvn	r4, r4
   1d208:	e254401f 	subs	r4, r4, #31	; 0x1f
   1d20c:	aa00000f 	bge	1d250 <__adddf3+0x234>
   1d210:	e294400c 	adds	r4, r4, #12	; 0xc
   1d214:	ca000006 	bgt	1d234 <__adddf3+0x218>
   1d218:	e2844014 	add	r4, r4, #20	; 0x14
   1d21c:	e2642020 	rsb	r2, r4, #32	; 0x20
   1d220:	e1a01431 	mov	r1, r1, lsr r4
   1d224:	e1811210 	orr	r1, r1, r0, lsl r2
   1d228:	e1850430 	orr	r0, r5, r0, lsr r4
   1d22c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d230:	e12fff1e 	bx	lr
   1d234:	e264400c 	rsb	r4, r4, #12	; 0xc
   1d238:	e2642020 	rsb	r2, r4, #32	; 0x20
   1d23c:	e1a01231 	mov	r1, r1, lsr r2
   1d240:	e1811410 	orr	r1, r1, r0, lsl r4
   1d244:	e1a00005 	mov	r0, r5
   1d248:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d24c:	e12fff1e 	bx	lr
   1d250:	e1a01430 	mov	r1, r0, lsr r4
   1d254:	e1a00005 	mov	r0, r5
   1d258:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d25c:	e12fff1e 	bx	lr
   1d260:	e3340000 	teq	r4, #0	; 0x0
   1d264:	e2222601 	eor	r2, r2, #1048576	; 0x100000
   1d268:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
   1d26c:	02844001 	addeq	r4, r4, #1	; 0x1
   1d270:	12455001 	subne	r5, r5, #1	; 0x1
   1d274:	eaffff8f 	b	1d0b8 <__adddf3+0x9c>
   1d278:	e1f0cac4 	mvns	ip, r4, asr #21
   1d27c:	11f0cac5 	mvnnes	ip, r5, asr #21
   1d280:	0a00001d 	beq	1d2fc <__adddf3+0x2e0>
   1d284:	e1340005 	teq	r4, r5
   1d288:	01310003 	teqeq	r1, r3
   1d28c:	0a000004 	beq	1d2a4 <__adddf3+0x288>
   1d290:	e3340000 	teq	r4, #0	; 0x0
   1d294:	01a00002 	moveq	r0, r2
   1d298:	01a01003 	moveq	r1, r3
   1d29c:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d2a0:	e12fff1e 	bx	lr
   1d2a4:	e1300002 	teq	r0, r2
   1d2a8:	13a00000 	movne	r0, #0	; 0x0
   1d2ac:	13a01000 	movne	r1, #0	; 0x0
   1d2b0:	18bd4030 	ldmneia	sp!, {r4, r5, lr}
   1d2b4:	112fff1e 	bxne	lr
   1d2b8:	e1b0caa4 	movs	ip, r4, lsr #21
   1d2bc:	1a000004 	bne	1d2d4 <__adddf3+0x2b8>
   1d2c0:	e1b01081 	movs	r1, r1, lsl #1
   1d2c4:	e0b00000 	adcs	r0, r0, r0
   1d2c8:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
   1d2cc:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d2d0:	e12fff1e 	bx	lr
   1d2d4:	e2944501 	adds	r4, r4, #4194304	; 0x400000
   1d2d8:	32800601 	addcc	r0, r0, #1048576	; 0x100000
   1d2dc:	38bd4030 	ldmccia	sp!, {r4, r5, lr}
   1d2e0:	312fff1e 	bxcc	lr
   1d2e4:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   1d2e8:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
   1d2ec:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
   1d2f0:	e3a01000 	mov	r1, #0	; 0x0
   1d2f4:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d2f8:	e12fff1e 	bx	lr
   1d2fc:	e1f0cac4 	mvns	ip, r4, asr #21
   1d300:	11a00002 	movne	r0, r2
   1d304:	11a01003 	movne	r1, r3
   1d308:	01f0cac5 	mvneqs	ip, r5, asr #21
   1d30c:	11a02000 	movne	r2, r0
   1d310:	11a03001 	movne	r3, r1
   1d314:	e1914600 	orrs	r4, r1, r0, lsl #12
   1d318:	01935602 	orreqs	r5, r3, r2, lsl #12
   1d31c:	01300002 	teqeq	r0, r2
   1d320:	13800702 	orrne	r0, r0, #524288	; 0x80000
   1d324:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
   1d328:	e12fff1e 	bx	lr

0001d32c <__aeabi_ui2d>:
   1d32c:	e3300000 	teq	r0, #0	; 0x0
   1d330:	03a01000 	moveq	r1, #0	; 0x0
   1d334:	012fff1e 	bxeq	lr
   1d338:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1d33c:	e3a04b01 	mov	r4, #1024	; 0x400
   1d340:	e2844032 	add	r4, r4, #50	; 0x32
   1d344:	e3a05000 	mov	r5, #0	; 0x0
   1d348:	e1a01000 	mov	r1, r0
   1d34c:	e3a00000 	mov	r0, #0	; 0x0
   1d350:	eaffff85 	b	1d16c <__adddf3+0x150>

0001d354 <__aeabi_i2d>:
   1d354:	e3300000 	teq	r0, #0	; 0x0
   1d358:	03a01000 	moveq	r1, #0	; 0x0
   1d35c:	012fff1e 	bxeq	lr
   1d360:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1d364:	e3a04b01 	mov	r4, #1024	; 0x400
   1d368:	e2844032 	add	r4, r4, #50	; 0x32
   1d36c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
   1d370:	42600000 	rsbmi	r0, r0, #0	; 0x0
   1d374:	e1a01000 	mov	r1, r0
   1d378:	e3a00000 	mov	r0, #0	; 0x0
   1d37c:	eaffff7a 	b	1d16c <__adddf3+0x150>

0001d380 <__aeabi_f2d>:
   1d380:	e1b02080 	movs	r2, r0, lsl #1
   1d384:	e1a001c2 	mov	r0, r2, asr #3
   1d388:	e1a00060 	mov	r0, r0, rrx
   1d38c:	e1a01e02 	mov	r1, r2, lsl #28
   1d390:	121234ff 	andnes	r3, r2, #-16777216	; 0xff000000
   1d394:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   1d398:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
   1d39c:	112fff1e 	bxne	lr
   1d3a0:	e3320000 	teq	r2, #0	; 0x0
   1d3a4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   1d3a8:	012fff1e 	bxeq	lr
   1d3ac:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1d3b0:	e3a04d0e 	mov	r4, #896	; 0x380
   1d3b4:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   1d3b8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1d3bc:	eaffff6a 	b	1d16c <__adddf3+0x150>

0001d3c0 <__aeabi_ul2d>:
   1d3c0:	e1902001 	orrs	r2, r0, r1
   1d3c4:	012fff1e 	bxeq	lr
   1d3c8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1d3cc:	e3a05000 	mov	r5, #0	; 0x0
   1d3d0:	ea000006 	b	1d3f0 <__aeabi_l2d+0x1c>

0001d3d4 <__aeabi_l2d>:
   1d3d4:	e1902001 	orrs	r2, r0, r1
   1d3d8:	012fff1e 	bxeq	lr
   1d3dc:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1d3e0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
   1d3e4:	5a000001 	bpl	1d3f0 <__aeabi_l2d+0x1c>
   1d3e8:	e2700000 	rsbs	r0, r0, #0	; 0x0
   1d3ec:	e2e11000 	rsc	r1, r1, #0	; 0x0
   1d3f0:	e3a04b01 	mov	r4, #1024	; 0x400
   1d3f4:	e2844032 	add	r4, r4, #50	; 0x32
   1d3f8:	e1a0c000 	mov	ip, r0
   1d3fc:	e1a00001 	mov	r0, r1
   1d400:	e1a0100c 	mov	r1, ip
   1d404:	e1b0cb20 	movs	ip, r0, lsr #22
   1d408:	0affff3f 	beq	1d10c <__adddf3+0xf0>
   1d40c:	e3a02003 	mov	r2, #3	; 0x3
   1d410:	e1b0c1ac 	movs	ip, ip, lsr #3
   1d414:	12822003 	addne	r2, r2, #3	; 0x3
   1d418:	e1b0c1ac 	movs	ip, ip, lsr #3
   1d41c:	12822003 	addne	r2, r2, #3	; 0x3
   1d420:	e08221ac 	add	r2, r2, ip, lsr #3
   1d424:	e2623020 	rsb	r3, r2, #32	; 0x20
   1d428:	e1a0c311 	mov	ip, r1, lsl r3
   1d42c:	e1a01231 	mov	r1, r1, lsr r2
   1d430:	e1811310 	orr	r1, r1, r0, lsl r3
   1d434:	e1a00230 	mov	r0, r0, lsr r2
   1d438:	e0844002 	add	r4, r4, r2
   1d43c:	eaffff32 	b	1d10c <__adddf3+0xf0>

0001d440 <__aeabi_dmul>:
   1d440:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1d444:	e3a0c0ff 	mov	ip, #255	; 0xff
   1d448:	e38ccc07 	orr	ip, ip, #1792	; 0x700
   1d44c:	e01c4a20 	ands	r4, ip, r0, lsr #20
   1d450:	101c5a22 	andnes	r5, ip, r2, lsr #20
   1d454:	1134000c 	teqne	r4, ip
   1d458:	1135000c 	teqne	r5, ip
   1d45c:	0b000075 	bleq	1d638 <__aeabi_dmul+0x1f8>
   1d460:	e0844005 	add	r4, r4, r5
   1d464:	e0206002 	eor	r6, r0, r2
   1d468:	e1c00a8c 	bic	r0, r0, ip, lsl #21
   1d46c:	e1c22a8c 	bic	r2, r2, ip, lsl #21
   1d470:	e1915600 	orrs	r5, r1, r0, lsl #12
   1d474:	11935602 	orrnes	r5, r3, r2, lsl #12
   1d478:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   1d47c:	e3822601 	orr	r2, r2, #1048576	; 0x100000
   1d480:	0a00001d 	beq	1d4fc <__aeabi_dmul+0xbc>
   1d484:	e08ec391 	umull	ip, lr, r1, r3
   1d488:	e3a05000 	mov	r5, #0	; 0x0
   1d48c:	e0a5e390 	umlal	lr, r5, r0, r3
   1d490:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
   1d494:	e0a5e291 	umlal	lr, r5, r1, r2
   1d498:	e3a06000 	mov	r6, #0	; 0x0
   1d49c:	e0a65290 	umlal	r5, r6, r0, r2
   1d4a0:	e33c0000 	teq	ip, #0	; 0x0
   1d4a4:	138ee001 	orrne	lr, lr, #1	; 0x1
   1d4a8:	e24440ff 	sub	r4, r4, #255	; 0xff
   1d4ac:	e3560c02 	cmp	r6, #512	; 0x200
   1d4b0:	e2c44c03 	sbc	r4, r4, #768	; 0x300
   1d4b4:	2a000002 	bcs	1d4c4 <__aeabi_dmul+0x84>
   1d4b8:	e1b0e08e 	movs	lr, lr, lsl #1
   1d4bc:	e0b55005 	adcs	r5, r5, r5
   1d4c0:	e0a66006 	adc	r6, r6, r6
   1d4c4:	e1830586 	orr	r0, r3, r6, lsl #11
   1d4c8:	e1800aa5 	orr	r0, r0, r5, lsr #21
   1d4cc:	e1a01585 	mov	r1, r5, lsl #11
   1d4d0:	e1811aae 	orr	r1, r1, lr, lsr #21
   1d4d4:	e1a0e58e 	mov	lr, lr, lsl #11
   1d4d8:	e254c0fd 	subs	ip, r4, #253	; 0xfd
   1d4dc:	835c0c07 	cmphi	ip, #1792	; 0x700
   1d4e0:	8a000011 	bhi	1d52c <__aeabi_dmul+0xec>
   1d4e4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
   1d4e8:	01b0e0a1 	moveqs	lr, r1, lsr #1
   1d4ec:	e2b11000 	adcs	r1, r1, #0	; 0x0
   1d4f0:	e0a00a04 	adc	r0, r0, r4, lsl #20
   1d4f4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d4f8:	e12fff1e 	bx	lr
   1d4fc:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
   1d500:	e1860000 	orr	r0, r6, r0
   1d504:	e1811003 	orr	r1, r1, r3
   1d508:	e0200002 	eor	r0, r0, r2
   1d50c:	e05440ac 	subs	r4, r4, ip, lsr #1
   1d510:	c074500c 	rsbgts	r5, r4, ip
   1d514:	c1800a04 	orrgt	r0, r0, r4, lsl #20
   1d518:	c8bd4070 	ldmgtia	sp!, {r4, r5, r6, lr}
   1d51c:	c12fff1e 	bxgt	lr
   1d520:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   1d524:	e3a0e000 	mov	lr, #0	; 0x0
   1d528:	e2544001 	subs	r4, r4, #1	; 0x1
   1d52c:	ca00005d 	bgt	1d6a8 <__aeabi_dmul+0x268>
   1d530:	e3740036 	cmn	r4, #54	; 0x36
   1d534:	d3a01000 	movle	r1, #0	; 0x0
   1d538:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
   1d53c:	d8bd4070 	ldmleia	sp!, {r4, r5, r6, lr}
   1d540:	d12fff1e 	bxle	lr
   1d544:	e2644000 	rsb	r4, r4, #0	; 0x0
   1d548:	e2544020 	subs	r4, r4, #32	; 0x20
   1d54c:	aa00001a 	bge	1d5bc <__aeabi_dmul+0x17c>
   1d550:	e294400c 	adds	r4, r4, #12	; 0xc
   1d554:	ca00000c 	bgt	1d58c <__aeabi_dmul+0x14c>
   1d558:	e2844014 	add	r4, r4, #20	; 0x14
   1d55c:	e2645020 	rsb	r5, r4, #32	; 0x20
   1d560:	e1a03511 	mov	r3, r1, lsl r5
   1d564:	e1a01431 	mov	r1, r1, lsr r4
   1d568:	e1811510 	orr	r1, r1, r0, lsl r5
   1d56c:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
   1d570:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1d574:	e0911fa3 	adds	r1, r1, r3, lsr #31
   1d578:	e0a20430 	adc	r0, r2, r0, lsr r4
   1d57c:	e19ee083 	orrs	lr, lr, r3, lsl #1
   1d580:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   1d584:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d588:	e12fff1e 	bx	lr
   1d58c:	e264400c 	rsb	r4, r4, #12	; 0xc
   1d590:	e2645020 	rsb	r5, r4, #32	; 0x20
   1d594:	e1a03411 	mov	r3, r1, lsl r4
   1d598:	e1a01531 	mov	r1, r1, lsr r5
   1d59c:	e1811410 	orr	r1, r1, r0, lsl r4
   1d5a0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1d5a4:	e0911fa3 	adds	r1, r1, r3, lsr #31
   1d5a8:	e2a00000 	adc	r0, r0, #0	; 0x0
   1d5ac:	e19ee083 	orrs	lr, lr, r3, lsl #1
   1d5b0:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   1d5b4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d5b8:	e12fff1e 	bx	lr
   1d5bc:	e2645020 	rsb	r5, r4, #32	; 0x20
   1d5c0:	e18ee511 	orr	lr, lr, r1, lsl r5
   1d5c4:	e1a03431 	mov	r3, r1, lsr r4
   1d5c8:	e1833510 	orr	r3, r3, r0, lsl r5
   1d5cc:	e1a01430 	mov	r1, r0, lsr r4
   1d5d0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1d5d4:	e1c11430 	bic	r1, r1, r0, lsr r4
   1d5d8:	e0811fa3 	add	r1, r1, r3, lsr #31
   1d5dc:	e19ee083 	orrs	lr, lr, r3, lsl #1
   1d5e0:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   1d5e4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d5e8:	e12fff1e 	bx	lr
   1d5ec:	e3340000 	teq	r4, #0	; 0x0
   1d5f0:	1a000008 	bne	1d618 <__aeabi_dmul+0x1d8>
   1d5f4:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
   1d5f8:	e1b01081 	movs	r1, r1, lsl #1
   1d5fc:	e0a00000 	adc	r0, r0, r0
   1d600:	e3100601 	tst	r0, #1048576	; 0x100000
   1d604:	02444001 	subeq	r4, r4, #1	; 0x1
   1d608:	0afffffa 	beq	1d5f8 <__aeabi_dmul+0x1b8>
   1d60c:	e1800006 	orr	r0, r0, r6
   1d610:	e3350000 	teq	r5, #0	; 0x0
   1d614:	11a0f00e 	movne	pc, lr
   1d618:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
   1d61c:	e1b03083 	movs	r3, r3, lsl #1
   1d620:	e0a22002 	adc	r2, r2, r2
   1d624:	e3120601 	tst	r2, #1048576	; 0x100000
   1d628:	02455001 	subeq	r5, r5, #1	; 0x1
   1d62c:	0afffffa 	beq	1d61c <__aeabi_dmul+0x1dc>
   1d630:	e1822006 	orr	r2, r2, r6
   1d634:	e1a0f00e 	mov	pc, lr
   1d638:	e134000c 	teq	r4, ip
   1d63c:	e00c5a22 	and	r5, ip, r2, lsr #20
   1d640:	1135000c 	teqne	r5, ip
   1d644:	0a000007 	beq	1d668 <__aeabi_dmul+0x228>
   1d648:	e1916080 	orrs	r6, r1, r0, lsl #1
   1d64c:	11936082 	orrnes	r6, r3, r2, lsl #1
   1d650:	1affffe5 	bne	1d5ec <__aeabi_dmul+0x1ac>
   1d654:	e0200002 	eor	r0, r0, r2
   1d658:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1d65c:	e3a01000 	mov	r1, #0	; 0x0
   1d660:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d664:	e12fff1e 	bx	lr
   1d668:	e1916080 	orrs	r6, r1, r0, lsl #1
   1d66c:	01a01003 	moveq	r1, r3
   1d670:	01a00002 	moveq	r0, r2
   1d674:	11936082 	orrnes	r6, r3, r2, lsl #1
   1d678:	0a000010 	beq	1d6c0 <__aeabi_dmul+0x280>
   1d67c:	e134000c 	teq	r4, ip
   1d680:	1a000001 	bne	1d68c <__aeabi_dmul+0x24c>
   1d684:	e1916600 	orrs	r6, r1, r0, lsl #12
   1d688:	1a00000c 	bne	1d6c0 <__aeabi_dmul+0x280>
   1d68c:	e135000c 	teq	r5, ip
   1d690:	1a000003 	bne	1d6a4 <__aeabi_dmul+0x264>
   1d694:	e1936602 	orrs	r6, r3, r2, lsl #12
   1d698:	11a01003 	movne	r1, r3
   1d69c:	11a00002 	movne	r0, r2
   1d6a0:	1a000006 	bne	1d6c0 <__aeabi_dmul+0x280>
   1d6a4:	e0200002 	eor	r0, r0, r2
   1d6a8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1d6ac:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   1d6b0:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
   1d6b4:	e3a01000 	mov	r1, #0	; 0x0
   1d6b8:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d6bc:	e12fff1e 	bx	lr
   1d6c0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   1d6c4:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
   1d6c8:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d6cc:	e12fff1e 	bx	lr

0001d6d0 <__aeabi_ddiv>:
   1d6d0:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   1d6d4:	e3a0c0ff 	mov	ip, #255	; 0xff
   1d6d8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
   1d6dc:	e01c4a20 	ands	r4, ip, r0, lsr #20
   1d6e0:	101c5a22 	andnes	r5, ip, r2, lsr #20
   1d6e4:	1134000c 	teqne	r4, ip
   1d6e8:	1135000c 	teqne	r5, ip
   1d6ec:	0b00005e 	bleq	1d86c <__aeabi_ddiv+0x19c>
   1d6f0:	e0444005 	sub	r4, r4, r5
   1d6f4:	e020e002 	eor	lr, r0, r2
   1d6f8:	e1935602 	orrs	r5, r3, r2, lsl #12
   1d6fc:	e1a00600 	mov	r0, r0, lsl #12
   1d700:	0a00004c 	beq	1d838 <__aeabi_ddiv+0x168>
   1d704:	e1a02602 	mov	r2, r2, lsl #12
   1d708:	e3a05201 	mov	r5, #268435456	; 0x10000000
   1d70c:	e1852222 	orr	r2, r5, r2, lsr #4
   1d710:	e1822c23 	orr	r2, r2, r3, lsr #24
   1d714:	e1a03403 	mov	r3, r3, lsl #8
   1d718:	e1855220 	orr	r5, r5, r0, lsr #4
   1d71c:	e1855c21 	orr	r5, r5, r1, lsr #24
   1d720:	e1a06401 	mov	r6, r1, lsl #8
   1d724:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
   1d728:	e1550002 	cmp	r5, r2
   1d72c:	01560003 	cmpeq	r6, r3
   1d730:	e2a440fd 	adc	r4, r4, #253	; 0xfd
   1d734:	e2844c03 	add	r4, r4, #768	; 0x300
   1d738:	2a000001 	bcs	1d744 <__aeabi_ddiv+0x74>
   1d73c:	e1b020a2 	movs	r2, r2, lsr #1
   1d740:	e1a03063 	mov	r3, r3, rrx
   1d744:	e0566003 	subs	r6, r6, r3
   1d748:	e0c55002 	sbc	r5, r5, r2
   1d74c:	e1b020a2 	movs	r2, r2, lsr #1
   1d750:	e1a03063 	mov	r3, r3, rrx
   1d754:	e3a01601 	mov	r1, #1048576	; 0x100000
   1d758:	e3a0c702 	mov	ip, #524288	; 0x80000
   1d75c:	e056e003 	subs	lr, r6, r3
   1d760:	e0d5e002 	sbcs	lr, r5, r2
   1d764:	20466003 	subcs	r6, r6, r3
   1d768:	21a0500e 	movcs	r5, lr
   1d76c:	2181100c 	orrcs	r1, r1, ip
   1d770:	e1b020a2 	movs	r2, r2, lsr #1
   1d774:	e1a03063 	mov	r3, r3, rrx
   1d778:	e056e003 	subs	lr, r6, r3
   1d77c:	e0d5e002 	sbcs	lr, r5, r2
   1d780:	20466003 	subcs	r6, r6, r3
   1d784:	21a0500e 	movcs	r5, lr
   1d788:	218110ac 	orrcs	r1, r1, ip, lsr #1
   1d78c:	e1b020a2 	movs	r2, r2, lsr #1
   1d790:	e1a03063 	mov	r3, r3, rrx
   1d794:	e056e003 	subs	lr, r6, r3
   1d798:	e0d5e002 	sbcs	lr, r5, r2
   1d79c:	20466003 	subcs	r6, r6, r3
   1d7a0:	21a0500e 	movcs	r5, lr
   1d7a4:	2181112c 	orrcs	r1, r1, ip, lsr #2
   1d7a8:	e1b020a2 	movs	r2, r2, lsr #1
   1d7ac:	e1a03063 	mov	r3, r3, rrx
   1d7b0:	e056e003 	subs	lr, r6, r3
   1d7b4:	e0d5e002 	sbcs	lr, r5, r2
   1d7b8:	20466003 	subcs	r6, r6, r3
   1d7bc:	21a0500e 	movcs	r5, lr
   1d7c0:	218111ac 	orrcs	r1, r1, ip, lsr #3
   1d7c4:	e195e006 	orrs	lr, r5, r6
   1d7c8:	0a00000d 	beq	1d804 <__aeabi_ddiv+0x134>
   1d7cc:	e1a05205 	mov	r5, r5, lsl #4
   1d7d0:	e1855e26 	orr	r5, r5, r6, lsr #28
   1d7d4:	e1a06206 	mov	r6, r6, lsl #4
   1d7d8:	e1a02182 	mov	r2, r2, lsl #3
   1d7dc:	e1822ea3 	orr	r2, r2, r3, lsr #29
   1d7e0:	e1a03183 	mov	r3, r3, lsl #3
   1d7e4:	e1b0c22c 	movs	ip, ip, lsr #4
   1d7e8:	1affffdb 	bne	1d75c <__aeabi_ddiv+0x8c>
   1d7ec:	e3100601 	tst	r0, #1048576	; 0x100000
   1d7f0:	1a000006 	bne	1d810 <__aeabi_ddiv+0x140>
   1d7f4:	e1800001 	orr	r0, r0, r1
   1d7f8:	e3a01000 	mov	r1, #0	; 0x0
   1d7fc:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
   1d800:	eaffffd5 	b	1d75c <__aeabi_ddiv+0x8c>
   1d804:	e3100601 	tst	r0, #1048576	; 0x100000
   1d808:	01800001 	orreq	r0, r0, r1
   1d80c:	03a01000 	moveq	r1, #0	; 0x0
   1d810:	e254c0fd 	subs	ip, r4, #253	; 0xfd
   1d814:	835c0c07 	cmphi	ip, #1792	; 0x700
   1d818:	8affff43 	bhi	1d52c <__aeabi_dmul+0xec>
   1d81c:	e055c002 	subs	ip, r5, r2
   1d820:	0056c003 	subeqs	ip, r6, r3
   1d824:	01b0c0a1 	moveqs	ip, r1, lsr #1
   1d828:	e2b11000 	adcs	r1, r1, #0	; 0x0
   1d82c:	e0a00a04 	adc	r0, r0, r4, lsl #20
   1d830:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
   1d834:	e12fff1e 	bx	lr
   1d838:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
   1d83c:	e18e0620 	orr	r0, lr, r0, lsr #12
   1d840:	e09440ac 	adds	r4, r4, ip, lsr #1
   1d844:	c074500c 	rsbgts	r5, r4, ip
   1d848:	c1800a04 	orrgt	r0, r0, r4, lsl #20
   1d84c:	c8bd4070 	ldmgtia	sp!, {r4, r5, r6, lr}
   1d850:	c12fff1e 	bxgt	lr
   1d854:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   1d858:	e3a0e000 	mov	lr, #0	; 0x0
   1d85c:	e2544001 	subs	r4, r4, #1	; 0x1
   1d860:	eaffff31 	b	1d52c <__aeabi_dmul+0xec>
   1d864:	e185e006 	orr	lr, r5, r6
   1d868:	eaffff2f 	b	1d52c <__aeabi_dmul+0xec>
   1d86c:	e00c5a22 	and	r5, ip, r2, lsr #20
   1d870:	e134000c 	teq	r4, ip
   1d874:	0135000c 	teqeq	r5, ip
   1d878:	0affff90 	beq	1d6c0 <__aeabi_dmul+0x280>
   1d87c:	e134000c 	teq	r4, ip
   1d880:	1a000006 	bne	1d8a0 <__aeabi_ddiv+0x1d0>
   1d884:	e1914600 	orrs	r4, r1, r0, lsl #12
   1d888:	1affff8c 	bne	1d6c0 <__aeabi_dmul+0x280>
   1d88c:	e135000c 	teq	r5, ip
   1d890:	1affff83 	bne	1d6a4 <__aeabi_dmul+0x264>
   1d894:	e1a01003 	mov	r1, r3
   1d898:	e1a00002 	mov	r0, r2
   1d89c:	eaffff87 	b	1d6c0 <__aeabi_dmul+0x280>
   1d8a0:	e135000c 	teq	r5, ip
   1d8a4:	1a000004 	bne	1d8bc <__aeabi_ddiv+0x1ec>
   1d8a8:	e1935602 	orrs	r5, r3, r2, lsl #12
   1d8ac:	0affff68 	beq	1d654 <__aeabi_dmul+0x214>
   1d8b0:	e1a01003 	mov	r1, r3
   1d8b4:	e1a00002 	mov	r0, r2
   1d8b8:	eaffff80 	b	1d6c0 <__aeabi_dmul+0x280>
   1d8bc:	e1916080 	orrs	r6, r1, r0, lsl #1
   1d8c0:	11936082 	orrnes	r6, r3, r2, lsl #1
   1d8c4:	1affff48 	bne	1d5ec <__aeabi_dmul+0x1ac>
   1d8c8:	e1914080 	orrs	r4, r1, r0, lsl #1
   1d8cc:	1affff74 	bne	1d6a4 <__aeabi_dmul+0x264>
   1d8d0:	e1935082 	orrs	r5, r3, r2, lsl #1
   1d8d4:	1affff5e 	bne	1d654 <__aeabi_dmul+0x214>
   1d8d8:	eaffff78 	b	1d6c0 <__aeabi_dmul+0x280>

0001d8dc <__gedf2>:
   1d8dc:	e3e0c000 	mvn	ip, #0	; 0x0
   1d8e0:	ea000002 	b	1d8f0 <__cmpdf2+0x4>

0001d8e4 <__ledf2>:
   1d8e4:	e3a0c001 	mov	ip, #1	; 0x1
   1d8e8:	ea000000 	b	1d8f0 <__cmpdf2+0x4>

0001d8ec <__cmpdf2>:
   1d8ec:	e3a0c001 	mov	ip, #1	; 0x1
   1d8f0:	e50dc004 	str	ip, [sp, #-4]
   1d8f4:	e1a0c080 	mov	ip, r0, lsl #1
   1d8f8:	e1f0cacc 	mvns	ip, ip, asr #21
   1d8fc:	e1a0c082 	mov	ip, r2, lsl #1
   1d900:	11f0cacc 	mvnnes	ip, ip, asr #21
   1d904:	0a00000d 	beq	1d940 <__cmpdf2+0x54>
   1d908:	e191c080 	orrs	ip, r1, r0, lsl #1
   1d90c:	0193c082 	orreqs	ip, r3, r2, lsl #1
   1d910:	11300002 	teqne	r0, r2
   1d914:	01310003 	teqeq	r1, r3
   1d918:	03a00000 	moveq	r0, #0	; 0x0
   1d91c:	012fff1e 	bxeq	lr
   1d920:	e3700000 	cmn	r0, #0	; 0x0
   1d924:	e1300002 	teq	r0, r2
   1d928:	51500002 	cmppl	r0, r2
   1d92c:	01510003 	cmpeq	r1, r3
   1d930:	21a00fc2 	movcs	r0, r2, asr #31
   1d934:	31e00fc2 	mvncc	r0, r2, asr #31
   1d938:	e3800001 	orr	r0, r0, #1	; 0x1
   1d93c:	e12fff1e 	bx	lr
   1d940:	e1a0c080 	mov	ip, r0, lsl #1
   1d944:	e1f0cacc 	mvns	ip, ip, asr #21
   1d948:	1a000001 	bne	1d954 <__cmpdf2+0x68>
   1d94c:	e191c600 	orrs	ip, r1, r0, lsl #12
   1d950:	1a000004 	bne	1d968 <__cmpdf2+0x7c>
   1d954:	e1a0c082 	mov	ip, r2, lsl #1
   1d958:	e1f0cacc 	mvns	ip, ip, asr #21
   1d95c:	1affffe9 	bne	1d908 <__cmpdf2+0x1c>
   1d960:	e193c602 	orrs	ip, r3, r2, lsl #12
   1d964:	0affffe7 	beq	1d908 <__cmpdf2+0x1c>
   1d968:	e51d0004 	ldr	r0, [sp, #-4]
   1d96c:	e12fff1e 	bx	lr

0001d970 <__aeabi_cdrcmple>:
   1d970:	e1a0c000 	mov	ip, r0
   1d974:	e1a00002 	mov	r0, r2
   1d978:	e1a0200c 	mov	r2, ip
   1d97c:	e1a0c001 	mov	ip, r1
   1d980:	e1a01003 	mov	r1, r3
   1d984:	e1a0300c 	mov	r3, ip
   1d988:	eaffffff 	b	1d98c <__aeabi_cdcmpeq>

0001d98c <__aeabi_cdcmpeq>:
   1d98c:	e92d4001 	stmdb	sp!, {r0, lr}
   1d990:	ebffffd5 	bl	1d8ec <__cmpdf2>
   1d994:	e3500000 	cmp	r0, #0	; 0x0
   1d998:	43700000 	cmnmi	r0, #0	; 0x0
   1d99c:	e8bd4001 	ldmia	sp!, {r0, lr}
   1d9a0:	e12fff1e 	bx	lr

0001d9a4 <__aeabi_dcmpeq>:
   1d9a4:	e52de008 	str	lr, [sp, #-8]!
   1d9a8:	ebfffff7 	bl	1d98c <__aeabi_cdcmpeq>
   1d9ac:	03a00001 	moveq	r0, #1	; 0x1
   1d9b0:	13a00000 	movne	r0, #0	; 0x0
   1d9b4:	e49de008 	ldr	lr, [sp], #8
   1d9b8:	e12fff1e 	bx	lr

0001d9bc <__aeabi_dcmplt>:
   1d9bc:	e52de008 	str	lr, [sp, #-8]!
   1d9c0:	ebfffff1 	bl	1d98c <__aeabi_cdcmpeq>
   1d9c4:	33a00001 	movcc	r0, #1	; 0x1
   1d9c8:	23a00000 	movcs	r0, #0	; 0x0
   1d9cc:	e49de008 	ldr	lr, [sp], #8
   1d9d0:	e12fff1e 	bx	lr

0001d9d4 <__aeabi_dcmple>:
   1d9d4:	e52de008 	str	lr, [sp, #-8]!
   1d9d8:	ebffffeb 	bl	1d98c <__aeabi_cdcmpeq>
   1d9dc:	93a00001 	movls	r0, #1	; 0x1
   1d9e0:	83a00000 	movhi	r0, #0	; 0x0
   1d9e4:	e49de008 	ldr	lr, [sp], #8
   1d9e8:	e12fff1e 	bx	lr

0001d9ec <__aeabi_dcmpge>:
   1d9ec:	e52de008 	str	lr, [sp, #-8]!
   1d9f0:	ebffffde 	bl	1d970 <__aeabi_cdrcmple>
   1d9f4:	93a00001 	movls	r0, #1	; 0x1
   1d9f8:	83a00000 	movhi	r0, #0	; 0x0
   1d9fc:	e49de008 	ldr	lr, [sp], #8
   1da00:	e12fff1e 	bx	lr

0001da04 <__aeabi_dcmpgt>:
   1da04:	e52de008 	str	lr, [sp, #-8]!
   1da08:	ebffffd8 	bl	1d970 <__aeabi_cdrcmple>
   1da0c:	33a00001 	movcc	r0, #1	; 0x1
   1da10:	23a00000 	movcs	r0, #0	; 0x0
   1da14:	e49de008 	ldr	lr, [sp], #8
   1da18:	e12fff1e 	bx	lr

0001da1c <__aeabi_d2iz>:
   1da1c:	e1a02080 	mov	r2, r0, lsl #1
   1da20:	e2922602 	adds	r2, r2, #2097152	; 0x200000
   1da24:	2a00000c 	bcs	1da5c <__aeabi_d2iz+0x40>
   1da28:	5a000009 	bpl	1da54 <__aeabi_d2iz+0x38>
   1da2c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
   1da30:	e0532ac2 	subs	r2, r3, r2, asr #21
   1da34:	9a00000a 	bls	1da64 <__aeabi_d2iz+0x48>
   1da38:	e1a03580 	mov	r3, r0, lsl #11
   1da3c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   1da40:	e1833aa1 	orr	r3, r3, r1, lsr #21
   1da44:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   1da48:	e1a00233 	mov	r0, r3, lsr r2
   1da4c:	12600000 	rsbne	r0, r0, #0	; 0x0
   1da50:	e12fff1e 	bx	lr
   1da54:	e3a00000 	mov	r0, #0	; 0x0
   1da58:	e12fff1e 	bx	lr
   1da5c:	e1911600 	orrs	r1, r1, r0, lsl #12
   1da60:	1a000002 	bne	1da70 <__aeabi_d2iz+0x54>
   1da64:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
   1da68:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   1da6c:	e12fff1e 	bx	lr
   1da70:	e3a00000 	mov	r0, #0	; 0x0
   1da74:	e12fff1e 	bx	lr

0001da78 <gps_init_string408>:
   1da78:	52535024 33303146 2c31302c 302c3030     $PSRF103,01,00,0
   1da88:	31302c30 0d35322a 5350240a 30314652     0,01*25..$PSRF10
   1da98:	32302c33 2c30302c 302c3030 36322a31     3,02,00,00,01*26
   1daa8:	50240a0d 31465253 302c3330 30302c33     ..$PSRF103,03,00
   1dab8:	2c30302c 322a3130 240a0d37 46525350     ,00,01*27..$PSRF
   1dac8:	2c333031 302c3430 30302c30 2a31302c     103,04,00,00,01*
   1dad8:	0a0d3032 52535024 33303146 2c35302c     20..$PSRF103,05,
   1dae8:	302c3030 31302c30 0d31322a 5350240a     00,00,01*21..$PS
   1daf8:	30314652 36302c33 2c30302c 302c3030     RF103,06,00,00,0
   1db08:	32322a31 50240a0d 31465253 302c3330     1*22..$PSRF103,0
   1db18:	30302c37 2c30302c 322a3130 240a0d33     7,00,00,01*23..$
   1db28:	46525350 2c333031 302c3030 30302c30     PSRF103,00,00,00
   1db38:	2a31302c 0a0d3432 52535024 33303146     ,01*24..$PSRF103
   1db48:	2c34302c 302c3030 30302c31 0d30322a     ,04,00,01,00*20.
   1db58:	0000000a                                ....

0001db5c <abSense>:
   1db5c:	00ff0070 0a000000 00000000 0000ffff     p...............
	...

0001db6e <abInquiry>:
   1db6e:	02048000 0000001f 5543504c 20204253     ........LPCUSB  
   1db7e:	7373614d 6f747320 65676172 20202020     Mass storage    
   1db8e:	20312e30                                0.1 

0001db92 <zeroes.3063>:
   1db92:	30303030 30303030 30303030 30303030     0000000000000000

0001dba2 <blanks.3062>:
   1dba2:	20202020 20202020 20202020 20202020                     
	...

0001dbb4 <_global_impure_ptr>:
   1dbb4:	4000048c                                ...@

0001dbb8 <lconv>:
   1dbb8:	0001e0e0 0001e2a0 0001e2a0 0001e2a0     ................
   1dbc8:	0001e2a0 0001e2a0 0001e2a0 0001e2a0     ................
   1dbd8:	0001e2a0 0001e2a0 ffffffff ffffffff     ................

0001dbe8 <charset>:
   1dbe8:	0001e380                                ....

0001dbec <__mprec_tens>:
   1dbec:	3ff00000 00000000 40240000 00000000     ...?......$@....
   1dbfc:	40590000 00000000 408f4000 00000000     ..Y@.....@.@....
   1dc0c:	40c38800 00000000 40f86a00 00000000     ...@.....j.@....
   1dc1c:	412e8480 00000000 416312d0 00000000     ...A......cA....
   1dc2c:	4197d784 00000000 41cdcd65 00000000     ...A....e..A....
   1dc3c:	4202a05f 20000000 42374876 e8000000     _..B... vH7B....
   1dc4c:	426d1a94 a2000000 42a2309c e5400000     ..mB.....0.B..@.
   1dc5c:	42d6bcc4 1e900000 430c6bf5 26340000     ...B.....k.C..4&
   1dc6c:	4341c379 37e08000 43763457 85d8a000     y.AC...7W4vC....
   1dc7c:	43abc16d 674ec800 43e158e4 60913d00     m..C..Ng.X.C.=.`
   1dc8c:	4415af1d 78b58c40 444b1ae4 d6e2ef50     ...D@..x..KDP...
   1dc9c:	4480f0cf 064dd592 44b52d02 c7e14af6     ...D..M..-.D.J..
   1dcac:	44ea7843 79d99db4                       Cx.D...y

0001dcb4 <__mprec_bigtens>:
   1dcb4:	4341c379 37e08000 4693b8b5 b5056e17     y.AC...7...F.n..
   1dcc4:	4d384f03 e93ff9f5 5a827748 f9301d32     .O8M..?.Hw.Z2.0.
   1dcd4:	75154fdd 7f73bf3c                       .O.u<.s.

0001dcdc <__mprec_tinytens>:
   1dcdc:	3c9cd2b2 97d889bc 3949f623 d5a8a733     ...<....#.I93...
   1dcec:	32a50ffd 44f4a73d 255bba08 cf8c979d     ...2=..D..[%....
   1dcfc:	0ac80628 64ac6f43                       (...Co.d

0001dd04 <p05.2298>:
   1dd04:	00000005 00000019 0000007d 6b636150     ........}...Pack
   1dd14:	54656761 6b636172 30257265 632e6433     ageTracker%03d.c
   1dd24:	00007673 65746144 5455202c 58202c43     sv..Date, UTC, X
   1dd34:	2c59202c 202c5a20 74746142 7250202c     , Y, Z, Batt, Pr
   1dd44:	2c2e7365 50435320 6d655420 202c2e70     es., SCP Temp., 
   1dd54:	20544853 706d6554 7548202c 6964696d     SHT Temp, Humidi
   1dd64:	202c7974 2c786946 74614c20 4c202c2e     ty, Fix, Lat., L
   1dd74:	202e7461 2e726944 6f4c202c 2c2e676e     at. Dir., Long.,
   1dd84:	6e6f4c20 44202e67 2c2e7269 0000000a      Long. Dir.,....
   1dd94:	6b636150 54656761 6b636172 4d4e7265     PackageTrackerNM
   1dda4:	30254145 632e6433 00007673 7373654d     EA%03d.csv..Mess
   1ddb4:	20656761 202c4449 656d6954 7453202c     age ID, Time, St
   1ddc4:	73757461 614c202c 202c2e74 2c532f4e     atus, Lat., N/S,
   1ddd4:	6e6f4c20 202c2e67 2c572f45 65705320      Long., E/W, Spe
   1dde4:	202c6465 72756f43 202c6573 65746144     ed, Course, Date
   1ddf4:	614d202c 74656e67 56206369 0a2e7261     , Magnetic Var..
   1de04:	00000000 656b6157 0000000a 65656c53     ....Wake....Slee
   1de14:	00000a70 252c6425 64252c64 2c64252c     p...%d,%d,%d,%d,
   1de24:	00000000 252c6425 00002c64 756e616d     ....%d,%d,..manu
   1de34:	20203a66 30257830 0d0a7832 00000000     f:  0x%02x......
   1de44:	3a6d656f 20202020 0d0a7325 00000000     oem:    %s......
   1de54:	646f7270 2020203a 0d0a7325 00000000     prod:   %s......
   1de64:	3a766572 20202020 78323025 00000d0a     rev:    %02x....
   1de74:	69726573 203a6c61 30257830 0a786c38     serial: 0x%08lx.
   1de84:	0000000d 65746164 2020203a 64323025     ....date:   %02d
   1de94:	3230252f 000d0a64 657a6973 2020203a     /%02d...size:   
   1dea4:	0a646c25 0000000d 79706f63 2020203a     %ld.....copy:   
   1deb4:	0d0a6425 00000000 702e7277 203a2e72     %d......wr.pr.: 
   1dec4:	252f6425 000d0a64 6d726f66 203a7461     %d/%d...format: 
   1ded4:	0d0a6425 00000000 65657266 2020203a     %d......free:   
   1dee4:	2f646c25 0a646c25 0000000d 6e65706f     %ld/%ld.....open
   1def4:	20676e69 74726170 6f697469 6166206e     ing partition fa
   1df04:	64656c69 00000d0a 6e65706f 20676e69     iled....opening 
   1df14:	656c6966 74737973 66206d65 656c6961     filesystem faile
   1df24:	000d0a64 0000002f 6e65706f 20676e69     d.../...opening 
   1df34:	746f6f72 72696420 6f746365 66207972     root directory f
   1df44:	656c6961 000d0a64 52204453 4e205741     ailed...SD RAW N
   1df54:	4120544f 4c494156 454c4241 00000d0a     OT AVAILABLE....
   1df64:	65720d0a 6e6f7073 203a6573 0d0a6425     ..response: %d..
   1df74:	00000000 203d2069 66377830 0d0a6666     ....i = 0x7fff..
   1df84:	00000000 434f4c42 4953204b 5320455a     ....BLOCK SIZE S
   1df94:	45205445 0a205252 0000000d 725f6473     ET ERR .....sd_r
   1dfa4:	725f7761 20646165 6b726f62 000d0a73     aw_read borks...
   1dfb4:	4c4c414d 4620434f 534c4941 00000d0a     MALLOC FAILS....
   1dfc4:	6c696146 52206465 69646165 4820676e     Failed Reading H
   1dfd4:	65646165 000d0a72 46525350 2c313531     eader...PSRF151,
   1dfe4:	00006425 46525350 2c333031 302c6425     %d..PSRF103,%d,0
   1dff4:	64252c30 0031302c 74696e49 696c6169     0,%d,01.Initiali
   1e004:	676e6973 42535520 61747320 000a6b63     sing USB stack..
   1e014:	72617453 676e6974 42535520 6d6f6320     Starting USB com
   1e024:	696e756d 69746163 000a6e6f 3a445343     munication..CSD:
   1e034:	00000000 32302520 00000078 75677241     .... %02x...Argu
   1e044:	746e656d 74756f20 20666f20 6e756f62     ment out of boun
   1e054:	0a2e7364 00000000 72646441 20737365     ds......Address 
   1e064:	2074756f 6220666f 646e756f 000a2e73     out of bounds...
   1e074:	6f727245 75642072 676e6972 61726520     Error during era
   1e084:	73206573 65757165 2e65636e 0000000a     se sequence.....
   1e094:	20435243 6c696166 0a2e6465 00000000     CRC failed......
   1e0a4:	656c6c49 206c6167 6d6d6f63 2e646e61     Illegal command.
   1e0b4:	0000000a 73617245 65722065 20746573     ....Erase reset 
   1e0c4:	65657328 6e615320 6b736944 636f6420     (see SanDisk doc
   1e0d4:	35702073 2933312d 00000a2e 0000002e     s p5-13)........
   1e0e4:	6e6b6e55 206e776f 6f727265 78302072     Unknown error 0x
   1e0f4:	28207825 20656573 446e6153 206b7369     %x (see SanDisk 
   1e104:	73636f64 2d357020 2e293331 0000000a     docs p5-13).....
   1e114:	70736572 6678303d 00000a66 70736572     resp=0xff...resp
   1e124:	78303d21 000a6666 64726143 20736920     !=0xff..Card is 
   1e134:	6b636f4c 0a2e6465 00000000 45205057     Locked......WP E
   1e144:	65736172 696b5320 4c202c70 2f6b636f     rase Skip, Lock/
   1e154:	6f6c6e55 43206b63 4620646d 656c6961     Unlock Cmd Faile
   1e164:	000a2e64 656e6547 206c6172 6e55202f     d...General / Un
   1e174:	776f6e6b 7265206e 20726f72 63202d2d     known error -- c
   1e184:	20647261 6b6f7262 2e3f6e65 0000000a     ard broken?.....
   1e194:	65746e49 6c616e72 72616320 6f632064     Internal card co
   1e1a4:	6f72746e 72656c6c 72726520 0a2e726f     ntroller error..
   1e1b4:	00000000 64726143 746e6920 616e7265     ....Card interna
   1e1c4:	4345206c 61772043 70612073 65696c70     l ECC was applie
   1e1d4:	62202c64 66207475 656c6961 6f742064     d, but failed to
   1e1e4:	726f6320 74636572 65687420 74616420      correct the dat
   1e1f4:	000a2e61 74697257 72702065 6365746f     a...Write protec
   1e204:	69762074 74616c6f 2e6e6f69 0000000a     t violation.....
   1e214:	69206e41 6c61766e 73206469 63656c65     An invalid selec
   1e224:	6e6f6974 6573202c 726f7463 6f662073     tion, sectors fo
   1e234:	72652072 2e657361 0000000a 2074754f     r erase.....Out 
   1e244:	5220666f 65676e61 5343202c 764f5f44     of Range, CSD_Ov
   1e254:	72777265 2e657469 0000000a 6e6b6e55     erwrite.....Unkn
   1e264:	206e776f 6f727265 30203a72 20782578     own error: 0x%x 
   1e274:	65657328 6e615320 6b736944 636f6420     (see SanDisk doc
   1e284:	35702073 2934312d 00000a2e 49204453     s p5-14)....SD I
   1e294:	2074696e 656e6f64 0a2e2e2e 00000000     nit done........
   1e2a4:	64726143 64696420 2074276e 75746572     Card didn't retu
   1e2b4:	74206e72 72206568 79646165 61747320     rn the ready sta
   1e2c4:	202c6574 61657262 676e696b 2e707520     te, breaking up.
   1e2d4:	000a2e2e 49697073 2074696e 20726f66     ....spiInit for 
   1e2e4:	28495053 000a2930 33323130 37363534     SPI(0)..01234567
   1e2f4:	62613938 66656463 00000000 00666e69     89abcdef....inf.
   1e304:	00464e49 004e414e 006e616e 33323130     INF.NAN.nan.0123
   1e314:	37363534 42413938 46454443 00000000     456789ABCDEF....
   1e324:	20677562 76206e69 69727066 3a66746e     bug in vfprintf:
   1e334:	64616220 73616220 00000065 00000030      bad base...0...
   1e344:	6c756e28 0000296c 54552d43 00382d46     (null)..C-UTF-8.
   1e354:	4a532d43 00005349 55452d43 00504a43     C-SJIS..C-EUCJP.
   1e364:	494a2d43 00000053 69666e49 7974696e     C-JIS...Infinity
   1e374:	00000000 004e614e 00000043 2d4f5349     ....NaN.C...ISO-
   1e384:	39353838 0000312d                       8859-1..
