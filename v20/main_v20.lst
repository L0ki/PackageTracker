   1              		.file	"main_v20.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	delay_ms
  13              	delay_ms:
  14              	.LFB3:
  15              		.file 1 "main_v20.c"
   1:main_v20.c    **** //*******************************************************
   2:main_v20.c    **** //					Package Tracker Firmware
   3:main_v20.c    **** //*******************************************************
   4:main_v20.c    **** #include <stdio.h>
   5:main_v20.c    **** #include <string.h>
   6:main_v20.c    **** #include "LPC214x.h"
   7:main_v20.c    **** #include "serial.h"
   8:main_v20.c    **** #include "rprintf.h"
   9:main_v20.c    **** #include "spi0.h"
  10:main_v20.c    **** #include "target.h"
  11:main_v20.c    **** #include "main_msc.h"
  12:main_v20.c    **** #include "PackageTracker.h"
  13:main_v20.c    **** 
  14:main_v20.c    **** //*******************************************************
  15:main_v20.c    **** //				Memory Management Libraries
  16:main_v20.c    **** //*******************************************************
  17:main_v20.c    **** #include "rootdir.h"
  18:main_v20.c    **** #include "sd_raw.h"
  19:main_v20.c    **** #include "fat16.h"
  20:main_v20.c    **** 
  21:main_v20.c    **** //*******************************************************
  22:main_v20.c    **** //					External Component Libs
  23:main_v20.c    **** //*******************************************************
  24:main_v20.c    **** #include "ADXL345.h"
  25:main_v20.c    **** #include "SCP1000.h"
  26:main_v20.c    **** #include "SHT15.h"
  27:main_v20.c    **** #include "gps.h"
  28:main_v20.c    **** 
  29:main_v20.c    **** //*******************************************************
  30:main_v20.c    **** //					Core Functions
  31:main_v20.c    **** //*******************************************************
  32:main_v20.c    **** void bootUp(void);
  33:main_v20.c    **** void goToSleep(int duration);
  34:main_v20.c    **** static void ISR_RxData1(void);
  35:main_v20.c    **** static void ISR_RTC(void);
  36:main_v20.c    **** static void ISR_Timer0(void);
  37:main_v20.c    **** static void ISR_EINT2(void);
  38:main_v20.c    **** void createLogFile(void);
  39:main_v20.c    **** void parseGGA(const char *gps_string);
  40:main_v20.c    **** int parseRMC(const char *gps_string);
  41:main_v20.c    **** void saveData(struct fat16_file_struct **fd, const char * const buf, const int buf_size);
  42:main_v20.c    **** void itoa(int n, char s[]);
  43:main_v20.c    **** void reverse(char s[]);
  44:main_v20.c    **** void wakeUp(void);
  45:main_v20.c    **** int get_adc_1(char channel);
  46:main_v20.c    **** void reset(void);
  47:main_v20.c    **** void initializeGps(void);
  48:main_v20.c    **** 
  49:main_v20.c    **** //*******************************************************
  50:main_v20.c    **** //					Global Variables
  51:main_v20.c    **** //*******************************************************
  52:main_v20.c    **** #define NMEA_FILE_HEADER "Message ID, Time, Status, Lat., N/S, Long., E/W, Speed, Course, Date, Mag
  53:main_v20.c    **** 
  54:main_v20.c    **** //GPS variables
  55:main_v20.c    **** char gps_message_complete=0, new_gps_data=0, RTC_Set, alarm_set;	//Notification Flags
  56:main_v20.c    **** char final_message[GPS_BUFFER_SIZE], gps_message[GPS_BUFFER_SIZE];	//Buffers for holding GPS messag
  57:main_v20.c    **** int gps_message_index=0, gps_message_size=0;	//index for copying messages to different buffers
  58:main_v20.c    **** int final_gps_message_size=0;
  59:main_v20.c    **** GPSdata GPS;	//GPS Struct to hold GPS coordinates.  See PackageTracker.h for Structure definition
  60:main_v20.c    **** 
  61:main_v20.c    **** //Pressure Sensor (SCP100) Values
  62:main_v20.c    **** unsigned int scp_pressure;
  63:main_v20.c    **** int scp_temp;
  64:main_v20.c    **** char new_scp_data;
  65:main_v20.c    **** 
  66:main_v20.c    **** //Humidity Sensor (SHT15) Values
  67:main_v20.c    **** unsigned int sht_temp, sht_humidity;
  68:main_v20.c    **** char new_sht_data;
  69:main_v20.c    **** 
  70:main_v20.c    **** //Accelerometer (ADXL345) Values
  71:main_v20.c    **** signed int acceleration_x, acceleration_y, acceleration_z;
  72:main_v20.c    **** 
  73:main_v20.c    **** //Logging Parameters
  74:main_v20.c    **** char file_name[32]; 	
  75:main_v20.c    **** int battery_level; 
  76:main_v20.c    **** int log_count;	//Keeps track of how many logs we've made since we've been awake.  Get's reset befor
  77:main_v20.c    **** 
  78:main_v20.c    **** //Log Parameters for logging the Sensor Data
  79:main_v20.c    **** struct fat16_file_struct * LOG_FILE; //File structure for current log file
  80:main_v20.c    **** char log_data[512], log_buffer[200];//log_buffer holds data before putting it into log_data
  81:main_v20.c    **** int log_data_index;	//Keeps track of current position in log_data
  82:main_v20.c    **** 
  83:main_v20.c    **** //Log Parameters for logging the NMEA file
  84:main_v20.c    **** struct fat16_file_struct * NMEA_FILE; //File structure for current log file
  85:main_v20.c    **** char nmea_data[1024];//
  86:main_v20.c    **** int nmea_data_index=0;
  87:main_v20.c    **** 
  88:main_v20.c    **** char led_blink=0;
  89:main_v20.c    **** 
  90:main_v20.c    **** //Sleep Parameters
  91:main_v20.c    **** unsigned int power_register_values;			//Holds the value to load to the power register after waking 
  92:main_v20.c    **** char read_sensors, new_sensor_data;			//Global flag indicating an accelerometer reading has been co
  93:main_v20.c    **** char wake_event=0;
  94:main_v20.c    **** 
  95:main_v20.c    **** int main (void)
  96:main_v20.c    **** {
  97:main_v20.c    **** //*******************************************************
  98:main_v20.c    **** //					Main Code
  99:main_v20.c    **** //*******************************************************
 100:main_v20.c    **** 	//Initialize ARM I/O
 101:main_v20.c    **** 	bootUp();			//Init. I/O ports, Comm protocols and interrupts
 102:main_v20.c    **** 	createLogFile();	//Create a new log file in the root of the SD card
 103:main_v20.c    **** 	
 104:main_v20.c    **** 	//Initialize the GPS
 105:main_v20.c    **** 	initializeGps();		//Send the initialization strings
 106:main_v20.c    **** 	enable_gps_rmc_msgs(1);
 107:main_v20.c    **** 
 108:main_v20.c    **** 	//Initialize the sensors
 109:main_v20.c    **** 	SCPon();		//Turn on the SCP Sensor
 110:main_v20.c    **** 	delay_ms(100);	//Allow SCP sensor to initialize
 111:main_v20.c    **** 	SCPinit();		//Initialize the SCP sensor
 112:main_v20.c    **** 	
 113:main_v20.c    **** 	initAccel();	//Initialize Accelerometer
 114:main_v20.c    **** 
 115:main_v20.c    **** 	//SHT15 shouldn't need to be initialized(it just needs power)
 116:main_v20.c    **** 	
 117:main_v20.c    **** 	VICIntEnable |= UART1_INT | TIMER0_INT;	//Enable UART1 and Timer0 Interrupts
 118:main_v20.c    **** 	while(1){
 119:main_v20.c    **** 		while(log_count < (TIMER_FREQ*60)*WAKE_MINUTES){		//After WAKE_MINUTES we will stop logging and g
 120:main_v20.c    **** 			if(gps_message_complete==1){		//If we've received a new GPS message, record it.
 121:main_v20.c    **** 				VICIntEnClr |= UART1_INT | TIMER0_INT;		//Stop the UART1 interrupts while we read the message
 122:main_v20.c    **** 				for(int i=0; i<gps_message_size; i++){ //Transfer the GPS message to the final_message buffer
 123:main_v20.c    **** 					final_message[i]=gps_message[i];
 124:main_v20.c    **** 					gps_message[i]='\0';
 125:main_v20.c    **** 				}
 126:main_v20.c    **** 				final_gps_message_size=gps_message_size;
 127:main_v20.c    **** 				gps_message_complete=0;			//Clear the message complete flag
 128:main_v20.c    **** 				VICIntEnable |= UART1_INT | TIMER0_INT;		//Re-Enable the UART0 Interrupts to get next GPS messa
 129:main_v20.c    **** 				
 130:main_v20.c    **** 				//Populate GPS struct with time, position, fix, date
 131:main_v20.c    **** 				//If we received a valid RMC message, log it to the NMEA file
 132:main_v20.c    **** 				//if(parseRMC(final_message)){
 133:main_v20.c    **** 					//If we were able to parse the entire gps message, than we have new gps data to log
 134:main_v20.c    **** 					new_gps_data=1;
 135:main_v20.c    **** 					
 136:main_v20.c    **** 					//Add the gps message to the nmea buffer
 137:main_v20.c    **** 					for(int i=0; i<final_gps_message_size; i++)nmea_data[nmea_data_index++]=final_message[i];
 138:main_v20.c    **** 					 
 139:main_v20.c    **** 					//If the nmea buffer is full then log the buffer to the NMEA file
 140:main_v20.c    **** 					if(nmea_data_index >= MAX_BUFFER_SIZE){
 141:main_v20.c    **** 						VICIntEnClr = TIMER0_INT | UART1_INT;
 142:main_v20.c    **** 						UnselectSCP();
 143:main_v20.c    **** 						saveData(&NMEA_FILE, nmea_data, nmea_data_index);
 144:main_v20.c    **** 						nmea_data_index=0;
 145:main_v20.c    **** 						VICIntEnable = TIMER0_INT | UART1_INT;
 146:main_v20.c    **** 						SelectSCP();
 147:main_v20.c    **** 						unselect_card();
 148:main_v20.c    **** 						SCPinit();
 149:main_v20.c    **** 						delay_ms(10);
 150:main_v20.c    **** 						for(int i=0; i<nmea_data_index; i++)nmea_data[i]='\0';
 151:main_v20.c    **** 						nmea_data_index=0;
 152:main_v20.c    **** 					}
 153:main_v20.c    **** 				//}
 154:main_v20.c    **** 
 155:main_v20.c    **** 				CCR = (1<<1); 	//Disable and Reset the RTC
 156:main_v20.c    **** 				HOUR = ((GPS.Time[0]-'0')*10) + (GPS.Time[1]-'0');
 157:main_v20.c    **** 				MIN = ((GPS.Time[2]-'0')*10) + (GPS.Time[3]-'0');
 158:main_v20.c    **** 				SEC = ((GPS.Time[4]-'0')*10) + (GPS.Time[5] -'0');	
 159:main_v20.c    **** 				RTC_Set=1;		//Set the RTC_Set flag since we have a valid time in the RTC registers					
 160:main_v20.c    **** 				CCR = (1<<0);	//Start the RTC
 161:main_v20.c    **** 
 162:main_v20.c    **** 			}
 163:main_v20.c    **** 			
 164:main_v20.c    **** 			//Check to see if it's time to read the sensors
 165:main_v20.c    **** 			if(read_sensors==1){
 166:main_v20.c    **** 				VICIntEnClr |= TIMER0_INT;
 167:main_v20.c    **** 								
 168:main_v20.c    **** 				//Get Acceleration
 169:main_v20.c    **** 				acceleration_x = accelX();
 170:main_v20.c    **** 				acceleration_y = accelY();
 171:main_v20.c    **** 				acceleration_z = accelZ();
 172:main_v20.c    **** 				
 173:main_v20.c    **** 				//Get Battery Voltage
 174:main_v20.c    **** 				battery_level = ((get_adc_1(0x10)*3300)/1024)*2;	//Report Battery voltage in mV. from AD1.4(P0.
 175:main_v20.c    **** 
 176:main_v20.c    **** 				//If the SCP1000 has new data ready, then grab it!
 177:main_v20.c    **** 				if(IOPIN0 & SCP_DRDY){
 178:main_v20.c    **** 					unselect_card();
 179:main_v20.c    **** 					SelectSCP();
 180:main_v20.c    **** 					readSCP(&scp_pressure, &scp_temp);//Get temperature and pressure values from SCP1000
 181:main_v20.c    **** 					new_scp_data=1;
 182:main_v20.c    **** 				}
 183:main_v20.c    **** 				//Convert the values of scp_pressure to Pa and scp_temp to degrees C
 184:main_v20.c    **** 				scp_pressure /=4;
 185:main_v20.c    **** 				if(scp_temp > 0){
 186:main_v20.c    **** 					if((scp_temp & (1<<13))==(1<<13))scp_temp = (~scp_temp+1);	//Get the two's compliment of the t
 187:main_v20.c    **** 					scp_temp/=2;
 188:main_v20.c    **** 					scp_temp = (scp_temp*1.8)+320;	//Convert from Celsius to Farenheit	
 189:main_v20.c    **** 				}
 190:main_v20.c    **** 				
 191:main_v20.c    **** 				//Get Hum. values every second (Reading SHT15 takes a long time, so we don't read it very often
 192:main_v20.c    **** 				if(log_count%TIMER_FREQ==0){
 193:main_v20.c    **** 					//Get Humidity
 194:main_v20.c    **** 					sht15_read(&sht_temp, &sht_humidity);	//Get temp. and humidity values from SHT15 (Values are r
 195:main_v20.c    **** 					new_sht_data=1;
 196:main_v20.c    **** 				}
 197:main_v20.c    **** 				
 198:main_v20.c    **** 				new_sensor_data=1;	//Set the flag to tell the logging routine that there is new sensor data to 
 199:main_v20.c    **** 				read_sensors=0;		//Reset the "read sensor" flag
 200:main_v20.c    **** 
 201:main_v20.c    **** 				VICIntEnable |= TIMER0_INT;
 202:main_v20.c    **** 			}
 203:main_v20.c    **** 			
 204:main_v20.c    **** 			//If we have new data, lets log it!
 205:main_v20.c    **** 			//We will save the data into a CSV file that is stored on the SD card.  
 206:main_v20.c    **** 			//To create the CSV file, we'll store the data in a text array with the following format:
 207:main_v20.c    **** 			// DATE, UTC_TIME, X ACCEL, Y ACCEL, Z ACCEL, BATT. LEVEL(mV), SCP PRESSURE, SCP TEMPERATURE, SH
 208:main_v20.c    **** 			if(new_sensor_data || new_gps_data){ 							
 209:main_v20.c    **** 				//Log Time
 210:main_v20.c    **** 				//If there is GPS data, use this time and date
 211:main_v20.c    **** 				if(new_gps_data && GPS.Fix=='A'){
 212:main_v20.c    **** 					for(int i=0; i<6; i++)log_data[log_data_index++]=GPS.Date[i];
 213:main_v20.c    **** 					log_data[log_data_index++]=',';
 214:main_v20.c    **** 					for(int i=0; i<10; i++)log_data[log_data_index++]=GPS.Time[i];
 215:main_v20.c    **** 				}
 216:main_v20.c    **** 				//If there is not GPS data, use the RTC time
 217:main_v20.c    **** 				else{
 218:main_v20.c    **** 					//Put a place marker for the date!
 219:main_v20.c    **** 					log_data[log_data_index++]=',';
 220:main_v20.c    **** 					if(RTC_Set){
 221:main_v20.c    **** 						log_data[log_data_index++]=(HOUR / 10) + '0';
 222:main_v20.c    **** 						log_data[log_data_index++]=(HOUR % 10) + '0';
 223:main_v20.c    **** 						log_data[log_data_index++]=(MIN / 10) + '0';
 224:main_v20.c    **** 						log_data[log_data_index++]=(MIN % 10) + '0';
 225:main_v20.c    **** 						log_data[log_data_index++]=(SEC / 10) + '0';
 226:main_v20.c    **** 						log_data[log_data_index++]=(SEC % 10) + '0';	
 227:main_v20.c    **** 					}
 228:main_v20.c    **** 				}
 229:main_v20.c    **** 				log_data[log_data_index++]=',';
 230:main_v20.c    **** 				
 231:main_v20.c    **** 				//Log Acceleration and Battery Values (ADC Values)
 232:main_v20.c    **** 				if(new_sensor_data){
 233:main_v20.c    **** 					//Log Acceleration
 234:main_v20.c    **** 					log_data_index += (int) sprintf(log_data+log_data_index, "%d,%d,%d,%d,", acceleration_x, accel
 235:main_v20.c    **** 					acceleration_x=0;
 236:main_v20.c    **** 					acceleration_y=0;
 237:main_v20.c    **** 					acceleration_z=0;
 238:main_v20.c    **** 					battery_level=0;
 239:main_v20.c    **** 				}
 240:main_v20.c    **** 				else for(int i=0; i<4; i++)log_data[log_data_index++]=',';
 241:main_v20.c    **** 				
 242:main_v20.c    **** 				//Log Pressure Values (SCP1000 Values)
 243:main_v20.c    **** 				if(new_scp_data){
 244:main_v20.c    **** 					//Log Acceleration
 245:main_v20.c    **** 					log_data_index += (int) sprintf(log_data+log_data_index, "%d,%d,", scp_pressure, scp_temp);
 246:main_v20.c    **** 					scp_pressure=0;
 247:main_v20.c    **** 					scp_temp=0;
 248:main_v20.c    **** 					new_scp_data=0;
 249:main_v20.c    **** 				}
 250:main_v20.c    **** 				else for(int i=0; i<2; i++)log_data[log_data_index++]=',';
 251:main_v20.c    **** 				
 252:main_v20.c    **** 				//Log Humidity Values (SHT15 Values)
 253:main_v20.c    **** 				if(new_sht_data){
 254:main_v20.c    **** 					//Log Acceleration
 255:main_v20.c    **** 					log_data_index += (int) sprintf(log_data+log_data_index, "%d,%d,", sht_temp, sht_humidity);
 256:main_v20.c    **** 					sht_temp=0;
 257:main_v20.c    **** 					sht_humidity=0;
 258:main_v20.c    **** 					new_sht_data=0;
 259:main_v20.c    **** 				}
 260:main_v20.c    **** 				else for(int i=0; i<2; i++)log_data[log_data_index++]=',';				
 261:main_v20.c    **** 				
 262:main_v20.c    **** 				//If we have GPS data, add it to the log buffer
 263:main_v20.c    **** 				if(new_gps_data){
 264:main_v20.c    **** 					//Log Fix Indicator
 265:main_v20.c    **** 					log_data[log_data_index++]=GPS.Fix;
 266:main_v20.c    **** 					log_data[log_data_index++]=',';
 267:main_v20.c    **** 					
 268:main_v20.c    **** 					//Log latitiude
 269:main_v20.c    **** 					for(int i=0; i<9; i++)log_data[log_data_index++]=GPS.Latitude.position[i];
 270:main_v20.c    **** 					log_data[log_data_index++]=',';
 271:main_v20.c    **** 					
 272:main_v20.c    **** 					log_data[log_data_index++]=GPS.Latitude.direction;
 273:main_v20.c    **** 					log_data[log_data_index++]=',';
 274:main_v20.c    **** 					
 275:main_v20.c    **** 					//Log longitude
 276:main_v20.c    **** 					for(int i=0; i<10; i++)log_data[log_data_index++]=GPS.Longitude.position[i];
 277:main_v20.c    **** 					log_data[log_data_index++]=',';
 278:main_v20.c    **** 					
 279:main_v20.c    **** 					log_data[log_data_index++]=GPS.Longitude.direction;
 280:main_v20.c    **** 					log_data[log_data_index++]=',';
 281:main_v20.c    **** 					
 282:main_v20.c    **** 				}
 283:main_v20.c    **** 				else for(int i=0; i<6; i++)log_data[log_data_index++]=',';
 284:main_v20.c    **** 				log_data[log_data_index++]='\n';
 285:main_v20.c    **** 					
 286:main_v20.c    **** 				
 287:main_v20.c    **** 				//Only Save Data if the buffer is full! This saves write cycles to the SD card
 288:main_v20.c    **** 				if(log_data_index >= MAX_BUFFER_SIZE){
 289:main_v20.c    **** 					VICIntEnClr |= TIMER0_INT | UART1_INT;
 290:main_v20.c    **** 					UnselectSCP();
 291:main_v20.c    **** 					saveData(&LOG_FILE, log_data, log_data_index);
 292:main_v20.c    **** 					VICIntEnable |= TIMER0_INT | UART1_INT;
 293:main_v20.c    **** 					SelectSCP();
 294:main_v20.c    **** 					unselect_card();
 295:main_v20.c    **** 					SCPinit();
 296:main_v20.c    **** 					delay_ms(10);
 297:main_v20.c    **** 					for(int i=0; i<log_data_index; i++)log_data[i]='\0';
 298:main_v20.c    **** 					log_data_index=0;
 299:main_v20.c    **** 				}
 300:main_v20.c    **** 				new_gps_data=0;	//We've saved the GPS coordinates, so clear the GPS data flag
 301:main_v20.c    **** 				new_sensor_data=0;	//We've save the accel values, so clear the accel flag
 302:main_v20.c    **** 			}
 303:main_v20.c    **** 			//If a USB Cable gets plugged in, stop everything!
 304:main_v20.c    **** 			if(IOPIN0 & (1<<23))
 305:main_v20.c    **** 			{
 306:main_v20.c    **** 				VICIntEnClr = UART1_INT | TIMER0_INT | RTC_INT | EINT2_INT;	//Stop all running interrupts
 307:main_v20.c    **** 				//Save current logged data and close the file before allowing USB communication
 308:main_v20.c    **** 				if ( NULL != LOG_FILE ) {
 309:main_v20.c    **** 					UnselectSCP();
 310:main_v20.c    **** 					saveData(&LOG_FILE, log_data, log_data_index);
 311:main_v20.c    **** 					fat16_close_file(LOG_FILE);
 312:main_v20.c    **** 					log_data_index=0;
 313:main_v20.c    **** 				}
 314:main_v20.c    **** 				if ( NULL != NMEA_FILE ) {
 315:main_v20.c    **** 					UnselectSCP();
 316:main_v20.c    **** 					saveData(&NMEA_FILE, nmea_data, nmea_data_index);
 317:main_v20.c    **** 					fat16_close_file(NMEA_FILE);
 318:main_v20.c    **** 					nmea_data_index=0;
 319:main_v20.c    **** 				}			
 320:main_v20.c    **** 				main_msc();								//Open the mass storage device
 321:main_v20.c    **** 				reset();								//Reset to check for new FW
 322:main_v20.c    **** 			}
 323:main_v20.c    **** 		}
 324:main_v20.c    **** 		//After logging for "WAKE MINUTES" we will go to sleep for a while. We will wake up if
 325:main_v20.c    **** 		//A.) SLEEP MINUTES expires
 326:main_v20.c    **** 		//or
 327:main_v20.c    **** 		//B.) The accelerometer detects a free fall
 328:main_v20.c    **** 		goToSleep(SLEEP_MINUTES);	//Send the LPC2148 to sleep mode for SLEEP_MINUTES (Defined in PackageT
 329:main_v20.c    **** 		wakeUp();					//After the RTC alarm goes off or we detect a free fall, the LPC2148 will wake up a
 330:main_v20.c    **** 	}
 331:main_v20.c    ****     return 0;
 332:main_v20.c    **** }
 333:main_v20.c    **** 
 334:main_v20.c    **** 
 335:main_v20.c    **** //Usage: delay_ms(1000);
 336:main_v20.c    **** //Inputs: int count: Number of milliseconds to delay
 337:main_v20.c    **** //The function will cause the firmware to delay for "count" milleseconds.
 338:main_v20.c    **** void delay_ms(int count)
 339:main_v20.c    **** {
  16              	@ Function supports interworking.
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              		@ link register save eliminated.
  20              	.LVL0:
  21              		.loc 1 341 0
 340:main_v20.c    ****     int i;
 341:main_v20.c    ****     count *= 10000;
  22              	3, .L6
  23 0000 1C309FE5 		mul	r0, r3, r0
  24 0004 930000E0 	.LVL1:
  25              		mov	r3, #0
  26 0008 0030A0E3 	.LVL2:
  27              		.loc 1 339 0
  28              		@ lr needed for prologue
  29              		b	.L2
  30 000c 010000EA 	.L3:
  31              		.loc 1 343 0
 342:main_v20.c    ****     for (i = 0; i < count; i++)
 343:main_v20.c    ****         asm volatile ("nop");
  32              	 1 342 0
  33 0010 0000A0E1 		add	r3, r3, #1
  34              	.L2:
  35 0014 013083E2 		cmp	r3, r0
  36              		blt	.L3
  37 0018 000053E1 		.loc 1 344 0
  38 001c FBFFFFBA 		bx	lr
 344:main_v20.c    **** }
  39              	align	2
  40 0020 1EFF2FE1 	.L6:
  41              		.word	10000
  42              	.LFE3:
  44 0024 10270000 		.align	2
  46              	ISR_RxData1:
  47              	.LFB7:
  48              		.loc 1 529 0
  49              		@ Function supports interworking.
  50              		@ args = 0, pretend = 0, frame = 0
 345:main_v20.c    **** 
 346:main_v20.c    **** //Usage: bootUp();
 347:main_v20.c    **** //Inputs: None
 348:main_v20.c    **** //This function initializes the serial port, the SD card, the I/O pins and the interrupts
 349:main_v20.c    **** void bootUp(void)
 350:main_v20.c    **** {
 351:main_v20.c    **** 	//Initialize UART for RPRINTF
 352:main_v20.c    ****     rprintf_devopen(putc_serial1); //Init rprintf
 353:main_v20.c    **** 	init_serial1(4800);
 354:main_v20.c    ****     //rprintf_devopen(putc_serial0); //Init rprintf
 355:main_v20.c    **** 	//init_serial0(115200);	
 356:main_v20.c    **** 	delay_ms(10); //Delay for power to stablize
 357:main_v20.c    **** 
 358:main_v20.c    ****     //Bring up SD and FAT
 359:main_v20.c    ****     if(!sd_raw_init())
 360:main_v20.c    ****     {
 361:main_v20.c    ****         //rprintf("SD Init Error\n");
 362:main_v20.c    **** 		reset();
 363:main_v20.c    ****     }
 364:main_v20.c    ****     if(openroot())
 365:main_v20.c    ****     {
 366:main_v20.c    ****         //rprintf("SD OpenRoot Error\n");
 367:main_v20.c    **** 		reset();
 368:main_v20.c    ****     }
 369:main_v20.c    **** 	PINSEL0 &= ~((3<<4)|(3<<6));
 370:main_v20.c    **** 	
 371:main_v20.c    **** 	//Enable AD conversion on P0.13(AD1.4) FOR BATT_MEAS
 372:main_v20.c    **** 	PINSEL0 |= (3<<26);
 373:main_v20.c    **** 	
 374:main_v20.c    **** 	//Set up the EINT2 External Interrupt Functionality
 375:main_v20.c    **** 	PINSEL0 &= ~(3<<30);	//Clear P0.15 special function
 376:main_v20.c    **** 	PINSEL0 |= (2<<30);	//Set P0.15 to EINT2
 377:main_v20.c    **** 	VICIntEnClr |= EINT2_INT;//Make sure EINT2 interrupts are disabled
 378:main_v20.c    **** 	EXTINT |= (1<<2);		//Clear the EINT2 Interrupt bit
 379:main_v20.c    **** 	EXTMODE |= (1<<2);		//Set EINT2 to be edge sensitive
 380:main_v20.c    **** 	EXTINT |= (1<<2);		//Clear the EINT2 Interrupt bit
 381:main_v20.c    **** 	EXTPOLAR |= (1<<2);	//Set EINT2 to detect rising edges
 382:main_v20.c    **** 	INTWAKE |= (1<<2);		//ARM will wake up from power down on an EINT2 interrupt
 383:main_v20.c    **** 	EXTINT |= (1<<2);		//Clear the EINT2 Interrupt bit	
 384:main_v20.c    **** 	
 385:main_v20.c    **** 	//Initialize I/O Ports and Peripherals
 386:main_v20.c    **** 	IODIR0 = SCLK | MOSI | SD_CS | ACCEL_CS | GPS_EN | I2C_SCL | LED;
 387:main_v20.c    **** 	IODIR0 &= ~(MISO | SCP_DRDY | ACCEL_INT2 | ACCEL_INT1 | BATT_MEAS);
 388:main_v20.c    **** 	
 389:main_v20.c    **** 	IODIR1 = SCP_EN | SCP_CS;	
 390:main_v20.c    **** 	
 391:main_v20.c    **** 	//Make sure peripheral devices are not selected
 392:main_v20.c    **** 	UnselectAccelerometer();
 393:main_v20.c    **** 	UnselectSCP();	
 394:main_v20.c    **** 	
 395:main_v20.c    **** 	//Initialize the SPI bus
 396:main_v20.c    **** 	SPI0_Init();			//Select pin functions for SPI signals.
 397:main_v20.c    ****     S0SPCCR = 64;           // SCK = 1 MHz (60MHz / 64 ~= 1Mhz)
 398:main_v20.c    ****     S0SPCR  = 0x20;         // Master, no interrupt enable, 8 bits	
 399:main_v20.c    **** 		
 400:main_v20.c    ****     //Setup the Interrupts
 401:main_v20.c    **** 	//Enable Interrupts
 402:main_v20.c    **** 	VPBDIV=1;										// Set PCLK equal to the System Clock	
 403:main_v20.c    **** 	VICIntSelect = ~(UART1_INT | TIMER0_INT | RTC_INT | EINT2_INT);
 404:main_v20.c    **** 	VICVectCntl0 = 0x20 | 7;						//Set up the UART0 interrupt
 405:main_v20.c    **** 	VICVectAddr0 = (unsigned int)ISR_RxData1;
 406:main_v20.c    **** 	VICVectCntl1 = 0x20 | 13;						//Set up the RTC interrupt
 407:main_v20.c    **** 	VICVectAddr1 = (unsigned int)ISR_RTC;	
 408:main_v20.c    **** 	VICVectCntl2 = 0x20 | 4;						//Timer 0 Interrupt
 409:main_v20.c    **** 	VICVectAddr2 = (unsigned int)ISR_Timer0;
 410:main_v20.c    **** 	VICVectCntl3 = 0x20 | 16;						//EINT2 External Interrupt 
 411:main_v20.c    **** 	VICVectAddr3 = (unsigned int)ISR_EINT2;
 412:main_v20.c    **** 	
 413:main_v20.c    **** 	//Setup the UART0 Interrupt
 414:main_v20.c    **** 	U1IER = 0x01;				//Enable FIFO on UART with RDA interrupt (Receive Data Available)
 415:main_v20.c    **** 	U1FCR &= 0x3F;				//Enable FIFO, set RDA interrupt for 1 character	
 416:main_v20.c    **** 	
 417:main_v20.c    **** 	//Setupt the Timer0 Interrupt
 418:main_v20.c    **** 	T0PR = 1200;				//Divide Clock(60MHz) by 1200 for 50kHz PS
 419:main_v20.c    **** 	T0TCR |=0X01;				//Enable the clock
 420:main_v20.c    **** 	T0CTCR=0;					//Timer Mode
 421:main_v20.c    **** 	T0MCR=0x0003;				//Interrupt and Reset Timer on Match
 422:main_v20.c    **** 	T0MR0=(50000/TIMER_FREQ);	//Set Interrupt frequency by dividing system clock (50KHz) by TIMER_FREQ
 423:main_v20.c    **** 								//Value will result in Timer 0 interrupts at TIMER_FREQ
 424:main_v20.c    **** 	
 425:main_v20.c    **** 	//Set up the RTC so it can be used for sleeping
 426:main_v20.c    **** 	CCR = ~(1<<0);				//use the system clock, and disable RTC for now
 427:main_v20.c    **** 	CIIR = 0;					//Don't allow any increment interrupts
 428:main_v20.c    **** 	AMR = ~(1<<1);				//Only check the minutes value of the alarm	
 429:main_v20.c    **** 	//Set up prescaler so RTC runs at 32.768 Khz
 430:main_v20.c    **** 	PREINT = 1830;				//Prescale Integer = (60MHz/32768)-1
 431:main_v20.c    **** 	PREFRAC = 1792;				//Prescale Fraction = 60MHz - ((PREINT+1)*32768)	
 432:main_v20.c    **** }
 433:main_v20.c    **** 
 434:main_v20.c    **** //Usage: go_to_sleep(5);
 435:main_v20.c    **** //Inputs: int duration - length in minutes the device should sleep for
 436:main_v20.c    **** //This function will turn off all external components, set the
 437:main_v20.c    **** //RTC alarme to wake up after "duration" minutes, and enter IDLE mode
 438:main_v20.c    **** void goToSleep(int duration)
 439:main_v20.c    **** {
 440:main_v20.c    **** 	CCR = (1<<1);	//Disable and Reset the RTC
 441:main_v20.c    **** 	
 442:main_v20.c    **** 	//Save the buffered data before going to sleep
 443:main_v20.c    **** 	LED_OFF();
 444:main_v20.c    **** 	SCPoff();
 445:main_v20.c    **** 	delay_ms(10);
 446:main_v20.c    **** 	
 447:main_v20.c    **** 	if(log_data_index>0){
 448:main_v20.c    **** 		saveData(&LOG_FILE, log_data, log_data_index);	
 449:main_v20.c    **** 		for(int i=0; i<log_data_index; i++)log_data[i]='\0';
 450:main_v20.c    **** 		log_data_index=0;	
 451:main_v20.c    **** 	}
 452:main_v20.c    **** 	
 453:main_v20.c    **** 	//Turn Off External Peripheral Devices
 454:main_v20.c    **** 	GPSoff();
 455:main_v20.c    **** 	//Leave Acceleromter ON to generate interrupts
 456:main_v20.c    **** 	//SHT15 automatically goes to sleep after a measurement
 457:main_v20.c    **** 	
 458:main_v20.c    **** 	//Set the alarm to wake up after "duration" minutes
 459:main_v20.c    **** 	SEC=0;
 460:main_v20.c    **** 	ALSEC = SEC;
 461:main_v20.c    **** 	//MIN=0;
 462:main_v20.c    **** 	//ALMIN=duration;
 463:main_v20.c    **** 	if (MIN+duration>=60) ALMIN = duration-(60-MIN);
 464:main_v20.c    **** 	else ALMIN = MIN + duration;	
 465:main_v20.c    **** 		
 466:main_v20.c    **** 	sprintf(log_data, "Sleep\n");
 467:main_v20.c    **** 	saveData(&LOG_FILE, log_data, strlen(log_data));
 468:main_v20.c    **** 	
 469:main_v20.c    **** 	CCR = (1<<0);	//Enable the RTC
 470:main_v20.c    **** 		
 471:main_v20.c    **** 	//Configure Interrupts
 472:main_v20.c    **** 	VICIntEnClr |= (UART1_INT | TIMER0_INT); 	//Stop UART and Timer interrupts
 473:main_v20.c    **** 	VICIntEnable |= (EINT2_INT | RTC_INT);	//Turn on RTC and Accel. interrupts
 474:main_v20.c    **** 
 475:main_v20.c    **** 	//Read the accel once to clear any interrupts
 476:main_v20.c    **** 	acceleration_x = accelX();
 477:main_v20.c    **** 	acceleration_y = accelY();
 478:main_v20.c    **** 	acceleration_z = accelZ();			
 479:main_v20.c    **** 	adxl345_read(INT_SOURCE);
 480:main_v20.c    **** 	
 481:main_v20.c    **** 	//Turn Off Internal Peripheral Modules in Power Control Register
 482:main_v20.c    **** 	power_register_values = PCONP; //Save the power register so we know what to load when we wake up
 483:main_v20.c    **** 	PCONP = (1<<9);		//Turn off power to all peripherals except the RTC
 484:main_v20.c    **** 	//Go to IDLE mode
 485:main_v20.c    **** 	PCON = (1<<0);			//Go into IDLE mode
 486:main_v20.c    **** }
 487:main_v20.c    **** 
 488:main_v20.c    **** //Usage: wake_up();
 489:main_v20.c    **** //Inputs: None
 490:main_v20.c    **** //This function will turn on and initialize the peripheral sensors
 491:main_v20.c    **** //and re-enable the UART0 interrupts
 492:main_v20.c    **** void wakeUp(void)
 493:main_v20.c    **** {
 494:main_v20.c    **** 	//Turn on power to ARM peripheral devices
 495:main_v20.c    **** 	PCONP |= power_register_values; //Load the saved power register values
 496:main_v20.c    **** 	VICIntEnClr |= EINT2_INT | RTC_INT;
 497:main_v20.c    **** 
 498:main_v20.c    **** 	sprintf(log_data, "Wake\n");
 499:main_v20.c    **** 	saveData(&LOG_FILE, log_data, strlen(log_data));	
 500:main_v20.c    **** 
 501:main_v20.c    **** 	//Check the ADXL345 Interrupt Source register to clear any pending interrupts
 502:main_v20.c    **** 	adxl345_read(INT_SOURCE);
 503:main_v20.c    **** 
 504:main_v20.c    **** 	//Clear program flags to 'start fresh'
 505:main_v20.c    **** 	gps_message_complete=0;
 506:main_v20.c    **** 	read_sensors=0;
 507:main_v20.c    **** 	
 508:main_v20.c    **** 	//Power up and Init. the External peripheral devices
 509:main_v20.c    **** 	initializeGps();		//Send the initialization strings
 510:main_v20.c    **** 	enable_gps_rmc_msgs(1);
 511:main_v20.c    **** 	SCPon();		//Turn on the SCP sensor
 512:main_v20.c    **** 	delay_ms(10);	//Allow SCP to initialize
 513:main_v20.c    **** 	SCPinit();		//Initialize the SCP sensor
 514:main_v20.c    **** 	
 515:main_v20.c    **** 	//SHT15 and ADXL345 shouldn't need to be initialized
 516:main_v20.c    **** 	
 517:main_v20.c    **** 	delay_ms(1000);	//Wait for GPS to stablize
 518:main_v20.c    **** 	log_count=0;	//Clear the log count
 519:main_v20.c    **** 	RTC_Set=0;
 520:main_v20.c    **** 	
 521:main_v20.c    **** 	//Enable UART0 and Timer Interrupts
 522:main_v20.c    **** 	VICIntEnable |= UART1_INT | TIMER0_INT;
 523:main_v20.c    **** }
 524:main_v20.c    **** 
 525:main_v20.c    **** //Usage: None (Automatically Called by FW)
 526:main_v20.c    **** //Inputs: None
 527:main_v20.c    **** //Description: Called when a character is received on UART1.  
 528:main_v20.c    **** static void ISR_RxData1(void)
 529:main_v20.c    **** {
  51              	ded = 0, uses_anonymous_args = 0
  52              		.loc 1 530 0
  53              		ldr	r3, .L15
  54              		ldr	r3, [r3, #0]
 530:main_v20.c    **** 	char val = (char)U1RBR;
  55              		r0, r3, #255
  56 0028 88309FE5 	.LVL3:
  57 002c 003093E5 		.loc 1 532 0
  58 0030 FF0003E2 		cmp	r0, #10
  59              		.loc 1 529 0
 531:main_v20.c    **** 	//When we get a character on UART1, save it to the GPS message buffer
 532:main_v20.c    **** 	if(val=='\n'){ 	//Newline means the current message is complete
  60              	lr, [sp, #-4]!
  61 0034 0A0050E3 	.LCFI0:
  62              		.loc 1 541 0
  63 0038 04E02DE5 		ldr	lr, .L15+4
  64              		.loc 1 532 0
 533:main_v20.c    **** 		gps_message[gps_message_index]= val;
 534:main_v20.c    **** 		gps_message_complete=1;					//Set a flag for the main FW
 535:main_v20.c    **** 		gps_message_size=gps_message_index+1;
 536:main_v20.c    **** 		gps_message_index=0;
 537:main_v20.c    **** 	}
 538:main_v20.c    **** 	else{
 539:main_v20.c    **** 		//If we get the start character, reset the index
 540:main_v20.c    **** 		if(val == '$')gps_message_index=0;
 541:main_v20.c    **** 		gps_message[gps_message_index++]= val;
  65              	.L9
  66 003c 78E09FE5 		.loc 1 533 0
  67              		ldr	r2, [lr, #0]
  68 0040 0B00001A 		ldr	r3, .L15+8
  69              		strb	r0, [r3, r2]
  70 0044 00209EE5 		.loc 1 534 0
  71 0048 70309FE5 		ldr	r3, .L15+12
  72 004c 0200C3E7 		.loc 1 535 0
  73              		add	r1, r2, #1
  74 0050 6C309FE5 		.loc 1 534 0
  75              		mov	r2, #1
  76 0054 011082E2 		strb	r2, [r3, #0]
  77              		.loc 1 535 0
  78 0058 0120A0E3 		ldr	r3, .L15+16
  79 005c 0020C3E5 		str	r1, [r3, #0]
  80              		.loc 1 536 0
  81 0060 60309FE5 		mov	r3, #0
  82 0064 001083E5 		str	r3, [lr, #0]
  83              		b	.L11
  84 0068 0030A0E3 	.L9:
  85 006c 00308EE5 		.loc 1 540 0
  86 0070 0B0000EA 		cmp	r0, #36
  87              		ldreq	r3, .L15+4
  88              		moveq	r2, #0
  89 0074 240050E3 		streq	r2, [r3, #0]
  90 0078 3C309F05 		.loc 1 542 0
  91 007c 0020A003 		ldr	r3, .L15+12
  92 0080 00208305 		.loc 1 541 0
 542:main_v20.c    **** 		gps_message_complete=0;
  93              	2 0
  94 0084 38309FE5 		mov	r2, #0
  95              		strb	r2, [r3, #0]
  96 0088 00109EE5 		.loc 1 541 0
  97              		add	r3, r1, #1
  98 008c 0020A0E3 		str	r3, [lr, #0]
  99 0090 0020C3E5 		ldr	r3, .L15+8
 100              		strb	r0, [r3, r1]
 101 0094 013081E2 	.L11:
 102 0098 00308EE5 		.loc 1 544 0
 103 009c 1C309FE5 		mov	r2, #0
 104 00a0 0100C3E7 		mvn	r3, #0
 105              		str	r2, [r3, #-4047]
 543:main_v20.c    **** 	}
 544:main_v20.c    **** 	VICVectAddr =0;						//Update the VIC priorities
 106              	
 107 00a4 0020A0E3 		ldr	lr, [sp], #4
 108 00a8 0030E0E3 		bx	lr
 109 00ac CF2F03E5 	.L16:
 545:main_v20.c    **** }
 110              	lign	2
 111 00b0 04E09DE4 	.L15:
 112 00b4 1EFF2FE1 		.word	-536805376
 113              		.word	gps_message_index
 114              		.word	gps_message
 115              		.word	gps_message_complete
 116 00b8 000001E0 		.word	gps_message_size
 117 00bc 00000000 	.LFE7:
 119 00c4 00000000 		.align	2
 121              	ISR_RTC:
 122              	.LFB8:
 123              		.loc 1 552 0
 124              		@ Function supports interworking.
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 546:main_v20.c    **** 
 547:main_v20.c    **** //Usage: None (Automatically Called by FW)
 548:main_v20.c    **** //Inputs: None
 549:main_v20.c    **** //Description: Called when the RTC alarm goes off.  This wakes
 550:main_v20.c    **** //				the Package Tracker from sleep mode.
 551:main_v20.c    **** static void ISR_RTC(void)
 552:main_v20.c    **** {	
 127              	save eliminated.
 128              		.loc 1 554 0
 129              		ldr	r3, .L19
 130              		mov	r2, #3
 131              		str	r2, [r3, #0]
 553:main_v20.c    **** 	//Clear the Alarm Interrupt bit from the ILR
 554:main_v20.c    **** 	ILR = ((1<<1)|(1<<0));
 132              	 1 555 0
 133 00cc 20309FE5 		ldr	r3, .L19+4
 134 00d0 0320A0E3 		mov	r2, #1
 135 00d4 002083E5 		strb	r2, [r3, #0]
 555:main_v20.c    **** 	wake_event=RTC_TIMEOUT_WAKE;
 136              	c 1 556 0
 137 00d8 18309FE5 		mov	r2, #0
 138 00dc 0120A0E3 		mvn	r3, #0
 139 00e0 0020C3E5 		.loc 1 552 0
 556:main_v20.c    **** 	VICVectAddr =0;		//Update the VIC priorities
 140              	r needed for prologue
 141 00e4 0020A0E3 		.loc 1 556 0
 142 00e8 0030E0E3 		str	r2, [r3, #-4047]
 143              		.loc 1 557 0
 144              		bx	lr
 145              	.L20:
 146 00ec CF2F03E5 		.align	2
 557:main_v20.c    **** }
 147              	.word	-536723456
 148 00f0 1EFF2FE1 		.word	wake_event
 149              	.LFE8:
 151              		.align	2
 152 00f4 004002E0 		.global	parseGGA
 154              	parseGGA:
 155              	.LFB10:
 156              		.loc 1 612 0
 157              		@ Function supports interworking.
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL4:
 558:main_v20.c    **** 
 559:main_v20.c    **** //Usage: createLogFile();
 560:main_v20.c    **** //Inputs: None
 561:main_v20.c    **** //Outputs: None
 562:main_v20.c    **** //Description: Creates a log file in the root directory of the SD card with the name
 563:main_v20.c    **** //				PackageTrackerXX.csv.  XX increments to the next available number each
 564:main_v20.c    **** //				time the function is called.
 565:main_v20.c    **** void createLogFile(void){
 566:main_v20.c    **** 	static int file_number;
 567:main_v20.c    **** 
 568:main_v20.c    **** //Create the Sensor Data Log File	
 569:main_v20.c    **** 	//Set an initial file name
 570:main_v20.c    **** 	sprintf(file_name, "PackageTracker%03d.csv", file_number);
 571:main_v20.c    **** 	//Check to see if the file already exists in the root directory.
 572:main_v20.c    ****     while(root_file_exists(file_name))
 573:main_v20.c    ****     {
 574:main_v20.c    ****         file_number++;	//If the file already exists, increment the file number and check again.
 575:main_v20.c    ****         if(file_number == 250)
 576:main_v20.c    ****         {
 577:main_v20.c    ****             //rprintf("\nToo many files in root!\n");
 578:main_v20.c    ****         }
 579:main_v20.c    ****         sprintf(file_name, "PackageTracker%03d.csv", file_number);
 580:main_v20.c    ****     }
 581:main_v20.c    ****     //Get the file handle of the new file.  We will log the data to this file
 582:main_v20.c    **** 	LOG_FILE = root_open_new(file_name);
 583:main_v20.c    **** 	//Now that we have the file opened, let's put a label in the first row
 584:main_v20.c    **** 	fat16_write_file(LOG_FILE, (unsigned char*)"Date, UTC, X, Y, Z, Batt, Pres., SCP Temp., SHT Temp, 
 585:main_v20.c    **** 	sd_raw_sync();
 586:main_v20.c    **** 
 587:main_v20.c    **** //Create the NMEA Log File	
 588:main_v20.c    **** 	//Set an initial file name
 589:main_v20.c    **** 	sprintf(file_name, "PackageTrackerNMEA%03d.csv", file_number);
 590:main_v20.c    **** 	//Check to see if the file already exists in the root directory.
 591:main_v20.c    ****     while(root_file_exists(file_name))
 592:main_v20.c    ****     {
 593:main_v20.c    ****         file_number++;	//If the file already exists, increment the file number and check again.
 594:main_v20.c    ****         if(file_number == 250)
 595:main_v20.c    ****         {
 596:main_v20.c    ****             //rprintf("\nToo many files in root!\n");
 597:main_v20.c    ****         }
 598:main_v20.c    ****         sprintf(file_name, "PackageTrackerNMEA%03d.csv", file_number);
 599:main_v20.c    ****     }
 600:main_v20.c    ****     //Get the file handle of the new file.  We will log the data to this file
 601:main_v20.c    **** 	NMEA_FILE = root_open_new(file_name);
 602:main_v20.c    **** 	//Now that we have the file opened, let's put a label in the first row
 603:main_v20.c    **** 	fat16_write_file(NMEA_FILE, (const unsigned char *)NMEA_FILE_HEADER, strlen(NMEA_FILE_HEADER));
 604:main_v20.c    **** 	sd_raw_sync();	
 605:main_v20.c    **** }
 606:main_v20.c    **** 
 607:main_v20.c    **** //Usage: parseGGA(final_message);
 608:main_v20.c    **** //Inputs: const char *gps_string - GGA NMEA string
 609:main_v20.c    **** //This functions splits a GGA message into the
 610:main_v20.c    **** //portions and assigns them to components of
 611:main_v20.c    **** //a GPS structure
 612:main_v20.c    **** void parseGGA(const char *gps_string){
 161              	#-4]!
 162              	.LCFI1:
 163              		.loc 1 612 0
 164              		mov	lr, r0
 165              		mov	r0, #0
 166 00fc 04E02DE5 	.LVL5:
 167              		b	.L22
 168              	.L23:
 169 0100 00E0A0E1 		.loc 1 615 0
 170 0104 0000A0E3 		add	r0, r0, #1
 171              	.L22:
 172 0108 000000EA 		ldrb	r3, [r0, lr]	@ zero_extendqisi2
 173              		cmp	r3, #44
 613:main_v20.c    **** 	int i=0;
 614:main_v20.c    **** 	//Parse the GGA Message.  1st portion dismissed
 615:main_v20.c    **** 	while(gps_string[i] != ',')i++;
 174              	r	r3, .L55
 175 010c 010080E2 		add	r1, lr, r0
 176              		b	.L25
 177 0110 0E30D0E7 	.L26:
 178 0114 2C0053E3 	.LBB2:
 179 0118 FBFFFF1A 		.loc 1 619 0
 180 011c 28319FE5 		strb	r2, [r3, #31]
 181 0120 00108EE0 	.L25:
 182 0124 000000EA 		.loc 1 618 0
 183              		ldrb	r2, [r1, #1]!	@ zero_extendqisi2
 184              		cmp	r2, #44
 616:main_v20.c    **** 	i++;
 617:main_v20.c    **** 	//Second portion is UTC timestamp
 618:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 619:main_v20.c    **** 		GPS.Time[j]=gps_string[i];
 185              	, #1
 186 0128 1F20C3E5 		bne	.L26
 187              		.loc 1 612 0
 188              		ldr	r2, .L55
 189 012c 0120F1E5 		add	r3, r0, r3
 190 0130 2C0052E3 		rsb	ip, r2, #0
 191 0134 013083E2 		add	r3, r3, ip
 192 0138 FAFFFF1A 	.LVL6:
 193              		add	r0, lr, r3
 194 013c 08219FE5 	.LVL7:
 195 0140 033080E0 		b	.L28
 196 0144 00C062E2 	.L29:
 197 0148 0C3083E0 	.LBE2:
 198              	.LBB3:
 199 014c 03008EE0 		.loc 1 625 0
 200              		strb	r1, [r2, #-1]
 201 0150 000000EA 	.L28:
 202              		.loc 1 624 0
 203              		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 204              		cmp	r1, #44
 620:main_v20.c    **** 		i++;
 621:main_v20.c    **** 	}
 622:main_v20.c    **** 	i++;
 623:main_v20.c    **** 	//Third portion is Latitude
 624:main_v20.c    **** 	for(int j=0;gps_string[i] != ',';j++){
 625:main_v20.c    **** 		GPS.Latitude.position[j]=gps_string[i];
 205              		.L29
 206 0154 011042E5 		add	r3, r3, r2
 207              	.LVL8:
 208              		add	r2, r3, ip
 209 0158 0110F0E5 		add	r0, lr, r2
 210 015c 2C0051E3 		b	.L31
 211 0160 012082E2 	.L32:
 212 0164 FAFFFF1A 	.LBE3:
 213 0168 023083E0 	.LBB4:
 214              		.loc 1 631 0
 215 016c 0C2083E0 		strb	r3, [r1, #15]
 216 0170 02008EE0 	.L31:
 217 0174 000000EA 		.loc 1 630 0
 218              		ldrb	r3, [r0, #1]!	@ zero_extendqisi2
 219              		cmp	r3, #44
 220              		add	r2, r2, #1
 626:main_v20.c    **** 		i++;
 627:main_v20.c    **** 	}
 628:main_v20.c    **** 	i++;			
 629:main_v20.c    **** 	//Fourth portion is Latitude direction
 630:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 631:main_v20.c    **** 		GPS.Latitude.direction=gps_string[i];
 221              	ne	.L32
 222 0178 0F30C1E5 		mov	r3, r1
 223              		add	r0, lr, r2
 224              		b	.L34
 225 017c 0130F0E5 	.L35:
 226 0180 2C0053E3 	.LBE4:
 227 0184 012082E2 	.LBB5:
 228 0188 BC109FE5 		.loc 1 637 0
 229 018c F9FFFF1A 		strb	r1, [r3, #15]
 230 0190 0130A0E1 	.L34:
 231 0194 02008EE0 		.loc 1 636 0
 232 0198 000000EA 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 233              		cmp	r1, #44
 234              		add	r3, r3, #1
 235              		bne	.L35
 632:main_v20.c    **** 		i++;
 633:main_v20.c    **** 	}
 634:main_v20.c    **** 	i++;	
 635:main_v20.c    **** 	//Fifth portion is Long.
 636:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 637:main_v20.c    **** 		GPS.Longitude.position[j]=gps_string[i];
 236              	
 237 019c 0F10C3E5 		add	r2, r3, ip
 238              		add	r0, lr, r2
 239              		b	.L37
 240 01a0 0110F0E5 	.L38:
 241 01a4 2C0051E3 	.LBE5:
 242 01a8 013083E2 		.loc 1 643 0
 243 01ac FAFFFF1A 		ldr	r3, .L55
 244 01b0 033082E0 		strb	r1, [r3, #31]
 245 01b4 0C2083E0 	.L37:
 246 01b8 02008EE0 		.loc 1 642 0
 247 01bc 010000EA 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 248              		cmp	r1, #44
 249              		add	r2, r2, #1
 638:main_v20.c    **** 		i++;
 639:main_v20.c    **** 	}
 640:main_v20.c    **** 	i++;			
 641:main_v20.c    **** 	//Sixth portion is Long direction
 642:main_v20.c    **** 	while(gps_string[i] != ','){
 643:main_v20.c    **** 		GPS.Longitude.direction=gps_string[i];
 250              	d	r0, lr, r2
 251 01c0 84309FE5 		b	.L40
 252 01c4 1F10C3E5 	.L41:
 253              		.loc 1 649 0
 254              		ldr	r3, .L55
 255 01c8 0110F0E5 		strb	r1, [r3, #70]
 256 01cc 2C0051E3 	.L40:
 257 01d0 012082E2 		.loc 1 648 0
 258 01d4 F9FFFF1A 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 259 01d8 02008EE0 		cmp	r1, #44
 260 01dc 010000EA 		add	r2, r2, #1
 261              		bne	.L41
 644:main_v20.c    **** 		i++;
 645:main_v20.c    **** 	}
 646:main_v20.c    **** 	i++;		
 647:main_v20.c    **** 	//Seventh portion is fix
 648:main_v20.c    **** 	while(gps_string[i] != ','){
 649:main_v20.c    **** 		GPS.Fix=gps_string[i];
 262              	 r2
 263 01e0 64309FE5 	.L43:
 264 01e4 4610C3E5 		.loc 1 654 0
 265              		ldrb	r3, [r1, #1]!	@ zero_extendqisi2
 266              		cmp	r3, #44
 267 01e8 0110F0E5 		add	r2, r2, #1
 268 01ec 2C0051E3 		bne	.L43
 269 01f0 012082E2 		mov	r0, r2
 270 01f4 F9FFFF1A 		add	r2, lr, r2
 271 01f8 02108EE0 	.L45:
 272              		.loc 1 657 0
 650:main_v20.c    **** 		i++;
 651:main_v20.c    **** 	}
 652:main_v20.c    **** 	i++;
 653:main_v20.c    **** 	//8th portion dismissed
 654:main_v20.c    **** 	while(gps_string[i] != ',')i++;
 273              	r2, #1]!	@ zero_extendqisi2
 274 01fc 0130F1E5 		cmp	r3, #44
 275 0200 2C0053E3 		add	r0, r0, #1
 276 0204 012082E2 		bne	.L45
 277 0208 FBFFFF1A 		ldr	ip, .L55+4
 278 020c 0200A0E1 		add	r0, lr, r0
 279 0210 02208EE0 		b	.L47
 280              	.L48:
 655:main_v20.c    **** 	i++;				
 656:main_v20.c    **** 	//8th portion dismissed
 657:main_v20.c    **** 	while(gps_string[i] != ',')i++;
 281              	.loc 1 661 0
 282 0214 0130F2E5 		strb	r1, [ip, #-1]
 283 0218 2C0053E3 	.L47:
 284 021c 010080E2 		.loc 1 660 0
 285 0220 FBFFFF1A 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 286 0224 24C09FE5 		cmp	r1, #44
 287 0228 00008EE0 		add	ip, ip, #1
 288 022c 000000EA 		bne	.L48
 289              	.LBE6:
 290              		.loc 1 664 0
 658:main_v20.c    **** 	i++;				
 659:main_v20.c    **** 	//10th portion is Altitude
 660:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 661:main_v20.c    **** 		GPS.Altitude[j]=gps_string[i];
 291              	sp], #4
 292 0230 01104CE5 		bx	lr
 293              	.L56:
 294              		.align	2
 295 0234 0110F0E5 	.L55:
 296 0238 2C0051E3 		.word	GPS
 297 023c 01C08CE2 		.word	GPS+42
 298 0240 FAFFFF1A 	.LFE10:
 662:main_v20.c    **** 		i++;
 663:main_v20.c    **** 	}	
 664:main_v20.c    **** }
 300              	
 301 0244 04E09DE4 		.global	parseRMC
 303              	parseRMC:
 304              	.LFB11:
 305              		.loc 1 674 0
 306 024c 00000000 		@ Function supports interworking.
 307 0250 2A000000 		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              	.LVL9:
 310              		stmfd	sp!, {r4, lr}
 311              	.LCFI2:
 312              		.loc 1 674 0
 313              		mov	r1, #0
 314              	.LVL10:
 665:main_v20.c    **** 
 666:main_v20.c    **** //Usage: parseRMC(final_message);
 667:main_v20.c    **** //Inputs: const char *gps_string - RMC NMEA string
 668:main_v20.c    **** //This functions splits a GGA message into the
 669:main_v20.c    **** //portions and assigns them to components of
 670:main_v20.c    **** //a GPS structure
 671:main_v20.c    **** //This functions splits a RMC message into the
 672:main_v20.c    **** //portions and assigns them to components of
 673:main_v20.c    **** //a GPS structure
 674:main_v20.c    **** int parseRMC(const char *gps_string){
 315              	ov	r2, r1
 316              	.LVL11:
 317              		b	.L107
 318              	.LVL12:
 319              	.L59:
 320 0254 10402DE9 	.LBB7:
 321              		.loc 1 679 0
 322              		cmp	r3, #44
 323 0258 0010A0E3 		addeq	r1, r1, #1
 324              	.L107:
 325 025c 00E0A0E1 		.loc 1 678 0
 326 0260 0120A0E1 		ldrb	r3, [r2, lr]	@ zero_extendqisi2
 327              		cmp	r3, #10
 328 0264 010000EA 		add	r2, r2, #1
 329              		bne	.L59
 330              	.LBE7:
 331              		.loc 1 683 0
 675:main_v20.c    **** 	int i=0;
 676:main_v20.c    **** 	int comma_count=0, character_count=0;
 677:main_v20.c    **** 	
 678:main_v20.c    **** 	for(int j=0; gps_string[j]!= '\n'; j++){
 679:main_v20.c    **** 		if(gps_string[j] == ',')comma_count+=1;
 332              		.L63
 333 0268 2C0053E3 		.loc 1 685 0
 334 026c 01108102 		ldrb	r3, [lr, #0]	@ zero_extendqisi2
 335              		cmp	r3, #36
 336              		bne	.L63
 337 0270 0E30D2E7 		ldrb	r3, [lr, #1]	@ zero_extendqisi2
 338 0274 0A0053E3 		cmp	r3, #71
 339 0278 012082E2 		bne	.L63
 340 027c F9FFFF1A 		ldrb	r3, [lr, #2]	@ zero_extendqisi2
 341              		cmp	r3, #80
 680:main_v20.c    **** 	}
 681:main_v20.c    **** 	
 682:main_v20.c    **** 	//If we didn't receive all of the RMC fields, then return an error
 683:main_v20.c    **** 	if(comma_count != 11)return 0;
 342              		mov	r0, #0
 343 0280 0B0051E3 	.LVL13:
 344 0284 6700001A 	.L68:
 684:main_v20.c    **** 	//If we didn't receive the correct SiRF header, the return an error
 685:main_v20.c    **** 	if(gps_string[0] != '$' || gps_string[1] != 'G' || gps_string[2] != 'P')return 0;
 345              	oc 1 688 0
 346 0288 0030DEE5 		add	r0, r0, #1
 347 028c 240053E3 		ldrb	r3, [r0, lr]	@ zero_extendqisi2
 348 0290 6400001A 		cmp	r3, #44
 349 0294 0130DEE5 		bne	.L68
 350 0298 470053E3 		ldr	r1, .L108
 351 029c 6100001A 	.LVL14:
 352 02a0 0230DEE5 		add	r2, lr, r0
 353 02a4 500053E3 	.LVL15:
 354 02a8 5E00001A 		b	.L70
 355 02ac 0000A0E3 	.L71:
 356              	.LBB8:
 357              		.loc 1 692 0
 686:main_v20.c    **** 	
 687:main_v20.c    **** 	//Parse the GGA Message.  1st portion dismissed
 688:main_v20.c    **** 	while(gps_string[i] != ',')i++;
 358              	, #31]
 359 02b0 010080E2 	.L70:
 360 02b4 0E30D0E7 		.loc 1 691 0
 361 02b8 2C0053E3 		ldrb	r3, [r2, #1]!	@ zero_extendqisi2
 362 02bc FBFFFF1A 		cmp	r3, #44
 363 02c0 6C119FE5 		add	r1, r1, #1
 364              		bne	.L71
 365 02c4 00208EE0 		.loc 1 674 0
 366              		ldr	r3, .L108
 367 02c8 000000EA 		mvn	r4, r3
 368              	.LBE8:
 369              		.loc 1 697 0
 689:main_v20.c    **** 	i++;
 690:main_v20.c    **** 	//Second portion is UTC timestamp
 691:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 692:main_v20.c    **** 		GPS.Time[j]=gps_string[i];
 370              	 r4
 371 02cc 1F30C1E5 		cmp	r2, #10
 372              	.LBB9:
 373              		.loc 1 674 0
 374 02d0 0130F2E5 		rsb	ip, r3, #0
 375 02d4 2C0053E3 		add	r2, r0, r1
 376 02d8 011081E2 		add	r2, r2, ip
 377 02dc FAFFFF1A 	.LVL16:
 378              	.LVL17:
 379 02e0 4C319FE5 	.LBE9:
 380 02e4 0340E0E1 		.loc 1 697 0
 381              		addeq	r1, lr, r2
 693:main_v20.c    **** 		i++;
 694:main_v20.c    **** 		character_count+=1;
 695:main_v20.c    **** 	}
 696:main_v20.c    **** 	//Make sure we received 10 character for Time
 697:main_v20.c    **** 	if(character_count != 10)return 0;
 382              		.L63
 383 02e8 042081E0 	.LVL18:
 384 02ec 0A0052E3 	.L75:
 385              		.loc 1 703 0
 386              		strb	r3, [r0, #70]
 387 02f0 00C063E2 	.LVL19:
 388 02f4 012080E0 	.L74:
 389 02f8 0C2082E0 		.loc 1 702 0
 390              		ldrb	r3, [r1, #1]!	@ zero_extendqisi2
 391              		cmp	r3, #44
 392              		add	r2, r2, #1
 393              		ldr	r0, .L108
 394 02fc 02108E00 	.LVL20:
 395 0300 0100000A 		bne	.L75
 396 0304 470000EA 		.loc 1 707 0
 397              		ldrb	r3, [r0, #70]	@ zero_extendqisi2
 398              		cmp	r3, #65
 698:main_v20.c    **** 	character_count=0;
 699:main_v20.c    **** 	
 700:main_v20.c    **** 	i++;
 701:main_v20.c    **** 	//Third portion is fix
 702:main_v20.c    **** 	while(gps_string[i] != ','){
 703:main_v20.c    **** 		GPS.Fix=gps_string[i];
 399              	deq	r0, lr, r2
 400 0308 4630C0E5 		beq	.L78
 401              		b	.L63
 402              	.L79:
 403              	.LBB10:
 404 030c 0130F1E5 		.loc 1 711 0
 405 0310 2C0053E3 		strb	r3, [r1, #-1]
 406 0314 012082E2 	.L78:
 407 0318 14019FE5 		.loc 1 710 0
 408              		ldrb	r3, [r0, #1]!	@ zero_extendqisi2
 409 031c F9FFFF1A 		cmp	r3, #44
 704:main_v20.c    **** 		i++;
 705:main_v20.c    **** 	}	
 706:main_v20.c    **** 	i++;
 707:main_v20.c    **** 	if(GPS.Fix != 'A')return 0;
 410              	, #1
 411 0320 4630D0E5 		bne	.L79
 412 0324 410053E3 	.LBE10:
 413 0328 0010A001 		.loc 1 716 0
 414 032c 02008E00 		add	r3, r1, r4
 415 0330 0100000A 		cmp	r3, #9
 416 0334 3B0000EA 	.LBB11:
 417              		.loc 1 674 0
 418              		add	r3, r2, r1
 708:main_v20.c    **** 	
 709:main_v20.c    **** 	//Fourth portion is Latitude
 710:main_v20.c    **** 	for(int j=0;gps_string[i] != ',';j++){
 711:main_v20.c    **** 		GPS.Latitude.position[j]=gps_string[i];
 419              	r3, ip
 420 0338 013041E5 	.LVL21:
 421              	.LVL22:
 422              	.LBE11:
 423 033c 0130F0E5 		.loc 1 716 0
 424 0340 2C0053E3 		addeq	r1, lr, r2
 425 0344 011081E2 		beq	.L82
 426 0348 FAFFFF1A 		b	.L63
 427              	.L83:
 712:main_v20.c    **** 		i++;
 713:main_v20.c    **** 		character_count +=1;
 714:main_v20.c    **** 	}
 715:main_v20.c    **** 	//Make sure we received 9 characters for the Latitude
 716:main_v20.c    **** 	if(character_count != 9)return 0;
 428              	.loc 1 721 0
 429 034c 043081E0 		strb	r3, [r0, #15]
 430 0350 090053E3 	.L82:
 431              		.loc 1 720 0
 432              		ldrb	r3, [r1, #1]!	@ zero_extendqisi2
 433 0354 013082E0 		cmp	r3, #44
 434 0358 0C2083E0 		add	r2, r2, #1
 435              		ldr	r0, .L108
 436              		bne	.L83
 437              		mov	r1, r0
 438              		add	r0, lr, r2
 439 035c 02108E00 		b	.L85
 440 0360 0100000A 	.L86:
 441 0364 2F0000EA 	.LBE12:
 442              	.LBB13:
 443              		.loc 1 727 0
 717:main_v20.c    **** 	character_count=0;
 718:main_v20.c    **** 	i++;	
 719:main_v20.c    **** 	//Fifth portion is Latitude direction
 720:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 721:main_v20.c    **** 		GPS.Latitude.direction=gps_string[i];
 444              	15]
 445 0368 0F30C0E5 	.L85:
 446              		.loc 1 726 0
 447              		ldrb	r3, [r0, #1]!	@ zero_extendqisi2
 448 036c 0130F1E5 		cmp	r3, #44
 449 0370 2C0053E3 		add	r1, r1, #1
 450 0374 012082E2 		bne	.L86
 451 0378 B4009FE5 	.LBE13:
 452 037c F9FFFF1A 		.loc 1 732 0
 453 0380 0010A0E1 		add	r3, r1, r4
 454 0384 02008EE0 		cmp	r3, #10
 455 0388 000000EA 	.LBB14:
 456              		.loc 1 674 0
 457              		add	r3, r2, r1
 458              		add	r2, r3, ip
 722:main_v20.c    **** 		i++;
 723:main_v20.c    **** 	}
 724:main_v20.c    **** 	i++;	
 725:main_v20.c    **** 	//Sixth portion is Long.
 726:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 727:main_v20.c    **** 		GPS.Longitude.position[j]=gps_string[i];
 459              	
 460 038c 0F30C1E5 	.LBE14:
 461              		.loc 1 732 0
 462              		addeq	r0, lr, r2
 463 0390 0130F0E5 		beq	.L89
 464 0394 2C0053E3 		b	.L63
 465 0398 011081E2 	.L90:
 466 039c FAFFFF1A 		.loc 1 738 0
 467              		ldr	r3, .L108
 728:main_v20.c    **** 		i++;
 729:main_v20.c    **** 		character_count++;
 730:main_v20.c    **** 	}
 731:main_v20.c    **** 	//Make sure we received 10 characters for longitude
 732:main_v20.c    **** 	if(character_count != 10)return 0;
 468              	, [r3, #31]
 469 03a0 043081E0 	.L89:
 470 03a4 0A0053E3 		.loc 1 737 0
 471              		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 472              		cmp	r1, #44
 473 03a8 013082E0 		add	r2, r2, #1
 474 03ac 0C2083E0 		bne	.L90
 475              		add	r1, lr, r2
 476              	.L92:
 477              		.loc 1 743 0
 478              		ldrb	r3, [r1, #1]!	@ zero_extendqisi2
 479 03b0 02008E00 		cmp	r3, #44
 480 03b4 0200000A 		add	r2, r2, #1
 481 03b8 1A0000EA 		bne	.L92
 482              		mov	r0, r2
 733:main_v20.c    **** 	character_count=0;
 734:main_v20.c    **** 	
 735:main_v20.c    **** 	i++;			
 736:main_v20.c    **** 	//Seventh portion is Long direction
 737:main_v20.c    **** 	while(gps_string[i] != ','){
 738:main_v20.c    **** 		GPS.Longitude.direction=gps_string[i];
 483              	
 484 03bc 70309FE5 	.L94:
 485 03c0 1F10C3E5 		.loc 1 746 0
 486              		ldrb	r3, [r2, #1]!	@ zero_extendqisi2
 487              		cmp	r3, #44
 488 03c4 0110F0E5 		add	r0, r0, #1
 489 03c8 2C0051E3 		bne	.L94
 490 03cc 012082E2 		ldr	ip, .L108+4
 491 03d0 F9FFFF1A 		add	r0, lr, r0
 492 03d4 02108EE0 		b	.L96
 493              	.L97:
 739:main_v20.c    **** 		i++;
 740:main_v20.c    **** 	}
 741:main_v20.c    **** 	i++;		
 742:main_v20.c    **** 	//8th portion dismissed
 743:main_v20.c    **** 	while(gps_string[i] != ',')i++;
 494              	loc 1 750 0
 495 03d8 0130F1E5 		strb	r1, [ip, #-1]
 496 03dc 2C0053E3 	.L96:
 497 03e0 012082E2 		.loc 1 749 0
 498 03e4 FBFFFF1A 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 499 03e8 0200A0E1 		cmp	r1, #44
 500 03ec 02208EE0 		add	ip, ip, #1
 501              		bne	.L97
 744:main_v20.c    **** 	i++;				
 745:main_v20.c    **** 	//9th portion dismissed
 746:main_v20.c    **** 	while(gps_string[i] != ',')i++;
 502              	 #1
 503 03f0 0130F2E5 		b	.L99
 504 03f4 2C0053E3 	.LVL25:
 505 03f8 010080E2 	.L63:
 506 03fc FBFFFF1A 		mov	r0, #0
 507 0400 30C09FE5 	.LVL26:
 508 0404 00008EE0 	.L99:
 509 0408 000000EA 	.LBE15:
 510              		.loc 1 755 0
 511              		ldmfd	sp!, {r4, lr}
 747:main_v20.c    **** 	i++;				
 748:main_v20.c    **** 	//10th portion is Date
 749:main_v20.c    **** 	for(int j=0;gps_string[i] != ','; j++){
 750:main_v20.c    **** 		GPS.Date[j]=gps_string[i];
 512              	09:
 513 040c 01104CE5 		.align	2
 514              	.L108:
 515              		.word	GPS
 516 0410 0110F0E5 		.word	GPS+52
 517 0414 2C0051E3 	.LFE11:
 519 041c FAFFFF1A 		.align	2
 521 0424 000000EA 	ISR_Timer0:
 522              	.LFB15:
 523              		.loc 1 826 0
 524 0428 0000A0E3 		@ Function supports interworking.
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              		str	lr, [sp, #-4]!
 751:main_v20.c    **** 		i++;
 752:main_v20.c    **** 	}
 753:main_v20.c    **** 	
 754:main_v20.c    **** 	return 1;
 755:main_v20.c    **** }
 528              	832 0
 529 042c 1040BDE8 		ldr	lr, .L117
 530 0430 1EFF2FE1 		ldrb	r3, [lr, #0]	@ zero_extendqisi2
 531              		.loc 1 829 0
 532              		ldr	r0, .L117+4
 533              		.loc 1 832 0
 534 0434 00000000 		add	r3, r3, #1
 535 0438 34000000 		and	ip, r3, #255
 536              		.loc 1 829 0
 537              		ldr	r2, [r0, #0]
 538              		.loc 1 828 0
 539              		ldr	r3, .L117+8
 540              		.loc 1 833 0
 541              		cmp	ip, #10
 756:main_v20.c    **** 
 757:main_v20.c    **** //Usage: saveData(log_data, log_data_index);
 758:main_v20.c    **** //Inputs: char *buf - character array to be saved
 759:main_v20.c    **** //		  int buf_size - size of character array
 760:main_v20.c    **** //Output: buffer array is saved to LOG_FILE
 761:main_v20.c    **** //Description: Saves the buf character array to the SD card.
 762:main_v20.c    **** //CONDITIONS: LOG_FILE must be initialized to the handle of an open file.
 763:main_v20.c    **** void saveData(struct fat16_file_struct **fd, const char * const buf, const int buf_size)
 764:main_v20.c    **** {
 765:main_v20.c    **** 	int error=0;
 766:main_v20.c    **** 	
 767:main_v20.c    **** 	if((buf_size > 0) && (*fd != NULL)){
 768:main_v20.c    **** 		//Try writing the data to the card up to 10 times.
 769:main_v20.c    **** 		while(error<10){
 770:main_v20.c    **** 			if(fat16_write_file(*fd, (const unsigned char*)buf, buf_size) < 0)error+=1;
 771:main_v20.c    **** 			else break;
 772:main_v20.c    **** 			delay_ms(100);
 773:main_v20.c    **** 		}
 774:main_v20.c    **** 		//If we've tried writing the data 10 times and still haven't succeeded, reset the device.
 775:main_v20.c    **** 		if(error==10)reset();
 776:main_v20.c    **** 		
 777:main_v20.c    **** 		error=0;
 778:main_v20.c    **** 		//Try syncing the card up to 10 times
 779:main_v20.c    **** 		while(error<10){
 780:main_v20.c    **** 			if(!sd_raw_sync())error+=1;
 781:main_v20.c    **** 			else break;
 782:main_v20.c    **** 			delay_ms(100);
 783:main_v20.c    **** 		}
 784:main_v20.c    **** 		//If we've tried syncing 10 times and still haven't succeeded, reset the device
 785:main_v20.c    **** 		if(error==10)reset();
 786:main_v20.c    **** 	}
 787:main_v20.c    **** }
 788:main_v20.c    **** 
 789:main_v20.c    **** //Usage: itoa(batt_level, log_buffer)
 790:main_v20.c    **** //Inputs: int n - integer to convert
 791:main_v20.c    **** //Outputs:  char s[]-contains ascii rerpresentation of 'n'
 792:main_v20.c    **** /* itoa:  convert n to characters in s */
 793:main_v20.c    **** void itoa(int n, char s[])
 794:main_v20.c    **** {
 795:main_v20.c    ****     int i=0;
 796:main_v20.c    **** 
 797:main_v20.c    ****     do {       /* generate digits in reverse order */
 798:main_v20.c    ****         s[i++] = n % 10 + '0';   /* get next digit */
 799:main_v20.c    ****     } while ((n /= 10) > 0);     /* delete it */
 800:main_v20.c    **** 
 801:main_v20.c    ****     s[i] = '\0';
 802:main_v20.c    ****     reverse(s);
 803:main_v20.c    **** }
 804:main_v20.c    **** 
 805:main_v20.c    **** //Usage: reverse(s);
 806:main_v20.c    **** //Inputs: char s[] - contains a character string
 807:main_v20.c    **** //Outputs: char s[] - Reversed the order of original characters
 808:main_v20.c    **** /* reverse:  reverse string s in place */
 809:main_v20.c    **** void reverse(char s[])
 810:main_v20.c    **** {
 811:main_v20.c    ****     int c, i, j;
 812:main_v20.c    **** 
 813:main_v20.c    ****     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 814:main_v20.c    ****         c = s[i];
 815:main_v20.c    ****         s[i] = s[j];
 816:main_v20.c    ****         s[j] = c;
 817:main_v20.c    ****     }
 818:main_v20.c    **** }
 819:main_v20.c    **** 
 820:main_v20.c    **** //Usage: None (Automatically Called by FW)
 821:main_v20.c    **** //Inputs: None
 822:main_v20.c    **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 823:main_v20.c    **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 824:main_v20.c    **** // and setting the appropriate global flag if either has occured.
 825:main_v20.c    **** static void ISR_Timer0(void)
 826:main_v20.c    **** {
 542              		mov	r1, #1
 543              		.loc 1 829 0
 544              		add	r2, r2, #1
 545              		.loc 1 828 0
 546 043c 04E02DE5 		strb	r1, [r3, #0]
 547              		.loc 1 833 0
 827:main_v20.c    **** 	//Interrupt Code Here
 828:main_v20.c    **** 	read_sensors=1;
 829:main_v20.c    **** 	log_count++;
 830:main_v20.c    **** 	
 831:main_v20.c    **** 	//Update the Status LED
 832:main_v20.c    **** 	led_blink++;
 548              		r3, #0
 549 0440 78E09FE5 		.loc 1 832 0
 550 0444 0030DEE5 		strb	ip, [lr, #0]
 551              		.loc 1 829 0
 552 0448 74009FE5 		str	r2, [r0, #0]
 553              		.loc 1 833 0
 554 044c 013083E2 		strhib	r3, [lr, #0]
 555 0450 FFC003E2 		bhi	.L113
 556              		.loc 1 834 0
 557 0454 002090E5 		cmp	ip, #0
 558              		ldrne	r3, .L117+12
 559 0458 68309FE5 		movne	r2, #-2147483648
 833:main_v20.c    **** 	if(led_blink > TIMER_FREQ)led_blink=0;
 560              	r3, #4]
 561 045c 0A005CE3 		bne	.L115
 562              	.L113:
 563 0460 0110A0E3 		.loc 1 835 0
 564              		ldr	r3, .L117+12
 565 0464 012082E2 		mov	r2, #-2147483648
 566              		str	r2, [r3, #12]
 567 0468 0010C3E5 	.L115:
 568              		.loc 1 837 0
 569 046c 0030A083 		ldr	r3, .L117+16
 570              		mov	r2, #255
 571 0470 00C0CEE5 		str	r2, [r3, #0]
 572              		.loc 1 838 0
 573 0474 002080E5 		mov	r2, #0
 574              		mvn	r3, #0
 575 0478 0030CE85 		str	r2, [r3, #-4047]
 576 047c 0400008A 		.loc 1 839 0
 834:main_v20.c    **** 	if(led_blink > (TIMER_FREQ % 10))LED_OFF();
 577              	
 578 0480 00005CE3 		bx	lr
 579 0484 40309F15 	.L118:
 580 0488 0221A013 		.align	2
 581 048c 04208315 	.L117:
 582 0490 0200001A 		.word	led_blink
 583              		.word	log_count
 835:main_v20.c    **** 	else LED_ON();
 584              		read_sensors
 585 0494 30309FE5 		.word	-536707072
 586 0498 0221A0E3 		.word	-536854528
 587 049c 0C2083E5 	.LFE15:
 836:main_v20.c    **** 	
 837:main_v20.c    **** 	T0IR = 0xFF;						//Clear the timer interrupt
 589              	gn	2
 590 04a0 28309FE5 		.global	get_adc_1
 592 04a8 002083E5 	get_adc_1:
 838:main_v20.c    **** 	VICVectAddr =0;						//Update the VIC priorities
 593              	16:
 594 04ac 0020A0E3 		.loc 1 846 0
 595 04b0 0030E0E3 		@ Function supports interworking.
 596 04b4 CF2F03E5 		@ args = 0, pretend = 0, frame = 0
 839:main_v20.c    **** }
 597              	rame_needed = 0, uses_anonymous_args = 0
 598 04b8 04E09DE4 		@ link register save eliminated.
 599 04bc 1EFF2FE1 	.LVL27:
 600              		and	r0, r0, #255
 601              		.loc 1 848 0
 602              		ldr	r2, .L125
 603 04c0 00000000 		.loc 1 852 0
 604 04c4 00000000 		orr	r0, r0, #2097152
 605 04c8 00000000 	.LVL28:
 606 04cc 008002E0 		.loc 1 848 0
 607 04d0 004000E0 		mov	r3, #0
 608              		.loc 1 852 0
 609              		orr	r0, r0, #3584
 610              		.loc 1 848 0
 611              		str	r3, [r2, #0]
 612              		.loc 1 849 0
 613              		str	r3, [r2, #4]
 614              		.loc 1 852 0
 840:main_v20.c    **** 
 841:main_v20.c    **** //Usage: accel = get_adc_1(CHANNEL);
 842:main_v20.c    **** //Inputs: int channel - integer corresponding to the ADC channel to be converted
 843:main_v20.c    **** //Outputs: None
 844:main_v20.c    **** //Description: Returns the raw analog to digital conversion of the input channel.  
 845:main_v20.c    **** int get_adc_1(char channel)
 846:main_v20.c    **** {
 615              		.loc 1 853 0
 616              		ldr	r3, [r2, #0]
 617              		orr	r3, r3, #16777216
 618              		str	r3, [r2, #0]
 619              		.loc 1 846 0
 620              		@ lr needed for prologue
 621 04d4 FF0000E2 	.L120:
 847:main_v20.c    ****     int val;
 848:main_v20.c    ****     AD1CR = 0;
 622              	 856 0
 623 04d8 40209FE5 		ldr	r3, .L125
 849:main_v20.c    ****     AD1GDR = 0;
 850:main_v20.c    **** 
 851:main_v20.c    ****     //AD1CR = 0x00200600 | channel;
 852:main_v20.c    **** 	AD1CR = 0x00200E00 | channel;
 624              	dr	r0, [r3, #4]
 625 04dc 020680E3 		.loc 1 858 0
 626              		cmp	r0, #0
 627              		bge	.L120
 628 04e0 0030A0E3 		mov	r0, r0, asr #6
 629              		.loc 1 862 0
 630 04e4 0E0C80E3 		mov	r0, r0, asl #22
 631              		mov	r0, r0, lsr #22
 632 04e8 003082E5 		bx	lr
 633              	.L126:
 634 04ec 043082E5 		.align	2
 635              	.L125:
 636 04f0 000082E5 		.word	-536477696
 853:main_v20.c    ****     AD1CR |= 0x01000000;
 637              	e	get_adc_1, .-get_adc_1
 638 04f4 003092E5 		.align	2
 639 04f8 013483E3 		.global	reset
 641              	reset:
 642              	.LFB17:
 643              		.loc 1 868 0
 854:main_v20.c    ****     do
 855:main_v20.c    ****     {
 856:main_v20.c    ****         val = AD1GDR;                   // Read A/D Data Register
 644              	tion supports interworking.
 645 0500 18309FE5 		@ args = 0, pretend = 0, frame = 0
 646 0504 040093E5 		@ frame_needed = 0, uses_anonymous_args = 0
 857:main_v20.c    ****     }
 858:main_v20.c    ****     while ((val & 0x80000000) == 0);  //Wait for the conversion to complete
 647              	link register save eliminated.
 648 0508 000050E3 		.loc 1 870 0
 649 050c FBFFFFAA 		mov	r2, #-536870912
 650 0510 4003A0E1 		ldr	r3, [r2, #0]
 859:main_v20.c    ****     val = ((val >> 6) & 0x03FF);  //Extract the A/D result
 860:main_v20.c    **** 
 861:main_v20.c    ****     return val;
 862:main_v20.c    **** }
 651              		r3, r3, #3
 652 0514 000BA0E1 		str	r3, [r2, #0]
 653 0518 200BA0E1 		.loc 1 871 0
 654 051c 1EFF2FE1 		mov	r1, #170
 655              		.loc 1 872 0
 656              		mov	r3, #85
 657              		.loc 1 871 0
 658 0520 000006E0 		str	r1, [r2, #8]
 659              		.loc 1 872 0
 660              		str	r3, [r2, #8]
 661              		.loc 1 874 0
 662              		mov	r3, #0
 663              		.loc 1 873 0
 664              		str	r1, [r2, #8]
 665              		.loc 1 868 0
 863:main_v20.c    **** 
 864:main_v20.c    **** //Usage: reset();
 865:main_v20.c    **** //Inputs: None
 866:main_v20.c    **** //Description: Resets the LPC2148
 867:main_v20.c    **** void reset(void)
 868:main_v20.c    **** {
 666              	r prologue
 667              		.loc 1 874 0
 668              		str	r3, [r2, #8]
 669              		.loc 1 875 0
 670              		bx	lr
 869:main_v20.c    ****     // Intentionally fault Watchdog to trigger a reset condition
 870:main_v20.c    ****     WDMOD |= 3;
 671              	7:
 673 0528 003092E5 		.align	2
 675 0530 003082E5 	ISR_EINT2:
 871:main_v20.c    ****     WDFEED = 0xAA;
 676              	8:
 677 0534 AA10A0E3 		.loc 1 877 0
 872:main_v20.c    ****     WDFEED = 0x55;
 678              	 Function supports interworking.
 679 0538 5530A0E3 		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681 053c 081082E5 		@ link register save eliminated.
 682              		.loc 1 878 0
 683 0540 083082E5 		mvn	r1, #0
 873:main_v20.c    ****     WDFEED = 0xAA;
 874:main_v20.c    ****     WDFEED = 0x00;
 684              	0, #65536
 685 0544 0030A0E3 		str	r0, [r1, #-4075]
 686              		.loc 1 879 0
 687 0548 081082E5 		ldr	r2, .L131
 688              		ldr	r3, [r2, #320]
 689              		orr	r3, r3, #4
 690              		str	r3, [r2, #320]
 691 054c 083082E5 		.loc 1 881 0
 875:main_v20.c    **** }
 692              	 .L131+4
 693 0550 1EFF2FE1 		mov	r2, #2
 694              		strb	r2, [r3, #0]
 695              		.loc 1 884 0
 696              		mov	r3, #0
 697              		.loc 1 883 0
 698              		str	r0, [r1, #-4079]
 699              		.loc 1 877 0
 876:main_v20.c    **** 
 877:main_v20.c    **** static void ISR_EINT2(void){
 700              	eded for prologue
 701              		.loc 1 884 0
 702              		str	r3, [r1, #-4047]
 703              		.loc 1 885 0
 704              		bx	lr
 878:main_v20.c    **** 	VICIntEnClr = (1<<16);			//Temporarily disable EINT2 Interrupts
 705              	:
 706 0554 0010E0E3 		.align	2
 707 0558 0108A0E3 	.L131:
 708 055c EB0F01E5 		.word	-534790144
 879:main_v20.c    **** 	EXTINT |= (1<<2);				//Clear the interrupt bit in EINT2
 709              	rd	wake_event
 710 0560 24209FE5 	.LFE18:
 712 0568 043083E3 		.align	2
 713 056c 403182E5 		.global	initializeGps
 880:main_v20.c    **** 	
 881:main_v20.c    **** 	wake_event=ACCELEROMETER_WAKE;			//Tell the main code that a free-fall has been detected!
 714              	e	initializeGps, %function
 715 0570 18309FE5 	initializeGps:
 716 0574 0220A0E3 	.LFB19:
 717 0578 0020C3E5 		.loc 1 887 0
 882:main_v20.c    **** 	
 883:main_v20.c    **** 	VICIntEnable = (1<<16);		//Re-enable the EINT2 Interrupts
 884:main_v20.c    **** 	VICVectAddr =0;		//Update the VIC priorities
 718              	unction supports interworking.
 719 057c 0030A0E3 		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721 0580 EF0F01E5 		.loc 1 889 0
 722              		ldr	r3, .L135
 723              		mov	r2, #2097152
 724              		.loc 1 887 0
 725 0584 CF3F01E5 		str	lr, [sp, #-4]!
 885:main_v20.c    **** }
 726              		.loc 1 889 0
 727 0588 1EFF2FE1 		str	r2, [r3, #4]
 728              		.loc 1 890 0
 729              		mov	r0, #200
 730              		bl	delay_ms
 731 058c 00C01FE0 		.loc 1 892 0
 732 0590 00000000 		bl	disable_all_gps_msgs
 733              		.loc 1 893 0
 734              		mov	r0, #200
 735              		bl	delay_ms
 736              		.loc 1 895 0
 737              		bl	enable_waas
 738              		.loc 1 896 0
 739              		mov	r0, #200
 886:main_v20.c    **** 
 887:main_v20.c    **** void initializeGps(void){
 740              		ldr	lr, [sp], #4
 741              		.loc 1 896 0
 742              		b	delay_ms
 743              	.L136:
 888:main_v20.c    **** 	//Initialize the GPS receiver
 889:main_v20.c    **** 	GPSon();
 744              	ign	2
 745 0594 2C309FE5 	.L135:
 746 0598 0226A0E3 		.word	-536707072
 747              	.LFE19:
 749              		.align	2
 750              		.global	reverse
 890:main_v20.c    **** 	delay_ms(200);
 752              	
 753 05a4 C800A0E3 	.LFB14:
 754 05a8 FEFFFFEB 		.loc 1 810 0
 891:main_v20.c    **** 
 892:main_v20.c    **** 	disable_all_gps_msgs();
 755              	 Function supports interworking.
 756 05ac FEFFFFEB 		@ args = 0, pretend = 0, frame = 0
 893:main_v20.c    **** 	delay_ms(200);
 757              	 frame_needed = 0, uses_anonymous_args = 0
 758 05b0 C800A0E3 	.LVL29:
 759 05b4 FEFFFFEB 		stmfd	sp!, {r4, lr}
 894:main_v20.c    **** 	
 895:main_v20.c    **** 	enable_waas();
 760              	FI5:
 761 05b8 FEFFFFEB 		.loc 1 810 0
 896:main_v20.c    **** 	delay_ms(200);
 762              	ov	r4, r0
 763 05bc C800A0E3 		.loc 1 813 0
 897:main_v20.c    **** 
 898:main_v20.c    **** }
 764              	l	strlen
 765 05c0 04E09DE4 	.LVL30:
 766              		mov	ip, #0
 767 05c4 FEFFFFEA 	.LVL31:
 768              		add	r1, r4, r0
 769              		sub	r0, r0, #1
 770              	.LVL32:
 771 05c8 008002E0 		b	.L138
 772              	.LVL33:
 773              	.L139:
 774              		.loc 1 814 0
 775              		ldrb	r2, [ip, r4]	@ zero_extendqisi2
 776              		.loc 1 815 0
 777              		ldrb	r3, [r1, #-1]	@ zero_extendqisi2
 778              		strb	r3, [ip, r4]
 779              		.loc 1 816 0
 780              		strb	r2, [r1, #-1]!
 781              		.loc 1 813 0
 782              		add	ip, ip, #1
 783              	.L138:
 784 05cc 10402DE9 		cmp	ip, r0
 785              		sub	r0, r0, #1
 786              		blt	.L139
 787 05d0 0040A0E1 		.loc 1 818 0
 788              		ldmfd	sp!, {r4, lr}
 789 05d4 FEFFFFEB 		bx	lr
 790              	.LFE14:
 792              		.global	__modsi3
 793 05dc 001084E0 		.global	__divsi3
 794 05e0 010040E2 		.align	2
 795              		.global	itoa
 797              	itoa:
 798              	.LFB13:
 799              		.loc 1 794 0
 800 05e8 0420DCE7 		@ Function supports interworking.
 801              		@ args = 0, pretend = 0, frame = 0
 802 05ec 013051E5 		@ frame_needed = 0, uses_anonymous_args = 0
 803 05f0 0430CCE7 	.LVL34:
 804              		stmfd	sp!, {r4, r5, r6, lr}
 805 05f4 012061E5 	.LCFI6:
 806              		.loc 1 794 0
 807 05f8 01C08CE2 		mov	r4, r0
 808              		mov	r5, r1
 809 05fc 00005CE1 		mov	r6, #0
 810 0600 010040E2 	.LVL35:
 811 0604 F7FFFFBA 	.LVL36:
 812              	.L143:
 813 0608 1040BDE8 		.loc 1 798 0
 814 060c 1EFF2FE1 		mov	r0, r4
 815              		mov	r1, #10
 816              		bl	__modsi3
 817              		add	r0, r0, #48
 818              		strb	r0, [r6, r5]
 819              		.loc 1 799 0
 820              		mov	r1, #10
 821              		mov	r0, r4
 822              		bl	__divsi3
 823              		subs	r4, r0, #0
 824              		.loc 1 798 0
 825              		add	r6, r6, #1
 826              		.loc 1 799 0
 827              		bgt	.L143
 828              		.loc 1 801 0
 829 0610 70402DE9 		mov	r3, #0
 830              		.loc 1 802 0
 831              		mov	r0, r5
 832 0614 0040A0E1 		.loc 1 801 0
 833 0618 0150A0E1 		strb	r3, [r5, r6]
 834 061c 0060A0E3 		.loc 1 803 0
 835              		ldmfd	sp!, {r4, r5, r6, lr}
 836              		.loc 1 802 0
 837              		b	reverse
 838              	.LFE13:
 840 0624 0A10A0E3 		.align	2
 841 0628 FEFFFFEB 		.global	saveData
 843 0630 0500C6E7 	saveData:
 844              	.LFB12:
 845 0634 0A10A0E3 		.loc 1 764 0
 846 0638 0400A0E1 		@ Function supports interworking.
 847 063c FEFFFFEB 		@ args = 0, pretend = 0, frame = 0
 848 0640 004050E2 		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL37:
 850 0644 016086E2 		stmfd	sp!, {r4, r5, r6, r7, lr}
 851              	.LCFI7:
 852 0648 F4FFFFCA 		.loc 1 767 0
 853              		subs	r7, r2, #0
 854 064c 0030A0E3 		.loc 1 764 0
 855              		mov	r5, r0
 856 0650 0500A0E1 		mov	r6, r1
 857              		.loc 1 767 0
 858 0654 0630C5E7 		ble	.L161
 859              	.LVL38:
 860 0658 7040BDE8 		ldr	r3, [r0, #0]
 861              		cmp	r3, #0
 862 065c FEFFFFEA 		beq	.L161
 863              	.LVL39:
 864              		mov	r4, #0
 865              	.LVL40:
 866              	.LVL41:
 867              	.L152:
 868              		.loc 1 770 0
 869              		mov	r2, r7, asl #16
 870              		mov	r2, r2, lsr #16
 871              		mov	r1, r6
 872              		ldr	r0, [r5, #0]
 873              		bl	fat16_write_file
 874              		tst	r0, #32768
 875 0660 F0402DE9 		add	r4, r4, #1
 876              		.loc 1 772 0
 877              		mov	r0, #100
 878 0664 007052E2 		.loc 1 770 0
 879              		beq	.L153
 880 0668 0050A0E1 		.loc 1 772 0
 881 066c 0160A0E1 		bl	delay_ms
 882              		.loc 1 769 0
 883 0670 1B0000DA 		cmp	r4, #10
 884              		bne	.L152
 885 0674 003090E5 		.loc 1 775 0
 886 0678 000053E3 		bl	reset
 887 067c 1800000A 	.L153:
 888              		mov	r4, #0
 889 0680 0040A0E3 	.LVL42:
 890              	.L157:
 891              		.loc 1 780 0
 892              		bl	sd_raw_sync
 893              		cmp	r0, #0
 894 0684 0728A0E1 		add	r4, r4, #1
 895 0688 2228A0E1 		.loc 1 782 0
 896 068c 0610A0E1 		mov	r0, #100
 897 0690 000095E5 		.loc 1 780 0
 898 0694 FEFFFFEB 		bne	.L161
 899 0698 020910E3 		.loc 1 782 0
 900 069c 014084E2 		bl	delay_ms
 901              		.loc 1 779 0
 902 06a0 6400A0E3 		cmp	r4, #10
 903              		bne	.L157
 904 06a4 0300000A 		.loc 1 787 0
 905              		ldmfd	sp!, {r4, r5, r6, r7, lr}
 906 06a8 FEFFFFEB 		.loc 1 785 0
 907              		b	reset
 908 06ac 0A0054E3 	.LVL43:
 909 06b0 F3FFFF1A 	.L161:
 910              		.loc 1 787 0
 911 06b4 FEFFFFEB 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 912              		bx	lr
 913 06b8 0040A0E3 	.LFE12:
 915              		.section	.rodata.str1.4,"aMS",%progbits,1
 916              		.align	2
 917 06bc FEFFFFEB 	.LC0:
 918 06c0 000050E3 		.ascii	"PackageTracker%03d.csv\000"
 919 06c4 014084E2 		.align	2
 920              	.LC1:
 921 06c8 6400A0E3 		.ascii	"Date, UTC, X, Y, Z, Batt, Pres., SCP Temp., SHT Tem"
 922              		.ascii	"p, Humidity, Fix, Lat., Lat. Dir., Long., Long. Dir"
 923 06cc 0400001A 		.ascii	".,\012\000"
 924              		.align	2
 925 06d0 FEFFFFEB 	.LC2:
 926              		.ascii	"PackageTrackerNMEA%03d.csv\000"
 927 06d4 0A0054E3 		.align	2
 928 06d8 F7FFFF1A 	.LC3:
 929              		.ascii	"Message ID, Time, Status, Lat., N/S, Long., E/W, Sp"
 930 06dc F040BDE8 		.ascii	"eed, Course, Date, Magnetic Var.\012\000"
 931              		.text
 932 06e0 FEFFFFEA 		.align	2
 933              		.global	createLogFile
 935              	createLogFile:
 936 06e4 F040BDE8 	.LFB9:
 937 06e8 1EFF2FE1 		.loc 1 565 0
 938              		@ Function supports interworking.
 939              		@ args = 0, pretend = 0, frame = 0
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941              		stmfd	sp!, {r4, lr}
 942              	.LCFI8:
 943 0000 5061636B 		.loc 1 570 0
 943      61676554 
 943      7261636B 
 943      65722530 
 943      33642E63 
 944 0017 00       		ldr	r3, .L176
 945              		ldr	r1, .L176+4
 946 0018 44617465 		ldr	r2, [r3, #0]
 946      2C205554 
 946      432C2058 
 946      2C20592C 
 946      205A2C20 
 947 004b 702C2048 		ldr	r0, .L176+8
 947      756D6964 
 947      6974792C 
 947      20466978 
 947      2C204C61 
 948 007e 2E2C0A00 		b	.L174
 949 0082 0000     	.L168:
 950              		.loc 1 574 0
 951 0084 5061636B 		ldr	r3, [r4, #0]
 951      61676554 
 951      7261636B 
 951      65724E4D 
 951      45412530 
 952 009f 00       		add	r3, r3, #1
 953              		str	r3, [r4, #0]
 954 00a0 4D657373 		.loc 1 579 0
 954      61676520 
 954      49442C20 
 954      54696D65 
 954      2C205374 
 955 00d3 6565642C 		mov	r2, r3
 955      20436F75 
 955      7273652C 
 955      20446174 
 955      652C204D 
 956              	.L174:
 957              		bl	sprintf
 958              		.loc 1 572 0
 959              		ldr	r0, .L176+8
 960              		bl	root_file_exists
 961              		cmp	r0, #0
 962              		.loc 1 579 0
 963              		ldr	r1, .L176+4
 964              		ldr	r0, .L176+8
 965              		ldr	r4, .L176
 966 06ec 10402DE9 		.loc 1 572 0
 967              		bne	.L168
 968              		.loc 1 582 0
 969 06f0 BC309FE5 		bl	root_open_new
 970 06f4 BC109FE5 		ldr	r3, .L176+12
 971 06f8 002093E5 		.loc 1 584 0
 972 06fc B8009FE5 		ldr	r1, .L176+16
 973 0700 030000EA 		mov	r2, #105
 974              		.loc 1 582 0
 975              		str	r0, [r3, #0]
 976 0704 003094E5 		.loc 1 584 0
 977 0708 013083E2 		bl	fat16_write_file
 978 070c 003084E5 		.loc 1 585 0
 979              		bl	sd_raw_sync
 980 0710 0320A0E1 		.loc 1 589 0
 981              		ldr	r2, [r4, #0]
 982 0714 FEFFFFEB 		ldr	r1, .L176+20
 983              		ldr	r0, .L176+8
 984 0718 9C009FE5 		b	.L175
 985 071c FEFFFFEB 	.L171:
 986 0720 000050E3 		.loc 1 593 0
 987              		ldr	r3, [ip, #0]
 988 0724 8C109FE5 		add	r3, r3, #1
 989 0728 8C009FE5 		str	r3, [ip, #0]
 990 072c 80409FE5 		.loc 1 598 0
 991              		mov	r2, r3
 992 0730 F3FFFF1A 	.L175:
 993              		bl	sprintf
 994 0734 FEFFFFEB 		.loc 1 591 0
 995 0738 80309FE5 		ldr	r0, .L176+8
 996              		bl	root_file_exists
 997 073c 80109FE5 		cmp	r0, #0
 998 0740 6920A0E3 		.loc 1 593 0
 999              		ldr	ip, .L176
 1000 0744 000083E5 		.loc 1 598 0
 1001              		ldr	r1, .L176+20
 1002 0748 FEFFFFEB 		ldr	r0, .L176+8
 1003              		.loc 1 591 0
 1004 074c FEFFFFEB 		bne	.L171
 1005              		.loc 1 601 0
 1006 0750 002094E5 		bl	root_open_new
 1007 0754 6C109FE5 		ldr	r3, .L176+24
 1008 0758 5C009FE5 		.loc 1 603 0
 1009 075c 030000EA 		ldr	r1, .L176+28
 1010              		mov	r2, #84
 1011              		.loc 1 601 0
 1012 0760 00309CE5 		str	r0, [r3, #0]
 1013 0764 013083E2 		.loc 1 603 0
 1014 0768 00308CE5 		bl	fat16_write_file
 1015              		.loc 1 604 0
 1016 076c 0320A0E1 		bl	sd_raw_sync
 1017              		.loc 1 605 0
 1018 0770 FEFFFFEB 		ldmfd	sp!, {r4, lr}
 1019              		bx	lr
 1020 0774 40009FE5 	.L177:
 1021 0778 FEFFFFEB 		.align	2
 1022 077c 000050E3 	.L176:
 1023              		.word	file_number.2762
 1024 0780 2CC09FE5 		.word	.LC0
 1025              		.word	file_name
 1026 0784 3C109FE5 		.word	LOG_FILE
 1027 0788 2C009FE5 		.word	.LC1
 1028              		.word	.LC2
 1029 078c F3FFFF1A 		.word	NMEA_FILE
 1030              		.word	.LC3
 1031 0790 FEFFFFEB 	.LFE9:
 1033              		.section	.rodata.str1.4
 1034 0798 30109FE5 		.align	2
 1035 079c 5420A0E3 	.LC4:
 1036              		.ascii	"Wake\012\000"
 1037 07a0 000083E5 		.text
 1038              		.align	2
 1039 07a4 FEFFFFEB 		.global	wakeUp
 1041 07a8 FEFFFFEB 	wakeUp:
 1042              	.LFB6:
 1043 07ac 1040BDE8 		.loc 1 493 0
 1044 07b0 1EFF2FE1 		@ Function supports interworking.
 1045              		@ args = 0, pretend = 0, frame = 0
 1046              		@ frame_needed = 0, uses_anonymous_args = 0
 1047              		.loc 1 495 0
 1048 07b4 18000000 		ldr	r1, .L180
 1049 07b8 00000000 		ldr	r3, .L180+4
 1050 07bc 00000000 		ldr	r2, [r3, #0]
 1051 07c0 00000000 		ldr	r3, [r1, #196]
 1052 07c4 18000000 		orr	r3, r3, r2
 1053 07c8 84000000 		str	r3, [r1, #196]
 1054 07cc 00000000 		.loc 1 493 0
 1055 07d0 A0000000 		stmfd	sp!, {r4, r5, lr}
 1056              	.LCFI9:
 1057              		.loc 1 496 0
 1058              		mvn	r5, #0
 1059 00f5 000000   		ldr	r3, [r5, #-4075]
 1060              		.loc 1 498 0
 1061 00f8 57616B65 		ldr	r4, .L180+8
 1061      0A00
 1062              		.loc 1 496 0
 1063              		orr	r3, r3, #73728
 1064              		str	r3, [r5, #-4075]
 1065              		.loc 1 498 0
 1066              		ldr	r1, .L180+12
 1067              		mov	r0, r4
 1068              		bl	strcpy
 1069              		.loc 1 499 0
 1070              		mov	r0, r4
 1071              		bl	strlen
 1072              		mov	r1, r4
 1073 07d4 B8109FE5 		mov	r2, r0
 1074 07d8 B8309FE5 		ldr	r0, .L180+16
 1075 07dc 002093E5 		bl	saveData
 1076 07e0 C43091E5 		.loc 1 502 0
 1077 07e4 023083E1 		mov	r0, #48
 1078 07e8 C43081E5 		bl	adxl345_read
 1079              		.loc 1 505 0
 1080 07ec 30402DE9 		ldr	r3, .L180+20
 1081              		mov	r4, #0
 1082              		strb	r4, [r3, #0]
 1083 07f0 0050E0E3 		.loc 1 506 0
 1084 07f4 EB3F15E5 		ldr	r3, .L180+24
 1085              		strb	r4, [r3, #0]
 1086 07f8 9C409FE5 		.loc 1 509 0
 1087              		bl	initializeGps
 1088 07fc 123A83E3 		.loc 1 510 0
 1089 0800 EB3F05E5 		mov	r0, #1
 1090              		bl	enable_gps_rmc_msgs
 1091 0804 94109FE5 		.loc 1 511 0
 1092 0808 0400A0E1 		ldr	r3, .L180+28
 1093 080c FEFFFFEB 		mov	r2, #16777216
 1094              		str	r2, [r3, #28]
 1095 0810 0400A0E1 		.loc 1 512 0
 1096 0814 FEFFFFEB 		mov	r0, #10
 1097 0818 0410A0E1 		bl	delay_ms
 1098 081c 0020A0E1 		.loc 1 513 0
 1099 0820 7C009FE5 		bl	SCPinit
 1100 0824 FEFFFFEB 		.loc 1 517 0
 1101              		mov	r0, #1000
 1102 0828 3000A0E3 		bl	delay_ms
 1103 082c FEFFFFEB 		.loc 1 522 0
 1104              		ldr	r3, [r5, #-4079]
 1105 0830 70309FE5 		.loc 1 519 0
 1106 0834 0040A0E3 		ldr	r2, .L180+32
 1107 0838 0040C3E5 		.loc 1 522 0
 1108              		orr	r3, r3, #144
 1109 083c 68309FE5 		.loc 1 519 0
 1110 0840 0040C3E5 		strb	r4, [r2, #0]
 1111              		.loc 1 522 0
 1112 0844 FEFFFFEB 		str	r3, [r5, #-4079]
 1113              		.loc 1 518 0
 1114 0848 0100A0E3 		ldr	r3, .L180+36
 1115 084c FEFFFFEB 		str	r4, [r3, #0]
 1116              		.loc 1 523 0
 1117 0850 58309FE5 		ldmfd	sp!, {r4, r5, lr}
 1118 0854 0124A0E3 		bx	lr
 1119 0858 1C2083E5 	.L181:
 1120              		.align	2
 1121 085c 0A00A0E3 	.L180:
 1122 0860 FEFFFFEB 		.word	-534790144
 1123              		.word	power_register_values
 1124 0864 FEFFFFEB 		.word	log_data
 1125              		.word	.LC4
 1126 0868 FA0FA0E3 		.word	LOG_FILE
 1127 086c FEFFFFEB 		.word	gps_message_complete
 1128              		.word	read_sensors
 1129 0870 EF3F15E5 		.word	-536707072
 1130              		.word	RTC_Set
 1131 0874 38209FE5 		.word	log_count
 1132              	.LFE6:
 1134              		.section	.rodata.str1.4
 1135 087c 0040C2E5 		.align	2
 1136              	.LC5:
 1137 0880 EF3F05E5 		.ascii	"Sleep\012\000"
 1138              		.text
 1139 0884 2C309FE5 		.align	2
 1140 0888 004083E5 		.global	goToSleep
 1142 088c 3040BDE8 	goToSleep:
 1143 0890 1EFF2FE1 	.LFB5:
 1144              		.loc 1 439 0
 1145              		@ Function supports interworking.
 1146              		@ args = 0, pretend = 0, frame = 0
 1147 0894 00C01FE0 		@ frame_needed = 0, uses_anonymous_args = 0
 1148 0898 00000000 	.LVL44:
 1149 089c 00000000 		.loc 1 440 0
 1150 08a0 F8000000 		ldr	r3, .L193
 1151 08a4 00000000 		.loc 1 443 0
 1152 08a8 00000000 		ldr	r1, .L193+4
 1153 08ac 00000000 		.loc 1 440 0
 1154 08b0 008002E0 		mov	r2, #2
 1155 08b4 00000000 		str	r2, [r3, #8]
 1156 08b8 00000000 		.loc 1 443 0
 1157              		mov	r3, #-2147483648
 1158              		.loc 1 439 0
 1159              		stmfd	sp!, {r4, r5, lr}
 1160 00fe 0000     	.LCFI10:
 1161              		.loc 1 443 0
 1162 0100 536C6565 		str	r3, [r1, #4]
 1162      700A00
 1163              		.loc 1 447 0
 1164              		ldr	r5, .L193+8
 1165              		.loc 1 444 0
 1166              		add	r3, r3, #-2130706432
 1167              		.loc 1 439 0
 1168              		mov	r4, r0
 1169              		.loc 1 444 0
 1170              		str	r3, [r1, #20]
 1171              		.loc 1 445 0
 1172              		mov	r0, #10
 1173              	.LVL45:
 1174              		bl	delay_ms
 1175 08bc 58319FE5 		.loc 1 447 0
 1176              		ldr	r2, [r5, #0]
 1177 08c0 58119FE5 		cmp	r2, #0
 1178              		ble	.L183
 1179 08c4 0220A0E3 		.loc 1 448 0
 1180 08c8 082083E5 		ldr	r0, .L193+12
 1181              		ldr	r1, .L193+16
 1182 08cc 0231A0E3 		bl	saveData
 1183              	.LBB16:
 1184 08d0 30402DE9 		.loc 1 449 0
 1185              		ldr	r0, [r5, #0]
 1186              		ldr	r1, .L193+16
 1187 08d4 043081E5 		mov	r2, #0
 1188              	.LVL46:
 1189 08d8 44519FE5 		b	.L185
 1190              	.L186:
 1191 08dc 813483E2 		mov	r3, #0
 1192              		strb	r3, [r1, #-1]
 1193 08e0 0040A0E1 	.L185:
 1194              		cmp	r2, r0
 1195 08e4 143081E5 		add	r1, r1, #1
 1196              		add	r2, r2, #1
 1197 08e8 0A00A0E3 		blt	.L186
 1198              	.LBE16:
 1199 08ec FEFFFFEB 		.loc 1 450 0
 1200              		ldr	r3, .L193+8
 1201 08f0 002095E5 		mov	r2, #0
 1202 08f4 000052E3 	.LVL47:
 1203 08f8 0F0000DA 		str	r2, [r3, #0]
 1204              	.L183:
 1205 08fc 24019FE5 		.loc 1 454 0
 1206 0900 24119FE5 		ldr	r3, .L193+4
 1207 0904 FEFFFFEB 		.loc 1 459 0
 1208              		ldr	r1, .L193
 1209              		.loc 1 454 0
 1210 0908 000095E5 		mov	r2, #2097152
 1211 090c 18119FE5 		str	r2, [r3, #12]
 1212 0910 0020A0E3 		.loc 1 459 0
 1213              		mov	r3, #0
 1214 0914 010000EA 		str	r3, [r1, #32]
 1215              		.loc 1 460 0
 1216 0918 0030A0E3 		ldr	r3, [r1, #32]
 1217 091c 013041E5 		str	r3, [r1, #96]
 1218              		.loc 1 463 0
 1219 0920 000052E1 		ldr	r3, [r1, #36]
 1220 0924 011081E2 		add	r3, r3, r4
 1221 0928 012082E2 		cmp	r3, #59
 1222 092c F9FFFFBA 		ldrhi	r3, [r1, #36]
 1223              		.loc 1 464 0
 1224              		ldrls	r3, [r1, #36]
 1225 0930 EC309FE5 		.loc 1 463 0
 1226 0934 0020A0E3 		addhi	r3, r4, r3
 1227              		.loc 1 464 0
 1228 0938 002083E5 		addls	r3, r3, r4
 1229              		.loc 1 463 0
 1230              		subhi	r3, r3, #60
 1231 093c DC309FE5 		.loc 1 464 0
 1232              		str	r3, [r1, #100]
 1233 0940 D4109FE5 		.loc 1 466 0
 1234              		ldr	r0, .L193+16
 1235 0944 0226A0E3 		ldr	r1, .L193+20
 1236 0948 0C2083E5 		bl	strcpy
 1237              		.loc 1 467 0
 1238 094c 0030A0E3 		ldr	r0, .L193+16
 1239 0950 203081E5 		bl	strlen
 1240              		ldr	r1, .L193+16
 1241 0954 203091E5 		mov	r2, r0
 1242 0958 603081E5 		ldr	r0, .L193+12
 1243              		bl	saveData
 1244 095c 243091E5 		.loc 1 469 0
 1245 0960 043083E0 		ldr	r3, .L193
 1246 0964 3B0053E3 		mov	r4, #1
 1247 0968 24309185 	.LVL48:
 1248              		str	r4, [r3, #8]
 1249 096c 24309195 		.loc 1 472 0
 1250              		mvn	r2, #0
 1251 0970 03308480 		ldr	r3, [r2, #-4075]
 1252              		orr	r3, r3, #144
 1253 0974 04308390 		str	r3, [r2, #-4075]
 1254              		.loc 1 473 0
 1255 0978 3C304382 		ldr	r3, [r2, #-4079]
 1256              		orr	r3, r3, #73728
 1257 097c 643081E5 		str	r3, [r2, #-4079]
 1258              		.loc 1 476 0
 1259 0980 A4009FE5 		bl	accelX
 1260 0984 A4109FE5 		ldr	r3, .L193+24
 1261 0988 FEFFFFEB 		str	r0, [r3, #0]
 1262              		.loc 1 477 0
 1263 098c 98009FE5 		bl	accelY
 1264 0990 FEFFFFEB 		ldr	r3, .L193+28
 1265 0994 90109FE5 		str	r0, [r3, #0]
 1266 0998 0020A0E1 		.loc 1 478 0
 1267 099c 84009FE5 		bl	accelZ
 1268 09a0 FEFFFFEB 		ldr	r3, .L193+32
 1269              		str	r0, [r3, #0]
 1270 09a4 70309FE5 		.loc 1 479 0
 1271 09a8 0140A0E3 		mov	r0, #48
 1272              		bl	adxl345_read
 1273 09ac 084083E5 		.loc 1 482 0
 1274              		ldr	r2, .L193+36
 1275 09b0 0020E0E3 		ldr	r3, .L193+40
 1276 09b4 EB3F12E5 		ldr	r1, [r2, #196]
 1277 09b8 903083E3 		str	r1, [r3, #0]
 1278 09bc EB3F02E5 		.loc 1 483 0
 1279              		mov	r3, #512
 1280 09c0 EF3F12E5 		str	r3, [r2, #196]
 1281 09c4 123A83E3 		.loc 1 485 0
 1282 09c8 EF3F02E5 		str	r4, [r2, #192]
 1283              		.loc 1 486 0
 1284 09cc FEFFFFEB 		ldmfd	sp!, {r4, r5, lr}
 1285 09d0 5C309FE5 		bx	lr
 1286 09d4 000083E5 	.L194:
 1287              		.align	2
 1288 09d8 FEFFFFEB 	.L193:
 1289 09dc 54309FE5 		.word	-536723456
 1290 09e0 000083E5 		.word	-536707072
 1291              		.word	log_data_index
 1292 09e4 FEFFFFEB 		.word	LOG_FILE
 1293 09e8 4C309FE5 		.word	log_data
 1294 09ec 000083E5 		.word	.LC5
 1295              		.word	acceleration_x
 1296 09f0 3000A0E3 		.word	acceleration_y
 1297 09f4 FEFFFFEB 		.word	acceleration_z
 1298              		.word	-534790144
 1299 09f8 40209FE5 		.word	power_register_values
 1300 09fc 40309FE5 	.LFE5:
 1302 0a04 001083E5 		.align	2
 1303              		.global	bootUp
 1305 0a0c C43082E5 	bootUp:
 1306              	.LFB4:
 1307 0a10 C04082E5 		.loc 1 350 0
 1308              		@ Function supports interworking.
 1309 0a14 3040BDE8 		@ args = 0, pretend = 0, frame = 0
 1310 0a18 1EFF2FE1 		@ frame_needed = 0, uses_anonymous_args = 0
 1311              		stmfd	sp!, {r4, r5, lr}
 1312              	.LCFI11:
 1313              		.loc 1 352 0
 1314 0a1c 004002E0 		ldr	r0, .L201
 1315 0a20 008002E0 		bl	rprintf_devopen
 1316 0a24 00000000 		.loc 1 353 0
 1317 0a28 00000000 		mov	r0, #4800
 1318 0a2c 00000000 		bl	init_serial1
 1319 0a30 00010000 		.loc 1 356 0
 1320 0a34 00000000 		mov	r0, #10
 1321 0a38 00000000 		bl	delay_ms
 1322 0a3c 00000000 		.loc 1 359 0
 1323 0a40 00C01FE0 		bl	sd_raw_init
 1324 0a44 00000000 		cmp	r0, #0
 1325              		.loc 1 362 0
 1326              		bleq	reset
 1327              	.L196:
 1328              		.loc 1 364 0
 1329              		bl	openroot
 1330              		cmp	r0, #0
 1331              		.loc 1 367 0
 1332              		blne	reset
 1333              	.L198:
 1334              		.loc 1 369 0
 1335              		ldr	r2, .L201+4
 1336 0a48 30402DE9 		ldr	r3, [r2, #0]
 1337              		bic	r3, r3, #240
 1338              		str	r3, [r2, #0]
 1339 0a4c C8019FE5 		.loc 1 372 0
 1340 0a50 FEFFFFEB 		ldr	r3, [r2, #0]
 1341              		orr	r3, r3, #201326592
 1342 0a54 4B0DA0E3 		str	r3, [r2, #0]
 1343 0a58 FEFFFFEB 		.loc 1 375 0
 1344              		ldr	r3, [r2, #0]
 1345 0a5c 0A00A0E3 		bic	r3, r3, #-1073741824
 1346 0a60 FEFFFFEB 		str	r3, [r2, #0]
 1347              		.loc 1 376 0
 1348 0a64 FEFFFFEB 		ldr	r3, [r2, #0]
 1349 0a68 000050E3 		orr	r3, r3, #-2147483648
 1350              		str	r3, [r2, #0]
 1351 0a6c FEFFFF0B 		.loc 1 377 0
 1352              		mvn	r5, #0
 1353              		ldr	r3, [r5, #-4075]
 1354 0a70 FEFFFFEB 		orr	r3, r3, #65536
 1355 0a74 000050E3 		str	r3, [r5, #-4075]
 1356              		.loc 1 378 0
 1357 0a78 FEFFFF1B 		ldr	r4, .L201+8
 1358              		ldr	r3, [r4, #320]
 1359              		orr	r3, r3, #4
 1360 0a7c 9C219FE5 		str	r3, [r4, #320]
 1361 0a80 003092E5 		.loc 1 379 0
 1362 0a84 F030C3E3 		ldr	r3, [r4, #328]
 1363 0a88 003082E5 		orr	r3, r3, #4
 1364              		str	r3, [r4, #328]
 1365 0a8c 003092E5 		.loc 1 380 0
 1366 0a90 033383E3 		ldr	r3, [r4, #320]
 1367 0a94 003082E5 		orr	r3, r3, #4
 1368              		str	r3, [r4, #320]
 1369 0a98 003092E5 		.loc 1 381 0
 1370 0a9c 0331C3E3 		ldr	r3, [r4, #332]
 1371 0aa0 003082E5 		orr	r3, r3, #4
 1372              		str	r3, [r4, #332]
 1373 0aa4 003092E5 		.loc 1 382 0
 1374 0aa8 023183E3 		ldr	r3, [r4, #324]
 1375 0aac 003082E5 		orr	r3, r3, #4
 1376              		str	r3, [r4, #324]
 1377 0ab0 0050E0E3 		.loc 1 383 0
 1378 0ab4 EB3F15E5 		ldr	r3, [r4, #320]
 1379 0ab8 013883E3 		orr	r3, r3, #4
 1380 0abc EB3F05E5 		str	r3, [r4, #320]
 1381              		.loc 1 386 0
 1382 0ac0 5C419FE5 		ldr	r3, .L201+12
 1383 0ac4 403194E5 		sub	r2, r2, #16384
 1384 0ac8 043083E3 		str	r3, [r2, #8]
 1385 0acc 403184E5 		.loc 1 387 0
 1386              		ldr	r3, [r2, #8]
 1387 0ad0 483194E5 		bic	r3, r3, #44032
 1388 0ad4 043083E3 		bic	r3, r3, #32
 1389 0ad8 483184E5 		str	r3, [r2, #8]
 1390              		.loc 1 389 0
 1391 0adc 403194E5 		mov	r3, #83886080
 1392 0ae0 043083E3 		str	r3, [r2, #24]
 1393 0ae4 403184E5 		.loc 1 392 0
 1394              		mov	r3, #131072
 1395 0ae8 4C3194E5 		str	r3, [r2, #4]
 1396 0aec 043083E3 		.loc 1 393 0
 1397 0af0 4C3184E5 		mov	r3, #67108864
 1398              		str	r3, [r2, #20]
 1399 0af4 443194E5 		.loc 1 396 0
 1400 0af8 043083E3 		bl	SPI0_Init
 1401 0afc 443184E5 		.loc 1 397 0
 1402              		ldr	r2, .L201+16
 1403 0b00 403194E5 		mov	r3, #64
 1404 0b04 043083E3 		str	r3, [r2, #12]
 1405 0b08 403184E5 		.loc 1 398 0
 1406              		mov	r3, #32
 1407 0b0c 14319FE5 		str	r3, [r2, #0]
 1408 0b10 012942E2 		.loc 1 403 0
 1409 0b14 083082E5 		ldr	r3, .L201+20
 1410              		.loc 1 402 0
 1411 0b18 083092E5 		mov	r0, #1
 1412 0b1c 2B3BC3E3 		str	r0, [r4, #256]
 1413 0b20 2030C3E3 		.loc 1 403 0
 1414 0b24 083082E5 		str	r3, [r5, #-4083]
 1415              		.loc 1 404 0
 1416 0b28 0534A0E3 		mov	r3, #39
 1417 0b2c 183082E5 		str	r3, [r5, #-3583]
 1418              		.loc 1 405 0
 1419 0b30 0238A0E3 		ldr	r3, .L201+24
 1420 0b34 043082E5 		str	r3, [r5, #-3839]
 1421              		.loc 1 406 0
 1422 0b38 0133A0E3 		mov	r3, #45
 1423 0b3c 143082E5 		str	r3, [r5, #-3579]
 1424              		.loc 1 407 0
 1425 0b40 FEFFFFEB 		ldr	r3, .L201+28
 1426              		str	r3, [r5, #-3835]
 1427 0b44 E0209FE5 		.loc 1 408 0
 1428 0b48 4030A0E3 		mov	r3, #36
 1429 0b4c 0C3082E5 		str	r3, [r5, #-3575]
 1430              		.loc 1 409 0
 1431 0b50 2030A0E3 		ldr	r3, .L201+32
 1432 0b54 003082E5 		str	r3, [r5, #-3831]
 1433              		.loc 1 410 0
 1434 0b58 D0309FE5 		mov	r3, #48
 1435              		str	r3, [r5, #-3571]
 1436 0b5c 0100A0E3 		.loc 1 414 0
 1437 0b60 000184E5 		ldr	r1, .L201+36
 1438              		.loc 1 411 0
 1439 0b64 F33F05E5 		ldr	r3, .L201+40
 1440              		str	r3, [r5, #-3827]
 1441 0b68 2730A0E3 		.loc 1 414 0
 1442 0b6c FF3D05E5 		str	r0, [r1, #4]
 1443              		.loc 1 415 0
 1444 0b70 BC309FE5 		ldr	r3, [r1, #8]
 1445 0b74 FF3E05E5 		and	r3, r3, #63
 1446              		str	r3, [r1, #8]
 1447 0b78 2D30A0E3 		.loc 1 418 0
 1448 0b7c FB3D05E5 		sub	r2, r2, #114688
 1449              		mov	r3, #1200
 1450 0b80 B0309FE5 		str	r3, [r2, #12]
 1451 0b84 FB3E05E5 		.loc 1 419 0
 1452              		ldr	r3, [r2, #4]
 1453 0b88 2430A0E3 		orr	r3, r3, r0
 1454 0b8c F73D05E5 		str	r3, [r2, #4]
 1455              		.loc 1 420 0
 1456 0b90 A4309FE5 		mov	r0, #0
 1457 0b94 F73E05E5 		.loc 1 421 0
 1458              		mov	r3, #3
 1459 0b98 3030A0E3 		.loc 1 420 0
 1460 0b9c F33D05E5 		str	r0, [r2, #112]
 1461              		.loc 1 421 0
 1462 0ba0 98109FE5 		str	r3, [r2, #20]
 1463              		.loc 1 422 0
 1464 0ba4 98309FE5 		ldr	r3, .L201+44
 1465 0ba8 F33E05E5 		.loc 1 426 0
 1466              		add	r1, r1, #81920
 1467 0bac 040081E5 		.loc 1 422 0
 1468              		str	r3, [r2, #24]
 1469 0bb0 083091E5 		.loc 1 426 0
 1470 0bb4 3F3003E2 		mvn	r3, #1
 1471 0bb8 083081E5 		str	r3, [r1, #8]
 1472              		.loc 1 428 0
 1473 0bbc 072942E2 		mvn	r3, #2
 1474 0bc0 4B3EA0E3 		.loc 1 427 0
 1475 0bc4 0C3082E5 		str	r0, [r1, #12]
 1476              		.loc 1 428 0
 1477 0bc8 043092E5 		str	r3, [r1, #16]
 1478 0bcc 003083E1 		.loc 1 430 0
 1479 0bd0 043082E5 		ldr	r3, .L201+48
 1480              		str	r3, [r1, #128]
 1481 0bd4 0000A0E3 		.loc 1 431 0
 1482              		mov	r3, #1792
 1483 0bd8 0330A0E3 		str	r3, [r1, #132]
 1484              		.loc 1 432 0
 1485 0bdc 700082E5 		ldmfd	sp!, {r4, r5, lr}
 1486              		bx	lr
 1487 0be0 143082E5 	.L202:
 1488              		.align	2
 1489 0be4 5C309FE5 	.L201:
 1490              		.word	putc_serial1
 1491 0be8 051981E2 		.word	-536690688
 1492              		.word	-534790144
 1493 0bec 183082E5 		.word	-2145255212
 1494              		.word	-536739840
 1495 0bf0 0130E0E3 		.word	-73873
 1496 0bf4 083081E5 		.word	ISR_RxData1
 1497              		.word	ISR_RTC
 1498 0bf8 0230E0E3 		.word	ISR_Timer0
 1499              		.word	-536805376
 1500 0bfc 0C0081E5 		.word	ISR_EINT2
 1501              		.word	5000
 1502 0c00 103081E5 		.word	1830
 1503              	.LFE4:
 1505 0c08 803081E5 		.global	__floatsidf
 1506              		.global	__muldf3
 1507 0c0c 073CA0E3 		.global	__adddf3
 1508 0c10 843081E5 		.global	__fixdfsi
 1509              		.global	__udivsi3
 1510 0c14 3040BDE8 		.global	__umodsi3
 1511 0c18 1EFF2FE1 		.section	.rodata.str1.4
 1512              		.align	2
 1513              	.LC6:
 1514              		.ascii	"%d,%d,%d,%d,\000"
 1515 0c1c 00000000 		.align	2
 1516 0c20 00C002E0 	.LC7:
 1517 0c24 00C01FE0 		.ascii	"%d,%d,\000"
 1518 0c28 D4002280 		.text
 1519 0c2c 000002E0 		.align	2
 1520 0c30 6FDFFEFF 		.global	main
 1522 0c38 00000000 	main:
 1523 0c3c 00000000 	.LFB2:
 1524 0c40 000001E0 		.loc 1 96 0
 1525 0c44 00000000 		@ Function supports interworking.
 1526 0c48 88130000 		@ args = 0, pretend = 0, frame = 0
 1527 0c4c 26070000 		@ frame_needed = 0, uses_anonymous_args = 0
 1528              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1529              	.LCFI12:
 1530              		sub	sp, sp, #8
 1531              	.LCFI13:
 1532              		.loc 1 101 0
 1533              		bl	bootUp
 1534              		.loc 1 102 0
 1535              		bl	createLogFile
 1536              		.loc 1 105 0
 1537 0107 00       		bl	initializeGps
 1538              		.loc 1 106 0
 1539 0108 25642C25 		mov	r0, #1
 1539      642C2564 
 1539      2C25642C 
 1539      00
 1540 0115 000000   		bl	enable_gps_rmc_msgs
 1541              		.loc 1 109 0
 1542 0118 25642C25 		ldr	r3, .L291
 1542      642C00
 1543 011f 00       		mov	r2, #16777216
 1544              		str	r2, [r3, #28]
 1545              		.loc 1 110 0
 1546              		mov	r0, #100
 1547              		bl	delay_ms
 1548              		.loc 1 111 0
 1549              		bl	SCPinit
 1550              		.loc 1 113 0
 1551              		bl	initAccel
 1552              		.loc 1 117 0
 1553 0c50 F0472DE9 		mvn	r2, #0
 1554              		ldr	r3, [r2, #-4079]
 1555 0c54 08D04DE2 		orr	r3, r3, #144
 1556              		str	r3, [r2, #-4079]
 1557              		b	.L290
 1558 0c58 FEFFFFEB 	.LVL49:
 1559              	.L205:
 1560 0c5c FEFFFFEB 		.loc 1 120 0
 1561              		ldr	r3, .L291+4
 1562 0c60 FEFFFFEB 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1563              		cmp	r3, #1
 1564 0c64 0100A0E3 		bne	.L206
 1565 0c68 FEFFFFEB 		.loc 1 121 0
 1566              		mvn	r1, #0
 1567 0c6c BC389FE5 	.LVL50:
 1568 0c70 0124A0E3 	.LBB17:
 1569 0c74 1C2083E5 		.loc 1 122 0
 1570              		ldr	r3, .L291+8
 1571 0c78 6400A0E3 	.LBE17:
 1572 0c7c FEFFFFEB 		.loc 1 121 0
 1573              		ldr	r2, [r1, #-4075]
 1574 0c80 FEFFFFEB 	.LBB18:
 1575              		.loc 1 122 0
 1576 0c84 FEFFFFEB 		ldr	r4, [r3, #0]
 1577              		ldr	r0, .L291+12
 1578 0c88 0020E0E3 		ldr	lr, .L291+16
 1579 0c8c EF3F12E5 	.LBE18:
 1580 0c90 903083E3 		.loc 1 121 0
 1581 0c94 EF3F02E5 		orr	r2, r2, #144
 1582 0c98 1B0200EA 	.LBB19:
 1583              		.loc 1 122 0
 1584              		mov	ip, #0
 1585              	.LVL51:
 1586 0c9c 90389FE5 	.LBE19:
 1587 0ca0 0030D3E5 		.loc 1 121 0
 1588 0ca4 010053E3 		str	r2, [r1, #-4075]
 1589 0ca8 6700001A 		b	.L208
 1590              	.L209:
 1591 0cac 0010E0E3 	.LBB20:
 1592              		.loc 1 123 0
 1593              		ldrb	r2, [r0, #-1]	@ zero_extendqisi2
 1594              		.loc 1 124 0
 1595 0cb0 80389FE5 		mov	r3, #0
 1596              		strb	r3, [r0, #-1]
 1597              		.loc 1 123 0
 1598 0cb4 EB2F11E5 		strb	r2, [lr, #-1]
 1599              	.L208:
 1600              		.loc 1 122 0
 1601 0cb8 004093E5 		cmp	ip, r4
 1602 0cbc 78089FE5 		add	r0, r0, #1
 1603 0cc0 78E89FE5 		add	ip, ip, #1
 1604              		add	lr, lr, #1
 1605              		blt	.L209
 1606 0cc4 902082E3 	.LBE20:
 1607              		.loc 1 128 0
 1608              		mvn	r1, #0
 1609 0cc8 00C0A0E3 		ldr	r2, [r1, #-4079]
 1610              		.loc 1 134 0
 1611              		ldr	r3, .L291+20
 1612              		.loc 1 128 0
 1613 0ccc EB2F01E5 		orr	r2, r2, #144
 1614 0cd0 030000EA 		.loc 1 134 0
 1615              		ldr	r5, [r3, #0]
 1616              	.LVL52:
 1617              		ldr	r3, .L291+24
 1618 0cd4 012050E5 		.loc 1 128 0
 1619              		str	r2, [r1, #-4079]
 1620 0cd8 0030A0E3 		.loc 1 134 0
 1621 0cdc 013040E5 		mov	r2, #1
 1622              		strb	r2, [r3, #0]
 1623 0ce0 01204EE5 		.loc 1 126 0
 1624              		ldr	r3, .L291+28
 1625              		.loc 1 127 0
 1626 0ce4 04005CE1 		mov	r0, #0
 1627 0ce8 010080E2 		.loc 1 126 0
 1628 0cec 01C08CE2 		str	r4, [r3, #0]
 1629 0cf0 01E08EE2 		.loc 1 134 0
 1630 0cf4 F6FFFFBA 		ldr	lr, .L291+16
 1631              		.loc 1 127 0
 1632              		ldr	r3, .L291+4
 1633 0cf8 0010E0E3 		.loc 1 134 0
 1634 0cfc EF2F11E5 		mov	ip, r0
 1635              	.LVL53:
 1636 0d00 3C389FE5 		.loc 1 127 0
 1637              		strb	r0, [r3, #0]
 1638 0d04 902082E3 		b	.L211
 1639              	.L212:
 1640 0d08 005093E5 	.LBB21:
 1641              		.loc 1 137 0
 1642 0d0c 34389FE5 		ldrb	r3, [lr, #-1]	@ zero_extendqisi2
 1643              		strb	r3, [ip, r2]
 1644 0d10 EF2F01E5 		add	ip, ip, #1
 1645              	.L211:
 1646 0d14 0120A0E3 		ldr	r3, .L291+32
 1647 0d18 0020C3E5 		cmp	ip, r4
 1648              		add	r2, r5, r3
 1649 0d1c 28389FE5 		add	lr, lr, #1
 1650              		blt	.L212
 1651 0d20 0000A0E3 		add	r2, r5, ip
 1652              		ldr	r8, .L291+20
 1653 0d24 004083E5 	.LBE21:
 1654              		.loc 1 140 0
 1655 0d28 10E89FE5 		cmp	r2, #400
 1656              	.LBB22:
 1657 0d2c 00389FE5 		.loc 1 137 0
 1658              		str	r2, [r8, #0]
 1659 0d30 00C0A0E1 	.LBE22:
 1660              		.loc 1 140 0
 1661              		blt	.L214
 1662 0d34 0000C3E5 		.loc 1 142 0
 1663 0d38 020000EA 		ldr	r4, .L291
 1664              		.loc 1 141 0
 1665              		mov	r5, #144
 1666              		mvn	r7, #0
 1667 0d3c 01305EE5 		.loc 1 142 0
 1668 0d40 0230CCE7 		mov	r6, #67108864
 1669 0d44 01C08CE2 		.loc 1 143 0
 1670              		mov	r1, r3
 1671 0d48 00389FE5 		ldr	r0, .L291+36
 1672 0d4c 04005CE1 		.loc 1 141 0
 1673 0d50 032085E0 		str	r5, [r7, #-4075]
 1674 0d54 01E08EE2 		.loc 1 142 0
 1675 0d58 F7FFFFBA 		str	r6, [r4, #20]
 1676 0d5c 0C2085E0 		.loc 1 143 0
 1677 0d60 DC879FE5 		bl	saveData
 1678              	.LVL54:
 1679              		.loc 1 145 0
 1680 0d64 190E52E3 		str	r5, [r7, #-4079]
 1681              		.loc 1 146 0
 1682              		str	r6, [r4, #28]
 1683 0d68 002088E5 		.loc 1 147 0
 1684              		ldr	r3, [r4, #4]
 1685              		.loc 1 144 0
 1686 0d6c 1E0000BA 		mov	r5, #0
 1687              		.loc 1 147 0
 1688 0d70 B8479FE5 		orr	r3, r3, #128
 1689              		str	r3, [r4, #4]
 1690 0d74 9050A0E3 		.loc 1 144 0
 1691 0d78 0070E0E3 		str	r5, [r8, #0]
 1692              		.loc 1 148 0
 1693 0d7c 0163A0E3 		bl	SCPinit
 1694              		.loc 1 149 0
 1695 0d80 0310A0E1 		mov	r0, #10
 1696 0d84 C8079FE5 		bl	delay_ms
 1697              	.LBB23:
 1698 0d88 EB5F07E5 		.loc 1 150 0
 1699              		ldr	r1, [r8, #0]
 1700 0d8c 146084E5 		ldr	r2, .L291+32
 1701              		b	.L216
 1702 0d90 FEFFFFEB 	.LVL55:
 1703              	.L217:
 1704              		mov	r3, #0
 1705 0d94 EF5F07E5 		strb	r3, [r2, #-1]
 1706              	.L216:
 1707 0d98 1C6084E5 		cmp	r5, r1
 1708              		add	r2, r2, #1
 1709 0d9c 043094E5 		add	r5, r5, #1
 1710              		blt	.L217
 1711 0da0 0050A0E3 	.LBE23:
 1712              		.loc 1 151 0
 1713 0da4 803083E3 		ldr	r3, .L291+20
 1714 0da8 043084E5 		mov	r2, #0
 1715              		str	r2, [r3, #0]
 1716 0dac 005088E5 	.LVL56:
 1717              	.L214:
 1718 0db0 FEFFFFEB 		.loc 1 156 0
 1719              		ldr	r3, .L291+40
 1720 0db4 0A00A0E3 		.loc 1 157 0
 1721 0db8 FEFFFFEB 		ldrb	lr, [r3, #34]	@ zero_extendqisi2
 1722              		.loc 1 158 0
 1723              		ldrb	r2, [r3, #36]	@ zero_extendqisi2
 1724 0dbc 001098E5 		ldrb	ip, [r3, #37]	@ zero_extendqisi2
 1725 0dc0 88279FE5 	.LVL57:
 1726 0dc4 010000EA 		.loc 1 156 0
 1727              		ldrb	r4, [r3, #32]	@ zero_extendqisi2
 1728              		ldrb	r1, [r3, #33]	@ zero_extendqisi2
 1729 0dc8 0030A0E3 		.loc 1 157 0
 1730 0dcc 013042E5 		ldrb	r0, [r3, #35]	@ zero_extendqisi2
 1731              		.loc 1 156 0
 1732 0dd0 010055E1 		mov	r3, #10
 1733 0dd4 012082E2 		.loc 1 158 0
 1734 0dd8 015085E2 		mla	ip, r2, r3, ip
 1735 0ddc F9FFFFBA 		.loc 1 157 0
 1736              		mla	r0, lr, r3, r0
 1737              		.loc 1 156 0
 1738 0de0 5C379FE5 		mla	r1, r4, r3, r1
 1739 0de4 0020A0E3 		.loc 1 155 0
 1740 0de8 002083E5 		ldr	r2, .L291+44
 1741              		mov	r3, #2
 1742              		str	r3, [r2, #8]
 1743              		.loc 1 159 0
 1744 0dec 64379FE5 		ldr	r3, .L291+48
 1745              		mov	lr, #1
 1746 0df0 22E0D3E5 		.loc 1 156 0
 1747              		sub	r1, r1, #528
 1748 0df4 2420D3E5 		.loc 1 157 0
 1749 0df8 25C0D3E5 		sub	r0, r0, #528
 1750              		.loc 1 158 0
 1751              		sub	ip, ip, #528
 1752 0dfc 2040D3E5 		.loc 1 159 0
 1753 0e00 2110D3E5 		strb	lr, [r3, #0]
 1754              		.loc 1 156 0
 1755 0e04 2300D3E5 		str	r1, [r2, #40]
 1756              		.loc 1 157 0
 1757 0e08 0A30A0E3 		str	r0, [r2, #36]
 1758              		.loc 1 158 0
 1759 0e0c 92C32CE0 		str	ip, [r2, #32]
 1760              		.loc 1 160 0
 1761 0e10 9E0320E0 		str	lr, [r2, #8]
 1762              	.LVL58:
 1763 0e14 941321E0 	.L206:
 1764              		.loc 1 165 0
 1765 0e18 3C279FE5 		ldr	r3, .L291+52
 1766 0e1c 0230A0E3 		ldrb	r4, [r3, #0]	@ zero_extendqisi2
 1767 0e20 083082E5 		cmp	r4, #1
 1768              		bne	.L219
 1769 0e24 34379FE5 		.loc 1 166 0
 1770 0e28 01E0A0E3 		mvn	r2, #0
 1771              		ldr	r3, [r2, #-4075]
 1772 0e2c 211E41E2 		orr	r3, r3, #16
 1773              		str	r3, [r2, #-4075]
 1774 0e30 210E40E2 		.loc 1 169 0
 1775              		bl	accelX
 1776 0e34 21CE4CE2 	.LVL59:
 1777              		ldr	r3, .L291+56
 1778 0e38 00E0C3E5 		str	r0, [r3, #0]
 1779              		.loc 1 170 0
 1780 0e3c 281082E5 		bl	accelY
 1781              		ldr	r3, .L291+60
 1782 0e40 240082E5 		str	r0, [r3, #0]
 1783              		.loc 1 171 0
 1784 0e44 20C082E5 		bl	accelZ
 1785              		ldr	r3, .L291+64
 1786 0e48 08E082E5 		str	r0, [r3, #0]
 1787              		.loc 1 174 0
 1788              		mov	r0, #16
 1789              		bl	get_adc_1
 1790 0e4c 10379FE5 		ldr	r3, .L291+68
 1791 0e50 0040D3E5 		mul	r2, r0, r3
 1792 0e54 010054E3 		.loc 1 177 0
 1793 0e58 5500001A 		ldr	ip, .L291
 1794              		.loc 1 174 0
 1795 0e5c 0020E0E3 		add	r3, r2, #1020
 1796 0e60 EB3F12E5 		cmp	r2, #0
 1797 0e64 103083E3 		add	r3, r3, #3
 1798 0e68 EB3F02E5 		movlt	r2, r3
 1799              		.loc 1 177 0
 1800 0e6c FEFFFFEB 		ldr	r3, [ip, #0]
 1801              		.loc 1 174 0
 1802 0e70 F0369FE5 		mov	r2, r2, asr #10
 1803 0e74 000083E5 		.loc 1 177 0
 1804              		tst	r3, #1024
 1805 0e78 FEFFFFEB 		.loc 1 174 0
 1806 0e7c E8369FE5 		ldr	r3, .L291+72
 1807 0e80 000083E5 		mov	r2, r2, asl #1
 1808              		str	r2, [r3, #0]
 1809 0e84 FEFFFFEB 		.loc 1 177 0
 1810 0e88 E0369FE5 		beq	.L221
 1811 0e8c 000083E5 		.loc 1 178 0
 1812              		ldr	r3, [ip, #4]
 1813 0e90 1000A0E3 		orr	r3, r3, #128
 1814 0e94 FEFFFFEB 		str	r3, [ip, #4]
 1815 0e98 D4369FE5 		.loc 1 179 0
 1816 0e9c 900302E0 		mov	r3, #67108864
 1817              		str	r3, [ip, #28]
 1818 0ea0 88C69FE5 		.loc 1 180 0
 1819              		ldr	r0, .L291+76
 1820 0ea4 FF3F82E2 		ldr	r1, .L291+80
 1821 0ea8 000052E3 		bl	readSCP
 1822 0eac 033083E2 		.loc 1 181 0
 1823 0eb0 0320A0B1 		ldr	r3, .L291+84
 1824              		strb	r4, [r3, #0]
 1825 0eb4 00309CE5 	.L221:
 1826              		.loc 1 184 0
 1827 0eb8 4225A0E1 		ldr	r2, .L291+76
 1828              		.loc 1 185 0
 1829 0ebc 010B13E3 		ldr	r4, .L291+80
 1830              		.loc 1 184 0
 1831 0ec0 B0369FE5 		ldr	r3, [r2, #0]
 1832 0ec4 8220A0E1 		.loc 1 185 0
 1833 0ec8 002083E5 		ldr	r1, [r4, #0]
 1834              		.loc 1 184 0
 1835 0ecc 0900000A 		mov	r3, r3, lsr #2
 1836              		.loc 1 185 0
 1837 0ed0 04309CE5 		cmp	r1, #0
 1838 0ed4 803083E3 		.loc 1 184 0
 1839 0ed8 04308CE5 		str	r3, [r2, #0]
 1840              		.loc 1 185 0
 1841 0edc 0133A0E3 		ble	.L223
 1842 0ee0 1C308CE5 		.loc 1 186 0
 1843              		tst	r1, #8192
 1844 0ee4 90069FE5 		rsbne	r3, r1, #0
 1845 0ee8 90169FE5 		strne	r3, [r4, #0]
 1846 0eec FEFFFFEB 		.loc 1 187 0
 1847              		ldr	r0, [r4, #0]
 1848 0ef0 8C369FE5 		add	r0, r0, r0, lsr #31
 1849 0ef4 0040C3E5 		.loc 1 188 0
 1850              		mov	r0, r0, asr #1
 1851              		bl	__floatsidf
 1852 0ef8 7C269FE5 		ldr	r2, .L291+88
 1853              		ldr	r3, .L291+92
 1854 0efc 7C469FE5 		bl	__muldf3
 1855              		ldr	r2, .L291+96
 1856 0f00 003092E5 		mov	r3, #0
 1857              		bl	__adddf3
 1858 0f04 001094E5 		bl	__fixdfsi
 1859              		str	r0, [r4, #0]
 1860 0f08 2331A0E1 	.L223:
 1861              		.loc 1 192 0
 1862 0f0c 000051E3 		ldr	r3, .L291+100
 1863              		mov	r1, #10
 1864 0f10 003082E5 		ldr	r0, [r3, #0]
 1865              		bl	__modsi3
 1866 0f14 0E0000DA 		cmp	r0, #0
 1867              		bne	.L227
 1868 0f18 020A11E3 		.loc 1 194 0
 1869 0f1c 00306112 		ldr	r0, .L291+104
 1870 0f20 00308415 		ldr	r1, .L291+108
 1871              		bl	sht15_read
 1872 0f24 000094E5 		.loc 1 195 0
 1873 0f28 A00F80E0 		ldr	r3, .L291+112
 1874              		mov	r2, #1
 1875 0f2c C000A0E1 		strb	r2, [r3, #0]
 1876 0f30 FEFFFFEB 	.L227:
 1877 0f34 4C269FE5 		.loc 1 201 0
 1878 0f38 4C369FE5 		mvn	r0, #0
 1879 0f3c FEFFFFEB 		.loc 1 199 0
 1880 0f40 48269FE5 		ldr	r3, .L291+52
 1881 0f44 0030A0E3 		.loc 1 201 0
 1882 0f48 FEFFFFEB 		ldr	r2, [r0, #-4079]
 1883 0f4c FEFFFFEB 		.loc 1 199 0
 1884 0f50 000084E5 		mov	r1, #0
 1885              		.loc 1 198 0
 1886              		mov	ip, #1
 1887 0f54 38369FE5 		.loc 1 199 0
 1888 0f58 0A10A0E3 		strb	r1, [r3, #0]
 1889 0f5c 000093E5 		.loc 1 198 0
 1890 0f60 FEFFFFEB 		ldr	r3, .L291+116
 1891 0f64 000050E3 		.loc 1 201 0
 1892 0f68 0500001A 		orr	r2, r2, #16
 1893              		mov	r9, ip
 1894 0f6c 24069FE5 		str	r2, [r0, #-4079]
 1895 0f70 24169FE5 		.loc 1 198 0
 1896 0f74 FEFFFFEB 		strb	ip, [r3, #0]
 1897              		b	.L229
 1898 0f78 20369FE5 	.LVL60:
 1899 0f7c 0120A0E3 	.L219:
 1900 0f80 0020C3E5 		.loc 1 208 0
 1901              		ldr	r3, .L291+116
 1902              		ldrb	r9, [r3, #0]	@ zero_extendqisi2
 1903 0f84 0000E0E3 		cmp	r9, #0
 1904              		bne	.L229
 1905 0f88 D4359FE5 		ldr	r3, .L291+24
 1906              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1907 0f8c EF2F10E5 		cmp	r3, #0
 1908              		bne	.L231
 1909 0f90 0010A0E3 		b	.L232
 1910              	.L229:
 1911 0f94 01C0A0E3 		.loc 1 211 0
 1912              		ldr	r3, .L291+24
 1913 0f98 0010C3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1914              		cmp	r3, #0
 1915 0f9c 00369FE5 		beq	.L233
 1916              	.L231:
 1917 0fa0 102082E3 		ldr	r2, .L291+40
 1918 0fa4 0C90A0E1 		ldrb	r3, [r2, #70]	@ zero_extendqisi2
 1919 0fa8 EF2F00E5 		cmp	r3, #65
 1920              		bne	.L233
 1921 0fac 00C0C3E5 		ldr	r3, .L291+120
 1922 0fb0 080000EA 		ldr	r0, [r3, #0]
 1923              		ldr	r3, .L291+124
 1924              		mov	r1, r2
 1925              	.LVL61:
 1926 0fb4 E8359FE5 		add	ip, r0, r3
 1927 0fb8 0090D3E5 	.L235:
 1928 0fbc 000059E3 	.LBB24:
 1929 0fc0 0400001A 		.loc 1 212 0
 1930 0fc4 7C359FE5 		ldr	r3, .L291+128
 1931 0fc8 0030D3E5 		ldrb	r2, [r1, #52]	@ zero_extendqisi2
 1932 0fcc 000053E3 		add	r1, r1, #1
 1933 0fd0 0400001A 		cmp	r1, r3
 1934 0fd4 250100EA 		strb	r2, [ip], #1
 1935              		bne	.L235
 1936              	.LBE24:
 1937 0fd8 68359FE5 		.loc 1 213 0
 1938 0fdc 0030D3E5 		ldr	r1, .L291+124
 1939 0fe0 000053E3 	.LBB25:
 1940 0fe4 2100000A 		.loc 1 212 0
 1941              		add	r2, r0, #6
 1942 0fe8 68259FE5 	.LBE25:
 1943 0fec 4630D2E5 		.loc 1 213 0
 1944 0ff0 410053E3 		mov	r3, #44
 1945 0ff4 1D00001A 		strb	r3, [r1, r2]
 1946 0ff8 A8359FE5 		ldr	r3, .L291+120
 1947 0ffc 000093E5 		add	ip, r0, #7
 1948 1000 A4359FE5 		str	ip, [r3, #0]
 1949 1004 0210A0E1 		ldr	r0, .L291+40
 1950              		add	r1, ip, r1
 1951 1008 03C080E0 	.L237:
 1952              	.LBB26:
 1953              		.loc 1 214 0
 1954              		ldr	r3, .L291+132
 1955 100c 9C359FE5 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 1956 1010 3420D1E5 		add	r0, r0, #1
 1957 1014 011081E2 		cmp	r0, r3
 1958 1018 030051E1 		strb	r2, [r1], #1
 1959 101c 0120CCE4 		bne	.L237
 1960 1020 F9FFFF1A 		ldr	r3, .L291+120
 1961              		add	r2, ip, #10
 1962              		str	r2, [r3, #0]
 1963 1024 80159FE5 		b	.L239
 1964              	.LVL62:
 1965              	.L233:
 1966 1028 062080E2 	.LBE26:
 1967              		.loc 1 219 0
 1968              		ldr	r7, .L291+120
 1969 102c 2C30A0E3 		.loc 1 220 0
 1970 1030 0230C1E7 		ldr	r3, .L291+48
 1971 1034 6C359FE5 		.loc 1 219 0
 1972 1038 07C080E2 		ldr	r2, [r7, #0]
 1973 103c 00C083E5 		.loc 1 220 0
 1974 1040 10059FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1975 1044 01108CE0 		.loc 1 219 0
 1976              		ldr	r6, .L291+124
 1977              		.loc 1 220 0
 1978              		cmp	r3, #0
 1979 1048 64359FE5 		.loc 1 219 0
 1980 104c 2020D0E5 		add	r4, r2, #1
 1981 1050 010080E2 		mov	r3, #44
 1982 1054 030050E1 		strb	r3, [r6, r2]
 1983 1058 0120C1E4 		str	r4, [r7, #0]
 1984 105c F9FFFF1A 		.loc 1 220 0
 1985 1060 40359FE5 		beq	.L239
 1986 1064 0A208CE2 		.loc 1 221 0
 1987 1068 002083E5 		ldr	r5, .L291+44
 1988 106c 300000EA 	.LVL63:
 1989              		mov	r1, #10
 1990              	.LVL64:
 1991              		ldr	r0, [r5, #40]
 1992              		bl	__udivsi3
 1993 1070 30759FE5 		add	r0, r0, #48
 1994              		strb	r0, [r6, r4]
 1995 1074 E4349FE5 		.loc 1 222 0
 1996              		mov	r1, #10
 1997 1078 002097E5 		ldr	r0, [r5, #40]
 1998              		bl	__umodsi3
 1999 107c 0030D3E5 		.loc 1 221 0
 2000              		add	r4, r4, #1
 2001 1080 24659FE5 		.loc 1 222 0
 2002              		add	r0, r0, #48
 2003 1084 000053E3 		strb	r0, [r6, r4]
 2004              		.loc 1 223 0
 2005 1088 014082E2 		mov	r1, #10
 2006 108c 2C30A0E3 		ldr	r0, [r5, #36]
 2007 1090 0230C6E7 		bl	__udivsi3
 2008 1094 004087E5 		.loc 1 222 0
 2009              		add	r4, r4, #1
 2010 1098 2500000A 		.loc 1 223 0
 2011              		add	r0, r0, #48
 2012 109c B8549FE5 		strb	r0, [r6, r4]
 2013              		.loc 1 224 0
 2014 10a0 0A10A0E3 		mov	r1, #10
 2015              		ldr	r0, [r5, #36]
 2016 10a4 280095E5 		bl	__umodsi3
 2017 10a8 FEFFFFEB 		.loc 1 223 0
 2018 10ac 300080E2 		add	r4, r4, #1
 2019 10b0 0400C6E7 		.loc 1 224 0
 2020              		add	r0, r0, #48
 2021 10b4 0A10A0E3 		strb	r0, [r6, r4]
 2022 10b8 280095E5 		.loc 1 225 0
 2023 10bc FEFFFFEB 		mov	r1, #10
 2024              		ldr	r0, [r5, #32]
 2025 10c0 014084E2 		bl	__udivsi3
 2026              		.loc 1 224 0
 2027 10c4 300080E2 		add	r4, r4, #1
 2028 10c8 0400C6E7 		.loc 1 225 0
 2029              		add	r0, r0, #48
 2030 10cc 0A10A0E3 		strb	r0, [r6, r4]
 2031 10d0 240095E5 		.loc 1 226 0
 2032 10d4 FEFFFFEB 		mov	r1, #10
 2033              		ldr	r0, [r5, #32]
 2034 10d8 014084E2 		bl	__umodsi3
 2035              		.loc 1 225 0
 2036 10dc 300080E2 		add	r4, r4, #1
 2037 10e0 0400C6E7 		.loc 1 226 0
 2038              		add	r0, r0, #48
 2039 10e4 0A10A0E3 		add	r3, r4, #1
 2040 10e8 240095E5 		strb	r0, [r6, r4]
 2041 10ec FEFFFFEB 		str	r3, [r7, #0]
 2042              	.LVL65:
 2043 10f0 014084E2 	.L239:
 2044              		.loc 1 229 0
 2045 10f4 300080E2 		ldr	sl, .L291+120
 2046 10f8 0400C6E7 		ldr	r3, [sl, #0]
 2047              		ldr	r1, .L291+124
 2048 10fc 0A10A0E3 	.LVL66:
 2049 1100 200095E5 		add	r8, r3, #1
 2050 1104 FEFFFFEB 		.loc 1 232 0
 2051              		cmp	r9, #0
 2052 1108 014084E2 		.loc 1 229 0
 2053              		mov	r2, #44
 2054 110c 300080E2 		strb	r2, [r1, r3]
 2055 1110 0400C6E7 		str	r8, [sl, #0]
 2056              		add	r0, r8, r1
 2057 1114 0A10A0E3 		.loc 1 238 0
 2058 1118 200095E5 		moveq	ip, r9
 2059 111c FEFFFFEB 	.LVL67:
 2060              		.loc 1 232 0
 2061 1120 014084E2 		beq	.L244
 2062              		.loc 1 234 0
 2063 1124 300080E2 		ldr	r7, .L291+64
 2064 1128 013084E2 		ldr	r4, .L291+72
 2065 112c 0400C6E7 		ldr	r5, .L291+56
 2066 1130 003087E5 	.LVL68:
 2067              		ldr	r6, .L291+60
 2068              		ldr	ip, [r7, #0]
 2069              	.LVL69:
 2070 1134 6CA49FE5 		ldr	lr, [r4, #0]
 2071 1138 00309AE5 		ldr	r3, [r6, #0]
 2072 113c 68149FE5 		ldr	r2, [r5, #0]
 2073              		ldr	r1, .L291+136
 2074 1140 018083E2 		stmia	sp, {ip, lr}	@ phole stm
 2075              		bl	sprintf
 2076 1144 000059E3 		.loc 1 235 0
 2077              		mov	r3, #0
 2078 1148 2C20A0E3 		.loc 1 234 0
 2079 114c 0320C1E7 		add	r0, r8, r0
 2080 1150 00808AE5 		str	r0, [sl, #0]
 2081 1154 010088E0 		.loc 1 238 0
 2082              		str	r3, [r4, #0]
 2083 1158 09C0A001 		.loc 1 235 0
 2084              		str	r3, [r5, #0]
 2085              		.loc 1 236 0
 2086 115c 1200000A 		str	r3, [r6, #0]
 2087              		.loc 1 237 0
 2088 1160 08749FE5 		str	r3, [r7, #0]
 2089 1164 0C449FE5 		b	.L243
 2090 1168 F8539FE5 	.LVL70:
 2091              	.L244:
 2092 116c F8639FE5 	.LBB27:
 2093 1170 00C097E5 		.loc 1 240 0
 2094              		add	ip, ip, #1
 2095 1174 00E094E5 		mov	r3, #44
 2096 1178 003096E5 		cmp	ip, #4
 2097 117c 002095E5 		strb	r3, [r0], #1
 2098 1180 30149FE5 		bne	.L244
 2099 1184 00508DE8 		ldr	r3, .L291+120
 2100 1188 FEFFFFEB 		add	r2, r8, #4
 2101              		str	r2, [r3, #0]
 2102 118c 0030A0E3 	.L243:
 2103              	.LBE27:
 2104 1190 000088E0 		.loc 1 243 0
 2105 1194 00008AE5 		ldr	r8, .L291+84
 2106              		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2107 1198 003084E5 		cmp	r3, #0
 2108              		ldr	r7, .L291+120
 2109 119c 003085E5 		ldr	ip, .L291+124
 2110              	.LVL71:
 2111 11a0 003086E5 		beq	.L246
 2112              		.loc 1 245 0
 2113 11a4 003087E5 		ldr	r4, [r7, #0]
 2114 11a8 070000EA 		ldr	r5, .L291+76
 2115              	.LVL72:
 2116              		ldr	r6, .L291+80
 2117              		add	r0, r4, ip
 2118              		ldr	r3, [r6, #0]
 2119 11ac 01C08CE2 		ldr	r1, .L291+140
 2120 11b0 2C30A0E3 		ldr	r2, [r5, #0]
 2121 11b4 04005CE3 		bl	sprintf
 2122 11b8 0130C0E4 		.loc 1 246 0
 2123 11bc FAFFFF1A 		mov	r3, #0
 2124 11c0 E0339FE5 		.loc 1 245 0
 2125 11c4 042088E2 		add	r4, r4, r0
 2126 11c8 002083E5 		str	r4, [r7, #0]
 2127              		.loc 1 248 0
 2128              		strb	r3, [r8, #0]
 2129              		.loc 1 246 0
 2130 11cc B0839FE5 		str	r3, [r5, #0]
 2131 11d0 0030D8E5 		.loc 1 247 0
 2132 11d4 000053E3 		str	r3, [r6, #0]
 2133 11d8 C8739FE5 		b	.L248
 2134 11dc C8C39FE5 	.LVL73:
 2135              	.L246:
 2136 11e0 0E00000A 		.loc 1 248 0
 2137              		ldr	r3, [r7, #0]
 2138 11e4 004097E5 	.LBB28:
 2139 11e8 8C539FE5 		.loc 1 250 0
 2140              		mov	r1, #44
 2141 11ec 8C639FE5 		add	r0, r3, ip
 2142 11f0 0C0084E0 		add	r2, r3, #2
 2143 11f4 003096E5 		strb	r1, [ip, r3]
 2144 11f8 BC139FE5 		str	r2, [r7, #0]
 2145 11fc 002095E5 		strb	r1, [r0, #1]
 2146 1200 FEFFFFEB 	.L248:
 2147              	.LBE28:
 2148 1204 0030A0E3 		.loc 1 253 0
 2149              		ldr	r8, .L291+112
 2150 1208 004084E0 		ldrb	r3, [r8, #0]	@ zero_extendqisi2
 2151 120c 004087E5 		cmp	r3, #0
 2152              		ldr	r7, .L291+120
 2153 1210 0030C8E5 		ldr	ip, .L291+124
 2154              		beq	.L249
 2155 1214 003085E5 		.loc 1 255 0
 2156              		ldr	r4, [r7, #0]
 2157 1218 003086E5 		ldr	r5, .L291+104
 2158 121c 060000EA 	.LVL74:
 2159              		ldr	r6, .L291+108
 2160              		add	r0, r4, ip
 2161              		ldr	r3, [r6, #0]
 2162 1220 003097E5 		ldr	r1, .L291+140
 2163              		ldr	r2, [r5, #0]
 2164              		bl	sprintf
 2165 1224 2C10A0E3 		.loc 1 256 0
 2166 1228 0C0083E0 		mov	r3, #0
 2167 122c 022083E2 		.loc 1 255 0
 2168 1230 0310CCE7 		add	r4, r4, r0
 2169 1234 002087E5 		str	r4, [r7, #0]
 2170 1238 0110C0E5 		.loc 1 258 0
 2171              		strb	r3, [r8, #0]
 2172              		.loc 1 256 0
 2173              		str	r3, [r5, #0]
 2174 123c 5C839FE5 		.loc 1 257 0
 2175 1240 0030D8E5 		str	r3, [r6, #0]
 2176 1244 000053E3 		b	.L251
 2177 1248 58739FE5 	.LVL75:
 2178 124c 58C39FE5 	.L249:
 2179 1250 0E00000A 		.loc 1 258 0
 2180              		ldr	r3, [r7, #0]
 2181 1254 004097E5 	.LBB29:
 2182 1258 38539FE5 		.loc 1 260 0
 2183              		mov	r1, #44
 2184 125c 38639FE5 		add	r0, r3, ip
 2185 1260 0C0084E0 		add	r2, r3, #2
 2186 1264 003096E5 		strb	r1, [ip, r3]
 2187 1268 4C139FE5 		str	r2, [r7, #0]
 2188 126c 002095E5 		strb	r1, [r0, #1]
 2189 1270 FEFFFFEB 	.L251:
 2190              	.LBE29:
 2191 1274 0030A0E3 		.loc 1 263 0
 2192              		ldr	r3, .L291+24
 2193 1278 004084E0 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2194 127c 004087E5 		ldr	r7, .L291+120
 2195              		cmp	r3, #0
 2196 1280 0030C8E5 		ldr	ip, .L291+124
 2197              		.loc 1 280 0
 2198 1284 003085E5 		ldreq	r2, [r7, #0]
 2199              		moveq	r1, r3
 2200 1288 003086E5 	.LVL76:
 2201 128c 060000EA 		addeq	r0, r2, ip
 2202              		.loc 1 263 0
 2203              		beq	.L259
 2204              		.loc 1 265 0
 2205 1290 003097E5 		ldr	r2, [r7, #0]
 2206              		ldr	r0, .L291+40
 2207              		add	r1, r2, #1
 2208 1294 2C10A0E3 	.LVL77:
 2209 1298 0C0083E0 		ldrb	r3, [r0, #70]	@ zero_extendqisi2
 2210 129c 022083E2 		.loc 1 266 0
 2211 12a0 0310CCE7 		add	r5, r1, #1
 2212 12a4 002087E5 	.LVL78:
 2213 12a8 0110C0E5 		.loc 1 265 0
 2214              		strb	r3, [ip, r2]
 2215              		.loc 1 266 0
 2216              		str	r5, [r7, #0]
 2217 12ac 94329FE5 		mov	r3, #44
 2218 12b0 0030D3E5 		strb	r3, [ip, r1]
 2219 12b4 EC729FE5 		add	r1, r5, ip
 2220 12b8 000053E3 	.L254:
 2221 12bc E8C29FE5 	.LBB30:
 2222              		.loc 1 269 0
 2223 12c0 00209705 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 2224 12c4 0310A001 		ldr	r3, .L291+144
 2225              		cmp	r0, r3
 2226 12c8 0C008200 		strb	r2, [r1], #1
 2227              		bne	.L254
 2228 12cc 3000000A 	.LBE30:
 2229              		.loc 1 270 0
 2230 12d0 002097E5 		ldr	r2, .L291+124
 2231 12d4 7C029FE5 		.loc 1 272 0
 2232 12d8 011082E2 		ldr	r4, .L291+40
 2233              		.loc 1 270 0
 2234 12dc 4630D0E5 		mov	ip, #44
 2235              	.LBB31:
 2236 12e0 015081E2 		.loc 1 269 0
 2237              		add	r3, r5, #9
 2238              	.LBE31:
 2239 12e4 0230CCE7 		.loc 1 270 0
 2240              		strb	ip, [r2, r3]
 2241 12e8 005087E5 		.loc 1 272 0
 2242 12ec 2C30A0E3 		ldrb	lr, [r4, #15]	@ zero_extendqisi2
 2243 12f0 0130CCE7 		.loc 1 273 0
 2244 12f4 0C1085E0 		ldr	r3, .L291+120
 2245              		add	r6, r5, #12
 2246              		.loc 1 270 0
 2247              		add	r1, r5, #10
 2248 12f8 0120D0E4 		.loc 1 272 0
 2249 12fc BC329FE5 		add	r0, r5, #11
 2250 1300 030050E1 		strb	lr, [r2, r1]
 2251 1304 0120C1E4 		.loc 1 273 0
 2252 1308 FAFFFF1A 		str	r6, [r3, #0]
 2253              		strb	ip, [r2, r0]
 2254              		add	r1, r6, r2
 2255 130c 98229FE5 	.L256:
 2256              	.LBB32:
 2257 1310 40429FE5 		.loc 1 96 0
 2258              		ldr	r0, .L291+40
 2259 1314 2CC0A0E3 		.loc 1 276 0
 2260              		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 2261              		add	r3, r0, #10
 2262 1318 093085E2 		add	r4, r4, #1
 2263              		cmp	r4, r3
 2264              		strb	r2, [r1], #1
 2265 131c 03C0C2E7 		bne	.L256
 2266              	.LBE32:
 2267 1320 0FE0D4E5 		.loc 1 277 0
 2268              		ldr	r2, .L291+124
 2269 1324 7C329FE5 		.loc 1 279 0
 2270 1328 0C6085E2 		ldrb	r5, [r0, #31]	@ zero_extendqisi2
 2271              		.loc 1 280 0
 2272 132c 0A1085E2 		ldr	r3, .L291+120
 2273              		.loc 1 277 0
 2274 1330 0B0085E2 		mov	lr, #44
 2275 1334 01E0C2E7 		.loc 1 280 0
 2276              		add	r4, r6, #13
 2277 1338 006083E5 	.LBB33:
 2278 133c 00C0C2E7 		.loc 1 276 0
 2279 1340 021086E0 		add	r1, r6, #10
 2280              	.LBE33:
 2281              		.loc 1 277 0
 2282              		add	r0, r6, #11
 2283 1344 0C029FE5 		.loc 1 279 0
 2284              		add	ip, r6, #12
 2285 1348 1020D4E5 		.loc 1 277 0
 2286 134c 0A3080E2 		strb	lr, [r2, r1]
 2287 1350 014084E2 		.loc 1 280 0
 2288 1354 030054E1 		str	r4, [r3, #0]
 2289 1358 0120C1E4 		.loc 1 279 0
 2290 135c F8FFFF1A 		strb	r5, [r2, r0]
 2291              		.loc 1 280 0
 2292              		strb	lr, [r2, ip]
 2293 1360 44229FE5 		b	.L258
 2294              	.LVL79:
 2295 1364 1F50D0E5 	.L259:
 2296              	.LBB34:
 2297 1368 38329FE5 		.loc 1 283 0
 2298              		add	r1, r1, #1
 2299 136c 2CE0A0E3 		mov	r3, #44
 2300              		cmp	r1, #6
 2301 1370 0D4086E2 		strb	r3, [r0], #1
 2302              		bne	.L259
 2303              		ldr	r3, .L291+120
 2304 1374 0A1086E2 		add	r2, r2, #6
 2305              		str	r2, [r3, #0]
 2306              	.L258:
 2307 1378 0B0086E2 	.LBE34:
 2308              		.loc 1 284 0
 2309 137c 0CC086E2 		ldr	r8, .L291+120
 2310              		ldr	r3, [r8, #0]
 2311 1380 01E0C2E7 		ldr	r7, .L291+124
 2312              		add	r2, r3, #1
 2313 1384 004083E5 		mov	sl, #10
 2314              		.loc 1 288 0
 2315 1388 0050C2E7 		cmp	r2, #400
 2316              		.loc 1 284 0
 2317 138c 0CE0C2E7 		strb	sl, [r7, r3]
 2318 1390 070000EA 		str	r2, [r8, #0]
 2319              		.loc 1 288 0
 2320              		blt	.L261
 2321              		.loc 1 289 0
 2322              		mvn	r4, #0
 2323 1394 011081E2 		ldr	r3, [r4, #-4075]
 2324 1398 2C30A0E3 		.loc 1 290 0
 2325 139c 060051E3 		ldr	r5, .L291
 2326 13a0 0130C0E4 	.LVL80:
 2327 13a4 FAFFFF1A 		.loc 1 289 0
 2328 13a8 F8319FE5 		orr	r3, r3, #144
 2329 13ac 062082E2 		.loc 1 290 0
 2330 13b0 002083E5 		mov	r6, #67108864
 2331              		.loc 1 291 0
 2332              		mov	r1, r7
 2333              	.LVL81:
 2334 13b4 EC819FE5 		ldr	r0, .L291+148
 2335 13b8 003098E5 		.loc 1 289 0
 2336 13bc E8719FE5 		str	r3, [r4, #-4075]
 2337 13c0 012083E2 		.loc 1 290 0
 2338 13c4 0AA0A0E3 		str	r6, [r5, #20]
 2339              		.loc 1 291 0
 2340 13c8 190E52E3 		bl	saveData
 2341              		.loc 1 292 0
 2342 13cc 03A0C7E7 		ldr	r3, [r4, #-4079]
 2343 13d0 002088E5 		orr	r3, r3, #144
 2344              		str	r3, [r4, #-4079]
 2345 13d4 200000BA 		.loc 1 293 0
 2346              		str	r6, [r5, #28]
 2347 13d8 0040E0E3 		.loc 1 294 0
 2348 13dc EB3F14E5 		ldr	r3, [r5, #4]
 2349              		orr	r3, r3, #128
 2350 13e0 48519FE5 		str	r3, [r5, #4]
 2351              		.loc 1 295 0
 2352              		bl	SCPinit
 2353 13e4 903083E3 		.loc 1 296 0
 2354              		mov	r0, sl
 2355 13e8 0163A0E3 		bl	delay_ms
 2356              	.LBB35:
 2357 13ec 0710A0E1 		.loc 1 297 0
 2358              		ldr	r0, [r8, #0]
 2359 13f0 CC019FE5 		mov	r1, r7
 2360              		mov	r2, #0
 2361 13f4 EB3F04E5 	.LVL82:
 2362              		b	.L263
 2363 13f8 146085E5 	.L264:
 2364              		mov	r3, #0
 2365 13fc FEFFFFEB 		strb	r3, [r1, #-1]
 2366              	.L263:
 2367 1400 EF3F14E5 		cmp	r2, r0
 2368 1404 903083E3 		add	r1, r1, #1
 2369 1408 EF3F04E5 		add	r2, r2, #1
 2370              		blt	.L264
 2371 140c 1C6085E5 	.LBE35:
 2372              		.loc 1 298 0
 2373 1410 043095E5 		ldr	r3, .L291+120
 2374 1414 803083E3 		mov	r2, #0
 2375 1418 043085E5 	.LVL83:
 2376              		str	r2, [r3, #0]
 2377 141c FEFFFFEB 	.LVL84:
 2378              	.L261:
 2379 1420 0A00A0E1 		.loc 1 301 0
 2380 1424 FEFFFFEB 		ldr	r2, .L291+116
 2381              		.loc 1 300 0
 2382              		mov	r3, #0
 2383 1428 000098E5 		.loc 1 301 0
 2384 142c 0710A0E1 		strb	r3, [r2, #0]
 2385 1430 0020A0E3 		.loc 1 300 0
 2386              		ldr	r2, .L291+24
 2387 1434 010000EA 		strb	r3, [r2, #0]
 2388              	.L232:
 2389 1438 0030A0E3 		.loc 1 304 0
 2390 143c 013041E5 		ldr	r6, .L291
 2391              		ldr	r3, [r6, #0]
 2392 1440 000052E1 		tst	r3, #8388608
 2393 1444 011081E2 		beq	.L290
 2394 1448 012082E2 		.loc 1 308 0
 2395 144c F9FFFFBA 		ldr	r5, .L291+148
 2396              	.LVL85:
 2397              		ldr	r3, [r5, #0]
 2398 1450 50319FE5 		.loc 1 306 0
 2399 1454 0020A0E3 		ldr	r2, .L291+152
 2400              		.loc 1 308 0
 2401 1458 002083E5 		cmp	r3, #0
 2402              		.loc 1 306 0
 2403              		mvn	r3, #0
 2404              		str	r2, [r3, #-4075]
 2405 145c 40219FE5 		.loc 1 308 0
 2406              		beq	.L267
 2407 1460 0030A0E3 		.loc 1 310 0
 2408              		ldr	r4, .L291+120
 2409 1464 0030C2E5 		.loc 1 309 0
 2410              		add	r3, r3, #67108865
 2411 1468 D8209FE5 		str	r3, [r6, #20]
 2412 146c 0030C2E5 		.loc 1 310 0
 2413              		mov	r0, r5
 2414              		ldr	r1, .L291+124
 2415 1470 B8609FE5 	.LVL86:
 2416 1474 003096E5 		ldr	r2, [r4, #0]
 2417 1478 020513E3 		bl	saveData
 2418 147c 2200000A 		.loc 1 311 0
 2419              		ldr	r0, [r5, #0]
 2420 1480 3C519FE5 		bl	fat16_close_file
 2421              		.loc 1 312 0
 2422 1484 003095E5 		mov	r3, #0
 2423              		str	r3, [r4, #0]
 2424 1488 38219FE5 	.LVL87:
 2425              	.L267:
 2426 148c 000053E3 		.loc 1 314 0
 2427              		ldr	r5, .L291+36
 2428 1490 0030E0E3 		ldr	r3, [r5, #0]
 2429 1494 EB2F03E5 		cmp	r3, #0
 2430              		beq	.L269
 2431 1498 0A00000A 		.loc 1 316 0
 2432              		ldr	r4, .L291+20
 2433 149c 04419FE5 		.loc 1 315 0
 2434              		mov	r3, #67108864
 2435 14a0 413383E2 		str	r3, [r6, #20]
 2436 14a4 143086E5 		.loc 1 316 0
 2437              		mov	r0, r5
 2438 14a8 0500A0E1 		ldr	r1, .L291+32
 2439 14ac F8109FE5 	.LVL88:
 2440              		ldr	r2, [r4, #0]
 2441 14b0 002094E5 		bl	saveData
 2442 14b4 FEFFFFEB 		.loc 1 317 0
 2443              		ldr	r0, [r5, #0]
 2444 14b8 000095E5 		bl	fat16_close_file
 2445 14bc FEFFFFEB 		.loc 1 318 0
 2446              		mov	r3, #0
 2447 14c0 0030A0E3 		str	r3, [r4, #0]
 2448 14c4 003084E5 	.LVL89:
 2449              	.L269:
 2450              		.loc 1 320 0
 2451              		bl	main_msc
 2452 14c8 84509FE5 	.LVL90:
 2453 14cc 003095E5 		.loc 1 321 0
 2454 14d0 000053E3 		bl	reset
 2455 14d4 0A00000A 	.LVL91:
 2456              	.L290:
 2457 14d8 64409FE5 		.loc 1 119 0
 2458              		ldr	r3, .L291+100
 2459 14dc 0133A0E3 		ldr	r2, [r3, #0]
 2460 14e0 143086E5 		ldr	r3, .L291+156
 2461              		cmp	r2, r3
 2462 14e4 0500A0E1 		ble	.L205
 2463 14e8 60109FE5 		.loc 1 328 0
 2464              		mov	r0, #25
 2465 14ec 002094E5 		bl	goToSleep
 2466 14f0 FEFFFFEB 	.LVL92:
 2467              		.loc 1 329 0
 2468 14f4 000095E5 		bl	wakeUp
 2469 14f8 FEFFFFEB 		b	.L290
 2470              	.L292:
 2471 14fc 0030A0E3 		.align	2
 2472 1500 003084E5 	.L291:
 2473              		.word	-536707072
 2474              		.word	gps_message_complete
 2475              		.word	gps_message_size
 2476 1504 FEFFFFEB 		.word	gps_message
 2477              		.word	final_message
 2478              		.word	nmea_data_index
 2479 1508 FEFFFFEB 		.word	new_gps_data
 2480              		.word	final_gps_message_size
 2481              		.word	nmea_data
 2482              		.word	NMEA_FILE
 2483 150c 80309FE5 		.word	GPS
 2484 1510 002093E5 		.word	-536723456
 2485 1514 B0309FE5 		.word	RTC_Set
 2486 1518 030052E1 		.word	read_sensors
 2487 151c DEFDFFDA 		.word	acceleration_x
 2488              		.word	acceleration_y
 2489 1520 1900A0E3 		.word	acceleration_z
 2490 1524 FEFFFFEB 		.word	3300
 2491              		.word	battery_level
 2492              		.word	scp_pressure
 2493 1528 FEFFFFEB 		.word	scp_temp
 2494 152c F6FFFFEA 		.word	new_scp_data
 2495              		.word	1073532108
 2496              		.word	-858993459
 2497              		.word	1081344000
 2498 1530 008002E0 		.word	log_count
 2499 1534 00000000 		.word	sht_temp
 2500 1538 00000000 		.word	sht_humidity
 2501 153c 00000000 		.word	new_sht_data
 2502 1540 00000000 		.word	new_sensor_data
 2503 1544 00000000 		.word	log_data_index
 2504 1548 00000000 		.word	log_data
 2505 154c 00000000 		.word	GPS+6
 2506 1550 00000000 		.word	GPS+10
 2507 1554 00000000 		.word	.LC6
 2508 1558 00000000 		.word	.LC7
 2509 155c 004002E0 		.word	GPS+9
 2510 1560 00000000 		.word	LOG_FILE
 2511 1564 00000000 		.word	73872
 2512 1568 00000000 		.word	2999
 2513 156c 00000000 	.LFE2:
 2515 1574 E40C0000 		.global	gps_message_complete
 2516 1578 00000000 		.bss
 2519 1584 00000000 	gps_message_complete:
 2520 1588 CCCCFC3F 		.space	1
 2521 158c CDCCCCCC 		.global	new_gps_data
 2524 1598 00000000 	new_gps_data:
 2525 159c 00000000 		.space	1
 2526 15a0 00000000 		.global	gps_message_index
 2527 15a4 00000000 		.align	2
 2530 15b0 06000000 	gps_message_index:
 2531 15b4 0A000000 		.space	4
 2532 15b8 08010000 		.global	gps_message_size
 2533 15bc 18010000 		.align	2
 2536 15c8 90200100 	gps_message_size:
 2537 15cc B70B0000 		.space	4
 2538              		.global	final_gps_message_size
 2539              		.align	2
 2542              	final_gps_message_size:
 2543              		.space	4
 2544              		.global	nmea_data_index
 2545 0000 00       		.align	2
 2548              	nmea_data_index:
 2549              		.space	4
 2550 0001 00       		.global	led_blink
 2553              	led_blink:
 2554              		.space	1
 2555              		.global	wake_event
 2558              	wake_event:
 2559              		.space	1
 2560              		.align	2
 2561              	file_number.2762:
 2562 0008 00000000 		.space	4
 2563              		.comm	RTC_Set,1,1
 2564              		.comm	alarm_set,1,1
 2565              		.comm	final_message,80,1
 2566              		.comm	gps_message,80,1
 2567              		.comm	GPS,72,4
 2568 000c 00000000 		.comm	scp_pressure,4,4
 2569              		.comm	scp_temp,4,4
 2570              		.comm	new_scp_data,1,1
 2571              		.comm	sht_temp,4,4
 2572              		.comm	sht_humidity,4,4
 2573              		.comm	new_sht_data,1,1
 2574 0010 00000000 		.comm	acceleration_x,4,4
 2575              		.comm	acceleration_y,4,4
 2576              		.comm	acceleration_z,4,4
 2577              		.comm	file_name,32,1
 2578              		.comm	battery_level,4,4
 2579 0014 00       		.comm	log_count,4,4
 2580              		.comm	LOG_FILE,4,4
 2581              		.comm	log_data,512,1
 2582              		.comm	log_buffer,200,1
 2583              		.comm	log_data_index,4,4
 2584 0015 00       		.comm	NMEA_FILE,4,4
 2585 0016 0000     		.comm	nmea_data,1024,1
 2586              		.comm	power_register_values,4,4
 2587 0018 00000000 		.comm	read_sensors,1,1
 2588              		.comm	new_sensor_data,1,1
 2589              		.section	.debug_frame,"",%progbits
 2590              	.Lframe0:
 2591              		.4byte	.LECIE0-.LSCIE0
 2592              	.LSCIE0:
 2593              		.4byte	0xffffffff
 2594              		.byte	0x1
 2595              		.ascii	"\000"
 2596              		.uleb128 0x1
 2597              		.sleb128 -4
 2598              		.byte	0xe
 2599              		.byte	0xc
 2600              		.uleb128 0xd
 2601              		.uleb128 0x0
 2602              		.align	2
 2603              	.LECIE0:
 2604              	.LSFDE0:
 2605              		.4byte	.LEFDE0-.LASFDE0
 2606              	.LASFDE0:
 2607              		.4byte	.Lframe0
 2608              		.4byte	.LFB3
 2609              		.4byte	.LFE3-.LFB3
 2610              		.align	2
 2611              	.LEFDE0:
 2612              	.LSFDE2:
 2613              		.4byte	.LEFDE2-.LASFDE2
 2903              		.2byte	0x1
DEFINED SYMBOLS
                            *ABS*:00000000 main_v20.c
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:13     .text:00000000 delay_ms
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:23     .text:00000000 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:44     .text:00000024 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:49     .text:00000028 ISR_RxData1
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:56     .text:00000028 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:116    .text:000000b8 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2555   .bss:00000004 gps_message_index
                            *COM*:00000050 gps_message
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2544   .bss:00000000 gps_message_complete
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2561   .bss:00000008 gps_message_size
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:125    .text:000000cc ISR_RTC
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:133    .text:000000cc $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:152    .text:000000f4 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2583   .bss:00000015 wake_event
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:159    .text:000000fc parseGGA
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:166    .text:000000fc $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:306    .text:0000024c $d
                            *COM*:00000048 GPS
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:313    .text:00000254 parseRMC
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:320    .text:00000254 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:534    .text:00000434 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:540    .text:0000043c ISR_Timer0
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:546    .text:0000043c $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:603    .text:000004c0 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2578   .bss:00000014 led_blink
                            *COM*:00000004 log_count
                            *COM*:00000001 read_sensors
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:613    .text:000004d4 get_adc_1
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:621    .text:000004d4 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:658    .text:00000520 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:664    .text:00000524 reset
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:672    .text:00000524 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:698    .text:00000554 ISR_EINT2
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:731    .text:0000058c $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:738    .text:00000594 initializeGps
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:745    .text:00000594 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:771    .text:000005c8 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:777    .text:000005cc reverse
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:784    .text:000005cc $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:822    .text:00000610 itoa
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:868    .text:00000660 saveData
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:960    .text:000006ec createLogFile
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1048   .text:000007b4 $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2586   .bss:00000018 file_number.2762
                            *COM*:00000020 file_name
                            *COM*:00000004 LOG_FILE
                            *COM*:00000004 NMEA_FILE
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1066   .text:000007d4 wakeUp
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1073   .text:000007d4 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1147   .text:00000894 $d
                            *COM*:00000004 power_register_values
                            *COM*:00000200 log_data
                            *COM*:00000001 RTC_Set
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1167   .text:000008bc goToSleep
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1175   .text:000008bc $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1314   .text:00000a1c $d
                            *COM*:00000004 log_data_index
                            *COM*:00000004 acceleration_x
                            *COM*:00000004 acceleration_y
                            *COM*:00000004 acceleration_z
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1330   .text:00000a48 bootUp
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1336   .text:00000a48 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1515   .text:00000c1c $d
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1547   .text:00000c50 main
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:1553   .text:00000c50 $a
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2498   .text:00001530 $d
                            *COM*:00000050 final_message
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2573   .bss:00000010 nmea_data_index
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2549   .bss:00000001 new_gps_data
C:\DOCUME~1\Ryan\LOCALS~1\Temp/cconbaaa.s:2567   .bss:0000000c final_gps_message_size
                            *COM*:00000400 nmea_data
                            *COM*:00000004 battery_level
                            *COM*:00000004 scp_pressure
                            *COM*:00000004 scp_temp
                            *COM*:00000001 new_scp_data
                            *COM*:00000004 sht_temp
                            *COM*:00000004 sht_humidity
                            *COM*:00000001 new_sht_data
                            *COM*:00000001 new_sensor_data
                            *COM*:00000001 alarm_set
                            *COM*:000000c8 log_buffer

UNDEFINED SYMBOLS
disable_all_gps_msgs
enable_waas
strlen
__modsi3
__divsi3
fat16_write_file
sd_raw_sync
sprintf
root_file_exists
root_open_new
strcpy
adxl345_read
enable_gps_rmc_msgs
SCPinit
accelX
accelY
accelZ
rprintf_devopen
init_serial1
sd_raw_init
openroot
SPI0_Init
putc_serial1
__floatsidf
__muldf3
__adddf3
__fixdfsi
__udivsi3
__umodsi3
initAccel
readSCP
sht15_read
fat16_close_file
main_msc
